
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AudioExtensions
/// dependency: AudioPlatformConfiguration
/// dependency: Chaos
/// dependency: ClothingSystemRuntimeInterface
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: InputCore
/// dependency: PacketHandler
/// dependency: PhysicsCore
/// dependency: PropertyAccess
/// dependency: PropertyPath
/// dependency: Slate
/// dependency: SlateCore
/// dependency: StaticMeshDescription

/// Enum /Script/AudioMixer.EMusicalNoteName
/// Size: 0x01 (1 bytes)
enum class EMusicalNoteName : uint8_t
{
	EMusicalNoteName__C                                                              = 0,
	EMusicalNoteName__Db                                                             = 1,
	EMusicalNoteName__D                                                              = 2,
	EMusicalNoteName__Eb                                                             = 3,
	EMusicalNoteName__E                                                              = 4,
	EMusicalNoteName__F                                                              = 5,
	EMusicalNoteName__Gb                                                             = 6,
	EMusicalNoteName__G                                                              = 7,
	EMusicalNoteName__Ab                                                             = 8,
	EMusicalNoteName__A                                                              = 9,
	EMusicalNoteName__Bb                                                             = 10,
	EMusicalNoteName__B                                                              = 11
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsKeySource
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsKeySource : uint8_t
{
	ESubmixEffectDynamicsKeySource__Default                                          = 0,
	ESubmixEffectDynamicsKeySource__AudioBus                                         = 1,
	ESubmixEffectDynamicsKeySource__Submix                                           = 2,
	ESubmixEffectDynamicsKeySource__Count                                            = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsChannelLinkMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsChannelLinkMode : uint8_t
{
	ESubmixEffectDynamicsChannelLinkMode__Disabled                                   = 0,
	ESubmixEffectDynamicsChannelLinkMode__Average                                    = 1,
	ESubmixEffectDynamicsChannelLinkMode__Peak                                       = 2,
	ESubmixEffectDynamicsChannelLinkMode__Count                                      = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsPeakMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsPeakMode : uint8_t
{
	ESubmixEffectDynamicsPeakMode__MeanSquared                                       = 0,
	ESubmixEffectDynamicsPeakMode__RootMeanSquared                                   = 1,
	ESubmixEffectDynamicsPeakMode__Peak                                              = 2,
	ESubmixEffectDynamicsPeakMode__Count                                             = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsProcessorType
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsProcessorType : uint8_t
{
	ESubmixEffectDynamicsProcessorType__Compressor                                   = 0,
	ESubmixEffectDynamicsProcessorType__Limiter                                      = 1,
	ESubmixEffectDynamicsProcessorType__Expander                                     = 2,
	ESubmixEffectDynamicsProcessorType__Gate                                         = 3,
	ESubmixEffectDynamicsProcessorType__Count                                        = 4
};

/// Enum /Script/AudioMixer.EQuarztClockManagerType
/// Size: 0x01 (1 bytes)
enum class EQuarztClockManagerType : uint8_t
{
	EQuarztClockManagerType__AudioEngine                                             = 0,
	EQuarztClockManagerType__QuartzSubsystem                                         = 1,
	EQuarztClockManagerType__Count                                                   = 2
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x01 (1 bytes)
enum class ETextGender : uint8_t
{
	ETextGender__Masculine                                                           = 0,
	ETextGender__Feminine                                                            = 1,
	ETextGender__Neuter                                                              = 2
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x01 (1 bytes)
enum class EFormatArgumentType : uint8_t
{
	EFormatArgumentType__Int                                                         = 0,
	EFormatArgumentType__UInt                                                        = 1,
	EFormatArgumentType__Float                                                       = 2,
	EFormatArgumentType__Double                                                      = 3,
	EFormatArgumentType__Text                                                        = 4,
	EFormatArgumentType__Gender                                                      = 5
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x01 (1 bytes)
enum class EEndPlayReason : uint8_t
{
	EEndPlayReason__Destroyed                                                        = 0,
	EEndPlayReason__LevelTransition                                                  = 1,
	EEndPlayReason__EndPlayInEditor                                                  = 2,
	EEndPlayReason__RemovedFromWorld                                                 = 3,
	EEndPlayReason__Quit                                                             = 4
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x01 (1 bytes)
enum class ETickingGroup : uint8_t
{
	TG_PrePhysics                                                                    = 0,
	TG_StartPhysics                                                                  = 1,
	TG_DuringPhysics                                                                 = 2,
	TG_EndPhysics                                                                    = 3,
	TG_PostPhysics                                                                   = 4,
	TG_PostUpdateWork                                                                = 5,
	TG_LastDemotable                                                                 = 6,
	TG_NewlySpawned                                                                  = 7
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x01 (1 bytes)
enum class EComponentCreationMethod : uint8_t
{
	EComponentCreationMethod__Native                                                 = 0,
	EComponentCreationMethod__SimpleConstructionScript                               = 1,
	EComponentCreationMethod__UserConstructionScript                                 = 2,
	EComponentCreationMethod__Instance                                               = 3
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x01 (1 bytes)
enum class ETemperatureSeverityType : uint8_t
{
	ETemperatureSeverityType__Unknown                                                = 0,
	ETemperatureSeverityType__Good                                                   = 1,
	ETemperatureSeverityType__Bad                                                    = 2,
	ETemperatureSeverityType__Serious                                                = 3,
	ETemperatureSeverityType__Critical                                               = 4,
	ETemperatureSeverityType__NumSeverities                                          = 5
};

/// Enum /Script/Engine.EQuartzCommandQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandQuantization : uint8_t
{
	EQuartzCommandQuantization__Bar                                                  = 0,
	EQuartzCommandQuantization__Beat                                                 = 1,
	EQuartzCommandQuantization__ThirtySecondNote                                     = 2,
	EQuartzCommandQuantization__SixteenthNote                                        = 3,
	EQuartzCommandQuantization__EighthNote                                           = 4,
	EQuartzCommandQuantization__QuarterNote                                          = 5,
	EQuartzCommandQuantization__HalfNote                                             = 6,
	EQuartzCommandQuantization__WholeNote                                            = 7,
	EQuartzCommandQuantization__DottedSixteenthNote                                  = 8,
	EQuartzCommandQuantization__DottedEighthNote                                     = 9,
	EQuartzCommandQuantization__DottedQuarterNote                                    = 10,
	EQuartzCommandQuantization__DottedHalfNote                                       = 11,
	EQuartzCommandQuantization__DottedWholeNote                                      = 12,
	EQuartzCommandQuantization__SixteenthNoteTriplet                                 = 13,
	EQuartzCommandQuantization__EighthNoteTriplet                                    = 14,
	EQuartzCommandQuantization__QuarterNoteTriplet                                   = 15,
	EQuartzCommandQuantization__HalfNoteTriplet                                      = 16,
	EQuartzCommandQuantization__Tick                                                 = 17,
	EQuartzCommandQuantization__Count                                                = 18,
	EQuartzCommandQuantization__None                                                 = 19
};

/// Enum /Script/Engine.EQuartzCommandDelegateSubType
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandDelegateSubType : uint8_t
{
	EQuartzCommandDelegateSubType__CommandOnFailedToQueue                            = 0,
	EQuartzCommandDelegateSubType__CommandOnQueued                                   = 1,
	EQuartzCommandDelegateSubType__CommandOnCanceled                                 = 2,
	EQuartzCommandDelegateSubType__CommandOnAboutToStart                             = 3,
	EQuartzCommandDelegateSubType__CommandOnStarted                                  = 4,
	EQuartzCommandDelegateSubType__Count                                             = 5
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x01 (1 bytes)
enum class EAudioComponentPlayState : uint8_t
{
	EAudioComponentPlayState__Playing                                                = 0,
	EAudioComponentPlayState__Stopped                                                = 1,
	EAudioComponentPlayState__Paused                                                 = 2,
	EAudioComponentPlayState__FadingIn                                               = 3,
	EAudioComponentPlayState__FadingOut                                              = 4,
	EAudioComponentPlayState__Count                                                  = 5
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x01 (1 bytes)
enum class EPlaneConstraintAxisSetting : uint8_t
{
	EPlaneConstraintAxisSetting__Custom                                              = 0,
	EPlaneConstraintAxisSetting__X                                                   = 1,
	EPlaneConstraintAxisSetting__Y                                                   = 2,
	EPlaneConstraintAxisSetting__Z                                                   = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting                             = 4
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x01 (1 bytes)
enum class EInterpToBehaviourType : uint8_t
{
	EInterpToBehaviourType__OneShot                                                  = 0,
	EInterpToBehaviourType__OneShot_Reverse                                          = 1,
	EInterpToBehaviourType__Loop_Reset                                               = 2,
	EInterpToBehaviourType__PingPong                                                 = 3
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x01 (1 bytes)
enum class ETeleportType : uint8_t
{
	ETeleportType__None                                                              = 0,
	ETeleportType__TeleportPhysics                                                   = 1,
	ETeleportType__ResetPhysics                                                      = 2
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x01 (1 bytes)
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                                                        = 0,
	PIDT_Int                                                                         = 1,
	PIDT_Float                                                                       = 2,
	PIDT_String                                                                      = 3,
	PIDT_Object                                                                      = 4,
	PIDT_Custom                                                                      = 5
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x01 (1 bytes)
enum class EMovementMode : uint8_t
{
	MOVE_None                                                                        = 0,
	MOVE_Walking                                                                     = 1,
	MOVE_NavWalking                                                                  = 2,
	MOVE_Falling                                                                     = 3,
	MOVE_Swimming                                                                    = 4,
	MOVE_Flying                                                                      = 5,
	MOVE_Custom                                                                      = 6
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x01 (1 bytes)
enum class ENetworkFailure : uint8_t
{
	ENetworkFailure__NetDriverAlreadyExists                                          = 0,
	ENetworkFailure__NetDriverCreateFailure                                          = 1,
	ENetworkFailure__NetDriverListenFailure                                          = 2,
	ENetworkFailure__ConnectionLost                                                  = 3,
	ENetworkFailure__ConnectionTimeout                                               = 4,
	ENetworkFailure__FailureReceived                                                 = 5,
	ENetworkFailure__OutdatedClient                                                  = 6,
	ENetworkFailure__OutdatedServer                                                  = 7,
	ENetworkFailure__PendingConnectionFailure                                        = 8,
	ENetworkFailure__NetGuidMismatch                                                 = 9,
	ENetworkFailure__NetChecksumMismatch                                             = 10
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x01 (1 bytes)
enum class ETravelFailure : uint8_t
{
	ETravelFailure__NoLevel                                                          = 0,
	ETravelFailure__LoadMapFailure                                                   = 1,
	ETravelFailure__InvalidURL                                                       = 2,
	ETravelFailure__PackageMissing                                                   = 3,
	ETravelFailure__PackageVersion                                                   = 4,
	ETravelFailure__NoDownload                                                       = 5,
	ETravelFailure__TravelFailure                                                    = 6,
	ETravelFailure__CheatCommands                                                    = 7,
	ETravelFailure__PendingNetGameCreateFailure                                      = 8,
	ETravelFailure__CloudSaveFailure                                                 = 9,
	ETravelFailure__ServerTravelFailure                                              = 10,
	ETravelFailure__ClientTravelFailure                                              = 11
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x01 (1 bytes)
enum class EScreenOrientation : uint8_t
{
	EScreenOrientation__Unknown                                                      = 0,
	EScreenOrientation__Portrait                                                     = 1,
	EScreenOrientation__PortraitUpsideDown                                           = 2,
	EScreenOrientation__LandscapeLeft                                                = 3,
	EScreenOrientation__LandscapeRight                                               = 4,
	EScreenOrientation__FaceUp                                                       = 5,
	EScreenOrientation__FaceDown                                                     = 6
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x01 (1 bytes)
enum class EApplicationState : uint8_t
{
	EApplicationState__Unknown                                                       = 0,
	EApplicationState__Inactive                                                      = 1,
	EApplicationState__Background                                                    = 2,
	EApplicationState__Active                                                        = 3
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x01 (1 bytes)
enum class EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery1                                                                 = 0,
	ObjectTypeQuery2                                                                 = 1,
	ObjectTypeQuery3                                                                 = 2,
	ObjectTypeQuery4                                                                 = 3,
	ObjectTypeQuery5                                                                 = 4,
	ObjectTypeQuery6                                                                 = 5,
	ObjectTypeQuery7                                                                 = 6,
	ObjectTypeQuery8                                                                 = 7,
	ObjectTypeQuery9                                                                 = 8,
	ObjectTypeQuery10                                                                = 9,
	ObjectTypeQuery11                                                                = 10,
	ObjectTypeQuery12                                                                = 11,
	ObjectTypeQuery13                                                                = 12,
	ObjectTypeQuery14                                                                = 13,
	ObjectTypeQuery15                                                                = 14,
	ObjectTypeQuery16                                                                = 15,
	ObjectTypeQuery17                                                                = 16,
	ObjectTypeQuery18                                                                = 17,
	ObjectTypeQuery19                                                                = 18,
	ObjectTypeQuery20                                                                = 19,
	ObjectTypeQuery21                                                                = 20,
	ObjectTypeQuery22                                                                = 21,
	ObjectTypeQuery23                                                                = 22,
	ObjectTypeQuery24                                                                = 23,
	ObjectTypeQuery25                                                                = 24,
	ObjectTypeQuery26                                                                = 25,
	ObjectTypeQuery27                                                                = 26,
	ObjectTypeQuery28                                                                = 27,
	ObjectTypeQuery29                                                                = 28,
	ObjectTypeQuery30                                                                = 29,
	ObjectTypeQuery31                                                                = 30,
	ObjectTypeQuery32                                                                = 31
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x01 (1 bytes)
enum class EDrawDebugTrace : uint8_t
{
	EDrawDebugTrace__None                                                            = 0,
	EDrawDebugTrace__ForOneFrame                                                     = 1,
	EDrawDebugTrace__ForDuration                                                     = 2,
	EDrawDebugTrace__Persistent                                                      = 3
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x01 (1 bytes)
enum class ETraceTypeQuery : uint8_t
{
	TraceTypeQuery1                                                                  = 0,
	TraceTypeQuery2                                                                  = 1,
	TraceTypeQuery3                                                                  = 2,
	TraceTypeQuery4                                                                  = 3,
	TraceTypeQuery5                                                                  = 4,
	TraceTypeQuery6                                                                  = 5,
	TraceTypeQuery7                                                                  = 6,
	TraceTypeQuery8                                                                  = 7,
	TraceTypeQuery9                                                                  = 8,
	TraceTypeQuery10                                                                 = 9,
	TraceTypeQuery11                                                                 = 10,
	TraceTypeQuery12                                                                 = 11,
	TraceTypeQuery13                                                                 = 12,
	TraceTypeQuery14                                                                 = 13,
	TraceTypeQuery15                                                                 = 14,
	TraceTypeQuery16                                                                 = 15,
	TraceTypeQuery17                                                                 = 16,
	TraceTypeQuery18                                                                 = 17,
	TraceTypeQuery19                                                                 = 18,
	TraceTypeQuery20                                                                 = 19,
	TraceTypeQuery21                                                                 = 20,
	TraceTypeQuery22                                                                 = 21,
	TraceTypeQuery23                                                                 = 22,
	TraceTypeQuery24                                                                 = 23,
	TraceTypeQuery25                                                                 = 24,
	TraceTypeQuery26                                                                 = 25,
	TraceTypeQuery27                                                                 = 26,
	TraceTypeQuery28                                                                 = 27,
	TraceTypeQuery29                                                                 = 28,
	TraceTypeQuery30                                                                 = 29,
	TraceTypeQuery31                                                                 = 30,
	TraceTypeQuery32                                                                 = 31
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x01 (1 bytes)
enum class EMoveComponentAction : uint8_t
{
	EMoveComponentAction__Move                                                       = 0,
	EMoveComponentAction__Stop                                                       = 1,
	EMoveComponentAction__Return                                                     = 2
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x01 (1 bytes)
enum class EQuitPreference : uint8_t
{
	EQuitPreference__Quit                                                            = 0,
	EQuitPreference__Background                                                      = 1
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x01 (1 bytes)
enum class EMouseLockMode : uint8_t
{
	EMouseLockMode__DoNotLock                                                        = 0,
	EMouseLockMode__LockOnCapture                                                    = 1,
	EMouseLockMode__LockAlways                                                       = 2,
	EMouseLockMode__LockInFullscreen                                                 = 3
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x01 (1 bytes)
enum class EWindowTitleBarMode : uint8_t
{
	EWindowTitleBarMode__Overlay                                                     = 0,
	EWindowTitleBarMode__VerticalBox                                                 = 1
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x01 (1 bytes)
enum class EInputEvent : uint8_t
{
	IE_Pressed                                                                       = 0,
	IE_Released                                                                      = 1,
	IE_Repeat                                                                        = 2,
	IE_DoubleClick                                                                   = 3,
	IE_Axis                                                                          = 4
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x01 (1 bytes)
enum class ERoundingMode : uint8_t
{
	HalfToEven                                                                       = 0,
	HalfFromZero                                                                     = 1,
	HalfToZero                                                                       = 2,
	FromZero                                                                         = 3,
	ToZero                                                                           = 4,
	ToNegativeInfinity                                                               = 5,
	ToPositiveInfinity                                                               = 6
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x01 (1 bytes)
enum class ENetRole : uint8_t
{
	ROLE_None                                                                        = 0,
	ROLE_SimulatedProxy                                                              = 1,
	ROLE_AutonomousProxy                                                             = 2,
	ROLE_Authority                                                                   = 3
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x01 (1 bytes)
enum class EAttachLocation : uint8_t
{
	EAttachLocation__KeepRelativeOffset                                              = 0,
	EAttachLocation__KeepWorldPosition                                               = 1,
	EAttachLocation__SnapToTarget                                                    = 2,
	EAttachLocation__SnapToTargetIncludingScale                                      = 3
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x01 (1 bytes)
enum class EAttachmentRule : uint8_t
{
	EAttachmentRule__KeepRelative                                                    = 0,
	EAttachmentRule__KeepWorld                                                       = 1,
	EAttachmentRule__SnapToTarget                                                    = 2
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x01 (1 bytes)
enum class EDetachmentRule : uint8_t
{
	EDetachmentRule__KeepRelative                                                    = 0,
	EDetachmentRule__KeepWorld                                                       = 1
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x01 (1 bytes)
enum class ENetDormancy : uint8_t
{
	DORM_Never                                                                       = 0,
	DORM_Awake                                                                       = 1,
	DORM_DormantAll                                                                  = 2,
	DORM_DormantPartial                                                              = 3,
	DORM_Initial                                                                     = 4
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x01 (1 bytes)
enum class EAutoReceiveInput : uint8_t
{
	EAutoReceiveInput__Disabled                                                      = 0,
	EAutoReceiveInput__Player0                                                       = 1,
	EAutoReceiveInput__Player1                                                       = 2,
	EAutoReceiveInput__Player2                                                       = 3,
	EAutoReceiveInput__Player3                                                       = 4,
	EAutoReceiveInput__Player4                                                       = 5,
	EAutoReceiveInput__Player5                                                       = 6,
	EAutoReceiveInput__Player6                                                       = 7,
	EAutoReceiveInput__Player7                                                       = 8
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x01 (1 bytes)
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
	ESpawnActorCollisionHandlingMethod__Undefined                                    = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn                                  = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn               = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding      = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding                         = 4
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x01 (1 bytes)
enum class ERotatorQuantization : uint8_t
{
	ERotatorQuantization__ByteComponents                                             = 0,
	ERotatorQuantization__ShortComponents                                            = 1
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x01 (1 bytes)
enum class EVectorQuantization : uint8_t
{
	EVectorQuantization__RoundWholeNumber                                            = 0,
	EVectorQuantization__RoundOneDecimal                                             = 1,
	EVectorQuantization__RoundTwoDecimals                                            = 2
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x01 (1 bytes)
enum class EActorUpdateOverlapsMethod : uint8_t
{
	EActorUpdateOverlapsMethod__UseConfigDefault                                     = 0,
	EActorUpdateOverlapsMethod__AlwaysUpdate                                         = 1,
	EActorUpdateOverlapsMethod__OnlyUpdateMovable                                    = 2,
	EActorUpdateOverlapsMethod__NeverUpdate                                          = 3
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x01 (1 bytes)
enum class ERelativeTransformSpace : uint8_t
{
	RTS_World                                                                        = 0,
	RTS_Actor                                                                        = 1,
	RTS_Component                                                                    = 2,
	RTS_ParentBoneSpace                                                              = 3
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x01 (1 bytes)
enum class EComponentMobility : uint8_t
{
	EComponentMobility__Static                                                       = 0,
	EComponentMobility__Stationary                                                   = 1,
	EComponentMobility__Movable                                                      = 2
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x01 (1 bytes)
enum class EDetailMode : uint8_t
{
	DM_Low                                                                           = 0,
	DM_Medium                                                                        = 1,
	DM_High                                                                          = 2
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x01 (1 bytes)
enum class ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle                                                                       = 0,
	RCCE_CycleWithOffset                                                             = 1,
	RCCE_Oscillate                                                                   = 2,
	RCCE_Linear                                                                      = 3,
	RCCE_Constant                                                                    = 4,
	RCCE_None                                                                        = 5
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone                                                               = 0,
	RCTWM_WeightedArrive                                                             = 1,
	RCTWM_WeightedLeave                                                              = 2,
	RCTWM_WeightedBoth                                                               = 3
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentMode : uint8_t
{
	RCTM_Auto                                                                        = 0,
	RCTM_User                                                                        = 1,
	RCTM_Break                                                                       = 2,
	RCTM_None                                                                        = 3
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveInterpMode : uint8_t
{
	RCIM_Linear                                                                      = 0,
	RCIM_Constant                                                                    = 1,
	RCIM_Cubic                                                                       = 2,
	RCIM_None                                                                        = 3
};

/// Enum /Script/Engine.EFastArraySerializerDeltaFlags
/// Size: 0x01 (1 bytes)
enum class EFastArraySerializerDeltaFlags : uint8_t
{
	EFastArraySerializerDeltaFlags__None                                             = 0,
	EFastArraySerializerDeltaFlags__HasBeenSerialized                                = 1,
	EFastArraySerializerDeltaFlags__HasDeltaBeenRequested                            = 2,
	EFastArraySerializerDeltaFlags__IsUsingDeltaSerialization                        = 4
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x01 (1 bytes)
enum class EAutoPossessAI : uint8_t
{
	EAutoPossessAI__Disabled                                                         = 0,
	EAutoPossessAI__PlacedInWorld                                                    = 1,
	EAutoPossessAI__Spawned                                                          = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned                                           = 3
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x01 (1 bytes)
enum class ECollisionChannel : uint8_t
{
	ECC_WorldStatic                                                                  = 0,
	ECC_WorldDynamic                                                                 = 1,
	ECC_Pawn                                                                         = 2,
	ECC_Visibility                                                                   = 3,
	ECC_Camera                                                                       = 4,
	ECC_PhysicsBody                                                                  = 5,
	ECC_Vehicle                                                                      = 6,
	ECC_Destructible                                                                 = 7,
	ECC_EngineTraceChannel1                                                          = 8,
	ECC_EngineTraceChannel2                                                          = 9,
	ECC_EngineTraceChannel3                                                          = 10,
	ECC_EngineTraceChannel4                                                          = 11,
	ECC_EngineTraceChannel5                                                          = 12,
	ECC_EngineTraceChannel6                                                          = 13,
	ECC_GameTraceChannel1                                                            = 14,
	ECC_GameTraceChannel2                                                            = 15,
	ECC_GameTraceChannel3                                                            = 16,
	ECC_GameTraceChannel4                                                            = 17,
	ECC_GameTraceChannel5                                                            = 18,
	ECC_GameTraceChannel6                                                            = 19,
	ECC_GameTraceChannel7                                                            = 20,
	ECC_GameTraceChannel8                                                            = 21,
	ECC_GameTraceChannel9                                                            = 22,
	ECC_GameTraceChannel10                                                           = 23,
	ECC_GameTraceChannel11                                                           = 24,
	ECC_GameTraceChannel12                                                           = 25,
	ECC_GameTraceChannel13                                                           = 26,
	ECC_GameTraceChannel14                                                           = 27,
	ECC_GameTraceChannel15                                                           = 28,
	ECC_GameTraceChannel16                                                           = 29,
	ECC_GameTraceChannel17                                                           = 30,
	ECC_GameTraceChannel18                                                           = 31,
	ECC_OverlapAll_Deprecated                                                        = 32
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x01 (1 bytes)
enum class EAlphaBlendOption : uint8_t
{
	EAlphaBlendOption__Linear                                                        = 0,
	EAlphaBlendOption__Cubic                                                         = 1,
	EAlphaBlendOption__HermiteCubic                                                  = 2,
	EAlphaBlendOption__Sinusoidal                                                    = 3,
	EAlphaBlendOption__QuadraticInOut                                                = 4,
	EAlphaBlendOption__CubicInOut                                                    = 5,
	EAlphaBlendOption__QuarticInOut                                                  = 6,
	EAlphaBlendOption__QuinticInOut                                                  = 7,
	EAlphaBlendOption__CircularIn                                                    = 8,
	EAlphaBlendOption__CircularOut                                                   = 9,
	EAlphaBlendOption__CircularInOut                                                 = 10,
	EAlphaBlendOption__ExpIn                                                         = 11,
	EAlphaBlendOption__ExpOut                                                        = 12,
	EAlphaBlendOption__ExpInOut                                                      = 13,
	EAlphaBlendOption__Custom                                                        = 14
};

/// Enum /Script/Engine.ECameraShakePlaySpace
/// Size: 0x01 (1 bytes)
enum class ECameraShakePlaySpace : uint8_t
{
	ECameraShakePlaySpace__CameraLocal                                               = 0,
	ECameraShakePlaySpace__World                                                     = 1,
	ECameraShakePlaySpace__UserDefined                                               = 2
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x01 (1 bytes)
enum class EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear                                                                   = 0,
	VTBlend_Cubic                                                                    = 1,
	VTBlend_EaseIn                                                                   = 2,
	VTBlend_EaseOut                                                                  = 3,
	VTBlend_EaseInOut                                                                = 4,
	VTBlend_PreBlended                                                               = 5
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x01 (1 bytes)
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                                                  = 0,
	TRAVEL_Partial                                                                   = 1,
	TRAVEL_Relative                                                                  = 2
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x01 (1 bytes)
enum class EControllerAnalogStick : uint8_t
{
	EControllerAnalogStick__CAS_LeftStick                                            = 0,
	EControllerAnalogStick__CAS_RightStick                                           = 1
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x01 (1 bytes)
enum class EDynamicForceFeedbackAction : uint8_t
{
	EDynamicForceFeedbackAction__Start                                               = 0,
	EDynamicForceFeedbackAction__Update                                              = 1,
	EDynamicForceFeedbackAction__Stop                                                = 2
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethod : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF                                                                    = 0,
	DOFM_Gaussian                                                                    = 1,
	DOFM_CircleDOF                                                                   = 2
};

/// Enum /Script/Engine.EAnimSyncGroupScope
/// Size: 0x01 (1 bytes)
enum class EAnimSyncGroupScope : uint8_t
{
	EAnimSyncGroupScope__Local                                                       = 0,
	EAnimSyncGroupScope__Component                                                   = 1
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x01 (1 bytes)
enum class EAnimGroupRole : uint8_t
{
	EAnimGroupRole__CanBeLeader                                                      = 0,
	EAnimGroupRole__AlwaysFollower                                                   = 1,
	EAnimGroupRole__AlwaysLeader                                                     = 2,
	EAnimGroupRole__TransitionLeader                                                 = 3,
	EAnimGroupRole__TransitionFollower                                               = 4
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x01 (1 bytes)
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	EPreviewAnimationBlueprintApplicationMethod__LinkedLayers                        = 0,
	EPreviewAnimationBlueprintApplicationMethod__LinkedAnimGraph                     = 1
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x01 (1 bytes)
enum class AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                                              = 0,
	AKF_VariableKeyLerp                                                              = 1,
	AKF_PerTrackCompression                                                          = 2
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x01 (1 bytes)
enum class ERawCurveTrackTypes : uint8_t
{
	ERawCurveTrackTypes__RCT_Float                                                   = 0,
	ERawCurveTrackTypes__RCT_Vector                                                  = 1,
	ERawCurveTrackTypes__RCT_Transform                                               = 2
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x01 (1 bytes)
enum class EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE                                                                        = 0,
	AACF_DriveMorphTarget_DEPRECATED                                                 = 1,
	AACF_DriveAttribute_DEPRECATED                                                   = 2,
	AACF_Editable                                                                    = 4,
	AACF_DriveMaterial_DEPRECATED                                                    = 8,
	AACF_Metadata                                                                    = 16,
	AACF_DriveTrack                                                                  = 32,
	AACF_Disabled                                                                    = 64
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x01 (1 bytes)
enum class AnimationCompressionFormat : uint8_t
{
	ACF_None                                                                         = 0,
	ACF_Float96NoW                                                                   = 1,
	ACF_Fixed48NoW                                                                   = 2,
	ACF_IntervalFixed32NoW                                                           = 3,
	ACF_Fixed32NoW                                                                   = 4,
	ACF_Float32NoW                                                                   = 5,
	ACF_Identity                                                                     = 6
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x01 (1 bytes)
enum class EAdditiveBasePoseType : uint8_t
{
	ABPT_None                                                                        = 0,
	ABPT_RefPose                                                                     = 1,
	ABPT_AnimScaled                                                                  = 2,
	ABPT_AnimFrame                                                                   = 3
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionMode : uint8_t
{
	ERootMotionMode__NoRootMotionExtraction                                          = 0,
	ERootMotionMode__IgnoreRootMotion                                                = 1,
	ERootMotionMode__RootMotionFromEverything                                        = 2,
	ERootMotionMode__RootMotionFromMontagesOnly                                      = 3
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x01 (1 bytes)
enum class ERootMotionRootLock : uint8_t
{
	ERootMotionRootLock__RefPose                                                     = 0,
	ERootMotionRootLock__AnimFirstFrame                                              = 1,
	ERootMotionRootLock__Zero                                                        = 2
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x01 (1 bytes)
enum class EMontagePlayReturnType : uint8_t
{
	EMontagePlayReturnType__MontageLength                                            = 0,
	EMontagePlayReturnType__Duration                                                 = 1
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x01 (1 bytes)
enum class EDrawDebugItemType : uint8_t
{
	EDrawDebugItemType__DirectionalArrow                                             = 0,
	EDrawDebugItemType__Sphere                                                       = 1,
	EDrawDebugItemType__Line                                                         = 2,
	EDrawDebugItemType__OnScreenMessage                                              = 3,
	EDrawDebugItemType__CoordinateSystem                                             = 4
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x01 (1 bytes)
enum class EAnimLinkMethod : uint8_t
{
	EAnimLinkMethod__Absolute                                                        = 0,
	EAnimLinkMethod__Relative                                                        = 1,
	EAnimLinkMethod__Proportional                                                    = 2
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x01 (1 bytes)
enum class EMontageSubStepResult : uint8_t
{
	EMontageSubStepResult__Moved                                                     = 0,
	EMontageSubStepResult__NotMoved                                                  = 1,
	EMontageSubStepResult__InvalidSection                                            = 2,
	EMontageSubStepResult__InvalidMontage                                            = 3
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x01 (1 bytes)
enum class EAnimNotifyEventType : uint8_t
{
	EAnimNotifyEventType__Begin                                                      = 0,
	EAnimNotifyEventType__End                                                        = 1
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x01 (1 bytes)
enum class EInertializationSpace : uint8_t
{
	EInertializationSpace__Default                                                   = 0,
	EInertializationSpace__WorldSpace                                                = 1,
	EInertializationSpace__WorldRotation                                             = 2
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x01 (1 bytes)
enum class EInertializationBoneState : uint8_t
{
	EInertializationBoneState__Invalid                                               = 0,
	EInertializationBoneState__Valid                                                 = 1,
	EInertializationBoneState__Excluded                                              = 2
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x01 (1 bytes)
enum class EInertializationState : uint8_t
{
	EInertializationState__Inactive                                                  = 0,
	EInertializationState__Pending                                                   = 1,
	EInertializationState__Active                                                    = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x01 (1 bytes)
enum class EEvaluatorMode : uint8_t
{
	EEvaluatorMode__EM_Standard                                                      = 0,
	EEvaluatorMode__EM_Freeze                                                        = 1,
	EEvaluatorMode__EM_DelayedFreeze                                                 = 2
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x01 (1 bytes)
enum class EEvaluatorDataSource : uint8_t
{
	EEvaluatorDataSource__EDS_SourcePose                                             = 0,
	EEvaluatorDataSource__EDS_DestinationPose                                        = 1
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x01 (1 bytes)
enum class EPostCopyOperation : uint8_t
{
	EPostCopyOperation__None                                                         = 0,
	EPostCopyOperation__LogicalNegateBool                                            = 1
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x01 (1 bytes)
enum class EPinHidingMode : uint8_t
{
	EPinHidingMode__NeverAsPin                                                       = 0,
	EPinHidingMode__PinHiddenByDefault                                               = 1,
	EPinHidingMode__PinShownByDefault                                                = 2,
	EPinHidingMode__AlwaysAsPin                                                      = 3
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x01 (1 bytes)
enum class AnimPhysCollisionType : uint8_t
{
	AnimPhysCollisionType__CoM                                                       = 0,
	AnimPhysCollisionType__CustomSphere                                              = 1,
	AnimPhysCollisionType__InnerSphere                                               = 2,
	AnimPhysCollisionType__OuterSphere                                               = 3
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x01 (1 bytes)
enum class AnimPhysTwistAxis : uint8_t
{
	AnimPhysTwistAxis__AxisX                                                         = 0,
	AnimPhysTwistAxis__AxisY                                                         = 1,
	AnimPhysTwistAxis__AxisZ                                                         = 2
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x01 (1 bytes)
enum class ETypeAdvanceAnim : uint8_t
{
	ETAA_Default                                                                     = 0,
	ETAA_Finished                                                                    = 1,
	ETAA_Looped                                                                      = 2
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x01 (1 bytes)
enum class ETransitionLogicType : uint8_t
{
	ETransitionLogicType__TLT_StandardBlend                                          = 0,
	ETransitionLogicType__TLT_Inertialization                                        = 1,
	ETransitionLogicType__TLT_Custom                                                 = 2
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x01 (1 bytes)
enum class ETransitionBlendMode : uint8_t
{
	ETransitionBlendMode__TBM_Linear                                                 = 0,
	ETransitionBlendMode__TBM_Cubic                                                  = 1
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x01 (1 bytes)
enum class EComponentType : uint8_t
{
	EComponentType__None                                                             = 0,
	EComponentType__TranslationX                                                     = 1,
	EComponentType__TranslationY                                                     = 2,
	EComponentType__TranslationZ                                                     = 3,
	EComponentType__RotationX                                                        = 4,
	EComponentType__RotationY                                                        = 5,
	EComponentType__RotationZ                                                        = 6,
	EComponentType__Scale                                                            = 7,
	EComponentType__ScaleX                                                           = 8,
	EComponentType__ScaleY                                                           = 9,
	EComponentType__ScaleZ                                                           = 10
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x01 (1 bytes)
enum class EAxisOption : uint8_t
{
	EAxisOption__X                                                                   = 0,
	EAxisOption__Y                                                                   = 1,
	EAxisOption__Z                                                                   = 2,
	EAxisOption__X_Neg                                                               = 3,
	EAxisOption__Y_Neg                                                               = 4,
	EAxisOption__Z_Neg                                                               = 5,
	EAxisOption__Custom                                                              = 6
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x01 (1 bytes)
enum class EAnimInterpolationType : uint8_t
{
	EAnimInterpolationType__Linear                                                   = 0,
	EAnimInterpolationType__Step                                                     = 1
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x01 (1 bytes)
enum class ECurveBlendOption : uint8_t
{
	ECurveBlendOption__Override                                                      = 0,
	ECurveBlendOption__DoNotOverride                                                 = 1,
	ECurveBlendOption__NormalizeByWeight                                             = 2,
	ECurveBlendOption__BlendByWeight                                                 = 3,
	ECurveBlendOption__UseBasePose                                                   = 4,
	ECurveBlendOption__UseMaxValue                                                   = 5,
	ECurveBlendOption__UseMinValue                                                   = 6
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x01 (1 bytes)
enum class EAdditiveAnimationType : uint8_t
{
	AAT_None                                                                         = 0,
	AAT_LocalSpaceBase                                                               = 1,
	AAT_RotationOffsetMeshSpace                                                      = 2
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x01 (1 bytes)
enum class ENotifyFilterType : uint8_t
{
	ENotifyFilterType__NoFiltering                                                   = 0,
	ENotifyFilterType__LOD                                                           = 1
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x01 (1 bytes)
enum class EMontageNotifyTickType : uint8_t
{
	EMontageNotifyTickType__Queued                                                   = 0,
	EMontageNotifyTickType__BranchingPoint                                           = 1
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x01 (1 bytes)
enum class EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation                                                   = 0,
	BRS_KeepLocalSpaceRotation                                                       = 1,
	BRS_CopyFromTarget                                                               = 2
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x01 (1 bytes)
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                                                   = 0,
	BCS_ComponentSpace                                                               = 1,
	BCS_ParentBoneSpace                                                              = 2,
	BCS_BoneSpace                                                                    = 3
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x01 (1 bytes)
enum class EBoneAxis : uint8_t
{
	BA_X                                                                             = 0,
	BA_Y                                                                             = 1,
	BA_Z                                                                             = 2
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x01 (1 bytes)
enum class EPrimaryAssetCookRule : uint8_t
{
	EPrimaryAssetCookRule__Unknown                                                   = 0,
	EPrimaryAssetCookRule__NeverCook                                                 = 1,
	EPrimaryAssetCookRule__DevelopmentCook                                           = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook                                     = 3,
	EPrimaryAssetCookRule__AlwaysCook                                                = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x01 (1 bytes)
enum class ENaturalSoundFalloffMode : uint8_t
{
	ENaturalSoundFalloffMode__Continues                                              = 0,
	ENaturalSoundFalloffMode__Silent                                                 = 1,
	ENaturalSoundFalloffMode__Hold                                                   = 2
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x01 (1 bytes)
enum class EAttenuationShape : uint8_t
{
	EAttenuationShape__Sphere                                                        = 0,
	EAttenuationShape__Capsule                                                       = 1,
	EAttenuationShape__Box                                                           = 2,
	EAttenuationShape__Cone                                                          = 3
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x01 (1 bytes)
enum class EAttenuationDistanceModel : uint8_t
{
	EAttenuationDistanceModel__Linear                                                = 0,
	EAttenuationDistanceModel__Logarithmic                                           = 1,
	EAttenuationDistanceModel__Inverse                                               = 2,
	EAttenuationDistanceModel__LogReverse                                            = 3,
	EAttenuationDistanceModel__NaturalSound                                          = 4,
	EAttenuationDistanceModel__Custom                                                = 5
};

/// Enum /Script/Engine.EAudioBusChannels
/// Size: 0x01 (1 bytes)
enum class EAudioBusChannels : uint8_t
{
	EAudioBusChannels__Mono                                                          = 0,
	EAudioBusChannels__Stereo                                                        = 1
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x01 (1 bytes)
enum class EAudioFaderCurve : uint8_t
{
	EAudioFaderCurve__Linear                                                         = 0,
	EAudioFaderCurve__Logarithmic                                                    = 1,
	EAudioFaderCurve__SCurve                                                         = 2,
	EAudioFaderCurve__Sin                                                            = 3,
	EAudioFaderCurve__Count                                                          = 4
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x01 (1 bytes)
enum class EAudioOutputTarget : uint8_t
{
	EAudioOutputTarget__Speaker                                                      = 0,
	EAudioOutputTarget__Controller                                                   = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker                                  = 2
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x01 (1 bytes)
enum class EMonoChannelUpmixMethod : uint8_t
{
	EMonoChannelUpmixMethod__Linear                                                  = 0,
	EMonoChannelUpmixMethod__EqualPower                                              = 1,
	EMonoChannelUpmixMethod__FullVolume                                              = 2
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x01 (1 bytes)
enum class EPanningMethod : uint8_t
{
	EPanningMethod__Linear                                                           = 0,
	EPanningMethod__EqualPower                                                       = 1
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x04 (4 bytes)
enum class EVoiceSampleRate : uint32_t
{
	EVoiceSampleRate__Low16000Hz                                                     = 16000,
	EVoiceSampleRate__Normal24000Hz                                                  = 24000
};

/// Enum /Script/Engine.EAudioVolumeLocationState
/// Size: 0x01 (1 bytes)
enum class EAudioVolumeLocationState : uint8_t
{
	EAudioVolumeLocationState__InsideTheVolume                                       = 0,
	EAudioVolumeLocationState__OutsideTheVolume                                      = 1
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x01 (1 bytes)
enum class EBlendableLocation : uint8_t
{
	BL_AfterTonemapping                                                              = 0,
	BL_BeforeTonemapping                                                             = 1,
	BL_BeforeTranslucency                                                            = 2,
	BL_ReplacingTonemapper                                                           = 3,
	BL_SSRInput                                                                      = 4
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x01 (1 bytes)
enum class ENotifyTriggerMode : uint8_t
{
	ENotifyTriggerMode__AllAnimations                                                = 0,
	ENotifyTriggerMode__HighestWeightedAnimation                                     = 1,
	ENotifyTriggerMode__None                                                         = 2
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x01 (1 bytes)
enum class EBlendSpaceAxis : uint8_t
{
	BSA_None                                                                         = 0,
	BSA_X                                                                            = 1,
	BSA_Y                                                                            = 2,
	BSA_Max                                                                          = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x01 (1 bytes)
enum class EBlueprintNativizationFlag : uint8_t
{
	EBlueprintNativizationFlag__Disabled                                             = 0,
	EBlueprintNativizationFlag__Dependency                                           = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled                                    = 2
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x01 (1 bytes)
enum class EBlueprintCompileMode : uint8_t
{
	EBlueprintCompileMode__Default                                                   = 0,
	EBlueprintCompileMode__Development                                               = 1,
	EBlueprintCompileMode__FinalRelease                                              = 2
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x01 (1 bytes)
enum class EBlueprintType : uint8_t
{
	BPTYPE_Normal                                                                    = 0,
	BPTYPE_Const                                                                     = 1,
	BPTYPE_MacroLibrary                                                              = 2,
	BPTYPE_Interface                                                                 = 3,
	BPTYPE_LevelScript                                                               = 4,
	BPTYPE_FunctionLibrary                                                           = 5
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x01 (1 bytes)
enum class EBlueprintStatus : uint8_t
{
	BS_Unknown                                                                       = 0,
	BS_Dirty                                                                         = 1,
	BS_Error                                                                         = 2,
	BS_UpToDate                                                                      = 3,
	BS_BeingCreated                                                                  = 4,
	BS_UpToDateWithWarnings                                                          = 5
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x01 (1 bytes)
enum class EDOFMode : uint8_t
{
	EDOFMode__Default                                                                = 0,
	EDOFMode__SixDOF                                                                 = 1,
	EDOFMode__YZPlane                                                                = 2,
	EDOFMode__XZPlane                                                                = 3,
	EDOFMode__XYPlane                                                                = 4,
	EDOFMode__CustomPlane                                                            = 5,
	EDOFMode__None                                                                   = 6
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x01 (1 bytes)
enum class EBrushType : uint8_t
{
	Brush_Default                                                                    = 0,
	Brush_Add                                                                        = 1,
	Brush_Subtract                                                                   = 2
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x01 (1 bytes)
enum class ECsgOper : uint8_t
{
	CSG_Active                                                                       = 0,
	CSG_Add                                                                          = 1,
	CSG_Subtract                                                                     = 2,
	CSG_Intersect                                                                    = 3,
	CSG_Deintersect                                                                  = 4,
	CSG_None                                                                         = 5
};

/// Enum /Script/Engine.ECameraShakeDurationType
/// Size: 0x01 (1 bytes)
enum class ECameraShakeDurationType : uint8_t
{
	ECameraShakeDurationType__Fixed                                                  = 0,
	ECameraShakeDurationType__Infinite                                               = 1,
	ECameraShakeDurationType__Custom                                                 = 2
};

/// Enum /Script/Engine.ECameraShakeUpdateResultFlags
/// Size: 0x01 (1 bytes)
enum class ECameraShakeUpdateResultFlags : uint8_t
{
	ECameraShakeUpdateResultFlags__ApplyAsAbsolute                                   = 1,
	ECameraShakeUpdateResultFlags__SkipAutoScale                                     = 2,
	ECameraShakeUpdateResultFlags__SkipAutoPlaySpace                                 = 4,
	ECameraShakeUpdateResultFlags__Default                                           = 0
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x01 (1 bytes)
enum class ECameraShakeAttenuation : uint8_t
{
	ECameraShakeAttenuation__Linear                                                  = 0,
	ECameraShakeAttenuation__Quadratic                                               = 1
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x01 (1 bytes)
enum class ECameraAlphaBlendMode : uint8_t
{
	ECameraAlphaBlendMode__CABM_Linear                                               = 0,
	ECameraAlphaBlendMode__CABM_Cubic                                                = 1
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x01 (1 bytes)
enum class ECameraProjectionMode : uint8_t
{
	ECameraProjectionMode__Perspective                                               = 0,
	ECameraProjectionMode__Orthographic                                              = 1
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x01 (1 bytes)
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                                                         = 0,
	CSD_KeyValueWriteComplete                                                        = 1,
	CSD_ValueChanged                                                                 = 2,
	CSD_DocumentQueryComplete                                                        = 3,
	CSD_DocumentReadComplete                                                         = 4,
	CSD_DocumentWriteComplete                                                        = 5,
	CSD_DocumentConflictDetected                                                     = 6
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x01 (1 bytes)
enum class EAngularDriveMode : uint8_t
{
	EAngularDriveMode__SLERP                                                         = 0,
	EAngularDriveMode__TwistAndSwing                                                 = 1
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x01 (1 bytes)
enum class ECurveTableMode : uint8_t
{
	ECurveTableMode__Empty                                                           = 0,
	ECurveTableMode__SimpleCurves                                                    = 1,
	ECurveTableMode__RichCurves                                                      = 2
};

/// Enum /Script/Engine.ECustomAttributeBlendType
/// Size: 0x01 (1 bytes)
enum class ECustomAttributeBlendType : uint8_t
{
	ECustomAttributeBlendType__Override                                              = 0,
	ECustomAttributeBlendType__Blend                                                 = 1
};

/// Enum /Script/Engine.FDataDrivenCVarType
/// Size: 0x01 (1 bytes)
enum class FDataDrivenCVarType : uint8_t
{
	FDataDrivenCVarType__CVarFloat                                                   = 0,
	FDataDrivenCVarType__CVarInt                                                     = 1,
	FDataDrivenCVarType__CVarBool                                                    = 2
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x01 (1 bytes)
enum class EEvaluateCurveTableResult : uint8_t
{
	EEvaluateCurveTableResult__RowFound                                              = 0,
	EEvaluateCurveTableResult__RowNotFound                                           = 1
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x01 (1 bytes)
enum class EGrammaticalNumber : uint8_t
{
	EGrammaticalNumber__Singular                                                     = 0,
	EGrammaticalNumber__Plural                                                       = 1
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x01 (1 bytes)
enum class EGrammaticalGender : uint8_t
{
	EGrammaticalGender__Neuter                                                       = 0,
	EGrammaticalGender__Masculine                                                    = 1,
	EGrammaticalGender__Feminine                                                     = 2,
	EGrammaticalGender__Mixed                                                        = 3
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x01 (1 bytes)
enum class DistributionParamMode : uint8_t
{
	DPM_Normal                                                                       = 0,
	DPM_Abs                                                                          = 1,
	DPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same                                                                       = 0,
	EDVMF_Different                                                                  = 1,
	EDVMF_Mirror                                                                     = 2
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None                                                                       = 0,
	EDVLF_XY                                                                         = 1,
	EDVLF_XZ                                                                         = 2,
	EDVLF_YZ                                                                         = 3,
	EDVLF_XYZ                                                                        = 4
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x01 (1 bytes)
enum class ENodeEnabledState : uint8_t
{
	ENodeEnabledState__Enabled                                                       = 0,
	ENodeEnabledState__Disabled                                                      = 1,
	ENodeEnabledState__DevelopmentOnly                                               = 2
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x01 (1 bytes)
enum class ENodeAdvancedPins : uint8_t
{
	ENodeAdvancedPins__NoPins                                                        = 0,
	ENodeAdvancedPins__Shown                                                         = 1,
	ENodeAdvancedPins__Hidden                                                        = 2
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x01 (1 bytes)
enum class ENodeTitleType : uint8_t
{
	ENodeTitleType__FullTitle                                                        = 0,
	ENodeTitleType__ListView                                                         = 1,
	ENodeTitleType__EditableTitle                                                    = 2,
	ENodeTitleType__MenuTitle                                                        = 3,
	ENodeTitleType__MAX_TitleTypes                                                   = 4
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x01 (1 bytes)
enum class EPinContainerType : uint8_t
{
	EPinContainerType__None                                                          = 0,
	EPinContainerType__Array                                                         = 1,
	EPinContainerType__Set                                                           = 2,
	EPinContainerType__Map                                                           = 3
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x01 (1 bytes)
enum class EEdGraphPinDirection : uint8_t
{
	EGPD_Input                                                                       = 0,
	EGPD_Output                                                                      = 1
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x01 (1 bytes)
enum class EBlueprintPinStyleType : uint8_t
{
	BPST_Original                                                                    = 0,
	BPST_VariantA                                                                    = 1
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x01 (1 bytes)
enum class ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE                                                            = 0,
	CONNECT_RESPONSE_DISALLOW                                                        = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A                                                  = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B                                                  = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB                                                 = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE                                       = 5
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x01 (1 bytes)
enum class EGraphType : uint8_t
{
	GT_Function                                                                      = 0,
	GT_Ubergraph                                                                     = 1,
	GT_Macro                                                                         = 2,
	GT_Animation                                                                     = 3,
	GT_StateMachine                                                                  = 4
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x01 (1 bytes)
enum class ETransitionType : uint8_t
{
	ETransitionType__None                                                            = 0,
	ETransitionType__Paused                                                          = 1,
	ETransitionType__Loading                                                         = 2,
	ETransitionType__Saving                                                          = 3,
	ETransitionType__Connecting                                                      = 4,
	ETransitionType__Precaching                                                      = 5,
	ETransitionType__WaitingToConnect                                                = 6
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x01 (1 bytes)
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                                                    = 0,
	FULLYLOAD_Game_PreLoadClass                                                      = 1,
	FULLYLOAD_Game_PostLoadClass                                                     = 2,
	FULLYLOAD_Always                                                                 = 3,
	FULLYLOAD_Mutator                                                                = 4
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x01 (1 bytes)
enum class EViewModeIndex : uint8_t
{
	VMI_BrushWireframe                                                               = 0,
	VMI_Wireframe                                                                    = 1,
	VMI_Unlit                                                                        = 2,
	VMI_Lit                                                                          = 3,
	VMI_Lit_DetailLighting                                                           = 4,
	VMI_LightingOnly                                                                 = 5,
	VMI_LightComplexity                                                              = 6,
	VMI_ShaderComplexity                                                             = 8,
	VMI_LightmapDensity                                                              = 9,
	VMI_LitLightmapDensity                                                           = 10,
	VMI_ReflectionOverride                                                           = 11,
	VMI_VisualizeBuffer                                                              = 12,
	VMI_StationaryLightOverlap                                                       = 14,
	VMI_CollisionPawn                                                                = 15,
	VMI_CollisionVisibility                                                          = 16,
	VMI_LODColoration                                                                = 18,
	VMI_QuadOverdraw                                                                 = 19,
	VMI_PrimitiveDistanceAccuracy                                                    = 20,
	VMI_MeshUVDensityAccuracy                                                        = 21,
	VMI_ShaderComplexityWithQuadOverdraw                                             = 22,
	VMI_HLODColoration                                                               = 23,
	VMI_GroupLODColoration                                                           = 24,
	VMI_MaterialTextureScaleAccuracy                                                 = 25,
	VMI_RequiredTextureResolution                                                    = 26,
	VMI_PathTracing                                                                  = 27,
	VMI_RayTracingDebug                                                              = 28,
	VMI_Max                                                                          = 29,
	VMI_Unknown                                                                      = 255
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x01 (1 bytes)
enum class EDemoPlayFailure : uint8_t
{
	EDemoPlayFailure__Generic                                                        = 0,
	EDemoPlayFailure__DemoNotFound                                                   = 1,
	EDemoPlayFailure__Corrupt                                                        = 2,
	EDemoPlayFailure__InvalidVersion                                                 = 3,
	EDemoPlayFailure__InitBase                                                       = 4,
	EDemoPlayFailure__GameSpecificHeader                                             = 5,
	EDemoPlayFailure__ReplayStreamerInternal                                         = 6,
	EDemoPlayFailure__LoadMap                                                        = 7,
	EDemoPlayFailure__Serialization                                                  = 8
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x01 (1 bytes)
enum class ENetworkLagState : uint8_t
{
	ENetworkLagState__NotLagging                                                     = 0,
	ENetworkLagState__Lagging                                                        = 1
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x01 (1 bytes)
enum class EMouseCaptureMode : uint8_t
{
	EMouseCaptureMode__NoCapture                                                     = 0,
	EMouseCaptureMode__CapturePermanently                                            = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown                  = 2,
	EMouseCaptureMode__CaptureDuringMouseDown                                        = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown                                   = 4
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ECustomTimeStepSynchronizationState : uint8_t
{
	ECustomTimeStepSynchronizationState__Closed                                      = 0,
	ECustomTimeStepSynchronizationState__Error                                       = 1,
	ECustomTimeStepSynchronizationState__Synchronized                                = 2,
	ECustomTimeStepSynchronizationState__Synchronizing                               = 3
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x01 (1 bytes)
enum class EMeshBufferAccess : uint8_t
{
	EMeshBufferAccess__Default                                                       = 0,
	EMeshBufferAccess__ForceCPUAndGPU                                                = 1
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x01 (1 bytes)
enum class EComponentSocketType : uint8_t
{
	EComponentSocketType__Invalid                                                    = 0,
	EComponentSocketType__Bone                                                       = 1,
	EComponentSocketType__Socket                                                     = 2
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x01 (1 bytes)
enum class EPhysicalMaterialMaskColor : uint8_t
{
	EPhysicalMaterialMaskColor__Red                                                  = 0,
	EPhysicalMaterialMaskColor__Green                                                = 1,
	EPhysicalMaterialMaskColor__Blue                                                 = 2,
	EPhysicalMaterialMaskColor__Cyan                                                 = 3,
	EPhysicalMaterialMaskColor__Magenta                                              = 4,
	EPhysicalMaterialMaskColor__Yellow                                               = 5,
	EPhysicalMaterialMaskColor__White                                                = 6,
	EPhysicalMaterialMaskColor__Black                                                = 7
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x01 (1 bytes)
enum class EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default                                                            = 0,
	WalkableSlope_Increase                                                           = 1,
	WalkableSlope_Decrease                                                           = 2,
	WalkableSlope_Unwalkable                                                         = 3,
	WalkableSlope_Max                                                                = 4
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x01 (1 bytes)
enum class EUpdateRateShiftBucket : uint8_t
{
	EUpdateRateShiftBucket__ShiftBucket0                                             = 0,
	EUpdateRateShiftBucket__ShiftBucket1                                             = 1,
	EUpdateRateShiftBucket__ShiftBucket2                                             = 2,
	EUpdateRateShiftBucket__ShiftBucket3                                             = 3,
	EUpdateRateShiftBucket__ShiftBucket4                                             = 4,
	EUpdateRateShiftBucket__ShiftBucket5                                             = 5,
	EUpdateRateShiftBucket__ShiftBucketMax                                           = 6
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x01 (1 bytes)
enum class EShadowMapFlags : uint8_t
{
	SMF_None                                                                         = 0,
	SMF_Streamed                                                                     = 1
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x01 (1 bytes)
enum class ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding                                                               = 0,
	LMPT_PrePadding                                                                  = 1,
	LMPT_NoPadding                                                                   = 2
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x01 (1 bytes)
enum class ECollisionEnabled : uint8_t
{
	ECollisionEnabled__NoCollision                                                   = 0,
	ECollisionEnabled__QueryOnly                                                     = 1,
	ECollisionEnabled__PhysicsOnly                                                   = 2,
	ECollisionEnabled__QueryAndPhysics                                               = 3
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x01 (1 bytes)
enum class ETimelineSigType : uint8_t
{
	ETS_EventSignature                                                               = 0,
	ETS_FloatSignature                                                               = 1,
	ETS_VectorSignature                                                              = 2,
	ETS_LinearColorSignature                                                         = 3,
	ETS_InvalidSignature                                                             = 4
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x01 (1 bytes)
enum class EFilterInterpolationType : uint8_t
{
	BSIT_Average                                                                     = 0,
	BSIT_Linear                                                                      = 1,
	BSIT_Cubic                                                                       = 2
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x01 (1 bytes)
enum class ECollisionResponse : uint8_t
{
	ECR_Ignore                                                                       = 0,
	ECR_Overlap                                                                      = 1,
	ECR_Block                                                                        = 2
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x01 (1 bytes)
enum class EOverlapFilterOption : uint8_t
{
	OverlapFilter_All                                                                = 0,
	OverlapFilter_DynamicOnly                                                        = 1,
	OverlapFilter_StaticOnly                                                         = 2
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x01 (1 bytes)
enum class ENetworkSmoothingMode : uint8_t
{
	ENetworkSmoothingMode__Disabled                                                  = 0,
	ENetworkSmoothingMode__Linear                                                    = 1,
	ENetworkSmoothingMode__Exponential                                               = 2,
	ENetworkSmoothingMode__Replay                                                    = 3
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x01 (1 bytes)
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                                                  = 0,
	Quality_Medium                                                                   = 1,
	Quality_High                                                                     = 2,
	Quality_Production                                                               = 3
};

/// Enum /Script/Engine.EMaterialShadingRate
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingRate : uint8_t
{
	MSR_1x1                                                                          = 0,
	MSR_2x1                                                                          = 1,
	MSR_1x2                                                                          = 2,
	MSR_2x2                                                                          = 3,
	MSR_4x2                                                                          = 4,
	MSR_2x4                                                                          = 5,
	MSR_4x4                                                                          = 6,
	MSR_Count                                                                        = 7
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x01 (1 bytes)
enum class EMaterialStencilCompare : uint8_t
{
	MSC_Less                                                                         = 0,
	MSC_LessEqual                                                                    = 1,
	MSC_Greater                                                                      = 2,
	MSC_GreaterEqual                                                                 = 3,
	MSC_Equal                                                                        = 4,
	MSC_NotEqual                                                                     = 5,
	MSC_Never                                                                        = 6,
	MSC_Always                                                                       = 7,
	MSC_Count                                                                        = 8
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x01 (1 bytes)
enum class EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color                                                                = 0,
	SAMPLERTYPE_Grayscale                                                            = 1,
	SAMPLERTYPE_Alpha                                                                = 2,
	SAMPLERTYPE_Normal                                                               = 3,
	SAMPLERTYPE_Masks                                                                = 4,
	SAMPLERTYPE_DistanceFieldFont                                                    = 5,
	SAMPLERTYPE_LinearColor                                                          = 6,
	SAMPLERTYPE_LinearGrayscale                                                      = 7,
	SAMPLERTYPE_Data                                                                 = 8,
	SAMPLERTYPE_External                                                             = 9,
	SAMPLERTYPE_VirtualColor                                                         = 10,
	SAMPLERTYPE_VirtualGrayscale                                                     = 11,
	SAMPLERTYPE_VirtualAlpha                                                         = 12,
	SAMPLERTYPE_VirtualNormal                                                        = 13,
	SAMPLERTYPE_VirtualMasks                                                         = 14,
	SAMPLERTYPE_VirtualLinearColor                                                   = 15,
	SAMPLERTYPE_VirtualLinearGrayscale                                               = 16
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x01 (1 bytes)
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                                               = 0,
	MTM_FlatTessellation                                                             = 1,
	MTM_PNTriangles                                                                  = 2
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingModel : uint8_t
{
	MSM_Unlit                                                                        = 0,
	MSM_DefaultLit                                                                   = 1,
	MSM_Subsurface                                                                   = 2,
	MSM_PreintegratedSkin                                                            = 3,
	MSM_ClearCoat                                                                    = 4,
	MSM_SubsurfaceProfile                                                            = 5,
	MSM_TwoSidedFoliage                                                              = 6,
	MSM_Hair                                                                         = 7,
	MSM_Cloth                                                                        = 8,
	MSM_Eye                                                                          = 9,
	MSM_SingleLayerWater                                                             = 10,
	MSM_ThinTranslucent                                                              = 11,
	MSM_NUM                                                                          = 12,
	MSM_FromMaterialExpression                                                       = 13
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionMode : uint8_t
{
	EParticleCollisionMode__SceneDepth                                               = 0,
	EParticleCollisionMode__DistanceField                                            = 1
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x01 (1 bytes)
enum class ETrailWidthMode : uint8_t
{
	ETrailWidthMode_FromCentre                                                       = 0,
	ETrailWidthMode_FromFirst                                                        = 1,
	ETrailWidthMode_FromSecond                                                       = 2
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x01 (1 bytes)
enum class EGBufferFormat : uint8_t
{
	EGBufferFormat__Force8BitsPerChannel                                             = 0,
	EGBufferFormat__Default                                                          = 1,
	EGBufferFormat__HighPrecisionNormals                                             = 3,
	EGBufferFormat__Force16BitsPerChannel                                            = 5
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite                                                                   = 0,
	SCCM_Additive                                                                    = 1,
	SCCM_Composite                                                                   = 2
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR                                                                = 0,
	SCS_SceneColorHDRNoAlpha                                                         = 1,
	SCS_FinalColorLDR                                                                = 2,
	SCS_SceneColorSceneDepth                                                         = 3,
	SCS_SceneDepth                                                                   = 4,
	SCS_DeviceDepth                                                                  = 5,
	SCS_Normal                                                                       = 6,
	SCS_BaseColor                                                                    = 7,
	SCS_FinalColorHDR                                                                = 8,
	SCS_FinalToneCurveHDR                                                            = 9
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x01 (1 bytes)
enum class ETranslucentSortPolicy : uint8_t
{
	ETranslucentSortPolicy__SortByDistance                                           = 0,
	ETranslucentSortPolicy__SortByProjectedZ                                         = 1,
	ETranslucentSortPolicy__SortAlongAxis                                            = 2
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x01 (1 bytes)
enum class ERefractionMode : uint8_t
{
	RM_IndexOfRefraction                                                             = 0,
	RM_PixelNormalOffset                                                             = 1
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x01 (1 bytes)
enum class ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional                                                     = 0,
	TLM_VolumetricDirectional                                                        = 1,
	TLM_VolumetricPerVertexNonDirectional                                            = 2,
	TLM_VolumetricPerVertexDirectional                                               = 3,
	TLM_Surface                                                                      = 4,
	TLM_SurfacePerPixelLighting                                                      = 5
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x01 (1 bytes)
enum class ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset                                                             = 0,
	SSM_Wrap_WorldGroupSettings                                                      = 1,
	SSM_Clamp_WorldGroupSettings                                                     = 2
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x01 (1 bytes)
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                                                     = 0,
	BLEND_Masked                                                                     = 1,
	BLEND_Translucent                                                                = 2,
	BLEND_Additive                                                                   = 3,
	BLEND_Modulate                                                                   = 4,
	BLEND_AlphaComposite                                                             = 5,
	BLEND_AlphaHoldout                                                               = 6
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x01 (1 bytes)
enum class EOcclusionCombineMode : uint8_t
{
	OCM_Minimum                                                                      = 0,
	OCM_Multiply                                                                     = 1
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x01 (1 bytes)
enum class ELightmapType : uint8_t
{
	ELightmapType__Default                                                           = 0,
	ELightmapType__ForceSurface                                                      = 1,
	ELightmapType__ForceVolumetric                                                   = 2
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x01 (1 bytes)
enum class EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off                                                                         = 0,
	ILCQ_Point                                                                       = 1,
	ILCQ_Volume                                                                      = 2
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x01 (1 bytes)
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World                                                                       = 0,
	SDPG_Foreground                                                                  = 1
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x01 (1 bytes)
enum class EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV                                                         = 0,
	AspectRatio_MaintainXFOV                                                         = 1,
	AspectRatio_MajorAxisFOV                                                         = 2
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x01 (1 bytes)
enum class EFontCacheType : uint8_t
{
	EFontCacheType__Offline                                                          = 0,
	EFontCacheType__Runtime                                                          = 1
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x01 (1 bytes)
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                                                  = 0,
	FontICS_Ansi                                                                     = 1,
	FontICS_Symbol                                                                   = 2
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x01 (1 bytes)
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                                                         = 0,
	STDBY_Tx                                                                         = 1,
	STDBY_BadPing                                                                    = 2
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x01 (1 bytes)
enum class ESuggestProjVelocityTraceOption : uint8_t
{
	ESuggestProjVelocityTraceOption__DoNotTrace                                      = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath                                   = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending                         = 2
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x01 (1 bytes)
enum class EWindowMode : uint8_t
{
	EWindowMode__Fullscreen                                                          = 0,
	EWindowMode__WindowedFullscreen                                                  = 1,
	EWindowMode__Windowed                                                            = 2
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x01 (1 bytes)
enum class EHitProxyPriority : uint8_t
{
	HPP_World                                                                        = 0,
	HPP_Wireframe                                                                    = 1,
	HPP_Foreground                                                                   = 2,
	HPP_UI                                                                           = 3
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x01 (1 bytes)
enum class EImportanceWeight : uint8_t
{
	EImportanceWeight__Luminance                                                     = 0,
	EImportanceWeight__Red                                                           = 1,
	EImportanceWeight__Green                                                         = 2,
	EImportanceWeight__Blue                                                          = 3,
	EImportanceWeight__Alpha                                                         = 4
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x01 (1 bytes)
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                                                = 0,
	AMD_UserClosedAd                                                                 = 1
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x01 (1 bytes)
enum class EAnimAlphaInputType : uint8_t
{
	EAnimAlphaInputType__Float                                                       = 0,
	EAnimAlphaInputType__Bool                                                        = 1,
	EAnimAlphaInputType__Curve                                                       = 2
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x01 (1 bytes)
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                                                      = 0,
	ETAC_GoreEnabled                                                                 = 1,
	ETAC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x01 (1 bytes)
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                                                    = 0,
	IMR_LookAtGroup                                                                  = 1,
	IMR_Ignore                                                                       = 2
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x01 (1 bytes)
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                                                = 0,
	AXIS_TranslationY                                                                = 1,
	AXIS_TranslationZ                                                                = 2,
	AXIS_RotationX                                                                   = 3,
	AXIS_RotationY                                                                   = 4,
	AXIS_RotationZ                                                                   = 5
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x01 (1 bytes)
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                                                         = 0,
	ETTA_On                                                                          = 1,
	ETTA_Toggle                                                                      = 2,
	ETTA_Trigger                                                                     = 3
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                                                      = 0,
	EVTC_GoreEnabled                                                                 = 1,
	EVTC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                                                        = 0,
	EVTA_Show                                                                        = 1,
	EVTA_Toggle                                                                      = 2
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x01 (1 bytes)
enum class ESlateGesture : uint8_t
{
	ESlateGesture__None                                                              = 0,
	ESlateGesture__Scroll                                                            = 1,
	ESlateGesture__Magnify                                                           = 2,
	ESlateGesture__Swipe                                                             = 3,
	ESlateGesture__Rotate                                                            = 4,
	ESlateGesture__LongPress                                                         = 5
};

/// Enum /Script/Engine.EMIDCreationFlags
/// Size: 0x01 (1 bytes)
enum class EMIDCreationFlags : uint8_t
{
	EMIDCreationFlags__None                                                          = 0,
	EMIDCreationFlags__Transient                                                     = 1
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x01 (1 bytes)
enum class EMatrixColumns : uint8_t
{
	EMatrixColumns__First                                                            = 0,
	EMatrixColumns__Second                                                           = 1,
	EMatrixColumns__Third                                                            = 2,
	EMatrixColumns__Fourth                                                           = 3
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x01 (1 bytes)
enum class ELerpInterpolationMode : uint8_t
{
	ELerpInterpolationMode__QuatInterp                                               = 0,
	ELerpInterpolationMode__EulerInterp                                              = 1,
	ELerpInterpolationMode__DualQuatInterp                                           = 2
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x01 (1 bytes)
enum class EEasingFunc : uint8_t
{
	EEasingFunc__Linear                                                              = 0,
	EEasingFunc__Step                                                                = 1,
	EEasingFunc__SinusoidalIn                                                        = 2,
	EEasingFunc__SinusoidalOut                                                       = 3,
	EEasingFunc__SinusoidalInOut                                                     = 4,
	EEasingFunc__EaseIn                                                              = 5,
	EEasingFunc__EaseOut                                                             = 6,
	EEasingFunc__EaseInOut                                                           = 7,
	EEasingFunc__ExpoIn                                                              = 8,
	EEasingFunc__ExpoOut                                                             = 9,
	EEasingFunc__ExpoInOut                                                           = 10,
	EEasingFunc__CircularIn                                                          = 11,
	EEasingFunc__CircularOut                                                         = 12,
	EEasingFunc__CircularInOut                                                       = 13
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x01 (1 bytes)
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                                                      = 0,
	SVB_LoadingAndVisibility                                                         = 1,
	SVB_VisibilityBlockingOnLoad                                                     = 2,
	SVB_BlockingOnLoad                                                               = 3,
	SVB_LoadingNotVisible                                                            = 4
};

/// Enum /Script/Engine.ESyncOption
/// Size: 0x01 (1 bytes)
enum class ESyncOption : uint8_t
{
	ESyncOption__Drive                                                               = 0,
	ESyncOption__Passive                                                             = 1,
	ESyncOption__Disabled                                                            = 2
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x01 (1 bytes)
enum class EMaterialDecalResponse : uint8_t
{
	MDR_None                                                                         = 0,
	MDR_ColorNormalRoughness                                                         = 1,
	MDR_Color                                                                        = 2,
	MDR_ColorNormal                                                                  = 3,
	MDR_ColorRoughness                                                               = 4,
	MDR_Normal                                                                       = 5,
	MDR_NormalRoughness                                                              = 6,
	MDR_Roughness                                                                    = 7
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x01 (1 bytes)
enum class EDecalBlendMode : uint8_t
{
	DBM_Translucent                                                                  = 0,
	DBM_Stain                                                                        = 1,
	DBM_Normal                                                                       = 2,
	DBM_Emissive                                                                     = 3,
	DBM_DBuffer_ColorNormalRoughness                                                 = 4,
	DBM_DBuffer_Color                                                                = 5,
	DBM_DBuffer_ColorNormal                                                          = 6,
	DBM_DBuffer_ColorRoughness                                                       = 7,
	DBM_DBuffer_Normal                                                               = 8,
	DBM_DBuffer_NormalRoughness                                                      = 9,
	DBM_DBuffer_Roughness                                                            = 10,
	DBM_DBuffer_Emissive                                                             = 11,
	DBM_DBuffer_AlphaComposite                                                       = 12,
	DBM_DBuffer_EmissiveAlphaComposite                                               = 13,
	DBM_Volumetric_DistanceFunction                                                  = 14,
	DBM_AlphaComposite                                                               = 15,
	DBM_AmbientOcclusion                                                             = 16
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x01 (1 bytes)
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                                                          = 0,
	TCC_Green                                                                        = 1,
	TCC_Blue                                                                         = 2,
	TCC_Alpha                                                                        = 3
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x01 (1 bytes)
enum class EMaterialAttributeBlend : uint8_t
{
	EMaterialAttributeBlend__Blend                                                   = 0,
	EMaterialAttributeBlend__UseA                                                    = 1,
	EMaterialAttributeBlend__UseB                                                    = 2
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x01 (1 bytes)
enum class EChannelMaskParameterColor : uint8_t
{
	EChannelMaskParameterColor__Red                                                  = 0,
	EChannelMaskParameterColor__Green                                                = 1,
	EChannelMaskParameterColor__Blue                                                 = 2,
	EChannelMaskParameterColor__Alpha                                                = 3
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x01 (1 bytes)
enum class EClampMode : uint8_t
{
	CMODE_Clamp                                                                      = 0,
	CMODE_ClampMin                                                                   = 1,
	CMODE_ClampMax                                                                   = 2
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x01 (1 bytes)
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                                                      = 0,
	CMOT_Float2                                                                      = 1,
	CMOT_Float3                                                                      = 2,
	CMOT_Float4                                                                      = 3,
	CMOT_MaterialAttributes                                                          = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                                              = 0,
	TDOF_NearMask                                                                    = 1,
	TDOF_FarMask                                                                     = 2,
	TDOF_CircleOfConfusionRadius                                                     = 3
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x01 (1 bytes)
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                                                             = 0,
	FunctionInput_Vector2                                                            = 1,
	FunctionInput_Vector3                                                            = 2,
	FunctionInput_Vector4                                                            = 3,
	FunctionInput_Texture2D                                                          = 4,
	FunctionInput_TextureCube                                                        = 5,
	FunctionInput_Texture2DArray                                                     = 6,
	FunctionInput_VolumeTexture                                                      = 7,
	FunctionInput_StaticBool                                                         = 8,
	FunctionInput_MaterialAttributes                                                 = 9,
	FunctionInput_TextureExternal                                                    = 10
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x01 (1 bytes)
enum class ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex                                                         = 0,
	NOISEFUNCTION_GradientTex                                                        = 1,
	NOISEFUNCTION_GradientTex3D                                                      = 2,
	NOISEFUNCTION_GradientALU                                                        = 3,
	NOISEFUNCTION_ValueALU                                                           = 4,
	NOISEFUNCTION_VoronoiALU                                                         = 5
};

/// Enum /Script/Engine.ERuntimeVirtualTextureTextureAddressMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
	RVTTA_Clamp                                                                      = 0,
	RVTTA_Wrap                                                                       = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None                                                                      = 0,
	RVTMVM_MipLevel                                                                  = 1,
	RVTMVM_MipBias                                                                   = 2
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x01 (1 bytes)
enum class EMaterialSceneAttributeInputMode : uint8_t
{
	EMaterialSceneAttributeInputMode__Coordinates                                    = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction                                 = 1
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeLODType : uint8_t
{
	STLOD_Pop                                                                        = 0,
	STLOD_Smooth                                                                     = 1
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeWindType : uint8_t
{
	STW_None                                                                         = 0,
	STW_Fastest                                                                      = 1,
	STW_Fast                                                                         = 2,
	STW_Better                                                                       = 3,
	STW_Best                                                                         = 4,
	STW_Palm                                                                         = 5,
	STW_BestPlus                                                                     = 6
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeGeometryType : uint8_t
{
	STG_Branch                                                                       = 0,
	STG_Frond                                                                        = 1,
	STG_Leaf                                                                         = 2,
	STG_FacingLeaf                                                                   = 3,
	STG_Billboard                                                                    = 4
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize                                                                 = 0,
	TMTM_TexelSize                                                                   = 1
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ETextureMipValueMode : uint8_t
{
	TMVM_None                                                                        = 0,
	TMVM_MipLevel                                                                    = 1,
	TMVM_MipBias                                                                     = 2,
	TMVM_Derivative                                                                  = 3
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent                                                                = 0,
	TRANSFORM_Local                                                                  = 1,
	TRANSFORM_World                                                                  = 2,
	TRANSFORM_View                                                                   = 3,
	TRANSFORM_Camera                                                                 = 4,
	TRANSFORM_ParticleWorld                                                          = 5
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent                                                          = 0,
	TRANSFORMSOURCE_Local                                                            = 1,
	TRANSFORMSOURCE_World                                                            = 2,
	TRANSFORMSOURCE_View                                                             = 3,
	TRANSFORMSOURCE_Camera                                                           = 4,
	TRANSFORMSOURCE_ParticleWorld                                                    = 5
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                                                         = 0,
	TRANSFORMPOSSOURCE_World                                                         = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld                                               = 2,
	TRANSFORMPOSSOURCE_View                                                          = 3,
	TRANSFORMPOSSOURCE_Camera                                                        = 4,
	TRANSFORMPOSSOURCE_Particle                                                      = 5
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x01 (1 bytes)
enum class EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU                                                                 = 0,
	VNF_VectorALU                                                                    = 1,
	VNF_GradientALU                                                                  = 2,
	VNF_CurlALU                                                                      = 3,
	VNF_VoronoiALU                                                                   = 4
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize                                                                  = 0,
	MEVP_FieldOfView                                                                 = 1,
	MEVP_TanHalfFieldOfView                                                          = 2,
	MEVP_ViewSize                                                                    = 3,
	MEVP_WorldSpaceViewPosition                                                      = 4,
	MEVP_WorldSpaceCameraPosition                                                    = 5,
	MEVP_ViewportOffset                                                              = 6,
	MEVP_TemporalSampleCount                                                         = 7,
	MEVP_TemporalSampleIndex                                                         = 8,
	MEVP_TemporalSampleOffset                                                        = 9,
	MEVP_RuntimeVirtualTextureOutputLevel                                            = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative                                       = 11,
	MEVP_PreExposure                                                                 = 12,
	MEVP_RuntimeVirtualTextureMaxLevel                                               = 13
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x01 (1 bytes)
enum class EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default                                                                      = 0,
	WPT_ExcludeAllShaderOffsets                                                      = 1,
	WPT_CameraRelative                                                               = 2,
	WPT_CameraRelativeNoOffsets                                                      = 3
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialFunctionUsage : uint8_t
{
	EMaterialFunctionUsage__Default                                                  = 0,
	EMaterialFunctionUsage__MaterialLayer                                            = 1,
	EMaterialFunctionUsage__MaterialLayerBlend                                       = 2
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                                                            = 0,
	MATUSAGE_ParticleSprites                                                         = 1,
	MATUSAGE_BeamTrails                                                              = 2,
	MATUSAGE_MeshParticles                                                           = 3,
	MATUSAGE_StaticLighting                                                          = 4,
	MATUSAGE_MorphTargets                                                            = 5,
	MATUSAGE_SplineMesh                                                              = 6,
	MATUSAGE_InstancedStaticMeshes                                                   = 7,
	MATUSAGE_GeometryCollections                                                     = 8,
	MATUSAGE_Clothing                                                                = 9,
	MATUSAGE_NiagaraSprites                                                          = 10,
	MATUSAGE_NiagaraRibbons                                                          = 11,
	MATUSAGE_NiagaraMeshParticles                                                    = 12,
	MATUSAGE_GeometryCache                                                           = 13,
	MATUSAGE_Water                                                                   = 14,
	MATUSAGE_HairStrands                                                             = 15,
	MATUSAGE_LidarPointCloud                                                         = 16,
	MATUSAGE_VirtualHeightfieldMesh                                                  = 17
};

/// Enum /Script/Engine.EMaterialLayerLinkState
/// Size: 0x01 (1 bytes)
enum class EMaterialLayerLinkState : uint8_t
{
	EMaterialLayerLinkState__Uninitialized                                           = 0,
	EMaterialLayerLinkState__LinkedToParent                                          = 1,
	EMaterialLayerLinkState__UnlinkedFromParent                                      = 2,
	EMaterialLayerLinkState__NotFromParent                                           = 3
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x01 (1 bytes)
enum class EMaterialParameterAssociation : uint8_t
{
	LayerParameter                                                                   = 0,
	BlendParameter                                                                   = 1,
	GlobalParameter                                                                  = 2
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x01 (1 bytes)
enum class EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default                                                        = 0,
	MaterialMergeType_Simplygon                                                      = 1
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x01 (1 bytes)
enum class ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize                                           = 0,
	TextureSizingType_UseAutomaticBiasedSizes                                        = 1,
	TextureSizingType_UseManualOverrideTextureSize                                   = 2,
	TextureSizingType_UseSimplygonAutomaticSizing                                    = 3
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x01 (1 bytes)
enum class ESceneTextureId : uint8_t
{
	PPI_SceneColor                                                                   = 0,
	PPI_SceneDepth                                                                   = 1,
	PPI_DiffuseColor                                                                 = 2,
	PPI_SpecularColor                                                                = 3,
	PPI_SubsurfaceColor                                                              = 4,
	PPI_BaseColor                                                                    = 5,
	PPI_Specular                                                                     = 6,
	PPI_Metallic                                                                     = 7,
	PPI_WorldNormal                                                                  = 8,
	PPI_SeparateTranslucency                                                         = 9,
	PPI_Opacity                                                                      = 10,
	PPI_Roughness                                                                    = 11,
	PPI_MaterialAO                                                                   = 12,
	PPI_CustomDepth                                                                  = 13,
	PPI_PostProcessInput0                                                            = 14,
	PPI_PostProcessInput1                                                            = 15,
	PPI_PostProcessInput2                                                            = 16,
	PPI_PostProcessInput3                                                            = 17,
	PPI_PostProcessInput4                                                            = 18,
	PPI_PostProcessInput5                                                            = 19,
	PPI_PostProcessInput6                                                            = 20,
	PPI_DecalMask                                                                    = 21,
	PPI_ShadingModelColor                                                            = 22,
	PPI_ShadingModelID                                                               = 23,
	PPI_AmbientOcclusion                                                             = 24,
	PPI_CustomStencil                                                                = 25,
	PPI_StoredBaseColor                                                              = 26,
	PPI_StoredSpecular                                                               = 27,
	PPI_Velocity                                                                     = 28,
	PPI_WorldTangent                                                                 = 29,
	PPI_Anisotropy                                                                   = 30
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x01 (1 bytes)
enum class EMaterialDomain : uint8_t
{
	MD_Surface                                                                       = 0,
	MD_DeferredDecal                                                                 = 1,
	MD_LightFunction                                                                 = 2,
	MD_Volume                                                                        = 3,
	MD_PostProcess                                                                   = 4,
	MD_UI                                                                            = 5,
	MD_RuntimeVirtualTexture                                                         = 6
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x01 (1 bytes)
enum class EMeshInstancingReplacementMethod : uint8_t
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors                           = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly                 = 1
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x01 (1 bytes)
enum class EUVOutput : uint8_t
{
	EUVOutput__DoNotOutputChannel                                                    = 0,
	EUVOutput__OutputChannel                                                         = 1
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x01 (1 bytes)
enum class EMeshMergeType : uint8_t
{
	EMeshMergeType__MeshMergeType_Default                                            = 0,
	EMeshMergeType__MeshMergeType_MergeActor                                         = 1
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x01 (1 bytes)
enum class EMeshLODSelectionType : uint8_t
{
	EMeshLODSelectionType__AllLODs                                                   = 0,
	EMeshLODSelectionType__SpecificLOD                                               = 1,
	EMeshLODSelectionType__CalculateLOD                                              = 2,
	EMeshLODSelectionType__LowestDetailLOD                                           = 3
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x01 (1 bytes)
enum class EProxyNormalComputationMethod : uint8_t
{
	EProxyNormalComputationMethod__AngleWeighted                                     = 0,
	EProxyNormalComputationMethod__AreaWeighted                                      = 1,
	EProxyNormalComputationMethod__EqualWeighted                                     = 2
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x01 (1 bytes)
enum class ELandscapeCullingPrecision : uint8_t
{
	ELandscapeCullingPrecision__High                                                 = 0,
	ELandscapeCullingPrecision__Medium                                               = 1,
	ELandscapeCullingPrecision__Low                                                  = 2
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x01 (1 bytes)
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
	EStaticMeshReductionTerimationCriterion__Triangles                               = 0,
	EStaticMeshReductionTerimationCriterion__Vertices                                = 1,
	EStaticMeshReductionTerimationCriterion__Any                                     = 2
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x01 (1 bytes)
enum class EMeshFeatureImportance : uint8_t
{
	EMeshFeatureImportance__Off                                                      = 0,
	EMeshFeatureImportance__Lowest                                                   = 1,
	EMeshFeatureImportance__Low                                                      = 2,
	EMeshFeatureImportance__Normal                                                   = 3,
	EMeshFeatureImportance__High                                                     = 4,
	EMeshFeatureImportance__Highest                                                  = 5
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x01 (1 bytes)
enum class EVertexPaintAxis : uint8_t
{
	EVertexPaintAxis__X                                                              = 0,
	EVertexPaintAxis__Y                                                              = 1,
	EVertexPaintAxis__Z                                                              = 2
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                                                    = 0,
	MTR_Failed                                                                       = 1,
	MTR_Canceled                                                                     = 2,
	MTR_RestoredFromServer                                                           = 3
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                                                        = 0,
	MTD_PurchaseComplete                                                             = 1
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x01 (1 bytes)
enum class FNavigationSystemRunMode : uint8_t
{
	FNavigationSystemRunMode__InvalidMode                                            = 0,
	FNavigationSystemRunMode__GameMode                                               = 1,
	FNavigationSystemRunMode__EditorMode                                             = 2,
	FNavigationSystemRunMode__SimulationMode                                         = 3,
	FNavigationSystemRunMode__PIEMode                                                = 4,
	FNavigationSystemRunMode__InferFromWorldMode                                     = 5
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x01 (1 bytes)
enum class ENavigationQueryResult : uint8_t
{
	ENavigationQueryResult__Invalid                                                  = 0,
	ENavigationQueryResult__Error                                                    = 1,
	ENavigationQueryResult__Fail                                                     = 2,
	ENavigationQueryResult__Success                                                  = 3
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x01 (1 bytes)
enum class ENavPathEvent : uint8_t
{
	ENavPathEvent__Cleared                                                           = 0,
	ENavPathEvent__NewPath                                                           = 1,
	ENavPathEvent__UpdatedDueToGoalMoved                                             = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged                                     = 3,
	ENavPathEvent__Invalidated                                                       = 4,
	ENavPathEvent__RePathFailed                                                      = 5,
	ENavPathEvent__MetaPathUpdate                                                    = 6,
	ENavPathEvent__Custom                                                            = 7
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringModeConfig : uint8_t
{
	ENavDataGatheringModeConfig__Invalid                                             = 0,
	ENavDataGatheringModeConfig__Instant                                             = 1,
	ENavDataGatheringModeConfig__Lazy                                                = 2
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringMode : uint8_t
{
	ENavDataGatheringMode__Default                                                   = 0,
	ENavDataGatheringMode__Instant                                                   = 1,
	ENavDataGatheringMode__Lazy                                                      = 2
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x01 (1 bytes)
enum class ENavigationOptionFlag : uint8_t
{
	ENavigationOptionFlag__Default                                                   = 0,
	ENavigationOptionFlag__Enable                                                    = 1,
	ENavigationOptionFlag__Disable                                                   = 2
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x01 (1 bytes)
enum class ENavLinkDirection : uint8_t
{
	ENavLinkDirection__BothWays                                                      = 0,
	ENavLinkDirection__LeftToRight                                                   = 1,
	ENavLinkDirection__RightToLeft                                                   = 2
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x01 (1 bytes)
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                                                       = 0,
	ERM_Point                                                                        = 1,
	ERM_Cross                                                                        = 2,
	ERM_LightsOnly                                                                   = 3,
	ERM_None                                                                         = 4
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                                                      = 0,
	PSUVIM_Linear                                                                    = 1,
	PSUVIM_Linear_Blend                                                              = 2,
	PSUVIM_Random                                                                    = 3,
	PSUVIM_Random_Blend                                                              = 4
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x01 (1 bytes)
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                                                     = 0,
	EPBM_Interpolated                                                                = 1
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x01 (1 bytes)
enum class EParticleSystemInsignificanceReaction : uint8_t
{
	EParticleSystemInsignificanceReaction__Auto                                      = 0,
	EParticleSystemInsignificanceReaction__Complete                                  = 1,
	EParticleSystemInsignificanceReaction__DisableTick                               = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill                        = 3,
	EParticleSystemInsignificanceReaction__Num                                       = 4
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x01 (1 bytes)
enum class EParticleSignificanceLevel : uint8_t
{
	EParticleSignificanceLevel__Low                                                  = 0,
	EParticleSignificanceLevel__Medium                                               = 1,
	EParticleSignificanceLevel__High                                                 = 2,
	EParticleSignificanceLevel__Critical                                             = 3,
	EParticleSignificanceLevel__Num                                                  = 4
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x01 (1 bytes)
enum class EParticleDetailMode : uint8_t
{
	PDM_Low                                                                          = 0,
	PDM_Medium                                                                       = 1,
	PDM_High                                                                         = 2
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                                                     = 0,
	EPSSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x01 (1 bytes)
enum class EModuleType : uint8_t
{
	EPMT_General                                                                     = 0,
	EPMT_TypeData                                                                    = 1,
	EPMT_Beam                                                                        = 2,
	EPMT_Trail                                                                       = 3,
	EPMT_Spawn                                                                       = 4,
	EPMT_Required                                                                    = 5,
	EPMT_Event                                                                       = 6,
	EPMT_Light                                                                       = 7,
	EPMT_SubUV                                                                       = 8
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                                                     = 0,
	EAPSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                                                  = 0,
	PEB2STTM_UserSet                                                                 = 1,
	PEB2STTM_Distribution                                                            = 2,
	PEB2STTM_Emitter                                                                 = 3
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                                                  = 0,
	PEB2STM_UserSet                                                                  = 1,
	PEB2STM_Emitter                                                                  = 2,
	PEB2STM_Particle                                                                 = 3,
	PEB2STM_Actor                                                                    = 4
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x01 (1 bytes)
enum class BeamModifierType : uint8_t
{
	PEB2MT_Source                                                                    = 0,
	PEB2MT_Target                                                                    = 1
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x01 (1 bytes)
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                                                 = 0,
	EPCOUM_Additive                                                                  = 1,
	EPCOUM_Scalar                                                                    = 2
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                                                        = 0,
	EPCC_Freeze                                                                      = 1,
	EPCC_HaltCollisions                                                              = 2,
	EPCC_FreezeTranslation                                                           = 3,
	EPCC_FreezeRotation                                                              = 4,
	EPCC_FreezeMovement                                                              = 5
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionResponse : uint8_t
{
	EParticleCollisionResponse__Bounce                                               = 0,
	EParticleCollisionResponse__Stop                                                 = 1,
	EParticleCollisionResponse__Kill                                                 = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                                                         = 0,
	BONESOCKETSEL_Random                                                             = 1
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                                                           = 0,
	BONESOCKETSOURCE_Sockets                                                         = 1
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                                                     = 0,
	ELESM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x01 (1 bytes)
enum class CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                                               = 0,
	PMLPC_HEIGHTAXIS_Y                                                               = 1,
	PMLPC_HEIGHTAXIS_Z                                                               = 2
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x01 (1 bytes)
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                                                           = 0,
	VERTSURFACESOURCE_Surface                                                        = 1
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x01 (1 bytes)
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                                                  = 0,
	EOChainMode_Scale                                                                = 1,
	EOChainMode_Link                                                                 = 2
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x01 (1 bytes)
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                                                        = 0,
	EPAL_X                                                                           = 1,
	EPAL_Y                                                                           = 2,
	EPAL_Z                                                                           = 3,
	EPAL_NEGATIVE_X                                                                  = 4,
	EPAL_NEGATIVE_Y                                                                  = 5,
	EPAL_NEGATIVE_Z                                                                  = 6,
	EPAL_ROTATE_X                                                                    = 7,
	EPAL_ROTATE_Y                                                                    = 8,
	EPAL_ROTATE_Z                                                                    = 9
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x01 (1 bytes)
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                                                     = 0,
	EDPV_AutoSet                                                                     = 1,
	EDPV_VelocityX                                                                   = 2,
	EDPV_VelocityY                                                                   = 3,
	EDPV_VelocityZ                                                                   = 4,
	EDPV_VelocityMag                                                                 = 5
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x01 (1 bytes)
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                                                 = 0,
	ENM_Spherical                                                                    = 1,
	ENM_Cylindrical                                                                  = 2
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x01 (1 bytes)
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                                                   = 0,
	PSORTMODE_ViewProjDepth                                                          = 1,
	PSORTMODE_DistanceToView                                                         = 2,
	PSORTMODE_Age_OldestFirst                                                        = 3,
	PSORTMODE_Age_NewestFirst                                                        = 4
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x01 (1 bytes)
enum class EParticleUVFlipMode : uint8_t
{
	EParticleUVFlipMode__None                                                        = 0,
	EParticleUVFlipMode__FlipUV                                                      = 1,
	EParticleUVFlipMode__FlipUOnly                                                   = 2,
	EParticleUVFlipMode__FlipVOnly                                                   = 3,
	EParticleUVFlipMode__RandomFlipUV                                                = 4,
	EParticleUVFlipMode__RandomFlipUOnly                                             = 5,
	EParticleUVFlipMode__RandomFlipVOnly                                             = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent                                     = 7
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x01 (1 bytes)
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                                                 = 0,
	PET2SRCM_Particle                                                                = 1,
	PET2SRCM_Actor                                                                   = 2
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x01 (1 bytes)
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                                                       = 0,
	PEBTM_Full                                                                       = 1,
	PEBTM_Partial                                                                    = 2
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x01 (1 bytes)
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                                                   = 0,
	PEB2M_Target                                                                     = 1,
	PEB2M_Branch                                                                     = 2
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                                                 = 0,
	XAxisFacing_ZUp                                                                  = 1,
	XAxisFacing_NegativeZUp                                                          = 2,
	XAxisFacing_YUp                                                                  = 3,
	XAxisFacing_NegativeYUp                                                          = 4,
	LockedAxis_ZAxisFacing                                                           = 5,
	LockedAxis_NegativeZAxisFacing                                                   = 6,
	LockedAxis_YAxisFacing                                                           = 7,
	LockedAxis_NegativeYAxisFacing                                                   = 8,
	VelocityAligned_ZAxisFacing                                                      = 9,
	VelocityAligned_NegativeZAxisFacing                                              = 10,
	VelocityAligned_YAxisFacing                                                      = 11,
	VelocityAligned_NegativeYAxisFacing                                              = 12
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                                              = 0,
	CameraFacing_ZUp                                                                 = 1,
	CameraFacing_NegativeZUp                                                         = 2,
	CameraFacing_YUp                                                                 = 3,
	CameraFacing_NegativeYUp                                                         = 4
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                                                      = 0,
	PSMA_MeshFaceCameraWithSpin                                                      = 1,
	PSMA_MeshFaceCameraWithLockedAxis                                                = 2
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x01 (1 bytes)
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                                                  = 0,
	Trails_SourceUp                                                                  = 1,
	Trails_WorldUp                                                                   = 2
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition                                                         = 0,
	PSA_Square                                                                       = 1,
	PSA_Rectangle                                                                    = 2,
	PSA_Velocity                                                                     = 3,
	PSA_AwayFromCenter                                                               = 4,
	PSA_TypeSpecific                                                                 = 5,
	PSA_FacingCameraDistanceBlend                                                    = 6
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                                                      = 0,
	EPSOBM_ParticleBounds                                                            = 1,
	EPSOBM_CustomBounds                                                              = 2
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x01 (1 bytes)
enum class ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                                                = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                                                = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic                                        = 2
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x01 (1 bytes)
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                                                   = 0,
	EPSUM_FixedTime                                                                  = 1
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x01 (1 bytes)
enum class EParticleEventType : uint8_t
{
	EPET_Any                                                                         = 0,
	EPET_Spawn                                                                       = 1,
	EPET_Death                                                                       = 2,
	EPET_Collision                                                                   = 3,
	EPET_Burst                                                                       = 4,
	EPET_Blueprint                                                                   = 5
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x01 (1 bytes)
enum class ParticleReplayState : uint8_t
{
	PRS_Disabled                                                                     = 0,
	PRS_Capturing                                                                    = 1,
	PRS_Replaying                                                                    = 2
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x01 (1 bytes)
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                                                        = 0,
	PSPT_Scalar                                                                      = 1,
	PSPT_ScalarRand                                                                  = 2,
	PSPT_Vector                                                                      = 3,
	PSPT_VectorRand                                                                  = 4,
	PSPT_Color                                                                       = 5,
	PSPT_Actor                                                                       = 6,
	PSPT_Material                                                                    = 7,
	PSPT_VectorUnitRand                                                              = 8
};

/// Enum /Script/Engine.EPhysicsAssetSolverType
/// Size: 0x01 (1 bytes)
enum class EPhysicsAssetSolverType : uint8_t
{
	EPhysicsAssetSolverType__RBAN                                                    = 0,
	EPhysicsAssetSolverType__World                                                   = 1
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x01 (1 bytes)
enum class ESettingsLockedAxis : uint8_t
{
	ESettingsLockedAxis__None                                                        = 0,
	ESettingsLockedAxis__X                                                           = 1,
	ESettingsLockedAxis__Y                                                           = 2,
	ESettingsLockedAxis__Z                                                           = 3,
	ESettingsLockedAxis__Invalid                                                     = 4
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x01 (1 bytes)
enum class ESettingsDOF : uint8_t
{
	ESettingsDOF__Full3D                                                             = 0,
	ESettingsDOF__YZPlane                                                            = 1,
	ESettingsDOF__XZPlane                                                            = 2,
	ESettingsDOF__XYPlane                                                            = 3
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x01 (1 bytes)
enum class ERendererStencilMask : uint8_t
{
	ERendererStencilMask__ERSM_Default                                               = 0,
	ERendererStencilMask__ERSM                                                       = 1,
	ERendererStencilMask__ERSM3                                                      = 2,
	ERendererStencilMask__ERSM4                                                      = 3,
	ERendererStencilMask__ERSM5                                                      = 4,
	ERendererStencilMask__ERSM6                                                      = 5,
	ERendererStencilMask__ERSM7                                                      = 6,
	ERendererStencilMask__ERSM8                                                      = 7,
	ERendererStencilMask__ERSM9                                                      = 8,
	ERendererStencilMask__ERSM10                                                     = 9
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x01 (1 bytes)
enum class EHasCustomNavigableGeometry : uint8_t
{
	EHasCustomNavigableGeometry__No                                                  = 0,
	EHasCustomNavigableGeometry__Yes                                                 = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable                                 = 2,
	EHasCustomNavigableGeometry__DontExport                                          = 3
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x01 (1 bytes)
enum class ECanBeCharacterBase : uint8_t
{
	ECB_No                                                                           = 0,
	ECB_Yes                                                                          = 1,
	ECB_Owner                                                                        = 2
};

/// Enum /Script/Engine.EQuarztQuantizationReference
/// Size: 0x01 (1 bytes)
enum class EQuarztQuantizationReference : uint8_t
{
	EQuarztQuantizationReference__BarRelative                                        = 0,
	EQuarztQuantizationReference__TransportRelative                                  = 1,
	EQuarztQuantizationReference__CurrentTimeRelative                                = 2,
	EQuarztQuantizationReference__Count                                              = 3
};

/// Enum /Script/Engine.EQuartzDelegateType
/// Size: 0x01 (1 bytes)
enum class EQuartzDelegateType : uint8_t
{
	EQuartzDelegateType__MetronomeTick                                               = 0,
	EQuartzDelegateType__CommandEvent                                                = 1,
	EQuartzDelegateType__Count                                                       = 2
};

/// Enum /Script/Engine.EQuartzTimeSignatureQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzTimeSignatureQuantization : uint8_t
{
	EQuartzTimeSignatureQuantization__HalfNote                                       = 0,
	EQuartzTimeSignatureQuantization__QuarterNote                                    = 1,
	EQuartzTimeSignatureQuantization__EighthNote                                     = 2,
	EQuartzTimeSignatureQuantization__SixteenthNote                                  = 3,
	EQuartzTimeSignatureQuantization__ThirtySecondNote                               = 4,
	EQuartzTimeSignatureQuantization__Count                                          = 5
};

/// Enum /Script/Engine.EMobileReflectionCompression
/// Size: 0x01 (1 bytes)
enum class EMobileReflectionCompression : uint8_t
{
	EMobileReflectionCompression__Default                                            = 0,
	EMobileReflectionCompression__On                                                 = 1,
	EMobileReflectionCompression__Off                                                = 2
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x01 (1 bytes)
enum class EReflectionSourceType : uint8_t
{
	EReflectionSourceType__CapturedScene                                             = 0,
	EReflectionSourceType__SpecifiedCubemap                                          = 1
};

/// Enum /Script/Engine.EFixedFoveationLevels
/// Size: 0x01 (1 bytes)
enum class EFixedFoveationLevels : uint8_t
{
	EFixedFoveationLevels__Disabled                                                  = 0,
	EFixedFoveationLevels__Low                                                       = 1,
	EFixedFoveationLevels__Medium                                                    = 2,
	EFixedFoveationLevels__High                                                      = 3
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x01 (1 bytes)
enum class EDefaultBackBufferPixelFormat : uint8_t
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A8                                    = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED                     = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED                         = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA                                   = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R10                                 = 4
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethodUI : uint8_t
{
	EAutoExposureMethodUI__AEM_Histogram                                             = 0,
	EAutoExposureMethodUI__AEM_Basic                                                 = 1,
	EAutoExposureMethodUI__AEM_Manual                                                = 2
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x01 (1 bytes)
enum class EAlphaChannelMode : uint8_t
{
	EAlphaChannelMode__Disabled                                                      = 0,
	EAlphaChannelMode__LinearColorSpaceOnly                                          = 1,
	EAlphaChannelMode__AllowThroughTonemapper                                        = 2
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x01 (1 bytes)
enum class EEarlyZPass : uint8_t
{
	EEarlyZPass__None                                                                = 0,
	EEarlyZPass__OpaqueOnly                                                          = 1,
	EEarlyZPass__OpaqueAndMasked                                                     = 2,
	EEarlyZPass__Auto                                                                = 3
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x01 (1 bytes)
enum class ECustomDepthStencil : uint8_t
{
	ECustomDepthStencil__Disabled                                                    = 0,
	ECustomDepthStencil__Enabled                                                     = 1,
	ECustomDepthStencil__EnabledOnDemand                                             = 2,
	ECustomDepthStencil__EnabledWithStencil                                          = 3
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x01 (1 bytes)
enum class EMobileMSAASampleCount : uint8_t
{
	EMobileMSAASampleCount__One                                                      = 1,
	EMobileMSAASampleCount__Two                                                      = 2,
	EMobileMSAASampleCount__Four                                                     = 4,
	EMobileMSAASampleCount__Eight                                                    = 8
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x01 (1 bytes)
enum class ECompositingSampleCount : uint8_t
{
	ECompositingSampleCount__One                                                     = 1,
	ECompositingSampleCount__Two                                                     = 2,
	ECompositingSampleCount__Four                                                    = 4,
	ECompositingSampleCount__Eight                                                   = 8
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x01 (1 bytes)
enum class EClearSceneOptions : uint8_t
{
	EClearSceneOptions__NoClear                                                      = 0,
	EClearSceneOptions__HardwareClear                                                = 1,
	EClearSceneOptions__QuadAtMaxZ                                                   = 2
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x01 (1 bytes)
enum class EReporterLineStyle : uint8_t
{
	EReporterLineStyle__Line                                                         = 0,
	EReporterLineStyle__Dash                                                         = 1
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x01 (1 bytes)
enum class ELegendPosition : uint8_t
{
	ELegendPosition__Outside                                                         = 0,
	ELegendPosition__Inside                                                          = 1
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x01 (1 bytes)
enum class EGraphDataStyle : uint8_t
{
	EGraphDataStyle__Lines                                                           = 0,
	EGraphDataStyle__Filled                                                          = 1
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x01 (1 bytes)
enum class EGraphAxisStyle : uint8_t
{
	EGraphAxisStyle__Lines                                                           = 0,
	EGraphAxisStyle__Notches                                                         = 1,
	EGraphAxisStyle__Grid                                                            = 2
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x01 (1 bytes)
enum class ReverbPreset : uint8_t
{
	REVERB_Default                                                                   = 0,
	REVERB_Bathroom                                                                  = 1,
	REVERB_StoneRoom                                                                 = 2,
	REVERB_Auditorium                                                                = 3,
	REVERB_ConcertHall                                                               = 4,
	REVERB_Cave                                                                      = 5,
	REVERB_Hallway                                                                   = 6,
	REVERB_StoneCorridor                                                             = 7,
	REVERB_Alley                                                                     = 8,
	REVERB_Forest                                                                    = 9,
	REVERB_City                                                                      = 10,
	REVERB_Mountains                                                                 = 11,
	REVERB_Quarry                                                                    = 12,
	REVERB_Plain                                                                     = 13,
	REVERB_ParkingLot                                                                = 14,
	REVERB_SewerPipe                                                                 = 15,
	REVERB_Underwater                                                                = 16,
	REVERB_SmallRoom                                                                 = 17,
	REVERB_MediumRoom                                                                = 18,
	REVERB_LargeRoom                                                                 = 19,
	REVERB_MediumHall                                                                = 20,
	REVERB_LargeHall                                                                 = 21,
	REVERB_Plate                                                                     = 22
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint16                                                                    = 0,
	RCKTCF_float32                                                                   = 1
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty                                                                       = 0,
	RCCF_Constant                                                                    = 1,
	RCCF_Linear                                                                      = 2,
	RCCF_Cubic                                                                       = 3,
	RCCF_Mixed                                                                       = 4,
	RCCF_Weighted                                                                    = 5
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x01 (1 bytes)
enum class EConstraintTransform : uint8_t
{
	EConstraintTransform__Absolute                                                   = 0,
	EConstraintTransform__Relative                                                   = 1
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x01 (1 bytes)
enum class EControlConstraint : uint8_t
{
	EControlConstraint__Orientation                                                  = 0,
	EControlConstraint__Translation                                                  = 1
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionFinishVelocityMode : uint8_t
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity                    = 0,
	ERootMotionFinishVelocityMode__SetVelocity                                       = 1,
	ERootMotionFinishVelocityMode__ClampVelocity                                     = 2
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceSettingsFlags : uint8_t
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck                         = 1,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick                            = 2,
	ERootMotionSourceSettingsFlags__IgnoreZAccumulate                                = 4
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceStatusFlags : uint8_t
{
	ERootMotionSourceStatusFlags__Prepared                                           = 1,
	ERootMotionSourceStatusFlags__Finished                                           = 2,
	ERootMotionSourceStatusFlags__MarkedForRemoval                                   = 4
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionAccumulateMode : uint8_t
{
	ERootMotionAccumulateMode__Override                                              = 0,
	ERootMotionAccumulateMode__Additive                                              = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
	ERuntimeVirtualTextureMainPassType__Never                                        = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive                                    = 1,
	ERuntimeVirtualTextureMainPassType__Always                                       = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
	ERuntimeVirtualTextureMaterialType__BaseColor                                    = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_DEPRECATED                  = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular                    = 2,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_YCoCg              = 3,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular_Mask_YCoCg         = 4,
	ERuntimeVirtualTextureMaterialType__WorldHeight                                  = 5,
	ERuntimeVirtualTextureMaterialType__Count                                        = 6
};

/// Enum /Script/Engine.EMobilePixelProjectedReflectionQuality
/// Size: 0x01 (1 bytes)
enum class EMobilePixelProjectedReflectionQuality : uint8_t
{
	EMobilePixelProjectedReflectionQuality__Disabled                                 = 0,
	EMobilePixelProjectedReflectionQuality__BestPerformance                          = 1,
	EMobilePixelProjectedReflectionQuality__BetterQuality                            = 2,
	EMobilePixelProjectedReflectionQuality__BestQuality                              = 3
};

/// Enum /Script/Engine.EMobilePlanarReflectionMode
/// Size: 0x01 (1 bytes)
enum class EMobilePlanarReflectionMode : uint8_t
{
	EMobilePlanarReflectionMode__Usual                                               = 0,
	EMobilePlanarReflectionMode__MobilePPRExclusive                                  = 1,
	EMobilePlanarReflectionMode__MobilePPR                                           = 2
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x01 (1 bytes)
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
	EReflectedAndRefractedRayTracedShadows__Disabled                                 = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows                             = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows                             = 2
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x01 (1 bytes)
enum class ERayTracingGlobalIlluminationType : uint8_t
{
	ERayTracingGlobalIlluminationType__Disabled                                      = 0,
	ERayTracingGlobalIlluminationType__BruteForce                                    = 1,
	ERayTracingGlobalIlluminationType__FinalGather                                   = 2
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x01 (1 bytes)
enum class ETranslucencyType : uint8_t
{
	ETranslucencyType__Raster                                                        = 0,
	ETranslucencyType__RayTracing                                                    = 1
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x01 (1 bytes)
enum class EReflectionsType : uint8_t
{
	EReflectionsType__ScreenSpace                                                    = 0,
	EReflectionsType__RayTracing                                                     = 1
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x01 (1 bytes)
enum class ELightUnits : uint8_t
{
	ELightUnits__Unitless                                                            = 0,
	ELightUnits__Candelas                                                            = 1,
	ELightUnits__Lumens                                                              = 2
};

/// Enum /Script/Engine.ETemperatureMethod
/// Size: 0x01 (1 bytes)
enum class ETemperatureMethod : uint8_t
{
	TEMP_WhiteBalance                                                                = 0,
	TEMP_ColorTemperature                                                            = 1
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x01 (1 bytes)
enum class EBloomMethod : uint8_t
{
	BM_SOG                                                                           = 0,
	BM_FFT                                                                           = 1
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x01 (1 bytes)
enum class EAntiAliasingMethod : uint8_t
{
	AAM_None                                                                         = 0,
	AAM_FXAA                                                                         = 1,
	AAM_TemporalAA                                                                   = 2,
	AAM_MSAA                                                                         = 3
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x01 (1 bytes)
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture                         = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives                      = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList                            = 2
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialProperty : uint8_t
{
	MP_EmissiveColor                                                                 = 0,
	MP_Opacity                                                                       = 1,
	MP_OpacityMask                                                                   = 2,
	MP_DiffuseColor                                                                  = 3,
	MP_SpecularColor                                                                 = 4,
	MP_BaseColor                                                                     = 5,
	MP_Metallic                                                                      = 6,
	MP_Specular                                                                      = 7,
	MP_Roughness                                                                     = 8,
	MP_Anisotropy                                                                    = 9,
	MP_Normal                                                                        = 10,
	MP_Tangent                                                                       = 11,
	MP_WorldPositionOffset                                                           = 12,
	MP_WorldDisplacement                                                             = 13,
	MP_TessellationMultiplier                                                        = 14,
	MP_SubsurfaceColor                                                               = 15,
	MP_CustomData0                                                                   = 16,
	MP_CustomData1                                                                   = 17,
	MP_AmbientOcclusion                                                              = 18,
	MP_Refraction                                                                    = 19,
	MP_CustomizedUVs0                                                                = 20,
	MP_CustomizedUVs1                                                                = 21,
	MP_CustomizedUVs2                                                                = 22,
	MP_CustomizedUVs3                                                                = 23,
	MP_CustomizedUVs4                                                                = 24,
	MP_CustomizedUVs5                                                                = 25,
	MP_CustomizedUVs6                                                                = 26,
	MP_CustomizedUVs7                                                                = 27,
	MP_PixelDepthOffset                                                              = 28,
	MP_ShadingModel                                                                  = 29,
	MP_MaterialAttributes                                                            = 30,
	MP_CustomOutput                                                                  = 31
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x01 (1 bytes)
enum class ESkinCacheDefaultBehavior : uint8_t
{
	ESkinCacheDefaultBehavior__Exclusive                                             = 0,
	ESkinCacheDefaultBehavior__Inclusive                                             = 1
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x01 (1 bytes)
enum class ESkinCacheUsage : uint8_t
{
	ESkinCacheUsage__Auto                                                            = 0,
	ESkinCacheUsage__Disabled                                                        = 255,
	ESkinCacheUsage__Enabled                                                         = 1
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x01 (1 bytes)
enum class EPhysicsTransformUpdateMode : uint8_t
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform                  = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic                       = 1
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x01 (1 bytes)
enum class EAnimationMode : uint8_t
{
	EAnimationMode__AnimationBlueprint                                               = 0,
	EAnimationMode__AnimationSingleNode                                              = 1,
	EAnimationMode__AnimationCustomMode                                              = 2
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x01 (1 bytes)
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones                              = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones                                     = 1
};

/// Enum /Script/Engine.ECustomBoneAttributeLookup
/// Size: 0x01 (1 bytes)
enum class ECustomBoneAttributeLookup : uint8_t
{
	ECustomBoneAttributeLookup__BoneOnly                                             = 0,
	ECustomBoneAttributeLookup__ImmediateParent                                      = 1,
	ECustomBoneAttributeLookup__ParentHierarchy                                      = 2
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x01 (1 bytes)
enum class EAnimCurveType : uint8_t
{
	EAnimCurveType__AttributeCurve                                                   = 0,
	EAnimCurveType__MaterialCurve                                                    = 1,
	EAnimCurveType__MorphTargetCurve                                                 = 2,
	EAnimCurveType__MaxAnimCurveType                                                 = 3
};

/// Enum /Script/Engine.ESkeletalMeshSkinningImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
	ESkeletalMeshSkinningImportVersions__Before_Versionning                          = 0,
	ESkeletalMeshSkinningImportVersions__SkeletalMeshBuildRefactor                   = 1,
	ESkeletalMeshSkinningImportVersions__VersionPlusOne                              = 2,
	ESkeletalMeshSkinningImportVersions__LatestVersion                               = 1
};

/// Enum /Script/Engine.ESkeletalMeshGeoImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
	ESkeletalMeshGeoImportVersions__Before_Versionning                               = 0,
	ESkeletalMeshGeoImportVersions__SkeletalMeshBuildRefactor                        = 1,
	ESkeletalMeshGeoImportVersions__VersionPlusOne                                   = 2,
	ESkeletalMeshGeoImportVersions__LatestVersion                                    = 1
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x01 (1 bytes)
enum class EBoneFilterActionOption : uint8_t
{
	EBoneFilterActionOption__Remove                                                  = 0,
	EBoneFilterActionOption__Keep                                                    = 1,
	EBoneFilterActionOption__Invalid                                                 = 2
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off                                                                         = 0,
	SMOI_Lowest                                                                      = 1,
	SMOI_Low                                                                         = 2,
	SMOI_Normal                                                                      = 3,
	SMOI_High                                                                        = 4,
	SMOI_Highest                                                                     = 5
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles                                                              = 0,
	SMOT_MaxDeviation                                                                = 1,
	SMOT_TriangleOrDeviation                                                         = 2
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles                                                              = 0,
	SMTC_NumOfVerts                                                                  = 1,
	SMTC_TriangleOrVert                                                              = 2,
	SMTC_AbsNumOfTriangles                                                           = 3,
	SMTC_AbsNumOfVerts                                                               = 4,
	SMTC_AbsTriangleOrVert                                                           = 5
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x01 (1 bytes)
enum class EBoneTranslationRetargetingMode : uint8_t
{
	EBoneTranslationRetargetingMode__Animation                                       = 0,
	EBoneTranslationRetargetingMode__Skeleton                                        = 1,
	EBoneTranslationRetargetingMode__AnimationScaled                                 = 2,
	EBoneTranslationRetargetingMode__AnimationRelative                               = 3,
	EBoneTranslationRetargetingMode__OrientAndScale                                  = 4
};

/// Enum /Script/Engine.EVertexOffsetUsageType
/// Size: 0x01 (1 bytes)
enum class EVertexOffsetUsageType : uint8_t
{
	EVertexOffsetUsageType__None                                                     = 0,
	EVertexOffsetUsageType__PreSkinningOffset                                        = 1,
	EVertexOffsetUsageType__PostSkinningOffset                                       = 2
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x01 (1 bytes)
enum class EBoneSpaces : uint8_t
{
	EBoneSpaces__WorldSpace                                                          = 0,
	EBoneSpaces__ComponentSpace                                                      = 1
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x01 (1 bytes)
enum class EVisibilityBasedAnimTickOption : uint8_t
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones                    = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose                                   = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered                  = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered                         = 3
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x01 (1 bytes)
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                                                         = 0,
	PBO_Term                                                                         = 1
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x01 (1 bytes)
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                                               = 0,
	BVS_Visible                                                                      = 1,
	BVS_ExplicitlyHidden                                                             = 2
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x01 (1 bytes)
enum class ESkyAtmosphereTransformMode : uint8_t
{
	ESkyAtmosphereTransformMode__PlanetTopAtAbsoluteWorldOrigin                      = 0,
	ESkyAtmosphereTransformMode__PlanetTopAtComponentTransform                       = 1,
	ESkyAtmosphereTransformMode__PlanetCenterAtComponentTransform                    = 2
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x01 (1 bytes)
enum class ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene                                                                = 0,
	SLS_SpecifiedCubemap                                                             = 1
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x01 (1 bytes)
enum class EPriorityAttenuationMethod : uint8_t
{
	EPriorityAttenuationMethod__Linear                                               = 0,
	EPriorityAttenuationMethod__CustomCurve                                          = 1,
	EPriorityAttenuationMethod__Manual                                               = 2
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x01 (1 bytes)
enum class ESubmixSendMethod : uint8_t
{
	ESubmixSendMethod__Linear                                                        = 0,
	ESubmixSendMethod__CustomCurve                                                   = 1,
	ESubmixSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x01 (1 bytes)
enum class EReverbSendMethod : uint8_t
{
	EReverbSendMethod__Linear                                                        = 0,
	EReverbSendMethod__CustomCurve                                                   = 1,
	EReverbSendMethod__Manual                                                        = 2
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x01 (1 bytes)
enum class EAirAbsorptionMethod : uint8_t
{
	EAirAbsorptionMethod__Linear                                                     = 0,
	EAirAbsorptionMethod__CustomCurve                                                = 1
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x01 (1 bytes)
enum class ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default                                                           = 0,
	SPATIALIZATION_HRTF                                                              = 1
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x01 (1 bytes)
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                                                             = 0,
	SOUNDDISTANCE_InfiniteXYPlane                                                    = 1,
	SOUNDDISTANCE_InfiniteXZPlane                                                    = 2,
	SOUNDDISTANCE_InfiniteYZPlane                                                    = 3
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x01 (1 bytes)
enum class EVirtualizationMode : uint8_t
{
	EVirtualizationMode__Disabled                                                    = 0,
	EVirtualizationMode__PlayWhenSilent                                              = 1,
	EVirtualizationMode__Restart                                                     = 2
};

/// Enum /Script/Engine.EConcurrencyVolumeScaleMode
/// Size: 0x04 (4 bytes)
enum class EConcurrencyVolumeScaleMode : uint32_t
{
	EConcurrencyVolumeScaleMode__Default                                             = 0,
	EConcurrencyVolumeScaleMode__Distance                                            = 1,
	EConcurrencyVolumeScaleMode__Priority                                            = 2
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x01 (1 bytes)
enum class EMaxConcurrentResolutionRule : uint8_t
{
	EMaxConcurrentResolutionRule__PreventNew                                         = 0,
	EMaxConcurrentResolutionRule__StopOldest                                         = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew                         = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest                             = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority                                 = 4,
	EMaxConcurrentResolutionRule__StopQuietest                                       = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew                   = 6,
	EMaxConcurrentResolutionRule__Count                                              = 7
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x01 (1 bytes)
enum class ESoundGroup : uint8_t
{
	SOUNDGROUP_Default                                                               = 0,
	SOUNDGROUP_Effects                                                               = 1,
	SOUNDGROUP_UI                                                                    = 2,
	SOUNDGROUP_Music                                                                 = 3,
	SOUNDGROUP_Voice                                                                 = 4,
	SOUNDGROUP_GameSoundGroup1                                                       = 5,
	SOUNDGROUP_GameSoundGroup2                                                       = 6,
	SOUNDGROUP_GameSoundGroup3                                                       = 7,
	SOUNDGROUP_GameSoundGroup4                                                       = 8,
	SOUNDGROUP_GameSoundGroup5                                                       = 9,
	SOUNDGROUP_GameSoundGroup6                                                       = 10,
	SOUNDGROUP_GameSoundGroup7                                                       = 11,
	SOUNDGROUP_GameSoundGroup8                                                       = 12,
	SOUNDGROUP_GameSoundGroup9                                                       = 13,
	SOUNDGROUP_GameSoundGroup10                                                      = 14,
	SOUNDGROUP_GameSoundGroup11                                                      = 15,
	SOUNDGROUP_GameSoundGroup12                                                      = 16,
	SOUNDGROUP_GameSoundGroup13                                                      = 17,
	SOUNDGROUP_GameSoundGroup14                                                      = 18,
	SOUNDGROUP_GameSoundGroup15                                                      = 19,
	SOUNDGROUP_GameSoundGroup16                                                      = 20,
	SOUNDGROUP_GameSoundGroup17                                                      = 21,
	SOUNDGROUP_GameSoundGroup18                                                      = 22,
	SOUNDGROUP_GameSoundGroup19                                                      = 23,
	SOUNDGROUP_GameSoundGroup20                                                      = 24
};

/// Enum /Script/Engine.EModulationRouting
/// Size: 0x01 (1 bytes)
enum class EModulationRouting : uint8_t
{
	EModulationRouting__Disable                                                      = 0,
	EModulationRouting__Inherit                                                      = 1,
	EModulationRouting__Override                                                     = 2
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x01 (1 bytes)
enum class ModulationParamMode : uint8_t
{
	MPM_Normal                                                                       = 0,
	MPM_Abs                                                                          = 1,
	MPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x01 (1 bytes)
enum class ESourceBusChannels : uint8_t
{
	ESourceBusChannels__Mono                                                         = 0,
	ESourceBusChannels__Stereo                                                       = 1
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESourceBusSendLevelControlMethod : uint8_t
{
	ESourceBusSendLevelControlMethod__Linear                                         = 0,
	ESourceBusSendLevelControlMethod__CustomCurve                                    = 1,
	ESourceBusSendLevelControlMethod__Manual                                         = 2
};

/// Enum /Script/Engine.EGainParamMode
/// Size: 0x01 (1 bytes)
enum class EGainParamMode : uint8_t
{
	EGainParamMode__Linear                                                           = 0,
	EGainParamMode__Decibels                                                         = 1
};

/// Enum /Script/Engine.EAudioSpectrumType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumType : uint8_t
{
	EAudioSpectrumType__MagnitudeSpectrum                                            = 0,
	EAudioSpectrumType__PowerSpectrum                                                = 1,
	EAudioSpectrumType__Decibel                                                      = 2
};

/// Enum /Script/Engine.EFFTWindowType
/// Size: 0x01 (1 bytes)
enum class EFFTWindowType : uint8_t
{
	EFFTWindowType__None                                                             = 0,
	EFFTWindowType__Hamming                                                          = 1,
	EFFTWindowType__Hann                                                             = 2,
	EFFTWindowType__Blackman                                                         = 3
};

/// Enum /Script/Engine.EFFTPeakInterpolationMethod
/// Size: 0x01 (1 bytes)
enum class EFFTPeakInterpolationMethod : uint8_t
{
	EFFTPeakInterpolationMethod__NearestNeighbor                                     = 0,
	EFFTPeakInterpolationMethod__Linear                                              = 1,
	EFFTPeakInterpolationMethod__Quadratic                                           = 2,
	EFFTPeakInterpolationMethod__ConstantQ                                           = 3
};

/// Enum /Script/Engine.EFFTSize
/// Size: 0x01 (1 bytes)
enum class EFFTSize : uint8_t
{
	EFFTSize__DefaultSize                                                            = 0,
	EFFTSize__Min                                                                    = 1,
	EFFTSize__Small                                                                  = 2,
	EFFTSize__Medium                                                                 = 3,
	EFFTSize__Large                                                                  = 4,
	EFFTSize__VeryLarge                                                              = 5,
	EFFTSize__Max                                                                    = 6
};

/// Enum /Script/Engine.ESubmixSendStage
/// Size: 0x01 (1 bytes)
enum class ESubmixSendStage : uint8_t
{
	ESubmixSendStage__PostDistanceAttenuation                                        = 0,
	ESubmixSendStage__PreDistanceAttenuation                                         = 1
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESendLevelControlMethod : uint8_t
{
	ESendLevelControlMethod__Linear                                                  = 0,
	ESendLevelControlMethod__CustomCurve                                             = 1,
	ESendLevelControlMethod__Manual                                                  = 2
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x01 (1 bytes)
enum class EAudioRecordingExportType : uint8_t
{
	EAudioRecordingExportType__SoundWave                                             = 0,
	EAudioRecordingExportType__WavFile                                               = 1
};

/// Enum /Script/Engine.EAudioSpectrumBandPresetType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumBandPresetType : uint8_t
{
	EAudioSpectrumBandPresetType__KickDrum                                           = 0,
	EAudioSpectrumBandPresetType__SnareDrum                                          = 1,
	EAudioSpectrumBandPresetType__Voice                                              = 2,
	EAudioSpectrumBandPresetType__Cymbals                                            = 3
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x01 (1 bytes)
enum class ESoundWaveFFTSize : uint8_t
{
	ESoundWaveFFTSize__VerySmall                                                     = 0,
	ESoundWaveFFTSize__Small                                                         = 1,
	ESoundWaveFFTSize__Medium                                                        = 2,
	ESoundWaveFFTSize__Large                                                         = 3,
	ESoundWaveFFTSize__VeryLarge                                                     = 4
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x01 (1 bytes)
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                                                      = 0,
	DTYPE_Invalid                                                                    = 1,
	DTYPE_Preview                                                                    = 2,
	DTYPE_Native                                                                     = 3,
	DTYPE_RealTime                                                                   = 4,
	DTYPE_Procedural                                                                 = 5,
	DTYPE_Xenon                                                                      = 6,
	DTYPE_Streaming                                                                  = 7
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x01 (1 bytes)
enum class ESoundWaveLoadingBehavior : uint8_t
{
	ESoundWaveLoadingBehavior__Inherited                                             = 0,
	ESoundWaveLoadingBehavior__RetainOnLoad                                          = 1,
	ESoundWaveLoadingBehavior__PrimeOnLoad                                           = 2,
	ESoundWaveLoadingBehavior__LoadOnDemand                                          = 3,
	ESoundWaveLoadingBehavior__ForceInline                                           = 4,
	ESoundWaveLoadingBehavior__Uninitialized                                         = 255
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x01 (1 bytes)
enum class ESplineCoordinateSpace : uint8_t
{
	ESplineCoordinateSpace__Local                                                    = 0,
	ESplineCoordinateSpace__World                                                    = 1
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x01 (1 bytes)
enum class ESplinePointType : uint8_t
{
	ESplinePointType__Linear                                                         = 0,
	ESplinePointType__Curve                                                          = 1,
	ESplinePointType__Constant                                                       = 2,
	ESplinePointType__CurveClamped                                                   = 3,
	ESplinePointType__CurveCustomTangent                                             = 4
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x01 (1 bytes)
enum class ESplineMeshAxis : uint8_t
{
	ESplineMeshAxis__X                                                               = 0,
	ESplineMeshAxis__Y                                                               = 1,
	ESplineMeshAxis__Z                                                               = 2
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x01 (1 bytes)
enum class EOptimizationType : uint8_t
{
	OT_NumOfTriangles                                                                = 0,
	OT_MaxDeviation                                                                  = 1
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x01 (1 bytes)
enum class EImportanceLevel : uint8_t
{
	IL_Off                                                                           = 0,
	IL_Lowest                                                                        = 1,
	IL_Low                                                                           = 2,
	IL_Normal                                                                        = 3,
	IL_High                                                                          = 4,
	IL_Highest                                                                       = 5,
	TEMP_BROKEN2                                                                     = 6
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x01 (1 bytes)
enum class ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups                                                       = 0,
	NM_RecalculateNormals                                                            = 1,
	NM_RecalculateNormalsSmooth                                                      = 2,
	NM_RecalculateNormalsHard                                                        = 3,
	TEMP_BROKEN                                                                      = 4
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x01 (1 bytes)
enum class EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer                                                                   = 0,
	SLSH_CylinderLayer                                                               = 1,
	SLSH_CubemapLayer                                                                = 2,
	SLSH_EquirectLayer                                                               = 3
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x01 (1 bytes)
enum class EStereoLayerType : uint8_t
{
	SLT_WorldLocked                                                                  = 0,
	SLT_TrackerLocked                                                                = 1,
	SLT_FaceLocked                                                                   = 2
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x01 (1 bytes)
enum class EOpacitySourceMode : uint8_t
{
	OSM_Alpha                                                                        = 0,
	OSM_ColorBrightness                                                              = 1,
	OSM_RedChannel                                                                   = 2,
	OSM_GreenChannel                                                                 = 3,
	OSM_BlueChannel                                                                  = 4
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x01 (1 bytes)
enum class ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices                                                                 = 0,
	BVC_EightVertices                                                                = 1
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x01 (1 bytes)
enum class EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop                                                                    = 0,
	EVRTA_TextCenter                                                                 = 1,
	EVRTA_TextBottom                                                                 = 2,
	EVRTA_QuadTop                                                                    = 3
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x01 (1 bytes)
enum class EHorizTextAligment : uint8_t
{
	EHTA_Left                                                                        = 0,
	EHTA_Center                                                                      = 1,
	EHTA_Right                                                                       = 2
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x01 (1 bytes)
enum class ETextureCompressionQuality : uint8_t
{
	TCQ_Default                                                                      = 0,
	TCQ_Lowest                                                                       = 1,
	TCQ_Low                                                                          = 2,
	TCQ_Medium                                                                       = 3,
	TCQ_High                                                                         = 4,
	TCQ_Highest                                                                      = 5
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x01 (1 bytes)
enum class ETextureSourceFormat : uint8_t
{
	TSF_Invalid                                                                      = 0,
	TSF_G8                                                                           = 1,
	TSF_BGRA8                                                                        = 2,
	TSF_BGRE8                                                                        = 3,
	TSF_RGBA16                                                                       = 4,
	TSF_RGBA16F                                                                      = 5,
	TSF_RGBA8                                                                        = 6,
	TSF_RGBE8                                                                        = 7,
	TSF_G16                                                                          = 8
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x01 (1 bytes)
enum class ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed                                                                = 0,
	TSAT_PNGCompressed                                                               = 1,
	TSAT_DDSFile                                                                     = 2
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x01 (1 bytes)
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                                                 = 0,
	TMC_AllMips                                                                      = 1,
	TMC_AllMipsBiased                                                                = 2
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x01 (1 bytes)
enum class ECompositeTextureMode : uint8_t
{
	CTM_Disabled                                                                     = 0,
	CTM_NormalRoughnessToRed                                                         = 1,
	CTM_NormalRoughnessToGreen                                                       = 2,
	CTM_NormalRoughnessToBlue                                                        = 3,
	CTM_NormalRoughnessToAlpha                                                       = 4
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x01 (1 bytes)
enum class TextureAddress : uint8_t
{
	TA_Wrap                                                                          = 0,
	TA_Clamp                                                                         = 1,
	TA_Mirror                                                                        = 2
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x01 (1 bytes)
enum class TextureFilter : uint8_t
{
	TF_Nearest                                                                       = 0,
	TF_Bilinear                                                                      = 1,
	TF_Trilinear                                                                     = 2,
	TF_Default                                                                       = 3
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x01 (1 bytes)
enum class TextureCompressionSettings : uint8_t
{
	TC_Default                                                                       = 0,
	TC_Normalmap                                                                     = 1,
	TC_Masks                                                                         = 2,
	TC_Grayscale                                                                     = 3,
	TC_Displacementmap                                                               = 4,
	TC_VectorDisplacementmap                                                         = 5,
	TC_HDR                                                                           = 6,
	TC_EditorIcon                                                                    = 7,
	TC_Alpha                                                                         = 8,
	TC_DistanceFieldFont                                                             = 9,
	TC_HDR_Compressed                                                                = 10,
	TC_BC7                                                                           = 11,
	TC_HalfFloat                                                                     = 12,
	TC_EncodedReflectionCapture                                                      = 13
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x01 (1 bytes)
enum class ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default                                                                     = 0,
	TLCA_None                                                                        = 1,
	TLCA_Lowest                                                                      = 2,
	TLCA_Low                                                                         = 3,
	TLCA_Medium                                                                      = 4,
	TLCA_High                                                                        = 5,
	TLCA_Highest                                                                     = 6
};

/// Enum /Script/Engine.ETextureDownscaleOptions
/// Size: 0x01 (1 bytes)
enum class ETextureDownscaleOptions : uint8_t
{
	ETextureDownscaleOptions__Default                                                = 0,
	ETextureDownscaleOptions__Unfiltered                                             = 1,
	ETextureDownscaleOptions__SimpleAverage                                          = 2,
	ETextureDownscaleOptions__Sharpen0                                               = 3,
	ETextureDownscaleOptions__Sharpen1                                               = 4,
	ETextureDownscaleOptions__Sharpen2                                               = 5,
	ETextureDownscaleOptions__Sharpen3                                               = 6,
	ETextureDownscaleOptions__Sharpen4                                               = 7,
	ETextureDownscaleOptions__Sharpen5                                               = 8,
	ETextureDownscaleOptions__Sharpen6                                               = 9,
	ETextureDownscaleOptions__Sharpen7                                               = 10,
	ETextureDownscaleOptions__Sharpen8                                               = 11,
	ETextureDownscaleOptions__Sharpen9                                               = 12,
	ETextureDownscaleOptions__Sharpen10                                              = 13
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x01 (1 bytes)
enum class ETextureMipLoadOptions : uint8_t
{
	ETextureMipLoadOptions__Default                                                  = 0,
	ETextureMipLoadOptions__AllMips                                                  = 1,
	ETextureMipLoadOptions__OnlyFirstMip                                             = 2
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x01 (1 bytes)
enum class ETextureSamplerFilter : uint8_t
{
	ETextureSamplerFilter__Point                                                     = 0,
	ETextureSamplerFilter__Bilinear                                                  = 1,
	ETextureSamplerFilter__Trilinear                                                 = 2,
	ETextureSamplerFilter__AnisotropicPoint                                          = 3,
	ETextureSamplerFilter__AnisotropicLinear                                         = 4
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x01 (1 bytes)
enum class ETexturePowerOfTwoSetting : uint8_t
{
	ETexturePowerOfTwoSetting__None                                                  = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo                                       = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo                                 = 2
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x01 (1 bytes)
enum class TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                                                            = 0,
	TMGS_SimpleAverage                                                               = 1,
	TMGS_Sharpen0                                                                    = 2,
	TMGS_Sharpen1                                                                    = 3,
	TMGS_Sharpen2                                                                    = 4,
	TMGS_Sharpen3                                                                    = 5,
	TMGS_Sharpen4                                                                    = 6,
	TMGS_Sharpen5                                                                    = 7,
	TMGS_Sharpen6                                                                    = 8,
	TMGS_Sharpen7                                                                    = 9,
	TMGS_Sharpen8                                                                    = 10,
	TMGS_Sharpen9                                                                    = 11,
	TMGS_Sharpen10                                                                   = 12,
	TMGS_NoMipmaps                                                                   = 13,
	TMGS_LeaveExistingMips                                                           = 14,
	TMGS_Blur1                                                                       = 15,
	TMGS_Blur2                                                                       = 16,
	TMGS_Blur3                                                                       = 17,
	TMGS_Blur4                                                                       = 18,
	TMGS_Blur5                                                                       = 19,
	TMGS_Unfiltered                                                                  = 20
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x01 (1 bytes)
enum class TextureGroup : uint8_t
{
	TEXTUREGROUP_World                                                               = 0,
	TEXTUREGROUP_WorldNormalMap                                                      = 1,
	TEXTUREGROUP_WorldSpecular                                                       = 2,
	TEXTUREGROUP_Character                                                           = 3,
	TEXTUREGROUP_CharacterNormalMap                                                  = 4,
	TEXTUREGROUP_CharacterSpecular                                                   = 5,
	TEXTUREGROUP_Weapon                                                              = 6,
	TEXTUREGROUP_WeaponNormalMap                                                     = 7,
	TEXTUREGROUP_WeaponSpecular                                                      = 8,
	TEXTUREGROUP_Vehicle                                                             = 9,
	TEXTUREGROUP_VehicleNormalMap                                                    = 10,
	TEXTUREGROUP_VehicleSpecular                                                     = 11,
	TEXTUREGROUP_Cinematic                                                           = 12,
	TEXTUREGROUP_Effects                                                             = 13,
	TEXTUREGROUP_EffectsNotFiltered                                                  = 14,
	TEXTUREGROUP_Skybox                                                              = 15,
	TEXTUREGROUP_UI                                                                  = 16,
	TEXTUREGROUP_Lightmap                                                            = 17,
	TEXTUREGROUP_RenderTarget                                                        = 18,
	TEXTUREGROUP_MobileFlattened                                                     = 19,
	TEXTUREGROUP_ProcBuilding_Face                                                   = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                                               = 21,
	TEXTUREGROUP_Shadowmap                                                           = 22,
	TEXTUREGROUP_ColorLookupTable                                                    = 23,
	TEXTUREGROUP_Terrain_Heightmap                                                   = 24,
	TEXTUREGROUP_Terrain_Weightmap                                                   = 25,
	TEXTUREGROUP_Bokeh                                                               = 26,
	TEXTUREGROUP_IESLightProfile                                                     = 27,
	TEXTUREGROUP_Pixels2D                                                            = 28,
	TEXTUREGROUP_HierarchicalLOD                                                     = 29,
	TEXTUREGROUP_Impostor                                                            = 30,
	TEXTUREGROUP_ImpostorNormalDepth                                                 = 31,
	TEXTUREGROUP_8BitData                                                            = 32,
	TEXTUREGROUP_16BitData                                                           = 33,
	TEXTUREGROUP_Project01                                                           = 34,
	TEXTUREGROUP_Project02                                                           = 35,
	TEXTUREGROUP_Project03                                                           = 36,
	TEXTUREGROUP_Project04                                                           = 37,
	TEXTUREGROUP_Project05                                                           = 38,
	TEXTUREGROUP_Project06                                                           = 39,
	TEXTUREGROUP_Project07                                                           = 40,
	TEXTUREGROUP_Project08                                                           = 41,
	TEXTUREGROUP_Project09                                                           = 42,
	TEXTUREGROUP_Project10                                                           = 43,
	TEXTUREGROUP_Project11                                                           = 44,
	TEXTUREGROUP_Project12                                                           = 45,
	TEXTUREGROUP_Project13                                                           = 46,
	TEXTUREGROUP_Project14                                                           = 47,
	TEXTUREGROUP_Project15                                                           = 48
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x01 (1 bytes)
enum class ETextureRenderTargetFormat : uint8_t
{
	RTF_R8                                                                           = 0,
	RTF_RG8                                                                          = 1,
	RTF_RGBA8                                                                        = 2,
	RTF_RGBA8_SRGB                                                                   = 3,
	RTF_R16f                                                                         = 4,
	RTF_RG16f                                                                        = 5,
	RTF_RGBA16f                                                                      = 6,
	RTF_R32f                                                                         = 7,
	RTF_RG32f                                                                        = 8,
	RTF_RGBA32f                                                                      = 9,
	RTF_RGB10A2                                                                      = 10
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ETimecodeProviderSynchronizationState : uint8_t
{
	ETimecodeProviderSynchronizationState__Closed                                    = 0,
	ETimecodeProviderSynchronizationState__Error                                     = 1,
	ETimecodeProviderSynchronizationState__Synchronized                              = 2,
	ETimecodeProviderSynchronizationState__Synchronizing                             = 3
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x01 (1 bytes)
enum class ETimelineDirection : uint8_t
{
	ETimelineDirection__Forward                                                      = 0,
	ETimelineDirection__Backward                                                     = 1
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x01 (1 bytes)
enum class ETimelineLengthMode : uint8_t
{
	TL_TimelineLength                                                                = 0,
	TL_LastKeyFrame                                                                  = 1
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x01 (1 bytes)
enum class ETimeStretchCurveMapping : uint8_t
{
	ETimeStretchCurveMapping__T_Original                                             = 0,
	ETimeStretchCurveMapping__T_TargetMin                                            = 1,
	ETimeStretchCurveMapping__T_TargetMax                                            = 2
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x01 (1 bytes)
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                                                            = 0,
	TID_TweetUIComplete                                                              = 1,
	TID_RequestComplete                                                              = 2
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x01 (1 bytes)
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                                                          = 0,
	TRM_Post                                                                         = 1,
	TRM_Delete                                                                       = 2
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x01 (1 bytes)
enum class EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate                                                                    = 0,
	UDSS_Dirty                                                                       = 1,
	UDSS_Error                                                                       = 2,
	UDSS_Duplicate                                                                   = 3
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x01 (1 bytes)
enum class EUIScalingRule : uint8_t
{
	EUIScalingRule__ShortestSide                                                     = 0,
	EUIScalingRule__LongestSide                                                      = 1,
	EUIScalingRule__Horizontal                                                       = 2,
	EUIScalingRule__Vertical                                                         = 3,
	EUIScalingRule__ScaleToFit                                                       = 4,
	EUIScalingRule__Custom                                                           = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x01 (1 bytes)
enum class ERenderFocusRule : uint8_t
{
	ERenderFocusRule__Always                                                         = 0,
	ERenderFocusRule__NonPointer                                                     = 1,
	ERenderFocusRule__NavigationOnly                                                 = 2,
	ERenderFocusRule__Never                                                          = 3
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x01 (1 bytes)
enum class EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude                                                                     = 0,
	VFCO_Revolve                                                                     = 1
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x01 (1 bytes)
enum class EWindSourceType : uint8_t
{
	EWindSourceType__Directional                                                     = 0,
	EWindSourceType__Point                                                           = 1
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x01 (1 bytes)
enum class EPSCPoolMethod : uint8_t
{
	EPSCPoolMethod__None                                                             = 0,
	EPSCPoolMethod__AutoRelease                                                      = 1,
	EPSCPoolMethod__ManualRelease                                                    = 2,
	EPSCPoolMethod__ManualRelease_OnComplete                                         = 3,
	EPSCPoolMethod__FreeInPool                                                       = 4
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x01 (1 bytes)
enum class EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap                                                           = 0,
	VLM_SparseVolumeLightingSamples                                                  = 1
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x01 (1 bytes)
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                                              = 0,
	VIS_ModeratelyAggressive                                                         = 1,
	VIS_MostAggressive                                                               = 2,
	VIS_Max                                                                          = 3
};

/// Enum /Script/UMG.ESlateAccessibleBehavior
/// Size: 0x01 (1 bytes)
enum class ESlateAccessibleBehavior : uint8_t
{
	ESlateAccessibleBehavior__NotAccessible                                          = 0,
	ESlateAccessibleBehavior__Auto                                                   = 1,
	ESlateAccessibleBehavior__Summary                                                = 2,
	ESlateAccessibleBehavior__Custom                                                 = 3,
	ESlateAccessibleBehavior__ToolTip                                                = 4
};

/// Enum /Script/UMG.ESlateVisibility
/// Size: 0x01 (1 bytes)
enum class ESlateVisibility : uint8_t
{
	ESlateVisibility__Visible                                                        = 0,
	ESlateVisibility__Collapsed                                                      = 1,
	ESlateVisibility__Hidden                                                         = 2,
	ESlateVisibility__HitTestInvisible                                               = 3,
	ESlateVisibility__SelfHitTestInvisible                                           = 4
};

/// Enum /Script/UMG.EVirtualKeyboardType
/// Size: 0x01 (1 bytes)
enum class EVirtualKeyboardType : uint8_t
{
	EVirtualKeyboardType__Default                                                    = 0,
	EVirtualKeyboardType__Number                                                     = 1,
	EVirtualKeyboardType__Web                                                        = 2,
	EVirtualKeyboardType__Email                                                      = 3,
	EVirtualKeyboardType__Password                                                   = 4,
	EVirtualKeyboardType__AlphaNumeric                                               = 5
};

/// Enum /Script/UMG.EWidgetAnimationEvent
/// Size: 0x01 (1 bytes)
enum class EWidgetAnimationEvent : uint8_t
{
	EWidgetAnimationEvent__Started                                                   = 0,
	EWidgetAnimationEvent__Finished                                                  = 1
};

/// Enum /Script/UMG.EUMGSequencePlayMode
/// Size: 0x01 (1 bytes)
enum class EUMGSequencePlayMode : uint8_t
{
	EUMGSequencePlayMode__Forward                                                    = 0,
	EUMGSequencePlayMode__Reverse                                                    = 1,
	EUMGSequencePlayMode__PingPong                                                   = 2
};

/// Enum /Script/UMG.EWidgetTickFrequency
/// Size: 0x01 (1 bytes)
enum class EWidgetTickFrequency : uint8_t
{
	EWidgetTickFrequency__Never                                                      = 0,
	EWidgetTickFrequency__Auto                                                       = 1
};

/// Enum /Script/UMG.EDragPivot
/// Size: 0x01 (1 bytes)
enum class EDragPivot : uint8_t
{
	EDragPivot__MouseDown                                                            = 0,
	EDragPivot__TopLeft                                                              = 1,
	EDragPivot__TopCenter                                                            = 2,
	EDragPivot__TopRight                                                             = 3,
	EDragPivot__CenterLeft                                                           = 4,
	EDragPivot__CenterCenter                                                         = 5,
	EDragPivot__CenterRight                                                          = 6,
	EDragPivot__BottomLeft                                                           = 7,
	EDragPivot__BottomCenter                                                         = 8,
	EDragPivot__BottomRight                                                          = 9
};

/// Enum /Script/UMG.EDynamicBoxType
/// Size: 0x01 (1 bytes)
enum class EDynamicBoxType : uint8_t
{
	EDynamicBoxType__Horizontal                                                      = 0,
	EDynamicBoxType__Vertical                                                        = 1,
	EDynamicBoxType__Wrap                                                            = 2,
	EDynamicBoxType__VerticalWrap                                                    = 3,
	EDynamicBoxType__Radial                                                          = 4,
	EDynamicBoxType__Overlay                                                         = 5
};

/// Enum /Script/UMG.ESlateSizeRule
/// Size: 0x01 (1 bytes)
enum class ESlateSizeRule : uint8_t
{
	ESlateSizeRule__Automatic                                                        = 0,
	ESlateSizeRule__Fill                                                             = 1
};

/// Enum /Script/UMG.EWidgetDesignFlags
/// Size: 0x01 (1 bytes)
enum class EWidgetDesignFlags : uint8_t
{
	EWidgetDesignFlags__None                                                         = 0,
	EWidgetDesignFlags__Designing                                                    = 1,
	EWidgetDesignFlags__ShowOutline                                                  = 2,
	EWidgetDesignFlags__ExecutePreConstruct                                          = 4
};

/// Enum /Script/UMG.EBindingKind
/// Size: 0x01 (1 bytes)
enum class EBindingKind : uint8_t
{
	EBindingKind__Function                                                           = 0,
	EBindingKind__Property                                                           = 1
};

/// Enum /Script/UMG.ETickMode
/// Size: 0x01 (1 bytes)
enum class ETickMode : uint8_t
{
	ETickMode__Disabled                                                              = 0,
	ETickMode__Enabled                                                               = 1,
	ETickMode__Automatic                                                             = 2
};

/// Enum /Script/UMG.EWindowVisibility
/// Size: 0x01 (1 bytes)
enum class EWindowVisibility : uint8_t
{
	EWindowVisibility__Visible                                                       = 0,
	EWindowVisibility__SelfHitTestInvisible                                          = 1
};

/// Enum /Script/UMG.EWidgetGeometryMode
/// Size: 0x01 (1 bytes)
enum class EWidgetGeometryMode : uint8_t
{
	EWidgetGeometryMode__Plane                                                       = 0,
	EWidgetGeometryMode__Cylinder                                                    = 1
};

/// Enum /Script/UMG.EWidgetBlendMode
/// Size: 0x01 (1 bytes)
enum class EWidgetBlendMode : uint8_t
{
	EWidgetBlendMode__Opaque                                                         = 0,
	EWidgetBlendMode__Masked                                                         = 1,
	EWidgetBlendMode__Transparent                                                    = 2
};

/// Enum /Script/UMG.EWidgetTimingPolicy
/// Size: 0x01 (1 bytes)
enum class EWidgetTimingPolicy : uint8_t
{
	EWidgetTimingPolicy__RealTime                                                    = 0,
	EWidgetTimingPolicy__GameTime                                                    = 1
};

/// Enum /Script/UMG.EWidgetSpace
/// Size: 0x01 (1 bytes)
enum class EWidgetSpace : uint8_t
{
	EWidgetSpace__World                                                              = 0,
	EWidgetSpace__Screen                                                             = 1
};

/// Enum /Script/UMG.EWidgetInteractionSource
/// Size: 0x01 (1 bytes)
enum class EWidgetInteractionSource : uint8_t
{
	EWidgetInteractionSource__World                                                  = 0,
	EWidgetInteractionSource__Mouse                                                  = 1,
	EWidgetInteractionSource__CenterScreen                                           = 2,
	EWidgetInteractionSource__Custom                                                 = 3
};

/// Enum /Script/MovieScene.EMovieSceneKeyInterpolation
/// Size: 0x01 (1 bytes)
enum class EMovieSceneKeyInterpolation : uint8_t
{
	EMovieSceneKeyInterpolation__Auto                                                = 0,
	EMovieSceneKeyInterpolation__User                                                = 1,
	EMovieSceneKeyInterpolation__Break                                               = 2,
	EMovieSceneKeyInterpolation__Linear                                              = 3,
	EMovieSceneKeyInterpolation__Constant                                            = 4
};

/// Enum /Script/MovieScene.EMovieSceneBlendType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBlendType : uint8_t
{
	EMovieSceneBlendType__Invalid                                                    = 0,
	EMovieSceneBlendType__Absolute                                                   = 1,
	EMovieSceneBlendType__Additive                                                   = 2,
	EMovieSceneBlendType__Relative                                                   = 4,
	EMovieSceneBlendType__AdditiveFromBase                                           = 8
};

/// Enum /Script/MovieScene.EMovieSceneCompletionMode
/// Size: 0x01 (1 bytes)
enum class EMovieSceneCompletionMode : uint8_t
{
	EMovieSceneCompletionMode__KeepState                                             = 0,
	EMovieSceneCompletionMode__RestoreState                                          = 1,
	EMovieSceneCompletionMode__ProjectDefault                                        = 2
};

/// Enum /Script/MovieScene.EMovieSceneBuiltInEasing
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBuiltInEasing : uint8_t
{
	EMovieSceneBuiltInEasing__Linear                                                 = 0,
	EMovieSceneBuiltInEasing__SinIn                                                  = 1,
	EMovieSceneBuiltInEasing__SinOut                                                 = 2,
	EMovieSceneBuiltInEasing__SinInOut                                               = 3,
	EMovieSceneBuiltInEasing__QuadIn                                                 = 4,
	EMovieSceneBuiltInEasing__QuadOut                                                = 5,
	EMovieSceneBuiltInEasing__QuadInOut                                              = 6,
	EMovieSceneBuiltInEasing__CubicIn                                                = 7,
	EMovieSceneBuiltInEasing__CubicOut                                               = 8,
	EMovieSceneBuiltInEasing__CubicInOut                                             = 9,
	EMovieSceneBuiltInEasing__QuartIn                                                = 10,
	EMovieSceneBuiltInEasing__QuartOut                                               = 11,
	EMovieSceneBuiltInEasing__QuartInOut                                             = 12,
	EMovieSceneBuiltInEasing__QuintIn                                                = 13,
	EMovieSceneBuiltInEasing__QuintOut                                               = 14,
	EMovieSceneBuiltInEasing__QuintInOut                                             = 15,
	EMovieSceneBuiltInEasing__ExpoIn                                                 = 16,
	EMovieSceneBuiltInEasing__ExpoOut                                                = 17,
	EMovieSceneBuiltInEasing__ExpoInOut                                              = 18,
	EMovieSceneBuiltInEasing__CircIn                                                 = 19,
	EMovieSceneBuiltInEasing__CircOut                                                = 20,
	EMovieSceneBuiltInEasing__CircInOut                                              = 21
};

/// Enum /Script/MovieScene.EEvaluationMethod
/// Size: 0x01 (1 bytes)
enum class EEvaluationMethod : uint8_t
{
	EEvaluationMethod__Static                                                        = 0,
	EEvaluationMethod__Swept                                                         = 1
};

/// Enum /Script/MovieScene.EMovieSceneServerClientMask
/// Size: 0x01 (1 bytes)
enum class EMovieSceneServerClientMask : uint8_t
{
	EMovieSceneServerClientMask__None                                                = 0,
	EMovieSceneServerClientMask__Server                                              = 1,
	EMovieSceneServerClientMask__Client                                              = 2,
	EMovieSceneServerClientMask__All                                                 = 3
};

/// Enum /Script/MovieScene.EMovieSceneSequenceFlags
/// Size: 0x01 (1 bytes)
enum class EMovieSceneSequenceFlags : uint8_t
{
	EMovieSceneSequenceFlags__None                                                   = 0,
	EMovieSceneSequenceFlags__Volatile                                               = 1,
	EMovieSceneSequenceFlags__BlockingEvaluation                                     = 2,
	EMovieSceneSequenceFlags__InheritedFlags                                         = 1
};

/// Enum /Script/MovieScene.EUpdateClockSource
/// Size: 0x01 (1 bytes)
enum class EUpdateClockSource : uint8_t
{
	EUpdateClockSource__Tick                                                         = 0,
	EUpdateClockSource__Platform                                                     = 1,
	EUpdateClockSource__Audio                                                        = 2,
	EUpdateClockSource__RelativeTimecode                                             = 3,
	EUpdateClockSource__Timecode                                                     = 4,
	EUpdateClockSource__Custom                                                       = 5
};

/// Enum /Script/MovieScene.EMovieSceneEvaluationType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneEvaluationType : uint8_t
{
	EMovieSceneEvaluationType__FrameLocked                                           = 0,
	EMovieSceneEvaluationType__WithSubFrames                                         = 1
};

/// Enum /Script/MovieScene.EMovieScenePlayerStatus
/// Size: 0x01 (1 bytes)
enum class EMovieScenePlayerStatus : uint8_t
{
	EMovieScenePlayerStatus__Stopped                                                 = 0,
	EMovieScenePlayerStatus__Playing                                                 = 1,
	EMovieScenePlayerStatus__Scrubbing                                               = 2,
	EMovieScenePlayerStatus__Jumping                                                 = 3,
	EMovieScenePlayerStatus__Stepping                                                = 4,
	EMovieScenePlayerStatus__Paused                                                  = 5
};

/// Enum /Script/MovieScene.EMovieSceneObjectBindingSpace
/// Size: 0x01 (1 bytes)
enum class EMovieSceneObjectBindingSpace : uint8_t
{
	EMovieSceneObjectBindingSpace__Local                                             = 0,
	EMovieSceneObjectBindingSpace__Root                                              = 1,
	EMovieSceneObjectBindingSpace__Unused                                            = 2
};

/// Enum /Script/MovieScene.ESectionEvaluationFlags
/// Size: 0x01 (1 bytes)
enum class ESectionEvaluationFlags : uint8_t
{
	ESectionEvaluationFlags__None                                                    = 0,
	ESectionEvaluationFlags__PreRoll                                                 = 1,
	ESectionEvaluationFlags__PostRoll                                                = 2
};

/// Enum /Script/MovieScene.EMovieScenePositionType
/// Size: 0x01 (1 bytes)
enum class EMovieScenePositionType : uint8_t
{
	EMovieScenePositionType__Frame                                                   = 0,
	EMovieScenePositionType__Time                                                    = 1,
	EMovieScenePositionType__MarkedFrame                                             = 2
};

/// Enum /Script/MovieScene.EUpdatePositionMethod
/// Size: 0x01 (1 bytes)
enum class EUpdatePositionMethod : uint8_t
{
	EUpdatePositionMethod__Play                                                      = 0,
	EUpdatePositionMethod__Jump                                                      = 1,
	EUpdatePositionMethod__Scrub                                                     = 2
};

/// Enum /Script/MovieScene.ESpawnOwnership
/// Size: 0x01 (1 bytes)
enum class ESpawnOwnership : uint8_t
{
	ESpawnOwnership__InnerSequence                                                   = 0,
	ESpawnOwnership__MasterSequence                                                  = 1,
	ESpawnOwnership__External                                                        = 2
};

/// Enum /Script/MovieSceneTracks.MovieScene3DPathSection_Axis
/// Size: 0x01 (1 bytes)
enum class MovieScene3DPathSection_Axis : uint8_t
{
	MovieScene3DPathSection_Axis__X                                                  = 0,
	MovieScene3DPathSection_Axis__Y                                                  = 1,
	MovieScene3DPathSection_Axis__Z                                                  = 2,
	MovieScene3DPathSection_Axis__NEG_X                                              = 3,
	MovieScene3DPathSection_Axis__NEG_Y                                              = 4,
	MovieScene3DPathSection_Axis__NEG_Z                                              = 5
};

/// Enum /Script/MovieSceneTracks.EFireEventsAtPosition
/// Size: 0x01 (1 bytes)
enum class EFireEventsAtPosition : uint8_t
{
	EFireEventsAtPosition__AtStartOfEvaluation                                       = 0,
	EFireEventsAtPosition__AtEndOfEvaluation                                         = 1,
	EFireEventsAtPosition__AfterSpawn                                                = 2
};

/// Enum /Script/MovieSceneTracks.ELevelVisibility
/// Size: 0x01 (1 bytes)
enum class ELevelVisibility : uint8_t
{
	ELevelVisibility__Visible                                                        = 0,
	ELevelVisibility__Hidden                                                         = 1
};

/// Enum /Script/MovieSceneTracks.EParticleKey
/// Size: 0x01 (1 bytes)
enum class EParticleKey : uint8_t
{
	EParticleKey__Activate                                                           = 0,
	EParticleKey__Deactivate                                                         = 1,
	EParticleKey__Trigger                                                            = 2
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTickFunction
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                  // 0x0008   (0x0001)  
	TEnumAsByte<ETickingGroup>                         EndTickGroup;                                               // 0x0009   (0x0001)  
	bool                                               bTickEvenWhenPaused : 1;                                    // 0x000A:0 (0x0001)  
	bool                                               bCanEverTick : 1;                                           // 0x000A:1 (0x0001)  
	bool                                               bStartWithTickEnabled : 1;                                  // 0x000A:2 (0x0001)  
	bool                                               bAllowTickOnDedicatedServer : 1;                            // 0x000A:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x000B   (0x0001)  MISSED
	float                                              TickInterval;                                               // 0x000C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FActorComponentTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSimpleMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FName                                              MemberName;                                                 // 0x0008   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x0088 (136 bytes) (0x000028 - 0x0000B0) align 8 pad: 0x0000
class UActorComponent : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	FActorComponentTickFunction                        PrimaryComponentTick;                                       // 0x0030   (0x0030)  
	TArray<FName>                                      ComponentTags;                                              // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0080   (0x0004)  MISSED
	int32_t                                            UCSSerializationIndex;                                      // 0x0084   (0x0004)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0088:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0088:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0088:2 (0x0001)  MISSED
	bool                                               bNetAddressable : 1;                                        // 0x0088:3 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0088:4 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0088:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0088:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0088:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0089:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0089:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0089:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0089:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0089:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x0089:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x0089:6 (0x0001)  MISSED
	bool                                               bAutoActivate : 1;                                          // 0x0089:7 (0x0001)  
	bool                                               bIsActive : 1;                                              // 0x008A:0 (0x0001)  
	bool                                               bEditableWhenInherited : 1;                                 // 0x008A:1 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x008A:2 (0x0001)  MISSED
	bool                                               bCanEverAffectNavigation : 1;                               // 0x008A:3 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x008A:4 (0x0001)  MISSED
	bool                                               bIsEditorOnly : 1;                                          // 0x008A:5 (0x0001)  
	unsigned char                                      UnknownData17_5[0x1];                                       // 0x008B   (0x0001)  MISSED
	EComponentCreationMethod                           CreationMethod;                                             // 0x008C   (0x0001)  
	SDK_UNDEFINED(1,7) /* FMulticastSparseDelegate */  __um(OnComponentActivated);                                 // 0x008D   (0x0001)  
	SDK_UNDEFINED(1,8) /* FMulticastSparseDelegate */  __um(OnComponentDeactivated);                               // 0x008E   (0x0001)  
	unsigned char                                      UnknownData18_6[0x1];                                       // 0x008F   (0x0001)  MISSED
	TArray<FSimpleMemberReference>                     UCSModifiedProperties;                                      // 0x0090   (0x0010)  
	unsigned char                                      UnknownData19_7[0x10];                                      // 0x00A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	// void ToggleActive();                                                                                                     // [0x181c120] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x3ff77a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x3ff7820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	// void SetIsReplicated(bool ShouldReplicate);                                                                              // [0x3ff7710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickIntervalAndCooldown
	// void SetComponentTickIntervalAndCooldown(float TickInterval);                                                            // [0x3ff7690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	// void SetComponentTickInterval(float TickInterval);                                                                       // [0x2103550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	// void SetComponentTickEnabled(bool bEnabled);                                                                             // [0x3ff7600] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	// void SetAutoActivate(bool bNewAutoActivate);                                                                             // [0x3ff4030] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.SetActive
	// void SetActive(bool bNewActive, bool bReset);                                                                            // [0x3ff7520] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x3ff7490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x3ff7400] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                   // [0x181c2c0] Native|Public        
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	// void K2_DestroyComponent(class UObject* Object);                                                                         // [0x3ff72f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	// bool IsComponentTickEnabled();                                                                                           // [0x3ff72c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	// bool IsBeingDestroyed();                                                                                                 // [0x3ff7290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.IsActive
	// bool IsActive();                                                                                                         // [0x3ff7260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetOwner
	// class AActor* GetOwner();                                                                                                // [0x3ff7240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	// float GetComponentTickInterval();                                                                                        // [0x3ff7210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.Deactivate
	// void Deactivate();                                                                                                       // [0x31d11a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	// bool ComponentHasTag(FName Tag);                                                                                         // [0x3ff6fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x3ff6e70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x3ff6de0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ActorComponent.Activate
	// void Activate(bool bReset);                                                                                              // [0x37286f0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0150 (336 bytes) (0x0000B0 - 0x000200) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class USceneComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B0   (0x0008)  MISSED
	SDK_UNDEFINED(8,9) /* TWeakObjectPtr<APhysicsVolume*> */ __um(PhysicsVolume);                                  // 0x00B8   (0x0008)  
	class USceneComponent*                             AttachParent;                                               // 0x00C0   (0x0008)  
	FName                                              AttachSocketName;                                           // 0x00C8   (0x0008)  
	TArray<class USceneComponent*>                     AttachChildren;                                             // 0x00D0   (0x0010)  
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                     // 0x00E0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x2C];                                      // 0x00F0   (0x002C)  MISSED
	FVector                                            RelativeLocation;                                           // 0x011C   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0128   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0134   (0x000C)  
	FVector                                            ComponentVelocity;                                          // 0x0140   (0x000C)  
	bool                                               bComponentToWorldUpdated : 1;                               // 0x014C:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x014C:1 (0x0001)  MISSED
	bool                                               bAbsoluteLocation : 1;                                      // 0x014C:2 (0x0001)  
	bool                                               bAbsoluteRotation : 1;                                      // 0x014C:3 (0x0001)  
	bool                                               bAbsoluteScale : 1;                                         // 0x014C:4 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x014C:5 (0x0001)  
	bool                                               bShouldBeAttached : 1;                                      // 0x014C:6 (0x0001)  
	bool                                               bShouldSnapLocationWhenAttached : 1;                        // 0x014C:7 (0x0001)  
	bool                                               bShouldSnapRotationWhenAttached : 1;                        // 0x014D:0 (0x0001)  
	bool                                               bShouldUpdatePhysicsVolume : 1;                             // 0x014D:1 (0x0001)  
	bool                                               bHiddenInGame : 1;                                          // 0x014D:2 (0x0001)  
	bool                                               bBoundsChangeTriggersStreamingDataRebuild : 1;              // 0x014D:3 (0x0001)  
	bool                                               bUseAttachParentBound : 1;                                  // 0x014D:4 (0x0001)  
	unsigned char                                      UnknownData03_5[0x1];                                       // 0x014E   (0x0001)  MISSED
	TEnumAsByte<EComponentMobility>                    Mobility;                                                   // 0x014F   (0x0001)  
	TEnumAsByte<EDetailMode>                           DetailMode;                                                 // 0x0150   (0x0001)  
	SDK_UNDEFINED(1,10) /* FMulticastSparseDelegate */ __um(PhysicsVolumeChangedDelegate);                         // 0x0151   (0x0001)  
	unsigned char                                      UnknownData04_7[0xA6];                                      // 0x0152   (0x00A6)  MISSED


	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	// void ToggleVisibility(bool bPropagateToChildren);                                                                        // [0x4135ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SnapTo
	// bool SnapTo(class USceneComponent* InParent, FName InSocketName);                                                        // [0x41359e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	// void SetWorldScale3D(FVector NewScale);                                                                                  // [0x41357f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetVisibility
	// void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);                                                      // [0x4135720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	// void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);                                                    // [0x4135690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	// void SetRelativeScale3D(FVector NewScale3D);                                                                             // [0x4135600] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> NewMobility);                                                           // [0x4135580] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	// void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);                                                         // [0x41354b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	// void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);                          // [0x41352f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	// void ResetRelativeTransform();                                                                                           // [0x41352d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	// void OnRep_Visibility(bool OldValue);                                                                                    // [0x4134fb0] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	// void OnRep_Transform();                                                                                                  // [0x4134f90] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	// void OnRep_AttachSocketName();                                                                                           // [0x4134f70] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	// void OnRep_AttachParent();                                                                                               // [0x4134f70] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	// void OnRep_AttachChildren();                                                                                             // [0x4134f50] Final|Native|Private 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	// void K2_SetWorldTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x4134d40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	// void K2_SetWorldRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                 // [0x4134b90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	// void K2_SetWorldLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x4134990] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	// void K2_SetWorldLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x41347e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	// void K2_SetRelativeTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);         // [0x41345d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	// void K2_SetRelativeRotation(FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);              // [0x4134420] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	// void K2_SetRelativeLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x4134220] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	// void K2_SetRelativeLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x4134070] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	// FTransform K2_GetComponentToWorld();                                                                                     // [0x4134010] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	// FVector K2_GetComponentScale();                                                                                          // [0x4133fd0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	// FRotator K2_GetComponentRotation();                                                                                      // [0x4133f90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	// FVector K2_GetComponentLocation();                                                                                       // [0x4133f50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	// void K2_DetachFromComponent(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule, bool bCallModify); // [0x4133df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	// bool K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x4133c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	// bool K2_AttachTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies); // [0x4133ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransformKeepScale
	// void K2_AddWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x41338b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	// void K2_AddWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x41336a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	// void K2_AddWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x41334f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	// void K2_AddWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x4133340] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	// void K2_AddRelativeRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x4133190] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	// void K2_AddRelativeLocation(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x4132fe0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	// void K2_AddLocalTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x4132dd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	// void K2_AddLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);               // [0x4132c20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	// void K2_AddLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x4132a70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SceneComponent.IsVisible
	// bool IsVisible();                                                                                                        // [0x211ceb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	// bool IsSimulatingPhysics(FName BoneName);                                                                                // [0x41329d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	// bool IsAnySimulatingPhysics();                                                                                           // [0x41329a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetUpVector
	// FVector GetUpVector();                                                                                                   // [0x4132800] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	// FTransform GetSocketTransform(FName InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);                  // [0x41326f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	// FRotator GetSocketRotation(FName InSocketName);                                                                          // [0x4132640] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	// FQuat GetSocketQuaternion(FName InSocketName);                                                                           // [0x4132590] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	// FVector GetSocketLocation(FName InSocketName);                                                                           // [0x41324e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	// bool GetShouldUpdatePhysicsVolume();                                                                                     // [0x41324b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRightVector
	// FVector GetRightVector();                                                                                                // [0x4132470] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	// FTransform GetRelativeTransform();                                                                                       // [0x4132410] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x41323e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	// void GetParentComponents(TArray<USceneComponent*>& Parents);                                                             // [0x4132330] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	// int32_t GetNumChildrenComponents();                                                                                      // [0x1781040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	// FVector GetForwardVector();                                                                                              // [0x410d490] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	// FVector GetComponentVelocity();                                                                                          // [0x41322f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	// void GetChildrenComponents(bool bIncludeAllDescendants, TArray<USceneComponent*>& Children);                             // [0x41321f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	// class USceneComponent* GetChildComponent(int32_t ChildIndex);                                                            // [0x4132150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	// FName GetAttachSocketName();                                                                                             // [0x388e8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	// class USceneComponent* GetAttachParent();                                                                                // [0x4132130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	// TArray<FName> GetAllSocketNames();                                                                                       // [0x41320b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	// bool DoesSocketExist(FName InSocketName);                                                                                // [0x4132010] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	// void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);                                                    // [0x4131f30] Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKeyHandleMap
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FIndexedCurve
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FKeyHandleMap                                      KeyHandlesToIndices;                                        // 0x0008   (0x0060)  
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0008 (8 bytes) (0x000068 - 0x000070) align 8 pad: 0x0000
struct FRealCurve : FIndexedCurve
{ 
	float                                              DefaultValue;                                               // 0x0068   (0x0004)  
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x006C   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x006D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FRichCurveKey
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0000   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0001   (0x0001)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              Time;                                                       // 0x0004   (0x0004)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
	float                                              ArriveTangent;                                              // 0x000C   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0010   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0014   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0010 (16 bytes) (0x000070 - 0x000080) align 8 pad: 0x0000
struct FRichCurve : FRealCurve
{ 
	TArray<FRichCurveKey>                              Keys;                                                       // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FRuntimeFloatCurve
{ 
	FRichCurve                                         EditorCurveData;                                            // 0x0000   (0x0080)  
	class UCurveFloat*                                 ExternalCurve;                                              // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FBaseAttenuationSettings
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	EAttenuationDistanceModel                          DistanceAlgorithm;                                          // 0x0008   (0x0001)  
	TEnumAsByte<EAttenuationShape>                     AttenuationShape;                                           // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              dBAttenuationAtMax;                                         // 0x000C   (0x0004)  
	ENaturalSoundFalloffMode                           FalloffMode;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            AttenuationShapeExtents;                                    // 0x0014   (0x000C)  
	float                                              ConeOffset;                                                 // 0x0020   (0x0004)  
	float                                              FalloffDistance;                                            // 0x0024   (0x0004)  
	FRuntimeFloatCurve                                 CustomAttenuationCurve;                                     // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FAttenuationSubmixSendSettings
{ 
	class USoundSubmixBase*                            Submix;                                                     // 0x0000   (0x0008)  
	ESubmixSendMethod                                  SubmixSendMethod;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SubmixSendLevelMin;                                         // 0x000C   (0x0004)  
	float                                              SubmixSendLevelMax;                                         // 0x0010   (0x0004)  
	float                                              SubmixSendDistanceMin;                                      // 0x0014   (0x0004)  
	float                                              SubmixSendDistanceMax;                                      // 0x0018   (0x0004)  
	float                                              ManualSubmixSendLevel;                                      // 0x001C   (0x0004)  
	FRuntimeFloatCurve                                 CustomSubmixSendCurve;                                      // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSoundAttenuationPluginSettings
{ 
	TArray<class USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray;                      // 0x0000   (0x0010)  
	TArray<class UOcclusionPluginSourceSettingsBase*>  OcclusionPluginSettingsArray;                               // 0x0010   (0x0010)  
	TArray<class UReverbPluginSourceSettingsBase*>     ReverbPluginSettingsArray;                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x02F0 (752 bytes) (0x0000B0 - 0x0003A0) align 8 pad: 0x0000
struct FSoundAttenuationSettings : FBaseAttenuationSettings
{ 
	bool                                               bAttenuate : 1;                                             // 0x00B0:0 (0x0001)  
	bool                                               bSpatialize : 1;                                            // 0x00B0:1 (0x0001)  
	bool                                               bAttenuateWithLPF : 1;                                      // 0x00B0:2 (0x0001)  
	bool                                               bEnableListenerFocus : 1;                                   // 0x00B0:3 (0x0001)  
	bool                                               bEnableFocusInterpolation : 1;                              // 0x00B0:4 (0x0001)  
	bool                                               bEnableOcclusion : 1;                                       // 0x00B0:5 (0x0001)  
	bool                                               bUseComplexCollisionForOcclusion : 1;                       // 0x00B0:6 (0x0001)  
	bool                                               bEnableReverbSend : 1;                                      // 0x00B0:7 (0x0001)  
	bool                                               bEnablePriorityAttenuation : 1;                             // 0x00B1:0 (0x0001)  
	bool                                               bApplyNormalizationToStereoSounds : 1;                      // 0x00B1:1 (0x0001)  
	bool                                               bEnableLogFrequencyScaling : 1;                             // 0x00B1:2 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x00B1:3 (0x0001)  
	TEnumAsByte<ESoundSpatializationAlgorithm>         SpatializationAlgorithm;                                    // 0x00B2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x00B3   (0x0001)  MISSED
	float                                              BinauralRadius;                                             // 0x00B4   (0x0004)  
	EAirAbsorptionMethod                               AbsorptionMethod;                                           // 0x00B8   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     OcclusionTraceChannel;                                      // 0x00B9   (0x0001)  
	EReverbSendMethod                                  ReverbSendMethod;                                           // 0x00BA   (0x0001)  
	EPriorityAttenuationMethod                         PriorityAttenuationMethod;                                  // 0x00BB   (0x0001)  
	float                                              OmniRadius;                                                 // 0x00BC   (0x0004)  
	float                                              StereoSpread;                                               // 0x00C0   (0x0004)  
	float                                              LPFRadiusMin;                                               // 0x00C4   (0x0004)  
	float                                              LPFRadiusMax;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomLowpassAirAbsorptionCurve;                            // 0x00D0   (0x0088)  
	FRuntimeFloatCurve                                 CustomHighpassAirAbsorptionCurve;                           // 0x0158   (0x0088)  
	float                                              LPFFrequencyAtMin;                                          // 0x01E0   (0x0004)  
	float                                              LPFFrequencyAtMax;                                          // 0x01E4   (0x0004)  
	float                                              HPFFrequencyAtMin;                                          // 0x01E8   (0x0004)  
	float                                              HPFFrequencyAtMax;                                          // 0x01EC   (0x0004)  
	float                                              FocusAzimuth;                                               // 0x01F0   (0x0004)  
	float                                              NonFocusAzimuth;                                            // 0x01F4   (0x0004)  
	float                                              FocusDistanceScale;                                         // 0x01F8   (0x0004)  
	float                                              NonFocusDistanceScale;                                      // 0x01FC   (0x0004)  
	float                                              FocusPriorityScale;                                         // 0x0200   (0x0004)  
	float                                              NonFocusPriorityScale;                                      // 0x0204   (0x0004)  
	float                                              FocusVolumeAttenuation;                                     // 0x0208   (0x0004)  
	float                                              NonFocusVolumeAttenuation;                                  // 0x020C   (0x0004)  
	float                                              FocusAttackInterpSpeed;                                     // 0x0210   (0x0004)  
	float                                              FocusReleaseInterpSpeed;                                    // 0x0214   (0x0004)  
	float                                              OcclusionLowPassFilterFrequency;                            // 0x0218   (0x0004)  
	float                                              OcclusionVolumeAttenuation;                                 // 0x021C   (0x0004)  
	float                                              OcclusionInterpolationTime;                                 // 0x0220   (0x0004)  
	float                                              ReverbWetLevelMin;                                          // 0x0224   (0x0004)  
	float                                              ReverbWetLevelMax;                                          // 0x0228   (0x0004)  
	float                                              ReverbDistanceMin;                                          // 0x022C   (0x0004)  
	float                                              ReverbDistanceMax;                                          // 0x0230   (0x0004)  
	float                                              ManualReverbSendLevel;                                      // 0x0234   (0x0004)  
	FRuntimeFloatCurve                                 CustomReverbSendCurve;                                      // 0x0238   (0x0088)  
	TArray<FAttenuationSubmixSendSettings>             SubmixSendSettings;                                         // 0x02C0   (0x0010)  
	float                                              PriorityAttenuationMin;                                     // 0x02D0   (0x0004)  
	float                                              PriorityAttenuationMax;                                     // 0x02D4   (0x0004)  
	float                                              PriorityAttenuationDistanceMin;                             // 0x02D8   (0x0004)  
	float                                              PriorityAttenuationDistanceMax;                             // 0x02DC   (0x0004)  
	float                                              ManualPriorityAttenuation;                                  // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomPriorityAttenuationCurve;                             // 0x02E8   (0x0088)  
	FSoundAttenuationPluginSettings                    PluginSettings;                                             // 0x0370   (0x0030)  
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FSoundSubmixSendInfo
{ 
	ESendLevelControlMethod                            SendLevelControlMethod;                                     // 0x0000   (0x0001)  
	ESubmixSendStage                                   SendStage;                                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0008   (0x0008)  
	float                                              SendLevel;                                                  // 0x0010   (0x0004)  
	float                                              MinSendLevel;                                               // 0x0014   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0018   (0x0004)  
	float                                              MinSendDistance;                                            // 0x001C   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FSoundSourceBusSendInfo
{ 
	ESourceBusSendLevelControlMethod                   SourceBusSendLevelControlMethod;                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundSourceBus*                             SoundSourceBus;                                             // 0x0008   (0x0008)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0010   (0x0008)  
	float                                              SendLevel;                                                  // 0x0018   (0x0004)  
	float                                              MinSendLevel;                                               // 0x001C   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0020   (0x0004)  
	float                                              MinSendDistance;                                            // 0x0024   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0030   (0x0088)  
};

/// Class /Script/AudioMixer.SynthComponent
/// Size: 0x04C8 (1224 bytes) (0x0001F8 - 0x0006C0) align 16 pad: 0x0000
class USynthComponent : public USceneComponent
{ 
public:
	bool                                               bAutoDestroy : 1;                                           // 0x01F8:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x01F8:1 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x01F8:2 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x01F8:3 (0x0001)  
	unsigned char                                      UnknownData00_3[0x3];                                       // 0x01F9   (0x0003)  MISSED
	bool                                               bEnableBusSends : 1;                                        // 0x01FC:0 (0x0001)  
	bool                                               bEnableBaseSubmix : 1;                                      // 0x01FC:1 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x01FC:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x01FD   (0x0003)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0200   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0208   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x05A8   (0x0008)  
	SDK_UNDEFINED(80,11) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                      // 0x05B0   (0x0050)  
	class USoundClass*                                 SoundClass;                                                 // 0x0600   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0608   (0x0008)  
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0610   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0618   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0628   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x0638   (0x0010)  
	bool                                               bIsUISound : 1;                                             // 0x0648:0 (0x0001)  
	bool                                               bIsPreviewSound : 1;                                        // 0x0648:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0649   (0x0003)  MISSED
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x064C   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0650   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0654   (0x0004)  MISSED
	SDK_UNDEFINED(16,12) /* FMulticastInlineDelegate */ __um(OnAudioEnvelopeValue);                                // 0x0658   (0x0010)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x0668   (0x0020)  MISSED
	class USynthSound*                                 Synth;                                                      // 0x0688   (0x0008)  
	class UAudioComponent*                             AudioComponent;                                             // 0x0690   (0x0008)  
	unsigned char                                      UnknownData05_7[0x28];                                      // 0x0698   (0x0028)  MISSED


	/// Functions
	// Function /Script/AudioMixer.SynthComponent.Stop
	// void Stop();                                                                                                             // [0x37b2750] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.Start
	// void Start();                                                                                                            // [0x37b21b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float VolumeMultiplier);                                                                        // [0x37b2130] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetSubmixSend
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x37b1c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetOutputToBusOnly
	// void SetOutputToBusOnly(bool bInOutputToBusOnly);                                                                        // [0x37b1530] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x37b12b0] Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x37b1220] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SynthComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x37afbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/AudioMixer.AudioGenerator
/// Size: 0x0080 (128 bytes) (0x000028 - 0x0000A8) align 8 pad: 0x0000
class UAudioGenerator : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x80];                                      // 0x0028   (0x0080)  MISSED
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintFunctionLibrary : public UObject
{ 
public:
};

/// Class /Script/AudioMixer.AudioMixerBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
	// float TrimAudioCache(float InMegabytesToFree);                                                                           // [0x37b2f20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
	// class USoundWave* StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundSubmix* SubmixToRecord, class USoundWave* ExistingSoundWaveToOverwrite); // [0x37b2a10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
	// void StopAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                         // [0x37b2830] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
	// void StopAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToStopAnalyzing);                  // [0x37b2770] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration, class USoundSubmix* SubmixToRecord); // [0x37b2640] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
	// void StartAudioBus(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                        // [0x37b23f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
	// void StartAnalyzingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToAnalyze, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x37b21d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetSubmixEffectChainOverride
	// void SetSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, TArray<USoundEffectSubmixPreset*> SubmixEffectPresetChain, float FadeTimeSec); // [0x37b1af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
	// void SetBypassSourceEffectChainEntry(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex, bool bBypassed); // [0x37b1040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
	// void ResumeRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                        // [0x37b0d00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ReplaceSubmixEffect
	// void ReplaceSubmixEffect(class UObject* WorldContextObject, class USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x37b0830] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
	// void ReplaceSoundEffectSubmix(class UObject* WorldContextObject, class USoundSubmix* InSoundSubmix, int32_t SubmixChainIndex, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x37b0830] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
	// void RemoveSubmixEffectPresetAtIndex(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, int32_t SubmixChainIndex); // [0x37b0730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
	// void RemoveSubmixEffectPreset(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x37b0630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectAtIndex
	// void RemoveSubmixEffectAtIndex(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, int32_t SubmixChainIndex); // [0x37b0730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffect
	// void RemoveSubmixEffect(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x37b0630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
	// void RemoveSourceEffectFromPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, int32_t EntryIndex); // [0x37b0530] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
	// void RemoveMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);    // [0x37b0470] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
	// void PrimeSoundForPlayback(class USoundWave* SoundWave, FDelegateProperty OnLoadCompletion);                             // [0x37b03a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
	// void PrimeSoundCueForPlayback(class USoundCue* SoundCue);                                                                // [0x37b0320] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
	// void PauseRecordingOutput(class UObject* WorldContextObject, class USoundSubmix* SubmixToPause);                         // [0x37b0260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakePresetSpectralAnalysisBandSettings(EAudioSpectrumBandPresetType InBandPresetType, int32_t InNumBands, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x37affe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeMusicalSpectralAnalysisBandSettings(int32_t InNumSemitones, EMusicalNoteName InStartingMusicalNote, int32_t InStartingOctave, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x37afdf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
	// TArray<FSoundSubmixSpectralAnalysisBandSettings> MakeFullSpectrumSpectralAnalysisBandSettings(int32_t InNumBands, float InMinimumFrequency, float InMaximumFrequency, int32_t InAttackTimeMsec, int32_t InReleaseTimeMsec); // [0x37afc00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
	// bool IsAudioBusActive(class UObject* WorldContextObject, class UAudioBus* AudioBus);                                     // [0x37af990] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
	// void GetPhaseForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Phases, class USoundSubmix* SubmixToAnalyze); // [0x37af440] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
	// int32_t GetNumberOfEntriesInSourceEffectChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain); // [0x37af370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
	// void GetMagnitudeForFrequencies(class UObject* WorldContextObject, TArray<float>& Frequencies, TArray<float>& Magnitudes, class USoundSubmix* SubmixToAnalyze); // [0x37af140] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
	// void ClearSubmixEffects(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix);                             // [0x37ae350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffectChainOverride
	// void ClearSubmixEffectChainOverride(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, float FadeTimeSec); // [0x37ae240] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
	// void ClearMasterSubmixEffects(class UObject* WorldContextObject);                                                        // [0x37ae1c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
	// int32_t AddSubmixEffect(class UObject* WorldContextObject, class USoundSubmix* SoundSubmix, class USoundEffectSubmixPreset* SubmixEffectPreset); // [0x37ae0c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
	// void AddSourceEffectToPresetChain(class UObject* WorldContextObject, class USoundEffectSourcePresetChain* PresetChain, FSourceEffectChainEntry Entry); // [0x37adfb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
	// void AddMasterSubmixEffect(class UObject* WorldContextObject, class USoundEffectSubmixPreset* SubmixEffectPreset);       // [0x37adef0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/AudioMixer.QuartzClockHandle
/// Size: 0x0168 (360 bytes) (0x000028 - 0x000190) align 8 pad: 0x0000
class UQuartzClockHandle : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x140];                                     // 0x0028   (0x0140)  MISSED
	class UQuartzSubsystem*                            QuartzSubsystem;                                            // 0x0168   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0170   (0x0018)  MISSED
	class UWorld*                                      WorldPtr;                                                   // 0x0188   (0x0008)  


	/// Functions
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromTimeDivision
	// void UnsubscribeFromTimeDivision(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, class UQuartzClockHandle*& ClockHandle); // [0x37b3090] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromAllTimeDivisions
	// void UnsubscribeFromAllTimeDivisions(class UObject* WorldContextObject, class UQuartzClockHandle*& ClockHandle);         // [0x37b2fb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToQuantizationEvent
	// void SubscribeToQuantizationEvent(class UObject* WorldContextObject, EQuartzCommandQuantization InQuantizationBoundary, FDelegateProperty& OnQuantizationEvent, class UQuartzClockHandle*& ClockHandle); // [0x37b2d80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToAllQuantizationEvents
	// void SubscribeToAllQuantizationEvents(class UObject* WorldContextObject, FDelegateProperty& OnQuantizationEvent, class UQuartzClockHandle*& ClockHandle); // [0x37b2c40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.StopClock
	// void StopClock(class UObject* WorldContextObject, bool CancelPendingEvents, class UQuartzClockHandle*& ClockHandle);     // [0x37b28f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.StartOtherClock
	// void StartOtherClock(class UObject* WorldContextObject, FName OtherClockName, FQuartzQuantizationBoundary InQuantizationBoundary, FDelegateProperty& InDelegate); // [0x37b24b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.StartClock
	// void StartClock(class UObject* WorldContextObject, class UQuartzClockHandle*& ClockHandle);                              // [0x37b0c20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetTicksPerSecond
	// void SetTicksPerSecond(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, class UQuartzClockHandle*& ClockHandle, float TicksPerSecond); // [0x37b1f40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetThirtySecondNotesPerMinute
	// void SetThirtySecondNotesPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, class UQuartzClockHandle*& ClockHandle, float ThirtySecondsNotesPerMinute); // [0x37b1d50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetSecondsPerTick
	// void SetSecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, class UQuartzClockHandle*& ClockHandle, float SecondsPerTick); // [0x37b15c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetMillisecondsPerTick
	// void SetMillisecondsPerTick(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, class UQuartzClockHandle*& ClockHandle, float MillisecondsPerTick); // [0x37b1340] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.SetBeatsPerMinute
	// void SetBeatsPerMinute(class UObject* WorldContextObject, FQuartzQuantizationBoundary& QuantizationBoundary, FDelegateProperty& Delegate, class UQuartzClockHandle*& ClockHandle, float BeatsPerMinute); // [0x37b0e50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.ResumeClock
	// void ResumeClock(class UObject* WorldContextObject, class UQuartzClockHandle*& ClockHandle);                             // [0x37b0c20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.ResetTransportQuantized
	// void ResetTransportQuantized(class UObject* WorldContextObject, FQuartzQuantizationBoundary InQuantizationBoundary, FDelegateProperty& InDelegate, class UQuartzClockHandle*& ClockHandle); // [0x37b0a80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.ResetTransport
	// void ResetTransport(class UObject* WorldContextObject, FDelegateProperty& InDelegate);                                   // [0x37b0990] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.PauseClock
	// void PauseClock(class UObject* WorldContextObject, class UQuartzClockHandle*& ClockHandle);                              // [0x37b0180] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.IsClockRunning
	// bool IsClockRunning(class UObject* WorldContextObject);                                                                  // [0x37afa60] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.GetTicksPerSecond
	// float GetTicksPerSecond(class UObject* WorldContextObject);                                                              // [0x37af8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetThirtySecondNotesPerMinute
	// float GetThirtySecondNotesPerMinute(class UObject* WorldContextObject);                                                  // [0x37af850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetSecondsPerTick
	// float GetSecondsPerTick(class UObject* WorldContextObject);                                                              // [0x37af7b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetMillisecondsPerTick
	// float GetMillisecondsPerTick(class UObject* WorldContextObject);                                                         // [0x37af2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/AudioMixer.QuartzClockHandle.GetEstimatedRunTime
	// float GetEstimatedRunTime(class UObject* WorldContextObject);                                                            // [0x37aee90] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.GetDurationOfQuantizationTypeInSeconds
	// float GetDurationOfQuantizationTypeInSeconds(class UObject* WorldContextObject, EQuartzCommandQuantization& QuantizationType, float Multiplier); // [0x37aeb10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.GetCurrentTimestamp
	// FQuartzTransportTimeStamp GetCurrentTimestamp(class UObject* WorldContextObject);                                        // [0x37aea70] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzClockHandle.GetBeatsPerMinute
	// float GetBeatsPerMinute(class UObject* WorldContextObject);                                                              // [0x37ae8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000068) align 8 pad: 0x0000
class USoundEffectPreset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0028   (0x0040)  MISSED
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0000 (0 bytes) (0x000068 - 0x000068) align 8 pad: 0x0000
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
public:
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicProcessorFilterSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSubmixEffectDynamicProcessorFilterSettings
{ 
	bool                                               bEnabled : 1;                                               // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Cutoff;                                                     // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicsProcessorSettings
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FSubmixEffectDynamicsProcessorSettings
{ 
	ESubmixEffectDynamicsProcessorType                 DynamicsProcessorType;                                      // 0x0000   (0x0001)  
	ESubmixEffectDynamicsPeakMode                      PeakMode;                                                   // 0x0001   (0x0001)  
	ESubmixEffectDynamicsChannelLinkMode               LinkMode;                                                   // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              InputGainDb;                                                // 0x0004   (0x0004)  
	float                                              ThresholdDb;                                                // 0x0008   (0x0004)  
	float                                              Ratio;                                                      // 0x000C   (0x0004)  
	float                                              KneeBandwidthDb;                                            // 0x0010   (0x0004)  
	float                                              LookAheadMsec;                                              // 0x0014   (0x0004)  
	float                                              AttackTimeMsec;                                             // 0x0018   (0x0004)  
	float                                              ReleaseTimeMsec;                                            // 0x001C   (0x0004)  
	ESubmixEffectDynamicsKeySource                     KeySource;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	class UAudioBus*                                   ExternalAudioBus;                                           // 0x0028   (0x0008)  
	class USoundSubmix*                                ExternalSubmix;                                             // 0x0030   (0x0008)  
	bool                                               bChannelLinked : 1;                                         // 0x0038:0 (0x0001)  
	bool                                               bAnalogMode : 1;                                            // 0x0038:1 (0x0001)  
	bool                                               bBypass : 1;                                                // 0x0038:2 (0x0001)  
	bool                                               bKeyAudition : 1;                                           // 0x0038:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              KeyGainDb;                                                  // 0x003C   (0x0004)  
	float                                              OutputGainDb;                                               // 0x0040   (0x0004)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyHighshelf;                                               // 0x0044   (0x000C)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyLowshelf;                                                // 0x0050   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset
/// Size: 0x00E8 (232 bytes) (0x000068 - 0x000150) align 8 pad: 0x0000
class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x88];                                      // 0x0068   (0x0088)  MISSED
	FSubmixEffectDynamicsProcessorSettings             Settings;                                                   // 0x00F0   (0x0060)  


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
	// void SetSettings(FSubmixEffectDynamicsProcessorSettings& Settings);                                                      // [0x37b17b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
	// void SetExternalSubmix(class USoundSubmix* Submix);                                                                      // [0x37b1190] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetAudioBus
	// void SetAudioBus(class UAudioBus* AudioBus);                                                                             // [0x37b0dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.ResetKey
	// void ResetKey();                                                                                                         // [0x37b0970] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectEQBand
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSubmixEffectEQBand
{ 
	float                                              Frequency;                                                  // 0x0000   (0x0004)  
	float                                              Bandwidth;                                                  // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/AudioMixer.SubmixEffectSubmixEQSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSubmixEffectSubmixEQSettings
{ 
	TArray<FSubmixEffectEQBand>                        EQBands;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/AudioMixer.SubmixEffectSubmixEQPreset
/// Size: 0x0048 (72 bytes) (0x000068 - 0x0000B0) align 8 pad: 0x0000
class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x38];                                      // 0x0068   (0x0038)  MISSED
	FSubmixEffectSubmixEQSettings                      Settings;                                                   // 0x00A0   (0x0010)  


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
	// void SetSettings(FSubmixEffectSubmixEQSettings& InSettings);                                                             // [0x9bd3a0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/AudioMixer.SubmixEffectReverbSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FSubmixEffectReverbSettings
{ 
	bool                                               bBypassEarlyReflections;                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x0004   (0x0004)  
	float                                              GainHF;                                                     // 0x0008   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x000C   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x0014   (0x0004)  
	float                                              DecayTime;                                                  // 0x0018   (0x0004)  
	float                                              Density;                                                    // 0x001C   (0x0004)  
	float                                              Diffusion;                                                  // 0x0020   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x0024   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0028   (0x0004)  
	float                                              LateGain;                                                   // 0x002C   (0x0004)  
	float                                              Gain;                                                       // 0x0030   (0x0004)  
	float                                              WetLevel;                                                   // 0x0034   (0x0004)  
	float                                              DryLevel;                                                   // 0x0038   (0x0004)  
	bool                                               bBypass;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectReverbPreset
/// Size: 0x00A8 (168 bytes) (0x000068 - 0x000110) align 8 pad: 0x0000
class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData00_3[0x68];                                      // 0x0068   (0x0068)  MISSED
	FSubmixEffectReverbSettings                        Settings;                                                   // 0x00D0   (0x0040)  


	/// Functions
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
	// void SetSettingsWithReverbEffect(class UReverbEffect* InReverbEffect, float WetLevel, float DryLevel);                   // [0x37b19e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettings
	// void SetSettings(FSubmixEffectReverbSettings& InSettings);                                                               // [0x37b18d0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class USubsystem : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UWorldSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.TickableWorldSubsystem
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UTickableWorldSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/AudioMixer.QuartzSubsystem
/// Size: 0x0110 (272 bytes) (0x000040 - 0x000150) align 16 pad: 0x0000
class UQuartzSubsystem : public UTickableWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x110];                                     // 0x0040   (0x0110)  MISSED


	/// Functions
	// Function /Script/AudioMixer.QuartzSubsystem.IsQuartzEnabled
	// bool IsQuartzEnabled();                                                                                                  // [0x2066b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.IsClockRunning
	// bool IsClockRunning(class UObject* WorldContextObject, FName ClockName);                                                 // [0x37afb00] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMinLatency
	// float GetRoundTripMinLatency(class UObject* WorldContextObject);                                                         // [0x37af710] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMaxLatency
	// float GetRoundTripMaxLatency(class UObject* WorldContextObject);                                                         // [0x37af670] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripAverageLatency
	// float GetRoundTripAverageLatency(class UObject* WorldContextObject);                                                     // [0x37af5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetHandleForClock
	// class UQuartzClockHandle* GetHandleForClock(class UObject* WorldContextObject, FName ClockName);                         // [0x37af070] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMinLatency
	// float GetGameThreadToAudioRenderThreadMinLatency(class UObject* WorldContextObject);                                     // [0x37aefd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMaxLatency
	// float GetGameThreadToAudioRenderThreadMaxLatency(class UObject* WorldContextObject);                                     // [0x37aefd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadAverageLatency
	// float GetGameThreadToAudioRenderThreadAverageLatency(class UObject* WorldContextObject);                                 // [0x37aef30] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetEstimatedClockRunTime
	// float GetEstimatedClockRunTime(class UObject* WorldContextObject, FName& InClockName);                                   // [0x37aedb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetDurationOfQuantizationTypeInSeconds
	// float GetDurationOfQuantizationTypeInSeconds(class UObject* WorldContextObject, FName ClockName, EQuartzCommandQuantization& QuantizationType, float Multiplier); // [0x37aec30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetCurrentClockTimestamp
	// FQuartzTransportTimeStamp GetCurrentClockTimestamp(class UObject* WorldContextObject, FName& InClockName);               // [0x37ae990] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMinLatency
	// float GetAudioRenderThreadToGameThreadMinLatency();                                                                      // [0x37ae8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMaxLatency
	// float GetAudioRenderThreadToGameThreadMaxLatency();                                                                      // [0x37ae890] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadAverageLatency
	// float GetAudioRenderThreadToGameThreadAverageLatency();                                                                  // [0x37ae860] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.DoesClockExist
	// bool DoesClockExist(class UObject* WorldContextObject, FName ClockName);                                                 // [0x37ae790] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.DeleteClockByName
	// void DeleteClockByName(class UObject* WorldContextObject, FName ClockName);                                              // [0x37ae6c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.DeleteClockByHandle
	// void DeleteClockByHandle(class UObject* WorldContextObject, class UQuartzClockHandle*& InClockHandle);                   // [0x37ae5e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/AudioMixer.QuartzSubsystem.CreateNewClock
	// class UQuartzClockHandle* CreateNewClock(class UObject* WorldContextObject, FName ClockName, FQuartzClockSettings InSettings, bool bOverrideSettingsIfClockExists, bool bUseAudioEngineClockManager); // [0x37ae410] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FSoundConcurrencySettings
{ 
	int32_t                                            MaxCount;                                                   // 0x0000   (0x0004)  
	bool                                               bLimitToOwner : 1;                                          // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	TEnumAsByte<EMaxConcurrentResolutionRule>          ResolutionRule;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              RetriggerTime;                                              // 0x000C   (0x0004)  
	float                                              VolumeScale;                                                // 0x0010   (0x0004)  
	EConcurrencyVolumeScaleMode                        VolumeScaleMode;                                            // 0x0014   (0x0004)  
	float                                              VolumeScaleAttackTime;                                      // 0x0018   (0x0004)  
	bool                                               bVolumeScaleCanRelease : 1;                                 // 0x001C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              VolumeScaleReleaseTime;                                     // 0x0020   (0x0004)  
	float                                              VoiceStealReleaseTime;                                      // 0x0024   (0x0004)  
};

/// Class /Script/Engine.SoundBase
/// Size: 0x0148 (328 bytes) (0x000028 - 0x000170) align 8 pad: 0x0000
class USoundBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class USoundClass*                                 SoundClassObject;                                           // 0x0030   (0x0008)  
	bool                                               bDebug : 1;                                                 // 0x0038:0 (0x0001)  
	bool                                               bOverrideConcurrency : 1;                                   // 0x0038:1 (0x0001)  
	bool                                               bEnableBusSends : 1;                                        // 0x0038:2 (0x0001)  
	bool                                               bEnableBaseSubmix : 1;                                      // 0x0038:3 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x0038:4 (0x0001)  
	bool                                               bHasDelayNode : 1;                                          // 0x0038:5 (0x0001)  
	bool                                               bHasConcatenatorNode : 1;                                   // 0x0038:6 (0x0001)  
	bool                                               bBypassVolumeScaleForPriority : 1;                          // 0x0038:7 (0x0001)  
	EVirtualizationMode                                VirtualizationMode;                                         // 0x0039   (0x0001)  
	unsigned char                                      UnknownData01_6[0x56];                                      // 0x003A   (0x0056)  MISSED
	SDK_UNDEFINED(80,13) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                      // 0x0090   (0x0050)  
	FSoundConcurrencySettings                          ConcurrencyOverrides;                                       // 0x00E0   (0x0028)  
	float                                              Duration;                                                   // 0x0108   (0x0004)  
	float                                              MaxDistance;                                                // 0x010C   (0x0004)  
	float                                              TotalSamples;                                               // 0x0110   (0x0004)  
	float                                              Priority;                                                   // 0x0114   (0x0004)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0118   (0x0008)  
	class USoundSubmixBase*                            SoundSubmixObject;                                          // 0x0120   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0128   (0x0010)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0138   (0x0008)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0140   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x0150   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0160   (0x0010)  
};

/// Struct /Script/Engine.SoundModulationDestinationSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSoundModulationDestinationSettings
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class USoundModulatorBase*                         Modulator;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundModulationDefaultSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FSoundModulationDefaultSettings
{ 
	FSoundModulationDestinationSettings                VolumeModulationDestination;                                // 0x0000   (0x0010)  
	FSoundModulationDestinationSettings                PitchModulationDestination;                                 // 0x0010   (0x0010)  
	FSoundModulationDestinationSettings                HighpassModulationDestination;                              // 0x0020   (0x0010)  
	FSoundModulationDestinationSettings                LowpassModulationDestination;                               // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.SoundModulationDefaultRoutingSettings
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
struct FSoundModulationDefaultRoutingSettings : FSoundModulationDefaultSettings
{ 
	EModulationRouting                                 VolumeRouting;                                              // 0x0040   (0x0001)  
	EModulationRouting                                 PitchRouting;                                               // 0x0041   (0x0001)  
	EModulationRouting                                 HighpassRouting;                                            // 0x0042   (0x0001)  
	EModulationRouting                                 LowpassRouting;                                             // 0x0043   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundWaveSpectralDataEntry
{ 
	float                                              Magnitude;                                                  // 0x0000   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSoundWaveSpectralTimeData
{ 
	TArray<FSoundWaveSpectralDataEntry>                Data;                                                       // 0x0000   (0x0010)  
	float                                              TimeSec;                                                    // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundWaveEnvelopeTimeData
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              TimeSec;                                                    // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSubtitleCue
{ 
	FText                                              Text;                                                       // 0x0000   (0x0018)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundWave
/// Size: 0x0200 (512 bytes) (0x000170 - 0x000370) align 8 pad: 0x0000
class USoundWave : public USoundBase
{ 
public:
	int32_t                                            CompressionQuality;                                         // 0x0170   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x0174   (0x0004)  
	ESoundwaveSampleRateSettings                       SampleRateQuality;                                          // 0x0178   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0179   (0x0001)  MISSED
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x017A   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x017B:0 (0x0001)  
	bool                                               bStreaming : 1;                                             // 0x017B:1 (0x0001)  
	bool                                               bSeekableStreaming : 1;                                     // 0x017B:2 (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x017C   (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x017D:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x017D:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x017D:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x017D:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x017D:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x017D:5 (0x0001)  MISSED
	bool                                               bMature : 1;                                                // 0x017D:6 (0x0001)  
	bool                                               bManualWordWrap : 1;                                        // 0x017D:7 (0x0001)  
	bool                                               bSingleLine : 1;                                            // 0x017E:0 (0x0001)  
	bool                                               bIsAmbisonics : 1;                                          // 0x017E:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x1];                                       // 0x017F   (0x0001)  MISSED
	FSoundModulationDefaultRoutingSettings             ModulationSettings;                                         // 0x0180   (0x0048)  
	TArray<float>                                      FrequenciesToAnalyze;                                       // 0x01C8   (0x0010)  
	TArray<FSoundWaveSpectralTimeData>                 CookedSpectralTimeData;                                     // 0x01D8   (0x0010)  
	TArray<FSoundWaveEnvelopeTimeData>                 CookedEnvelopeTimeData;                                     // 0x01E8   (0x0010)  
	int32_t                                            InitialChunkSize;                                           // 0x01F8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x44];                                      // 0x01FC   (0x0044)  MISSED
	FString                                            SpokenText;                                                 // 0x0240   (0x0010)  
	float                                              SubtitlePriority;                                           // 0x0250   (0x0004)  
	float                                              Volume;                                                     // 0x0254   (0x0004)  
	float                                              Pitch;                                                      // 0x0258   (0x0004)  
	int32_t                                            NumChannels;                                                // 0x025C   (0x0004)  
	int32_t                                            SampleRate;                                                 // 0x0260   (0x0004)  
	unsigned char                                      UnknownData09_6[0xC];                                       // 0x0264   (0x000C)  MISSED
	TArray<FSubtitleCue>                               Subtitles;                                                  // 0x0270   (0x0010)  
	class UCurveTable*                                 Curves;                                                     // 0x0280   (0x0008)  
	class UCurveTable*                                 InternalCurves;                                             // 0x0288   (0x0008)  
	unsigned char                                      UnknownData10_7[0xE0];                                      // 0x0290   (0x00E0)  MISSED
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x0050 (80 bytes) (0x000370 - 0x0003C0) align 16 pad: 0x0000
class USoundWaveProcedural : public USoundWave
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0370   (0x0050)  MISSED
};

/// Class /Script/AudioMixer.SynthSound
/// Size: 0x0020 (32 bytes) (0x0003C0 - 0x0003E0) align 16 pad: 0x0000
class USynthSound : public USoundWaveProcedural
{ 
public:
	class USynthComponent*                             OwningSynthComponent;                                       // 0x03C0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x03C8   (0x0018)  MISSED
};

/// Class /Script/Engine.Player
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UPlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class APlayerController*                           PlayerController;                                           // 0x0030   (0x0008)  
	int32_t                                            CurrentNetSpeed;                                            // 0x0038   (0x0004)  
	int32_t                                            ConfiguredInternetSpeed;                                    // 0x003C   (0x0004)  
	int32_t                                            ConfiguredLanSpeed;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0027 (39 bytes) (0x000001 - 0x000028) align 8 pad: 0x0000
struct FUniqueNetIdRepl : FUniqueNetIdWrapper
{ 
	unsigned char                                      UnknownData00_3[0x17];                                      // 0x0001   (0x0017)  MISSED
	TArray<char>                                       ReplicationBytes;                                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1B60 (7008 bytes) (0x000048 - 0x001BA8) align 8 pad: 0x0000
class UNetConnection : public UPlayer
{ 
public:
	TArray<class UChildConnection*>                    Children;                                                   // 0x0048   (0x0010)  
	class UNetDriver*                                  Driver;                                                     // 0x0058   (0x0008)  
	class UClass*                                      PackageMapClass;                                            // 0x0060   (0x0008)  
	class UPackageMap*                                 PackageMap;                                                 // 0x0068   (0x0008)  
	TArray<class UChannel*>                            OpenChannels;                                               // 0x0070   (0x0010)  
	TArray<class AActor*>                              SentTemporaries;                                            // 0x0080   (0x0010)  
	class AActor*                                      ViewTarget;                                                 // 0x0090   (0x0008)  
	class AActor*                                      OwningActor;                                                // 0x0098   (0x0008)  
	int32_t                                            MaxPacket;                                                  // 0x00A0   (0x0004)  
	bool                                               InternalAck : 1;                                            // 0x00A4:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0xBB];                                      // 0x00A5   (0x00BB)  MISSED
	FUniqueNetIdRepl                                   PlayerId;                                                   // 0x0160   (0x0028)  
	unsigned char                                      UnknownData01_6[0x48];                                      // 0x0188   (0x0048)  MISSED
	double                                             LastReceiveTime;                                            // 0x01D0   (0x0008)  
	unsigned char                                      UnknownData02_6[0x1338];                                    // 0x01D8   (0x1338)  MISSED
	TArray<class UChannel*>                            ChannelsToTick;                                             // 0x1510   (0x0010)  
	unsigned char                                      UnknownData03_7[0x688];                                     // 0x1520   (0x0688)  MISSED
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FChannelDefinition
{ 
	FName                                              ChannelName;                                                // 0x0000   (0x0008)  
	FName                                              ClassName;                                                  // 0x0008   (0x0008)  
	class UClass*                                      ChannelClass;                                               // 0x0010   (0x0008)  
	int32_t                                            StaticChannelIndex;                                         // 0x0018   (0x0004)  
	bool                                               bTickOnCreate;                                              // 0x001C   (0x0001)  
	bool                                               bServerOpen;                                                // 0x001D   (0x0001)  
	bool                                               bClientOpen;                                                // 0x001E   (0x0001)  
	bool                                               bInitialServer;                                             // 0x001F   (0x0001)  
	bool                                               bInitialClient;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0738 (1848 bytes) (0x000028 - 0x000760) align 8 pad: 0x0000
class UNetDriver : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	FString                                            NetConnectionClassName;                                     // 0x0030   (0x0010)  
	FString                                            ReplicationDriverClassName;                                 // 0x0040   (0x0010)  
	int32_t                                            MaxDownloadSize;                                            // 0x0050   (0x0004)  
	bool                                               bClampListenServerTickRate : 1;                             // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            NetServerMaxTickRate;                                       // 0x0058   (0x0004)  
	int32_t                                            MaxNetTickRate;                                             // 0x005C   (0x0004)  
	int32_t                                            MaxInternetClientRate;                                      // 0x0060   (0x0004)  
	int32_t                                            MaxClientRate;                                              // 0x0064   (0x0004)  
	float                                              ServerTravelPause;                                          // 0x0068   (0x0004)  
	float                                              SpawnPrioritySeconds;                                       // 0x006C   (0x0004)  
	float                                              RelevantTimeout;                                            // 0x0070   (0x0004)  
	float                                              KeepAliveTime;                                              // 0x0074   (0x0004)  
	float                                              InitialConnectTimeout;                                      // 0x0078   (0x0004)  
	float                                              ConnectionTimeout;                                          // 0x007C   (0x0004)  
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                      // 0x0080   (0x0004)  
	bool                                               bNoTimeouts;                                                // 0x0084   (0x0001)  
	bool                                               bNeverApplyNetworkEmulationSettings;                        // 0x0085   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0086   (0x0002)  MISSED
	class UNetConnection*                              ServerConnection;                                           // 0x0088   (0x0008)  
	TArray<class UNetConnection*>                      ClientConnections;                                          // 0x0090   (0x0010)  
	unsigned char                                      UnknownData03_6[0x60];                                      // 0x00A0   (0x0060)  MISSED
	int32_t                                            RecentlyDisconnectedTrackingTime;                           // 0x0100   (0x0004)  
	unsigned char                                      UnknownData04_6[0x3C];                                      // 0x0104   (0x003C)  MISSED
	class UWorld*                                      World;                                                      // 0x0140   (0x0008)  
	class UPackage*                                    WorldPackage;                                               // 0x0148   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x0150   (0x0020)  MISSED
	class UClass*                                      NetConnectionClass;                                         // 0x0170   (0x0008)  
	class UClass*                                      ReplicationDriverClass;                                     // 0x0178   (0x0008)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0180   (0x0010)  MISSED
	FName                                              NetDriverName;                                              // 0x0190   (0x0008)  
	TArray<FChannelDefinition>                         ChannelDefinitions;                                         // 0x0198   (0x0010)  
	SDK_UNDEFINED(80,14) /* TMap<FName, FChannelDefinition> */ __um(ChannelDefinitionMap);                         // 0x01A8   (0x0050)  
	TArray<class UChannel*>                            ActorChannelPool;                                           // 0x01F8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0208   (0x0008)  MISSED
	float                                              Time;                                                       // 0x0210   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4EC];                                     // 0x0214   (0x04EC)  MISSED
	class UReplicationDriver*                          ReplicationDriver;                                          // 0x0700   (0x0008)  
	unsigned char                                      UnknownData09_7[0x58];                                      // 0x0708   (0x0058)  MISSED
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UBlueprintAsyncActionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.BlueprintAsyncActionBase.Activate
	// void Activate();                                                                                                         // [0x181c2c0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
public:
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FActorTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FRepMovement
{ 
	FVector                                            LinearVelocity;                                             // 0x0000   (0x000C)  
	FVector                                            AngularVelocity;                                            // 0x000C   (0x000C)  
	FVector                                            Location;                                                   // 0x0018   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0024   (0x000C)  
	bool                                               bSimulatedPhysicSleep : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bRepPhysics : 1;                                            // 0x0030:1 (0x0001)  
	EVectorQuantization                                LocationQuantizationLevel;                                  // 0x0031   (0x0001)  
	EVectorQuantization                                VelocityQuantizationLevel;                                  // 0x0032   (0x0001)  
	ERotatorQuantization                               RotationQuantizationLevel;                                  // 0x0033   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize100 : FVector
{ 
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FRepAttachment
{ 
	class AActor*                                      AttachParent;                                               // 0x0000   (0x0008)  
	FVector_NetQuantize100                             LocationOffset;                                             // 0x0008   (0x000C)  
	FVector_NetQuantize100                             RelativeScale3D;                                            // 0x0014   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0020   (0x000C)  
	FName                                              AttachSocket;                                               // 0x002C   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class USceneComponent*                             AttachComponent;                                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.Actor
/// Size: 0x01F8 (504 bytes) (0x000028 - 0x000220) align 8 pad: 0x0000
class AActor : public UObject
{ 
public:
	FActorTickFunction                                 PrimaryActorTick;                                           // 0x0028   (0x0030)  
	bool                                               bNetTemporary : 1;                                          // 0x0058:0 (0x0001)  
	bool                                               bNetStartup : 1;                                            // 0x0058:1 (0x0001)  
	bool                                               bOnlyRelevantToOwner : 1;                                   // 0x0058:2 (0x0001)  
	bool                                               bAlwaysRelevant : 1;                                        // 0x0058:3 (0x0001)  
	bool                                               bReplicateMovement : 1;                                     // 0x0058:4 (0x0001)  
	bool                                               bHidden : 1;                                                // 0x0058:5 (0x0001)  
	bool                                               bTearOff : 1;                                               // 0x0058:6 (0x0001)  
	bool                                               bForceNetAddressable : 1;                                   // 0x0058:7 (0x0001)  
	bool                                               bExchangedRoles : 1;                                        // 0x0059:0 (0x0001)  
	bool                                               bNetLoadOnClient : 1;                                       // 0x0059:1 (0x0001)  
	bool                                               bNetUseOwnerRelevancy : 1;                                  // 0x0059:2 (0x0001)  
	bool                                               bRelevantForNetworkReplays : 1;                             // 0x0059:3 (0x0001)  
	bool                                               bRelevantForLevelBounds : 1;                                // 0x0059:4 (0x0001)  
	bool                                               bReplayRewindable : 1;                                      // 0x0059:5 (0x0001)  
	bool                                               bAllowTickBeforeBeginPlay : 1;                              // 0x0059:6 (0x0001)  
	bool                                               bAutoDestroyWhenFinished : 1;                               // 0x0059:7 (0x0001)  
	bool                                               bCanBeDamaged : 1;                                          // 0x005A:0 (0x0001)  
	bool                                               bBlockInput : 1;                                            // 0x005A:1 (0x0001)  
	bool                                               bCollideWhenPlacing : 1;                                    // 0x005A:2 (0x0001)  
	bool                                               bFindCameraComponentWhenViewTarget : 1;                     // 0x005A:3 (0x0001)  
	bool                                               bGenerateOverlapEventsDuringLevelStreaming : 1;             // 0x005A:4 (0x0001)  
	bool                                               bIgnoresOriginShifting : 1;                                 // 0x005A:5 (0x0001)  
	bool                                               bEnableAutoLODGeneration : 1;                               // 0x005A:6 (0x0001)  
	bool                                               bIsEditorOnlyActor : 1;                                     // 0x005A:7 (0x0001)  
	bool                                               bActorSeamlessTraveled : 1;                                 // 0x005B:0 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x005B:1 (0x0001)  
	bool                                               bCanBeInCluster : 1;                                        // 0x005B:2 (0x0001)  
	bool                                               bAllowReceiveTickEventOnDedicatedServer : 1;                // 0x005B:3 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x005B:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x005B:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x005B:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005C:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x005C:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x005C:2 (0x0001)  MISSED
	bool                                               bActorEnableCollision : 1;                                  // 0x005C:3 (0x0001)  
	bool                                               bActorIsBeingDestroyed : 1;                                 // 0x005C:4 (0x0001)  
	EActorUpdateOverlapsMethod                         UpdateOverlapsMethodDuringLevelStreaming;                   // 0x005D   (0x0001)  
	EActorUpdateOverlapsMethod                         DefaultUpdateOverlapsMethodDuringLevelStreaming;            // 0x005E   (0x0001)  
	TEnumAsByte<ENetRole>                              RemoteRole;                                                 // 0x005F   (0x0001)  
	FRepMovement                                       ReplicatedMovement;                                         // 0x0060   (0x0034)  
	float                                              InitialLifeSpan;                                            // 0x0094   (0x0004)  
	float                                              CustomTimeDilation;                                         // 0x0098   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x009C   (0x0004)  MISSED
	FRepAttachment                                     AttachmentReplication;                                      // 0x00A0   (0x0040)  
	class AActor*                                      Owner;                                                      // 0x00E0   (0x0008)  
	FName                                              NetDriverName;                                              // 0x00E8   (0x0008)  
	TEnumAsByte<ENetRole>                              Role;                                                       // 0x00F0   (0x0001)  
	TEnumAsByte<ENetDormancy>                          NetDormancy;                                                // 0x00F1   (0x0001)  
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                               // 0x00F2   (0x0001)  
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                           // 0x00F3   (0x0001)  
	int32_t                                            InputPriority;                                              // 0x00F4   (0x0004)  
	class UInputComponent*                             InputComponent;                                             // 0x00F8   (0x0008)  
	float                                              NetCullDistanceSquared;                                     // 0x0100   (0x0004)  
	int32_t                                            NetTag;                                                     // 0x0104   (0x0004)  
	float                                              NetUpdateFrequency;                                         // 0x0108   (0x0004)  
	float                                              MinNetUpdateFrequency;                                      // 0x010C   (0x0004)  
	float                                              NetPriority;                                                // 0x0110   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	class APawn*                                       Instigator;                                                 // 0x0118   (0x0008)  
	TArray<class AActor*>                              Children;                                                   // 0x0120   (0x0010)  
	class USceneComponent*                             RootComponent;                                              // 0x0130   (0x0008)  
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                   // 0x0138   (0x0010)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x0148   (0x0008)  MISSED
	TArray<FName>                                      Layers;                                                     // 0x0150   (0x0010)  
	SDK_UNDEFINED(8,15) /* TWeakObjectPtr<UChildActorComponent*> */ __um(ParentComponent);                         // 0x0160   (0x0008)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0168   (0x0008)  MISSED
	TArray<FName>                                      Tags;                                                       // 0x0170   (0x0010)  
	SDK_UNDEFINED(1,16) /* FMulticastSparseDelegate */ __um(OnTakeAnyDamage);                                      // 0x0180   (0x0001)  
	SDK_UNDEFINED(1,17) /* FMulticastSparseDelegate */ __um(OnTakePointDamage);                                    // 0x0181   (0x0001)  
	SDK_UNDEFINED(1,18) /* FMulticastSparseDelegate */ __um(OnTakeRadialDamage);                                   // 0x0182   (0x0001)  
	SDK_UNDEFINED(1,19) /* FMulticastSparseDelegate */ __um(OnActorBeginOverlap);                                  // 0x0183   (0x0001)  
	SDK_UNDEFINED(1,20) /* FMulticastSparseDelegate */ __um(OnActorEndOverlap);                                    // 0x0184   (0x0001)  
	SDK_UNDEFINED(1,21) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                    // 0x0185   (0x0001)  
	SDK_UNDEFINED(1,22) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                      // 0x0186   (0x0001)  
	SDK_UNDEFINED(1,23) /* FMulticastSparseDelegate */ __um(OnClicked);                                            // 0x0187   (0x0001)  
	SDK_UNDEFINED(1,24) /* FMulticastSparseDelegate */ __um(OnReleased);                                           // 0x0188   (0x0001)  
	SDK_UNDEFINED(1,25) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                    // 0x0189   (0x0001)  
	SDK_UNDEFINED(1,26) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                      // 0x018A   (0x0001)  
	SDK_UNDEFINED(1,27) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                    // 0x018B   (0x0001)  
	SDK_UNDEFINED(1,28) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                    // 0x018C   (0x0001)  
	SDK_UNDEFINED(1,29) /* FMulticastSparseDelegate */ __um(OnActorHit);                                           // 0x018D   (0x0001)  
	SDK_UNDEFINED(1,30) /* FMulticastSparseDelegate */ __um(OnDestroyed);                                          // 0x018E   (0x0001)  
	SDK_UNDEFINED(1,31) /* FMulticastSparseDelegate */ __um(OnEndPlay);                                            // 0x018F   (0x0001)  
	unsigned char                                      UnknownData11_6[0x60];                                      // 0x0190   (0x0060)  MISSED
	TArray<class UActorComponent*>                     InstanceComponents;                                         // 0x01F0   (0x0010)  
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                 // 0x0200   (0x0010)  
	unsigned char                                      UnknownData12_7[0x10];                                      // 0x0210   (0x0010)  MISSED

	float GetDistance(FVector AActorLocation);
	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x3ff4330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.UserConstructionScript
	// void UserConstructionScript();                                                                                           // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.TearOff
	// void TearOff();                                                                                                          // [0x20a39e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SnapRootComponentTo
	// void SnapRootComponentTo(class AActor* InParentActor, FName InSocketName);                                               // [0x3ff4260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickGroup
	// void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);                                                              // [0x3ff4150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	// void SetTickableWhenPaused(bool bTickableWhenPaused);                                                                    // [0x3ff41d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicates
	// void SetReplicates(bool bInReplicates);                                                                                  // [0x3ff40c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetReplicateMovement
	// void SetReplicateMovement(bool bInReplicateMovement);                                                                    // [0x3ff4030] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetOwner
	// void SetOwner(class AActor* NewOwner);                                                                                   // [0x3ff3fa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetNetDormancy
	// void SetNetDormancy(TEnumAsByte<ENetDormancy> NewDormancy);                                                              // [0x3ff3f20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetLifeSpan
	// void SetLifeSpan(float InLifespan);                                                                                      // [0x3ff3e90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetAutoDestroyWhenFinished
	// void SetAutoDestroyWhenFinished(bool bVal);                                                                              // [0x3ff3e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickInterval
	// void SetActorTickInterval(float TickInterval);                                                                           // [0x3ff3d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	// void SetActorTickEnabled(bool bEnabled);                                                                                 // [0x3ff3cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorScale3D
	// void SetActorScale3D(FVector NewScale3D);                                                                                // [0x3ff3c60] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	// void SetActorRelativeScale3D(FVector NewRelativeScale);                                                                  // [0x3ff3bd0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	// void SetActorHiddenInGame(bool bNewHidden);                                                                              // [0x3ff3b40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	// void SetActorEnableCollision(bool bNewActorEnableCollision);                                                             // [0x3ff3ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	// void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                      // [0x3ff3a20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	// void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                       // [0x3ff3990] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.ReceiveTick
	// void ReceiveTick(float DeltaSeconds);                                                                                    // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	// void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, FVector Origin, FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser); // [0x24710f0] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceivePointDamage
	// void ReceivePointDamage(float Damage, class UDamageType* DamageType, FVector HitLocation, FVector HitNormal, class UPrimitiveComponent* HitComponent, FName BoneName, FVector ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, FHitResult& HitInfo); // [0x24710f0] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveHit
	// void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, FVector HitLocation, FVector HitNormal, FVector NormalImpulse, FHitResult& Hit); // [0x24710f0] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	// void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);                                                          // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	// void ReceiveDestroyed();                                                                                                 // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	// void ReceiveBeginPlay();                                                                                                 // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	// void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser); // [0x24710f0] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	// void ReceiveActorOnReleased(FKey ButtonReleased);                                                                        // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	// void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	// void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	// void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);                                                  // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	// void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);                                                // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	// void ReceiveActorOnClicked(FKey ButtonPressed);                                                                          // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	// void ReceiveActorEndOverlap(class AActor* OtherActor);                                                                   // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	// void ReceiveActorEndCursorOver();                                                                                        // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	// void ReceiveActorBeginOverlap(class AActor* OtherActor);                                                                 // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	// void ReceiveActorBeginCursorOver();                                                                                      // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bEnableStreaming, int32_t CinematicTextureGroups);                            // [0x3ff3870] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	// void OnRep_ReplicateMovement();                                                                                          // [0x181c2c0] Native|Public        
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	// void OnRep_ReplicatedMovement();                                                                                         // [0x202f970] Native|Public        
	// Function /Script/Engine.Actor.OnRep_Owner
	// void OnRep_Owner();                                                                                                      // [0x181c120] Native|Protected     
	// Function /Script/Engine.Actor.OnRep_Instigator
	// void OnRep_Instigator();                                                                                                 // [0x20cc740] Native|Public        
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	// void OnRep_AttachmentReplication();                                                                                      // [0x1822d50] Native|Public        
	// Function /Script/Engine.Actor.MakeNoise
	// void MakeNoise(float Loudness, class APawn* NoiseInstigator, FVector NoiseLocation, float MaxRange, FName Tag);          // [0x3ff36d0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.MakeMIDForMaterial
	// class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);                                    // [0x3ff3630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_TeleportTo
	// bool K2_TeleportTo(FVector DestLocation, FRotator DestRotation);                                                         // [0x3ff3540] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	// bool K2_SetActorTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);            // [0x3ff3330] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	// bool K2_SetActorRotation(FRotator NewRotation, bool bTeleportPhysics);                                                   // [0x3ff3240] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	// void K2_SetActorRelativeTransform(FTransform& NewRelativeTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x3ff3030] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	// void K2_SetActorRelativeRotation(FRotator NewRelativeRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x3ff2e80] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	// void K2_SetActorRelativeLocation(FVector NewRelativeLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);  // [0x3ff2cd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	// bool K2_SetActorLocationAndRotation(FVector NewLocation, FRotator NewRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x3ff2ac0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	// bool K2_SetActorLocation(FVector NewLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);                  // [0x3ff2900] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_OnReset
	// void K2_OnReset();                                                                                                       // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	// void K2_OnEndViewTarget(class APlayerController* PC);                                                                    // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	// void K2_OnBecomeViewTarget(class APlayerController* PC);                                                                 // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	// class USceneComponent* K2_GetRootComponent();                                                                            // [0x3ff28e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetComponentsByClass
	// TArray<UActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);                                          // [0x3ff2800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	// FRotator K2_GetActorRotation();                                                                                          // [0x3ff2740] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	// FVector K2_GetActorLocation();                                                                                           // [0x3ff26c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	// void K2_DetachFromActor(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);          // [0x3ff25b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyComponent
	// void K2_DestroyComponent(class UActorComponent* Component);                                                              // [0x3ff2520] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_DestroyActor
	// void K2_DestroyActor();                                                                                                  // [0x1fcdc70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	// void K2_AttachToComponent(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x3ff2350] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachToActor
	// void K2_AttachToActor(class AActor* ParentActor, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies); // [0x3ff2180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	// void K2_AttachRootComponentToActor(class AActor* InParentActor, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x3ff2020] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	// void K2_AttachRootComponentTo(class USceneComponent* InParent, FName InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies); // [0x3ff1ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransformKeepScale
	// void K2_AddActorWorldTransformKeepScale(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport); // [0x3ff1cb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	// void K2_AddActorWorldTransform(FTransform& DeltaTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);     // [0x3ff1aa0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	// void K2_AddActorWorldRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x3ff18f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	// void K2_AddActorWorldOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x3ff1740] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	// void K2_AddActorLocalTransform(FTransform& NewTransform, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);       // [0x3ff1530] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	// void K2_AddActorLocalRotation(FRotator DeltaRotation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);          // [0x3ff1380] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	// void K2_AddActorLocalOffset(FVector DeltaLocation, bool bSweep, FHitResult& SweepHitResult, bool bTeleport);             // [0x3ff11d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x3ff1130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsChildActor
	// bool IsChildActor();                                                                                                     // [0x3ff1100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	// bool IsActorTickEnabled();                                                                                               // [0x3ff10d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	// bool IsActorBeingDestroyed();                                                                                            // [0x3ff10a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x3ff1070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	// float GetVerticalDistanceTo(class AActor* OtherActor);                                                                   // [0x3ff0fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetVelocity
	// FVector GetVelocity();                                                                                                   // [0x3ff0f90] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTransform
	// FTransform GetTransform();                                                                                               // [0x3ff0f40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	// bool GetTickableWhenPaused();                                                                                            // [0x3ff0f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.GetSquaredHorizontalDistanceTo
	// float GetSquaredHorizontalDistanceTo(class AActor* OtherActor);                                                          // [0x3ff0e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	// float GetSquaredDistanceTo(class AActor* OtherActor);                                                                    // [0x3ff0dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetRemoteRole
	// TEnumAsByte<ENetRole> GetRemoteRole();                                                                                   // [0x3ff0db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentComponent
	// class UChildActorComponent* GetParentComponent();                                                                        // [0x3ff0d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetParentActor
	// class AActor* GetParentActor();                                                                                          // [0x3ff0d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOwner
	// class AActor* GetOwner();                                                                                                // [0x20edae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OverlappingComponents);                                      // [0x3ff0ca0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x3ff0ba0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLocalRole
	// TEnumAsByte<ENetRole> GetLocalRole();                                                                                    // [0x3ff0b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetLifeSpan
	// float GetLifeSpan();                                                                                                     // [0x3ff0b40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigatorController
	// class AController* GetInstigatorController();                                                                            // [0x3ff0b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInstigator
	// class APawn* GetInstigator();                                                                                            // [0x3ff0ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	// FVector GetInputVectorAxisValue(FKey InputAxisKey);                                                                      // [0x3ff09d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisValue
	// float GetInputAxisValue(FName InputAxisName);                                                                            // [0x3ff0930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	// float GetInputAxisKeyValue(FKey InputAxisKey);                                                                           // [0x3ff0830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	// float GetHorizontalDotProductTo(class AActor* OtherActor);                                                               // [0x3ff0790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	// float GetHorizontalDistanceTo(class AActor* OtherActor);                                                                 // [0x3ff06f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	// float GetGameTimeSinceCreation();                                                                                        // [0x3ff06c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDotProductTo
	// float GetDotProductTo(class AActor* OtherActor);                                                                         // [0x3ff0620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetDistanceTo
	// float GetDistanceTo(class AActor* OtherActor);                                                                           // [0x3ff0580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByTag
	// TArray<UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, FName Tag);                                    // [0x3ff0470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentsByInterface
	// TArray<UActorComponent*> GetComponentsByInterface(class UClass* Interface);                                              // [0x3ff0390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetComponentByClass
	// class UActorComponent* GetComponentByClass(class UClass* ComponentClass);                                                // [0x3ff02f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	// FName GetAttachParentSocketName();                                                                                       // [0x3ff01b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachParentActor
	// class AActor* GetAttachParentActor();                                                                                    // [0x3ff0180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAttachedActors
	// void GetAttachedActors(TArray<AActor*>& OutActors, bool bResetArray);                                                    // [0x3ff01f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetAllChildActors
	// void GetAllChildActors(TArray<AActor*>& ChildActors, bool bIncludeDescendants);                                          // [0x3ff0080] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorUpVector
	// FVector GetActorUpVector();                                                                                              // [0x3ff0010] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	// float GetActorTimeDilation();                                                                                            // [0x3feffe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorTickInterval
	// float GetActorTickInterval();                                                                                            // [0x3feffb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorScale3D
	// FVector GetActorScale3D();                                                                                               // [0x3feff70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRightVector
	// FVector GetActorRightVector();                                                                                           // [0x3feff00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	// FVector GetActorRelativeScale3D();                                                                                       // [0x3fefec0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorForwardVector
	// FVector GetActorForwardVector();                                                                                         // [0x3fefe50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	// void GetActorEyesViewPoint(FVector& OutLocation, FRotator& OutRotation);                                                 // [0x3fefd60] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	// bool GetActorEnableCollision();                                                                                          // [0x3fefd30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.GetActorBounds
	// void GetActorBounds(bool bOnlyCollidingComponents, FVector& Origin, FVector& BoxExtent, bool bIncludeFromChildActors);   // [0x3fefba0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Actor.ForceNetUpdate
	// void ForceNetUpdate();                                                                                                   // [0x1fff230] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FlushNetDormancy
	// void FlushNetDormancy();                                                                                                 // [0x3fefb80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.FinishAddComponent
	// void FinishAddComponent(class UActorComponent* Component, bool bManualAttachment, FTransform& RelativeTransform);        // [0x3fefa20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.EnableInput
	// void EnableInput(class APlayerController* PlayerController);                                                             // [0x3fef990] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DisableInput
	// void DisableInput(class APlayerController* PlayerController);                                                            // [0x1773cc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	// void DetachRootComponentFromParent(bool bMaintainWorldPosition);                                                         // [0x3fef900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	// void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);                                         // [0x3fef870] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	// void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);                                                          // [0x3fef7e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponentByClass
	// class UActorComponent* AddComponentByClass(class UClass* Class, bool bManualAttachment, FTransform& RelativeTransform, bool bDeferredFinish); // [0x3fef620] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.AddComponent
	// class UActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, FTransform& RelativeTransform, class UObject* ComponentTemplateContext, bool bDeferredFinish); // [0x3fef410] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Actor.ActorHasTag
	// bool ActorHasTag(FName Tag);                                                                                             // [0x3fef370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UOnlineEngineInterface : public UObject
{ 
public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UOnlineSession : public UObject
{ 
public:
};

/// Class /Script/Engine.GameInstance
/// Size: 0x0180 (384 bytes) (0x000028 - 0x0001A8) align 8 pad: 0x0000
class UGameInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class ULocalPlayer*>                        LocalPlayers;                                               // 0x0038   (0x0010)  
	class UOnlineSession*                              OnlineSession;                                              // 0x0048   (0x0008)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0060   (0x0018)  MISSED
	SDK_UNDEFINED(16,32) /* FMulticastInlineDelegate */ __um(OnPawnControllerChangedDelegates);                    // 0x0078   (0x0010)  
	unsigned char                                      UnknownData02_7[0x120];                                     // 0x0088   (0x0120)  MISSED


	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	// void ReceiveShutdown();                                                                                                  // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.ReceiveInit
	// void ReceiveInit();                                                                                                      // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleTravelError
	// void HandleTravelError(TEnumAsByte<ETravelFailure> FailureType);                                                         // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	// void HandleNetworkError(TEnumAsByte<ENetworkFailure> FailureType, bool bIsServer);                                       // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	// void DebugRemovePlayer(int32_t ControllerId);                                                                            // [0x4050330] Exec|Native|Public   
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	// void DebugCreatePlayer(int32_t ControllerId);                                                                            // [0x40502a0] Exec|Native|Public   
};

/// Class /Script/Engine.Info
/// Size: 0x0000 (0 bytes) (0x000220 - 0x000220) align 8 pad: 0x0000
class AInfo : public AActor
{ 
public:
};

/// Class /Script/Engine.GameSession
/// Size: 0x0018 (24 bytes) (0x000220 - 0x000238) align 8 pad: 0x0000
class AGameSession : public AInfo
{ 
public:
	int32_t                                            MaxSpectators;                                              // 0x0220   (0x0004)  
	int32_t                                            MaxPlayers;                                                 // 0x0224   (0x0004)  
	int32_t                                            MaxPartySize;                                               // 0x0228   (0x0004)  
	char                                               MaxSplitscreensPerConnection;                               // 0x022C   (0x0001)  
	bool                                               bRequiresPushToTalk;                                        // 0x022D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x022E   (0x0002)  MISSED
	FName                                              SessionName;                                                // 0x0230   (0x0008)  
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FLightingChannels
{ 
	bool                                               bChannel0 : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bChannel1 : 1;                                              // 0x0000:1 (0x0001)  
	bool                                               bChannel2 : 1;                                              // 0x0000:2 (0x0001)  
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FCustomPrimitiveData
{ 
	TArray<float>                                      Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 1 pad: 0x0000
struct FCollisionResponseContainer
{ 
	TEnumAsByte<ECollisionResponse>                    WorldStatic;                                                // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    WorldDynamic;                                               // 0x0001   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Pawn;                                                       // 0x0002   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Visibility;                                                 // 0x0003   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Camera;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    PhysicsBody;                                                // 0x0005   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Vehicle;                                                    // 0x0006   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Destructible;                                               // 0x0007   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel1;                                        // 0x0008   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel2;                                        // 0x0009   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel3;                                        // 0x000A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel4;                                        // 0x000B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel5;                                        // 0x000C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel6;                                        // 0x000D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel1;                                          // 0x000E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel2;                                          // 0x000F   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel3;                                          // 0x0010   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel4;                                          // 0x0011   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel5;                                          // 0x0012   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel6;                                          // 0x0013   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel7;                                          // 0x0014   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel8;                                          // 0x0015   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel9;                                          // 0x0016   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel10;                                         // 0x0017   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel11;                                         // 0x0018   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel12;                                         // 0x0019   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel13;                                         // 0x001A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel14;                                         // 0x001B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel15;                                         // 0x001C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel16;                                         // 0x001D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel17;                                         // 0x001E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel18;                                         // 0x001F   (0x0001)  
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FResponseChannel
{ 
	FName                                              Channel;                                                    // 0x0000   (0x0008)  
	TEnumAsByte<ECollisionResponse>                    Response;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCollisionResponse
{ 
	FCollisionResponseContainer                        ResponseToChannels;                                         // 0x0000   (0x0020)  
	TArray<FResponseChannel>                           ResponseArray;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FWalkableSlopeOverride
{ 
	TEnumAsByte<EWalkableSlopeBehavior>                WalkableSlopeBehavior;                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              WalkableSlopeAngle;                                         // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x0140 (320 bytes) (0x000018 - 0x000158) align 8 pad: 0x0000
struct FBodyInstance : FBodyInstanceCore
{ 
	unsigned char                                      UnknownData00_3[0x6];                                       // 0x0018   (0x0006)  MISSED
	TEnumAsByte<ECollisionChannel>                     ObjectType;                                                 // 0x001E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x38];                                      // 0x0021   (0x0038)  MISSED
	ESleepFamily                                       SleepFamily;                                                // 0x0059   (0x0001)  
	TEnumAsByte<EDOFMode>                              DOFMode;                                                    // 0x005A   (0x0001)  
	bool                                               bUseCCD : 1;                                                // 0x005B:0 (0x0001)  
	bool                                               bIgnoreAnalyticCollisions : 1;                              // 0x005B:1 (0x0001)  
	bool                                               bNotifyRigidBodyCollision : 1;                              // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	bool                                               bLockTranslation : 1;                                       // 0x005B:4 (0x0001)  
	bool                                               bLockRotation : 1;                                          // 0x005B:5 (0x0001)  
	bool                                               bLockXTranslation : 1;                                      // 0x005B:6 (0x0001)  
	bool                                               bLockYTranslation : 1;                                      // 0x005B:7 (0x0001)  
	bool                                               bLockZTranslation : 1;                                      // 0x005C:0 (0x0001)  
	bool                                               bLockXRotation : 1;                                         // 0x005C:1 (0x0001)  
	bool                                               bLockYRotation : 1;                                         // 0x005C:2 (0x0001)  
	bool                                               bLockZRotation : 1;                                         // 0x005C:3 (0x0001)  
	bool                                               bOverrideMaxAngularVelocity : 1;                            // 0x005C:4 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005C:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x005C:6 (0x0001)  MISSED
	bool                                               bOverrideMaxDepenetrationVelocity : 1;                      // 0x005C:7 (0x0001)  
	bool                                               bOverrideWalkableSlopeOnInstance : 1;                       // 0x005D:0 (0x0001)  
	bool                                               bInterpolateWhenSubStepping : 1;                            // 0x005D:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0xE];                                       // 0x005E   (0x000E)  MISSED
	FName                                              CollisionProfileName;                                       // 0x006C   (0x0008)  
	char                                               PositionSolverIterationCount;                               // 0x0074   (0x0001)  
	char                                               VelocitySolverIterationCount;                               // 0x0075   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x0076   (0x0002)  MISSED
	FCollisionResponse                                 CollisionResponses;                                         // 0x0078   (0x0030)  
	float                                              MaxDepenetrationVelocity;                                   // 0x00A8   (0x0004)  
	float                                              MassInKgOverride;                                           // 0x00AC   (0x0004)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	float                                              LinearDamping;                                              // 0x00B8   (0x0004)  
	float                                              AngularDamping;                                             // 0x00BC   (0x0004)  
	FVector                                            CustomDOFPlaneNormal;                                       // 0x00C0   (0x000C)  
	FVector                                            COMNudge;                                                   // 0x00CC   (0x000C)  
	float                                              MassScale;                                                  // 0x00D8   (0x0004)  
	FVector                                            InertiaTensorScale;                                         // 0x00DC   (0x000C)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x00E8   (0x0010)  MISSED
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x00F8   (0x0010)  
	class UPhysicalMaterial*                           PhysMaterialOverride;                                       // 0x0108   (0x0008)  
	float                                              MaxAngularVelocity;                                         // 0x0110   (0x0004)  
	float                                              CustomSleepThresholdMultiplier;                             // 0x0114   (0x0004)  
	float                                              StabilizationThresholdMultiplier;                           // 0x0118   (0x0004)  
	float                                              PhysicsBlendWeight;                                         // 0x011C   (0x0004)  
	unsigned char                                      UnknownData10_7[0x38];                                      // 0x0120   (0x0038)  MISSED
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x0258 (600 bytes) (0x0001F8 - 0x000450) align 16 pad: 0x0000
class UPrimitiveComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x01F8   (0x0008)  MISSED
	float                                              MinDrawDistance;                                            // 0x0200   (0x0004)  
	float                                              LDMaxDrawDistance;                                          // 0x0204   (0x0004)  
	float                                              CachedMaxDrawDistance;                                      // 0x0208   (0x0004)  
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                         // 0x020C   (0x0001)  
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                                // 0x020D   (0x0001)  
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                               // 0x020E   (0x0001)  
	ELightmapType                                      LightmapType;                                               // 0x020F   (0x0001)  
	bool                                               bUseMaxLODAsImposter : 1;                                   // 0x0210:0 (0x0001)  
	bool                                               bBatchImpostersAsInstances : 1;                             // 0x0210:1 (0x0001)  
	bool                                               bNeverDistanceCull : 1;                                     // 0x0210:2 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0210:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0210:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0210:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0210:6 (0x0001)  MISSED
	bool                                               bAlwaysCreatePhysicsState : 1;                              // 0x0210:7 (0x0001)  
	bool                                               bGenerateOverlapEvents : 1;                                 // 0x0211:0 (0x0001)  
	bool                                               bMultiBodyOverlap : 1;                                      // 0x0211:1 (0x0001)  
	bool                                               bTraceComplexOnMove : 1;                                    // 0x0211:2 (0x0001)  
	bool                                               bReturnMaterialOnMove : 1;                                  // 0x0211:3 (0x0001)  
	bool                                               bUseViewOwnerDepthPriorityGroup : 1;                        // 0x0211:4 (0x0001)  
	bool                                               bAllowCullDistanceVolume : 1;                               // 0x0211:5 (0x0001)  
	bool                                               bHasMotionBlurVelocityMeshes : 1;                           // 0x0211:6 (0x0001)  
	bool                                               bVisibleInReflectionCaptures : 1;                           // 0x0211:7 (0x0001)  
	bool                                               bVisibleInRealTimeSkyCaptures : 1;                          // 0x0212:0 (0x0001)  
	bool                                               bVisibleInRayTracing : 1;                                   // 0x0212:1 (0x0001)  
	bool                                               bRenderInMainPass : 1;                                      // 0x0212:2 (0x0001)  
	bool                                               bRenderInDepthPass : 1;                                     // 0x0212:3 (0x0001)  
	bool                                               bReceivesDecals : 1;                                        // 0x0212:4 (0x0001)  
	bool                                               bOwnerNoSee : 1;                                            // 0x0212:5 (0x0001)  
	bool                                               bOnlyOwnerSee : 1;                                          // 0x0212:6 (0x0001)  
	bool                                               bTreatAsBackgroundForOcclusion : 1;                         // 0x0212:7 (0x0001)  
	bool                                               bUseAsOccluder : 1;                                         // 0x0213:0 (0x0001)  
	bool                                               bSelectable : 1;                                            // 0x0213:1 (0x0001)  
	bool                                               bForceMipStreaming : 1;                                     // 0x0213:2 (0x0001)  
	bool                                               bHasPerInstanceHitProxies : 1;                              // 0x0213:3 (0x0001)  
	bool                                               CastShadow : 1;                                             // 0x0213:4 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x0213:5 (0x0001)  
	bool                                               bAffectDistanceFieldLighting : 1;                           // 0x0213:6 (0x0001)  
	bool                                               bCastDynamicShadow : 1;                                     // 0x0213:7 (0x0001)  
	bool                                               bCastStaticShadow : 1;                                      // 0x0214:0 (0x0001)  
	bool                                               bCastVolumetricTranslucentShadow : 1;                       // 0x0214:1 (0x0001)  
	bool                                               bCastContactShadow : 1;                                     // 0x0214:2 (0x0001)  
	bool                                               bSelfShadowOnly : 1;                                        // 0x0214:3 (0x0001)  
	bool                                               bCastFarShadow : 1;                                         // 0x0214:4 (0x0001)  
	bool                                               bCastInsetShadow : 1;                                       // 0x0214:5 (0x0001)  
	bool                                               bCastCinematicShadow : 1;                                   // 0x0214:6 (0x0001)  
	bool                                               bCastHiddenShadow : 1;                                      // 0x0214:7 (0x0001)  
	bool                                               bCastShadowAsTwoSided : 1;                                  // 0x0215:0 (0x0001)  
	bool                                               bLightAsIfStatic : 1;                                       // 0x0215:1 (0x0001)  
	bool                                               bLightAttachmentsAsGroup : 1;                               // 0x0215:2 (0x0001)  
	bool                                               bExcludeFromLightAttachmentGroup : 1;                       // 0x0215:3 (0x0001)  
	bool                                               bReceiveMobileCSMShadows : 1;                               // 0x0215:4 (0x0001)  
	bool                                               bSingleSampleShadowFromStationaryLights : 1;                // 0x0215:5 (0x0001)  
	bool                                               bIgnoreRadialImpulse : 1;                                   // 0x0215:6 (0x0001)  
	bool                                               bIgnoreRadialForce : 1;                                     // 0x0215:7 (0x0001)  
	bool                                               bApplyImpulseOnDamage : 1;                                  // 0x0216:0 (0x0001)  
	bool                                               bReplicatePhysicsToAutonomousProxy : 1;                     // 0x0216:1 (0x0001)  
	bool                                               bFillCollisionUnderneathForNavmesh : 1;                     // 0x0216:2 (0x0001)  
	bool                                               AlwaysLoadOnClient : 1;                                     // 0x0216:3 (0x0001)  
	bool                                               AlwaysLoadOnServer : 1;                                     // 0x0216:4 (0x0001)  
	bool                                               bUseEditorCompositing : 1;                                  // 0x0216:5 (0x0001)  
	bool                                               bRenderCustomDepth : 1;                                     // 0x0216:6 (0x0001)  
	bool                                               bVisibleInSceneCaptureOnly : 1;                             // 0x0216:7 (0x0001)  
	bool                                               bHiddenInSceneCapture : 1;                                  // 0x0217:0 (0x0001)  
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                                // 0x0218   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x0219   (0x0001)  MISSED
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                       // 0x021A   (0x0001)  
	FLightingChannels                                  LightingChannels;                                           // 0x021B   (0x0001)  
	ERendererStencilMask                               CustomDepthStencilWriteMask;                                // 0x021C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x021D   (0x0003)  MISSED
	int32_t                                            CustomDepthStencilValue;                                    // 0x0220   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0224   (0x0004)  MISSED
	FCustomPrimitiveData                               CustomPrimitiveData;                                        // 0x0228   (0x0010)  
	FCustomPrimitiveData                               CustomPrimitiveDataInternal;                                // 0x0238   (0x0010)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x0248   (0x0008)  MISSED
	int32_t                                            TranslucencySortPriority;                                   // 0x0250   (0x0004)  
	float                                              TranslucencySortDistanceOffset;                             // 0x0254   (0x0004)  
	int32_t                                            VisibilityId;                                               // 0x0258   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x025C   (0x0004)  MISSED
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                     // 0x0260   (0x0010)  
	int8_t                                             VirtualTextureLodBias;                                      // 0x0270   (0x0001)  
	int8_t                                             VirtualTextureCullMips;                                     // 0x0271   (0x0001)  
	int8_t                                             VirtualTextureMinCoverage;                                  // 0x0272   (0x0001)  
	ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType;                               // 0x0273   (0x0001)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	float                                              LpvBiasMultiplier;                                          // 0x0278   (0x0004)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x027C   (0x0008)  MISSED
	float                                              BoundsScale;                                                // 0x0284   (0x0004)  
	unsigned char                                      UnknownData12_6[0x10];                                      // 0x0288   (0x0010)  MISSED
	TArray<class AActor*>                              MoveIgnoreActors;                                           // 0x0298   (0x0010)  
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                       // 0x02A8   (0x0010)  
	unsigned char                                      UnknownData13_6[0x10];                                      // 0x02B8   (0x0010)  MISSED
	FBodyInstance                                      BodyInstance;                                               // 0x02C8   (0x0158)  
	SDK_UNDEFINED(1,33) /* FMulticastSparseDelegate */ __um(OnComponentHit);                                       // 0x0420   (0x0001)  
	SDK_UNDEFINED(1,34) /* FMulticastSparseDelegate */ __um(OnComponentBeginOverlap);                              // 0x0421   (0x0001)  
	SDK_UNDEFINED(1,35) /* FMulticastSparseDelegate */ __um(OnComponentEndOverlap);                                // 0x0422   (0x0001)  
	SDK_UNDEFINED(1,36) /* FMulticastSparseDelegate */ __um(OnComponentWake);                                      // 0x0423   (0x0001)  
	SDK_UNDEFINED(1,37) /* FMulticastSparseDelegate */ __um(OnComponentSleep);                                     // 0x0424   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x0425   (0x0001)  MISSED
	SDK_UNDEFINED(1,38) /* FMulticastSparseDelegate */ __um(OnBeginCursorOver);                                    // 0x0426   (0x0001)  
	SDK_UNDEFINED(1,39) /* FMulticastSparseDelegate */ __um(OnEndCursorOver);                                      // 0x0427   (0x0001)  
	SDK_UNDEFINED(1,40) /* FMulticastSparseDelegate */ __um(OnClicked);                                            // 0x0428   (0x0001)  
	SDK_UNDEFINED(1,41) /* FMulticastSparseDelegate */ __um(OnReleased);                                           // 0x0429   (0x0001)  
	SDK_UNDEFINED(1,42) /* FMulticastSparseDelegate */ __um(OnInputTouchBegin);                                    // 0x042A   (0x0001)  
	SDK_UNDEFINED(1,43) /* FMulticastSparseDelegate */ __um(OnInputTouchEnd);                                      // 0x042B   (0x0001)  
	SDK_UNDEFINED(1,44) /* FMulticastSparseDelegate */ __um(OnInputTouchEnter);                                    // 0x042C   (0x0001)  
	SDK_UNDEFINED(1,45) /* FMulticastSparseDelegate */ __um(OnInputTouchLeave);                                    // 0x042D   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1A];                                      // 0x042E   (0x001A)  MISSED
	class UPrimitiveComponent*                         LODParentPrimitive;                                         // 0x0448   (0x0008)  


	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WasRecentlyRendered
	// bool WasRecentlyRendered(float Tolerance);                                                                               // [0x41272e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	// void WakeRigidBody(FName BoneName);                                                                                      // [0x4127250] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	// void WakeAllRigidBodies();                                                                                               // [0x4127230] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	// void SetWalkableSlopeOverride(FWalkableSlopeOverride& NewOverride);                                                      // [0x4127180] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetVisibleInSceneCaptureOnly
	// void SetVisibleInSceneCaptureOnly(bool bValue);                                                                          // [0x41270f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	// void SetUseCCD(bool InUseCCD, FName BoneName);                                                                           // [0x4127020] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	// void SetTranslucentSortPriority(int32_t NewTranslucentSortPriority);                                                     // [0x4126f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucencySortDistanceOffset
	// void SetTranslucencySortDistanceOffset(float NewTranslucencySortDistanceOffset);                                         // [0x4126f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	// void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);                         // [0x4126e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	// void SetSimulatePhysics(bool bSimulate);                                                                                 // [0x4126df0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	// void SetRenderInMainPass(bool bValue);                                                                                   // [0x4126d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	// void SetRenderCustomDepth(bool bValue);                                                                                  // [0x4126cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	// void SetReceivesDecals(bool bNewReceivesDecals);                                                                         // [0x4126c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	// void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);                                                  // [0x41265c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	// void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x4126b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	// void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                      // [0x4126a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	// void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);                               // [0x4126a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	// void SetPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent, FName BoneName);                                       // [0x41268d0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	// void SetPhysicsAngularVelocityInRadians(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x41267a0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	// void SetPhysicsAngularVelocityInDegrees(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                          // [0x4126650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	// void SetPhysicsAngularVelocity(FVector NewAngVel, bool bAddToCurrent, FName BoneName);                                   // [0x4126650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	// void SetOwnerNoSee(bool bNewOwnerNoSee);                                                                                 // [0x4126530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	// void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);                                                                             // [0x41264a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	// void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);                                                     // [0x4126410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	// void SetMaterialByName(FName MaterialSlotName, class UMaterialInterface* Material);                                      // [0x4126340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	// void SetMaterial(int32_t ElementIndex, class UMaterialInterface* Material);                                              // [0x4126270] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	// void SetMassScale(FName BoneName, float InMassScale);                                                                    // [0x4126190] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	// void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);                                            // [0x4126080] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	// void SetLinearDamping(float InDamping);                                                                                  // [0x4125ff0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x4125ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	// void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);                                                        // [0x4125e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetHiddenInSceneCapture
	// void SetHiddenInSceneCapture(bool bValue);                                                                               // [0x4125da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	// void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);                                                            // [0x4125d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	// void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);                                        // [0x4125c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	// void SetEnableGravity(bool bGravityEnabled);                                                                             // [0x4116aa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
	// void SetDefaultCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                            // [0x4125ba0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
	// void SetDefaultCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                             // [0x4125ac0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
	// void SetDefaultCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                           // [0x41259f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
	// void SetDefaultCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                 // [0x4125920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	// void SetCustomPrimitiveDataVector4(int32_t DataIndex, FVector4 Value);                                                   // [0x4125840] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	// void SetCustomPrimitiveDataVector3(int32_t DataIndex, FVector Value);                                                    // [0x4125760] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	// void SetCustomPrimitiveDataVector2(int32_t DataIndex, FVector2D Value);                                                  // [0x4125690] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	// void SetCustomPrimitiveDataFloat(int32_t DataIndex, float Value);                                                        // [0x41255c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	// void SetCustomDepthStencilWriteMask(ERendererStencilMask WriteMaskBit);                                                  // [0x4125540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	// void SetCustomDepthStencilValue(int32_t Value);                                                                          // [0x41254b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	// void SetCullDistance(float NewCullDistance);                                                                             // [0x4125430] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	// void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);                                                            // [0x41253b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	// void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse); // [0x41252e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	// void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);                                     // [0x4125260] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	// void SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps);                                        // [0x4125190] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	// void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);                                                     // [0x4125110] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	// void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);                                                        // [0x4125090] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	// void SetCenterOfMass(FVector CenterOfMassOffset, FName BoneName);                                                        // [0x4124fb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	// void SetCastShadow(bool NewCastShadow);                                                                                  // [0x4124f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastInsetShadow
	// void SetCastInsetShadow(bool bInCastInsetShadow);                                                                        // [0x4124e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetCastHiddenShadow
	// void SetCastHiddenShadow(bool NewCastHiddenShadow);                                                                      // [0x4124e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	// void SetBoundsScale(float NewBoundsScale);                                                                               // [0x4124d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	// void SetAngularDamping(float InDamping);                                                                                 // [0x4124cf0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	// void SetAllUseCCD(bool InUseCCD);                                                                                        // [0x20827f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	// void SetAllPhysicsLinearVelocity(FVector NewVel, bool bAddToCurrent);                                                    // [0x4124c10] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	// void SetAllPhysicsAngularVelocityInRadians(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x4124b20] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	// void SetAllPhysicsAngularVelocityInDegrees(FVector& NewAngVel, bool bAddToCurrent);                                      // [0x4124a00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	// void SetAllMassScale(float InMassScale);                                                                                 // [0x4124970] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	// FVector ScaleByMomentOfInertia(FVector InputVector, FName BoneName);                                                     // [0x4124870] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	// void PutRigidBodyToSleep(FName BoneName);                                                                                // [0x41247e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereTraceComponent
	// bool K2_SphereTraceComponent(FVector TraceStart, FVector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4124430] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereOverlapComponent
	// bool K2_SphereOverlapComponent(FVector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x41240d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	// bool K2_LineTraceComponent(FVector TraceStart, FVector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4123d70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	// bool K2_IsQueryCollisionEnabled();                                                                                       // [0x4123d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	// bool K2_IsPhysicsCollisionEnabled();                                                                                     // [0x4123cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	// bool K2_IsCollisionEnabled();                                                                                            // [0x4123cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.K2_BoxOverlapComponent
	// bool K2_BoxOverlapComponent(FVector InBoxCentre, FBox InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, FVector& HitLocation, FVector& HitNormal, FName& BoneName, FHitResult& OutHit); // [0x4123940] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	// bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);                                                       // [0x41238a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	// bool IsOverlappingActor(class AActor* Other);                                                                            // [0x4123800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	// bool IsGravityEnabled();                                                                                                 // [0x41237d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	// bool IsAnyRigidBodyAwake();                                                                                              // [0x41237a0] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	// void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);                                // [0x41236d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	// void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);                                                     // [0x4123600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	// FWalkableSlopeOverride GetWalkableSlopeOverride();                                                                       // [0x41235d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	// FVector GetPhysicsLinearVelocityAtPoint(FVector Point, FName BoneName);                                                  // [0x41234d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	// FVector GetPhysicsLinearVelocity(FName BoneName);                                                                        // [0x4123420] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	// FVector GetPhysicsAngularVelocityInRadians(FName BoneName);                                                              // [0x4123370] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	// FVector GetPhysicsAngularVelocityInDegrees(FName BoneName);                                                              // [0x41232a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	// FVector GetPhysicsAngularVelocity(FName BoneName);                                                                       // [0x41232a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	// void GetOverlappingComponents(TArray<UPrimitiveComponent*>& OutOverlappingComponents);                                   // [0x41231f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	// void GetOverlappingActors(TArray<AActor*>& OverlappingActors, class UClass* ClassFilter);                                // [0x41230f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	// int32_t GetNumMaterials();                                                                                               // [0x41230c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	// class UMaterialInterface* GetMaterialFromCollisionFaceIndex(int32_t FaceIndex, int32_t& SectionIndex);                   // [0x4122fe0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t ElementIndex);                                                             // [0x4122f40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	// float GetMassScale(FName BoneName);                                                                                      // [0x4122ea0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	// float GetMass();                                                                                                         // [0x1fd4640] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	// float GetLinearDamping();                                                                                                // [0x4122e60] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	// FVector GetInertiaTensor(FName BoneName);                                                                                // [0x4122db0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	// bool GetGenerateOverlapEvents();                                                                                         // [0x4122d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	// TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);                   // [0x4122cf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	// FName GetCollisionProfileName();                                                                                         // [0x4122cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	// TEnumAsByte<ECollisionChannel> GetCollisionObjectType();                                                                 // [0x20a2370] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	// TEnumAsByte<ECollisionEnabled> GetCollisionEnabled();                                                                    // [0x4122c80] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	// float GetClosestPointOnCollision(FVector& Point, FVector& OutPointOnBody, FName BoneName);                               // [0x4122b40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	// FVector GetCenterOfMass(FName BoneName);                                                                                 // [0x4122a90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	// float GetAngularDamping();                                                                                               // [0x4122a50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32_t ElementIndex, class UMaterialInterface* SourceMaterial, FName OptionalName); // [0x4122930] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32_t ElementIndex, class UMaterialInterface* Parent); // [0x4122860] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	// class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32_t ElementIndex);                               // [0x41227c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	// TArray<UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();                                                          // [0x4122740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	// TArray<AActor*> CopyArrayOfMoveIgnoreActors();                                                                           // [0x41226c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	// void ClearMoveIgnoreComponents();                                                                                        // [0x4122690] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	// void ClearMoveIgnoreActors();                                                                                            // [0x4122670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	// bool CanCharacterStepUp(class APawn* Pawn);                                                                              // [0x41225d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	// void AddTorqueInRadians(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x4122350] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	// void AddTorqueInDegrees(FVector Torque, FName BoneName, bool bAccelChange);                                              // [0x4122480] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddTorque
	// void AddTorque(FVector Torque, FName BoneName, bool bAccelChange);                                                       // [0x4122350] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	// void AddRadialImpulse(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange); // [0x4122170] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	// void AddRadialForce(FVector Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange); // [0x4121f90] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	// void AddImpulseAtLocation(FVector Impulse, FVector Location, FName BoneName);                                            // [0x4121e50] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	// void AddImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                       // [0x4121d20] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	// void AddForceAtLocationLocal(FVector Force, FVector Location, FName BoneName);                                           // [0x4121be0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	// void AddForceAtLocation(FVector Force, FVector Location, FName BoneName);                                                // [0x4121aa0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	// void AddForce(FVector Force, FName BoneName, bool bAccelChange);                                                         // [0x4121970] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	// void AddAngularImpulseInRadians(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x4121840] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	// void AddAngularImpulseInDegrees(FVector Impulse, FName BoneName, bool bVelChange);                                       // [0x41216f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulse
	// void AddAngularImpulse(FVector Impulse, FName BoneName, bool bVelChange);                                                // [0x41215c0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0030 (48 bytes) (0x000450 - 0x000480) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UMeshComponent : public UPrimitiveComponent
{ 
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                          // 0x0450   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0460   (0x0010)  MISSED
	bool                                               bEnableMaterialParameterCaching : 1;                        // 0x0470:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0471   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	// void SetVectorParameterValueOnMaterials(FName ParameterName, FVector ParameterValue);                                    // [0x40f2160] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	// void SetScalarParameterValueOnMaterials(FName ParameterName, float ParameterValue);                                      // [0x40f2000] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	// void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int32_t CinematicTextureGroups);                // [0x40f1bc0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	// bool IsMaterialSlotNameValid(FName MaterialSlotName);                                                                    // [0x40f1520] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	// TArray<FName> GetMaterialSlotNames();                                                                                    // [0x40f1270] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterials
	// TArray<UMaterialInterface*> GetMaterials();                                                                              // [0x40f12f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x40f11d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Struct /Script/Engine.VertexOffsetUsage
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FVertexOffsetUsage
{ 
	int32_t                                            Usage;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FSkelMeshComponentLODInfo
{ 
	TArray<bool>                                       HiddenMaterials;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0010   (0x0038)  MISSED
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0228 (552 bytes) (0x000478 - 0x0006A0) align 16 pad: 0x0000
class USkinnedMeshComponent : public UMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0478   (0x0008)  MISSED
	class USkeletalMesh*                               SkeletalMesh;                                               // 0x0480   (0x0008)  
	SDK_UNDEFINED(8,46) /* TWeakObjectPtr<USkinnedMeshComponent*> */ __um(MasterPoseComponent);                    // 0x0488   (0x0008)  
	TArray<ESkinCacheUsage>                            SkinCacheUsage;                                             // 0x0490   (0x0010)  
	TArray<FVertexOffsetUsage>                         VertexOffsetUsage;                                          // 0x04A0   (0x0010)  
	TArray<FTransform>                                 ComponentSpaceTransformsArray[2];                           // 0x04B0   (0x0020)
	unsigned char                                      UnknownData01_6[0xD8];                                      // 0x04D0   (0x00D8)  MISSED
	class UPhysicsAsset*                               PhysicsAssetOverride;                                       // 0x05A8   (0x0008)  
	int32_t                                            ForcedLodModel;                                             // 0x05B0   (0x0004)  
	int32_t                                            MinLodModel;                                                // 0x05B4   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x05B8   (0x0008)  MISSED
	float                                              StreamingDistanceMultiplier;                                // 0x05C0   (0x0004)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x05C4   (0x000C)  MISSED
	TArray<FSkelMeshComponentLODInfo>                  LODInfo;                                                    // 0x05D0   (0x0010)  
	unsigned char                                      UnknownData04_6[0x24];                                      // 0x05E0   (0x0024)  MISSED
	EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption;                              // 0x0604   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x0605   (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0606:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0606:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0606:2 (0x0001)  MISSED
	bool                                               bOverrideMinLod : 1;                                        // 0x0606:3 (0x0001)  
	bool                                               bUseBoundsFromMasterPoseComponent : 1;                      // 0x0606:4 (0x0001)  
	bool                                               bForceWireframe : 1;                                        // 0x0606:5 (0x0001)  
	bool                                               bDisplayBones : 1;                                          // 0x0606:6 (0x0001)  
	bool                                               bDisableMorphTarget : 1;                                    // 0x0606:7 (0x0001)  
	bool                                               bHideSkin : 1;                                              // 0x0607:0 (0x0001)  
	bool                                               bPerBoneMotionBlur : 1;                                     // 0x0607:1 (0x0001)  
	bool                                               bComponentUseFixedSkelBounds : 1;                           // 0x0607:2 (0x0001)  
	bool                                               bConsiderAllBodiesForBounds : 1;                            // 0x0607:3 (0x0001)  
	bool                                               bSyncAttachParentLOD : 1;                                   // 0x0607:4 (0x0001)  
	bool                                               bCanHighlightSelectedSections : 1;                          // 0x0607:5 (0x0001)  
	bool                                               bRecentlyRendered : 1;                                      // 0x0607:6 (0x0001)  
	bool                                               bCastCapsuleDirectShadow : 1;                               // 0x0607:7 (0x0001)  
	bool                                               bCastCapsuleIndirectShadow : 1;                             // 0x0608:0 (0x0001)  
	bool                                               bCPUSkinning : 1;                                           // 0x0608:1 (0x0001)  
	bool                                               bEnableUpdateRateOptimizations : 1;                         // 0x0608:2 (0x0001)  
	bool                                               bDisplayDebugUpdateRateOptimizations : 1;                   // 0x0608:3 (0x0001)  
	bool                                               bRenderStatic : 1;                                          // 0x0608:4 (0x0001)  
	bool                                               bIgnoreMasterPoseComponentLOD : 1;                          // 0x0608:5 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0608:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0608:7 (0x0001)  MISSED
	bool                                               bCachedLocalBoundsUpToDate : 1;                             // 0x0609:0 (0x0001)  
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0609:1 (0x0001)  MISSED
	bool                                               bForceMeshObjectUpdate : 1;                                 // 0x0609:2 (0x0001)  
	unsigned char                                      UnknownData12_5[0x2];                                       // 0x060A   (0x0002)  MISSED
	float                                              CapsuleIndirectShadowMinVisibility;                         // 0x060C   (0x0004)  
	unsigned char                                      UnknownData13_6[0x10];                                      // 0x0610   (0x0010)  MISSED
	FBoxSphereBounds                                   CachedWorldSpaceBounds;                                     // 0x0620   (0x001C)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x063C   (0x0004)  MISSED
	FMatrix                                            CachedWorldToLocalTransform;                                // 0x0640   (0x0040)  
	unsigned char                                      UnknownData15_7[0x20];                                      // 0x0680   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	// void UnloadSkinWeightProfile(FName InProfileName);                                                                       // [0x4144f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	// void UnHideBoneByName(FName BoneName);                                                                                   // [0x4144ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	// void TransformToBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x4144cd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	// void TransformFromBoneSpace(FName BoneName, FVector InPosition, FRotator InRotation, FVector& OutPosition, FRotator& OutRotation); // [0x4144b00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	// void ShowMaterialSection(int32_t MaterialID, int32_t SectionIndex, bool bShow, int32_t LODIndex);                        // [0x41449b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	// void ShowAllMaterialSections(int32_t LODIndex);                                                                          // [0x4144920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexOffsetUsage
	// void SetVertexOffsetUsage(int32_t LODIndex, int32_t Usage);                                                              // [0x4144850] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	// void SetVertexColorOverride_LinearColor(int32_t LODIndex, TArray<FLinearColor>& VertexColors);                           // [0x4144760] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightProfile
	// bool SetSkinWeightProfile(FName InProfileName);                                                                          // [0x41446c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	// void SetSkinWeightOverride(int32_t LODIndex, TArray<FSkelMeshSkinWeightInfo>& SkinWeights);                              // [0x41445d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkeletalMesh
	// void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);                                                    // [0x4144500] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	// void SetRenderStatic(bool bNewValue);                                                                                    // [0x4144470] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPreSkinningOffsets
	// void SetPreSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                   // [0x4144340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPostSkinningOffsets
	// void SetPostSkinningOffsets(int32_t LODIndex, TArray<FVector> Offsets);                                                  // [0x4144210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	// void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);                                           // [0x4144140] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	// void SetMinLOD(int32_t InNewMinLOD);                                                                                     // [0x41440b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent
	// void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);                     // [0x4143fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	// void SetForcedLOD(int32_t InNewForcedLOD);                                                                               // [0x4143f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	// void SetCastCapsuleIndirectShadow(bool bNewValue);                                                                       // [0x4143ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	// void SetCastCapsuleDirectShadow(bool bNewValue);                                                                         // [0x4143e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	// void SetCapsuleIndirectShadowMinVisibility(float NewValue);                                                              // [0x4143db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	// bool IsUsingSkinWeightProfile();                                                                                         // [0x4143d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	// bool IsMaterialSectionShown(int32_t MaterialID, int32_t LODIndex);                                                       // [0x4143cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	// bool IsBoneHiddenByName(FName BoneName);                                                                                 // [0x4143c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	// void HideBoneByName(FName BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);                                            // [0x4143a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetVertexOffsetUsage
	// int32_t GetVertexOffsetUsage(int32_t LODIndex);                                                                          // [0x4143970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	// bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(FName BoneName, float& OutTwistAngle, float& OutSwingAngle);        // [0x4143850] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	// FName GetSocketBoneName(FName InSocketName);                                                                             // [0x4143710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	// FVector GetRefPosePosition(int32_t BoneIndex);                                                                           // [0x4143660] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	// FName GetParentBone(FName BoneName);                                                                                     // [0x41435d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x41435a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	// int32_t GetNumBones();                                                                                                   // [0x4143570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLOD
	// int32_t GetForcedLOD();                                                                                                  // [0x4143540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	// FTransform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);                                                 // [0x4143440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	// FName GetCurrentSkinWeightProfileName();                                                                                 // [0x4143420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	// FName GetBoneName(int32_t BoneIndex);                                                                                    // [0x4143390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	// int32_t GetBoneIndex(FName BoneName);                                                                                    // [0x41432f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	// FName FindClosestBone_K2(FVector TestLocation, FVector& BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);     // [0x4143150] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	// void ClearVertexColorOverride(int32_t LODIndex);                                                                         // [0x41430c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	// void ClearSkinWeightProfile();                                                                                           // [0x41430a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	// void ClearSkinWeightOverride(int32_t LODIndex);                                                                          // [0x4143010] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	// bool BoneIsChildOf(FName BoneName, FName ParentBoneName);                                                                // [0x4142f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UStreamableRenderAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x0028   (0x0018)  MISSED
	double                                             ForceMipLevelsToBeResidentTimestamp;                        // 0x0040   (0x0008)  
	int32_t                                            NumCinematicMipLevels;                                      // 0x0048   (0x0004)  
	int32_t                                            StreamingIndex;                                             // 0x004C   (0x0004)  
	int32_t                                            CachedCombinedLODBias;                                      // 0x0050   (0x0004)  
	bool                                               NeverStream : 1;                                            // 0x0054:0 (0x0001)  
	bool                                               bGlobalForceMipLevelsToBeResident : 1;                      // 0x0054:1 (0x0001)  
	bool                                               bHasStreamingUpdatePending : 1;                             // 0x0054:2 (0x0001)  
	bool                                               bForceMiplevelsToBeResident : 1;                            // 0x0054:3 (0x0001)  
	bool                                               bIgnoreStreamingMipBias : 1;                                // 0x0054:4 (0x0001)  
	bool                                               bUseCinematicMipLevels : 1;                                 // 0x0054:5 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0055   (0x000B)  MISSED
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMeshUVChannelInfo
{ 
	bool                                               bInitialized;                                               // 0x0000   (0x0001)  
	bool                                               bOverrideDensities;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              LocalUVDensities[4];                                        // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSkeletalMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0010   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FBoneMirrorInfo
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FPerPlatformFloat
{ 
	float                                              Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FSkeletalMeshBuildSettings
{ 
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:5 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0000:6 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ThresholdPosition;                                          // 0x0004   (0x0004)  
	float                                              ThresholdTangentNormal;                                     // 0x0008   (0x0004)  
	float                                              ThresholdUV;                                                // 0x000C   (0x0004)  
	float                                              MorphThresholdPosition;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSkeletalMeshOptimizationSettings
{ 
	TEnumAsByte<SkeletalMeshTerminationCriterion>      TerminationCriterion;                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              NumOfVertPercentage;                                        // 0x0008   (0x0004)  
	uint32_t                                           MaxNumOfTriangles;                                          // 0x000C   (0x0004)  
	uint32_t                                           MaxNumOfVerts;                                              // 0x0010   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0014   (0x0004)  
	TEnumAsByte<SkeletalMeshOptimizationType>          ReductionMethod;                                            // 0x0018   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SilhouetteImportance;                                       // 0x0019   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    TextureImportance;                                          // 0x001A   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    ShadingImportance;                                          // 0x001B   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SkinningImportance;                                         // 0x001C   (0x0001)  
	bool                                               bRemapMorphTargets : 1;                                     // 0x001D:0 (0x0001)  
	bool                                               bRecalcNormals : 1;                                         // 0x001D:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001E   (0x0002)  MISSED
	float                                              WeldingThreshold;                                           // 0x0020   (0x0004)  
	float                                              NormalsThreshold;                                           // 0x0024   (0x0004)  
	int32_t                                            MaxBonesPerVertex;                                          // 0x0028   (0x0004)  
	bool                                               bEnforceBoneBoundaries : 1;                                 // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              VolumeImportance;                                           // 0x0030   (0x0004)  
	bool                                               bLockEdges : 1;                                             // 0x0034:0 (0x0001)  
	bool                                               bLockColorBounaries : 1;                                    // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            BaseLOD;                                                    // 0x0038   (0x0004)  
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FBoneReference
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FSkeletalMeshLODInfo
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	TArray<int32_t>                                    LODMaterialMap;                                             // 0x0008   (0x0010)  
	FSkeletalMeshBuildSettings                         BuildSettings;                                              // 0x0018   (0x0014)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x002C   (0x003C)  
	TArray<FBoneReference>                             BonesToRemove;                                              // 0x0068   (0x0010)  
	TArray<FBoneReference>                             BonesToPrioritize;                                          // 0x0078   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0090   (0x0008)  
	class UAnimSequence*                               BakePoseOverride;                                           // 0x0098   (0x0008)  
	FString                                            SourceImportFilename;                                       // 0x00A0   (0x0010)  
	ESkinCacheUsage                                    SkinCacheUsage;                                             // 0x00B0   (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x00B1:0 (0x0001)  
	bool                                               bHasPerLODVertexColors : 1;                                 // 0x00B1:1 (0x0001)  
	bool                                               bAllowCPUAccess : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00B1:3 (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x00B2   (0x0006)  MISSED
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FPerPlatformInt
{ 
	int32_t                                            Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FPerPlatformBool
{ 
	bool                                               Default;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSkeletalMeshSamplingRegionMaterialFilter
{ 
	FName                                              MaterialName;                                               // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSkeletalMeshSamplingRegionBoneFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	bool                                               bIncludeOrExclude : 1;                                      // 0x0008:0 (0x0001)  
	bool                                               bApplyToChildren : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshSamplingRegion
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FSkeletalMeshSamplingRegionMaterialFilter>  MaterialFilters;                                            // 0x0010   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBoneFilter>      BoneFilters;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FSkeletalMeshSamplingLODBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x48];                                      // 0x0000   (0x0048)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FSkeletalMeshSamplingRegionBuiltData
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSkeletalMeshSamplingBuiltData
{ 
	TArray<FSkeletalMeshSamplingLODBuiltData>          WholeMeshBuiltData;                                         // 0x0000   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBuiltData>       RegionBuiltData;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshSamplingInfo
{ 
	TArray<FSkeletalMeshSamplingRegion>                Regions;                                                    // 0x0000   (0x0010)  
	FSkeletalMeshSamplingBuiltData                     BuiltData;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSkinWeightProfileInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FPerPlatformBool                                   DefaultProfile;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FPerPlatformInt                                    DefaultProfileFromLODIndex;                                 // 0x000C   (0x0004)  
};

struct FMeshBoneInfo
{
	// Bone's name.
	FName Name;

	// 0/NULL if this is the root bone. 
	DWORD ParentIndex;
};

struct FVirtualBoneRefData
{
	DWORD VBRefSkelIndex;
	DWORD SourceRefSkelIndex;
	DWORD TargetRefSkelIndex;
};

struct FReferenceSkeleton
{
	TArray<FMeshBoneInfo>	RawRefBoneInfo;
	TArray<FTransform>		RawRefBonePose;
	TArray<FMeshBoneInfo>	FinalRefBoneInfo;
	TArray<FTransform>		FinalRefBonePose;
	TMap<FName, DWORD>		RawNameToIndexMap;
	TMap<FName, DWORD>		FinalNameToIndexMap;
	TArray<WORD>  RequiredVirtualBones;
	TArray<FVirtualBoneRefData> UsedVirtualBoneData;

	bool bOnlyOneRootAllowed;

	FName GetBoneName(const DWORD BoneIndex) const
	{
		return FinalRefBoneInfo[BoneIndex].Name;
	}
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x0340 (832 bytes) (0x000060 - 0x0003A0) align 8 pad: 0x0000
class USkeletalMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0060   (0x0020)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0080   (0x0008)  
	FBoxSphereBounds                                   ImportedBounds;                                             // 0x0088   (0x001C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x00A4   (0x001C)  
	FVector                                            PositiveBoundsExtension;                                    // 0x00C0   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x00CC   (0x000C)  
	TArray<FSkeletalMaterial>                          Materials;                                                  // 0x00D8   (0x0010)  
	TArray<FBoneMirrorInfo>                            SkelMirrorTable;                                            // 0x00E8   (0x0010)  
	TArray<FSkeletalMeshLODInfo>                       LODInfo;                                                    // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x50];                                      // 0x0108   (0x0050)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0158   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x015C   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                             // 0x015D   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                         // 0x015E   (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x015F:0 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x015F:1 (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x015F:2 (0x0001)  
	bool                                               bHasVertexColors : 1;                                       // 0x015F:3 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x015F:4 (0x0001)  MISSED
	bool                                               bEnablePerPolyCollision : 1;                                // 0x015F:5 (0x0001)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0160   (0x0008)  
	class UPhysicsAsset*                               PhysicsAsset;                                               // 0x0168   (0x0008)  
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                         // 0x0170   (0x0008)  
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                            // 0x0178   (0x0010)  
	bool                                               bSupportRayTracing : 1;                                     // 0x0188:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0189   (0x0007)  MISSED
	TArray<class UMorphTarget*>                        MorphTargets;                                               // 0x0190   (0x0010)  
	unsigned char                                      UnknownData04_6[0x010];                                     // 0x01A0   (0x0010)  MISSED
	FReferenceSkeleton                                 RefSkeleton;                                                // 0x01B0   (0x0108)
	unsigned char                                      UnknownData04_7[0x060];                                     // 0x02B8   (0x0060)  MISSED
	class UClass*                                      PostProcessAnimBlueprint;                                   // 0x0318   (0x0008)  
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                         // 0x0320   (0x0010)  
	FSkeletalMeshSamplingInfo                          SamplingInfo;                                               // 0x0330   (0x0030)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0360   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0370   (0x0010)  
	unsigned char                                      UnknownData05_6[0x10];                                      // 0x0380   (0x0010)  MISSED
	TArray<FSkinWeightProfileInfo>                     SkinWeightProfiles;                                         // 0x0390   (0x0010)  


	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetMorphTargets
	// void SetMorphTargets(TArray<UMorphTarget*>& InMorphTargets);                                                             // [0x41398b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMeshClothingAssets
	// void SetMeshClothingAssets(TArray<UClothingAssetBase*>& InMeshClothingAssets);                                           // [0x4139800] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetMaterials
	// void SetMaterials(TArray<FSkeletalMaterial>& InMaterials);                                                               // [0x4139750] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	// void SetLODSettings(class USkeletalMeshLODSettings* InLODSettings);                                                      // [0xbce480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.SetDefaultAnimatingRig
	// void SetDefaultAnimatingRig(TWeakObjectPtr<UObject*> InAnimatingRig);                                                    // [0x4139640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	// int32_t NumSockets();                                                                                                    // [0x4139610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	// TArray<FString> K2_GetAllMorphTargetNames();                                                                             // [0x4139530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	// bool IsSectionUsingCloth(int32_t InSectionIndex, bool bCheckCorrespondingSections);                                      // [0x4139460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	// class USkeletalMeshSocket* GetSocketByIndex(int32_t Index);                                                              // [0x41393c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetSkeleton
	// class USkeleton* GetSkeleton();                                                                                          // [0x41393a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetShadowPhysicsAsset
	// class UPhysicsAsset* GetShadowPhysicsAsset();                                                                            // [0x4139380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetPhysicsAsset
	// class UPhysicsAsset* GetPhysicsAsset();                                                                                  // [0x4139360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingData
	// TArray<UNodeMappingContainer*> GetNodeMappingData();                                                                     // [0x41392d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	// class UNodeMappingContainer* GetNodeMappingContainer(class UBlueprint* SourceAsset);                                     // [0x4139230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMorphTargets
	// TArray<UMorphTarget*> GetMorphTargets();                                                                                 // [0x4139200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMeshClothingAssets
	// TArray<UClothingAssetBase*> GetMeshClothingAssets();                                                                     // [0x41391d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetMaterials
	// TArray<FSkeletalMaterial> GetMaterials();                                                                                // [0x41391a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetLODSettings
	// class USkeletalMeshLODSettings* GetLODSettings();                                                                        // [0x408be30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	// FBoxSphereBounds GetImportedBounds();                                                                                    // [0x4139150] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetDefaultAnimatingRig
	// TWeakObjectPtr<UObject*> GetDefaultAnimatingRig();                                                                       // [0x41390f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x41390a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketInfo
	// class USkeletalMeshSocket* FindSocketInfo(FName InSocketName, FTransform& OutTransform, int32_t& OutBoneIndex, int32_t& OutIndex); // [0x4138ed0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	// class USkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, int32_t& OutIndex);                                    // [0x4138df0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMesh.FindSocket
	// class USkeletalMeshSocket* FindSocket(FName InSocketName);                                                               // [0x4138d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UAnimNotify : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotify.Received_Notify
	// bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                        // [0x24710f0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotify.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0x11e1640] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UReverbEffect : public UObject
{ 
public:
	bool                                               bBypassEarlyReflections;                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x002C   (0x0004)  
	float                                              GainHF;                                                     // 0x0030   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x0034   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x003C   (0x0004)  
	float                                              DecayTime;                                                  // 0x0040   (0x0004)  
	float                                              Density;                                                    // 0x0044   (0x0004)  
	float                                              Diffusion;                                                  // 0x0048   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x004C   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0050   (0x0004)  
	float                                              LateGain;                                                   // 0x0054   (0x0004)  
	float                                              Gain;                                                       // 0x0058   (0x0004)  
	float                                              RoomRolloffFactor;                                          // 0x005C   (0x0004)  
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0000 (0 bytes) (0x000068 - 0x000068) align 8 pad: 0x0000
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
public:
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UStereoLayerShape : public UObject
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAssetImportData : public UObject
{ 
public:
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAssetUserData : public UObject
{ 
public:
};

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0000 (0 bytes) (0x000450 - 0x000450) align 16 pad: 0x0000
class UFXSystemComponent : public UPrimitiveComponent
{ 
public:


	/// Functions
	// Function /Script/Engine.FXSystemComponent.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x41054b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetUseAutoManageAttachment
	// void SetUseAutoManageAttachment(bool bAutoManage);                                                                       // [0x4105420] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetIntParameter
	// void SetIntParameter(FName ParameterName, int32_t Param);                                                                // [0x4105090] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x4104fb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetEmitterEnable
	// void SetEmitterEnable(FName EmitterName, bool bNewEnableState);                                                          // [0x4104ee0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x4104e00] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetBoolParameter
	// void SetBoolParameter(FName ParameterName, bool Param);                                                                  // [0x4104d30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetAutoAttachmentParameters
	// void SetAutoAttachmentParameters(class USceneComponent* Parent, FName SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule); // [0x4104410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x4104210] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.ReleaseToPool
	// void ReleaseToPool();                                                                                                    // [0x20c7100] Native|Public|BlueprintCallable 
	// Function /Script/Engine.FXSystemComponent.GetFXSystemAsset
	// class UFXSystemAsset* GetFXSystemAsset();                                                                                // [0x4104110] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UFXSystemAsset : public UObject
{ 
public:
	uint32_t                                           MaxPoolSize;                                                // 0x0028   (0x0004)  
	uint32_t                                           PoolPrimeSize;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UAnimNotifyState : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotifyState.Received_NotifyTick
	// bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime); // [0x24710f0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyEnd
	// bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);                     // [0x24710f0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyBegin
	// bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration); // [0x24710f0] Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.AnimNotifyState.GetNotifyName
	// FString GetNotifyName();                                                                                                 // [0x11e1640] Native|Event|Public|BlueprintEvent|Const 
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FGeomSelection
{ 
	int32_t                                            Type;                                                       // 0x0000   (0x0004)  
	int32_t                                            Index;                                                      // 0x0004   (0x0004)  
	int32_t                                            SelectionIndex;                                             // 0x0008   (0x0004)  
};

/// Class /Script/Engine.Brush
/// Size: 0x0038 (56 bytes) (0x000220 - 0x000258) align 8 pad: 0x0000
class ABrush : public AActor
{ 
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                  // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0221   (0x0003)  MISSED
	FColor                                             BrushColor;                                                 // 0x0224   (0x0004)  
	int32_t                                            PolyFlags;                                                  // 0x0228   (0x0004)  
	bool                                               bColored : 1;                                               // 0x022C:0 (0x0001)  
	bool                                               bSolidWhenSelected : 1;                                     // 0x022C:1 (0x0001)  
	bool                                               bPlaceableFromClassBrowser : 1;                             // 0x022C:2 (0x0001)  
	bool                                               bNotForClientOrServer : 1;                                  // 0x022C:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x022D   (0x0003)  MISSED
	class UModel*                                      Brush;                                                      // 0x0230   (0x0008)  
	class UBrushComponent*                             BrushComponent;                                             // 0x0238   (0x0008)  
	bool                                               bInManipulation : 1;                                        // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0241   (0x0007)  MISSED
	TArray<FGeomSelection>                             SavedSelections;                                            // 0x0248   (0x0010)  
};

/// Class /Script/Engine.Volume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class AVolume : public ABrush
{ 
public:
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USaveGame : public UObject
{ 
public:
};

/// Class /Script/Engine.CameraShakePattern
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UCameraShakePattern : public UObject
{ 
public:
};

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UDynamicSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UEngineSubsystem : public UDynamicSubsystem
{ 
public:
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UDataAsset : public UObject
{ 
public:
	class UClass*                                      NativeClass;                                                // 0x0028   (0x0008)  
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UMaterialExpression : public UObject
{ 
public:
	class UMaterial*                                   Material;                                                   // 0x0028   (0x0008)  
	class UMaterialFunction*                           Function;                                                   // 0x0030   (0x0008)  
	bool                                               bIsParameterExpression : 1;                                 // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FStatColorMapEntry
{ 
	float                                              In;                                                         // 0x0000   (0x0004)  
	FColor                                             Out;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStatColorMapping
{ 
	FString                                            StatName;                                                   // 0x0000   (0x0010)  
	TArray<FStatColorMapEntry>                         ColorMap;                                                   // 0x0010   (0x0010)  
	bool                                               DisableBlend : 1;                                           // 0x0020:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FGameNameRedirect
{ 
	FName                                              OldGameName;                                                // 0x0000   (0x0008)  
	FName                                              NewGameName;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FClassRedirect
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	FName                                              OldClassName;                                               // 0x0008   (0x0008)  
	FName                                              NewClassName;                                               // 0x0010   (0x0008)  
	FName                                              OldSubobjName;                                              // 0x0018   (0x0008)  
	FName                                              NewSubobjName;                                              // 0x0020   (0x0008)  
	FName                                              NewClassClass;                                              // 0x0028   (0x0008)  
	FName                                              NewClassPackage;                                            // 0x0030   (0x0008)  
	bool                                               InstanceOnly;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0039   (0x0003)  MISSED
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FPluginRedirect
{ 
	FString                                            OldPluginName;                                              // 0x0000   (0x0010)  
	FString                                            NewPluginName;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FStructRedirect
{ 
	FName                                              OldStructName;                                              // 0x0000   (0x0008)  
	FName                                              NewStructName;                                              // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDirectoryPath
{ 
	FString                                            Path;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FDropNoteInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	FString                                            Comment;                                                    // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FNetDriverDefinition
{ 
	FName                                              DefName;                                                    // 0x0000   (0x0008)  
	FName                                              DriverClassName;                                            // 0x0008   (0x0008)  
	FName                                              DriverClassNameFallback;                                    // 0x0010   (0x0008)  
};

/// Class /Script/Engine.Engine
/// Size: 0x0CF8 (3320 bytes) (0x000028 - 0x000D20) align 8 pad: 0x0000
class UEngine : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UFont*                                       TinyFont;                                                   // 0x0030   (0x0008)  
	FSoftObjectPath                                    TinyFontName;                                               // 0x0038   (0x0018)  
	class UFont*                                       SmallFont;                                                  // 0x0050   (0x0008)  
	FSoftObjectPath                                    SmallFontName;                                              // 0x0058   (0x0018)  
	class UFont*                                       MediumFont;                                                 // 0x0070   (0x0008)  
	FSoftObjectPath                                    MediumFontName;                                             // 0x0078   (0x0018)  
	class UFont*                                       LargeFont;                                                  // 0x0090   (0x0008)  
	FSoftObjectPath                                    LargeFontName;                                              // 0x0098   (0x0018)  
	class UFont*                                       SubtitleFont;                                               // 0x00B0   (0x0008)  
	FSoftObjectPath                                    SubtitleFontName;                                           // 0x00B8   (0x0018)  
	TArray<class UFont*>                               AdditionalFonts;                                            // 0x00D0   (0x0010)  
	TArray<FString>                                    AdditionalFontNames;                                        // 0x00E0   (0x0010)  
	class UClass*                                      ConsoleClass;                                               // 0x00F0   (0x0008)  
	FSoftClassPath                                     ConsoleClassName;                                           // 0x00F8   (0x0018)  
	class UClass*                                      GameViewportClientClass;                                    // 0x0110   (0x0008)  
	FSoftClassPath                                     GameViewportClientClassName;                                // 0x0118   (0x0018)  
	class UClass*                                      LocalPlayerClass;                                           // 0x0130   (0x0008)  
	FSoftClassPath                                     LocalPlayerClassName;                                       // 0x0138   (0x0018)  
	class UClass*                                      WorldSettingsClass;                                         // 0x0150   (0x0008)  
	FSoftClassPath                                     WorldSettingsClassName;                                     // 0x0158   (0x0018)  
	FSoftClassPath                                     NavigationSystemClassName;                                  // 0x0170   (0x0018)  
	class UClass*                                      NavigationSystemClass;                                      // 0x0188   (0x0008)  
	FSoftClassPath                                     NavigationSystemConfigClassName;                            // 0x0190   (0x0018)  
	class UClass*                                      NavigationSystemConfigClass;                                // 0x01A8   (0x0008)  
	FSoftClassPath                                     AvoidanceManagerClassName;                                  // 0x01B0   (0x0018)  
	class UClass*                                      AvoidanceManagerClass;                                      // 0x01C8   (0x0008)  
	FSoftClassPath                                     AIControllerClassName;                                      // 0x01D0   (0x0018)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x01E8   (0x0008)  
	FSoftClassPath                                     PhysicsCollisionHandlerClassName;                           // 0x01F0   (0x0018)  
	FSoftClassPath                                     GameUserSettingsClassName;                                  // 0x0208   (0x0018)  
	class UClass*                                      GameUserSettingsClass;                                      // 0x0220   (0x0008)  
	class UGameUserSettings*                           GameUserSettings;                                           // 0x0228   (0x0008)  
	class UClass*                                      LevelScriptActorClass;                                      // 0x0230   (0x0008)  
	FSoftClassPath                                     LevelScriptActorClassName;                                  // 0x0238   (0x0018)  
	FSoftClassPath                                     DefaultBlueprintBaseClassName;                              // 0x0250   (0x0018)  
	FSoftClassPath                                     GameSingletonClassName;                                     // 0x0268   (0x0018)  
	class UObject*                                     GameSingleton;                                              // 0x0280   (0x0008)  
	FSoftClassPath                                     AssetManagerClassName;                                      // 0x0288   (0x0018)  
	class UAssetManager*                               AssetManager;                                               // 0x02A0   (0x0008)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x02A8   (0x0008)  
	FSoftObjectPath                                    DefaultTextureName;                                         // 0x02B0   (0x0018)  
	class UTexture*                                    DefaultDiffuseTexture;                                      // 0x02C8   (0x0008)  
	FSoftObjectPath                                    DefaultDiffuseTextureName;                                  // 0x02D0   (0x0018)  
	class UTexture2D*                                  DefaultBSPVertexTexture;                                    // 0x02E8   (0x0008)  
	FSoftObjectPath                                    DefaultBSPVertexTextureName;                                // 0x02F0   (0x0018)  
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                  // 0x0308   (0x0008)  
	FSoftObjectPath                                    HighFrequencyNoiseTextureName;                              // 0x0310   (0x0018)  
	class UTexture2D*                                  DefaultBokehTexture;                                        // 0x0328   (0x0008)  
	FSoftObjectPath                                    DefaultBokehTextureName;                                    // 0x0330   (0x0018)  
	class UTexture2D*                                  DefaultBloomKernelTexture;                                  // 0x0348   (0x0008)  
	FSoftObjectPath                                    DefaultBloomKernelTextureName;                              // 0x0350   (0x0018)  
	class UMaterial*                                   WireframeMaterial;                                          // 0x0368   (0x0008)  
	FString                                            WireframeMaterialName;                                      // 0x0370   (0x0010)  
	class UMaterial*                                   DebugMeshMaterial;                                          // 0x0380   (0x0008)  
	FSoftObjectPath                                    DebugMeshMaterialName;                                      // 0x0388   (0x0018)  
	class UMaterial*                                   EmissiveMeshMaterial;                                       // 0x03A0   (0x0008)  
	FSoftObjectPath                                    EmissiveMeshMaterialName;                                   // 0x03A8   (0x0018)  
	class UMaterial*                                   LevelColorationLitMaterial;                                 // 0x03C0   (0x0008)  
	FString                                            LevelColorationLitMaterialName;                             // 0x03C8   (0x0010)  
	class UMaterial*                                   LevelColorationUnlitMaterial;                               // 0x03D8   (0x0008)  
	FString                                            LevelColorationUnlitMaterialName;                           // 0x03E0   (0x0010)  
	class UMaterial*                                   LightingTexelDensityMaterial;                               // 0x03F0   (0x0008)  
	FString                                            LightingTexelDensityName;                                   // 0x03F8   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                           // 0x0408   (0x0008)  
	FString                                            ShadedLevelColorationLitMaterialName;                       // 0x0410   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                         // 0x0420   (0x0008)  
	FString                                            ShadedLevelColorationUnlitMaterialName;                     // 0x0428   (0x0010)  
	class UMaterial*                                   RemoveSurfaceMaterial;                                      // 0x0438   (0x0008)  
	FSoftObjectPath                                    RemoveSurfaceMaterialName;                                  // 0x0440   (0x0018)  
	class UMaterial*                                   VertexColorMaterial;                                        // 0x0458   (0x0008)  
	FString                                            VertexColorMaterialName;                                    // 0x0460   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                      // 0x0470   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_ColorOnly;                  // 0x0478   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                   // 0x0488   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_AlphaAsColor;               // 0x0490   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                        // 0x04A0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_RedOnly;                    // 0x04A8   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                      // 0x04B8   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_GreenOnly;                  // 0x04C0   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                       // 0x04D0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_BlueOnly;                   // 0x04D8   (0x0010)  
	FSoftObjectPath                                    DebugEditorMaterialName;                                    // 0x04E8   (0x0018)  
	class UMaterial*                                   ConstraintLimitMaterial;                                    // 0x0500   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                   // 0x0508   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                               // 0x0510   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                   // 0x0518   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                               // 0x0520   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                   // 0x0528   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                               // 0x0530   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                           // 0x0538   (0x0008)  
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                            // 0x0540   (0x0008)  
	FSoftObjectPath                                    InvalidLightmapSettingsMaterialName;                        // 0x0548   (0x0018)  
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                            // 0x0560   (0x0008)  
	FSoftObjectPath                                    PreviewShadowsIndicatorMaterialName;                        // 0x0568   (0x0018)  
	class UMaterial*                                   ArrowMaterial;                                              // 0x0580   (0x0008)  
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                        // 0x0588   (0x0008)  
	FSoftObjectPath                                    ArrowMaterialName;                                          // 0x0590   (0x0018)  
	FLinearColor                                       LightingOnlyBrightness;                                     // 0x05A8   (0x0010)  
	TArray<FLinearColor>                               ShaderComplexityColors;                                     // 0x05B8   (0x0010)  
	TArray<FLinearColor>                               QuadComplexityColors;                                       // 0x05C8   (0x0010)  
	TArray<FLinearColor>                               LightComplexityColors;                                      // 0x05D8   (0x0010)  
	TArray<FLinearColor>                               StationaryLightOverlapColors;                               // 0x05E8   (0x0010)  
	TArray<FLinearColor>                               LODColorationColors;                                        // 0x05F8   (0x0010)  
	TArray<FLinearColor>                               HLODColorationColors;                                       // 0x0608   (0x0010)  
	TArray<FLinearColor>                               StreamingAccuracyColors;                                    // 0x0618   (0x0010)  
	float                                              MaxPixelShaderAdditiveComplexityCount;                      // 0x0628   (0x0004)  
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                   // 0x062C   (0x0004)  
	float                                              MinLightMapDensity;                                         // 0x0630   (0x0004)  
	float                                              IdealLightMapDensity;                                       // 0x0634   (0x0004)  
	float                                              MaxLightMapDensity;                                         // 0x0638   (0x0004)  
	bool                                               bRenderLightMapDensityGrayscale : 1;                        // 0x063C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x063D   (0x0003)  MISSED
	float                                              RenderLightMapDensityGrayscaleScale;                        // 0x0640   (0x0004)  
	float                                              RenderLightMapDensityColorScale;                            // 0x0644   (0x0004)  
	FLinearColor                                       LightMapDensityVertexMappedColor;                           // 0x0648   (0x0010)  
	FLinearColor                                       LightMapDensitySelectedColor;                               // 0x0658   (0x0010)  
	TArray<FStatColorMapping>                          StatColorMappings;                                          // 0x0668   (0x0010)  
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                        // 0x0678   (0x0008)  
	FSoftObjectPath                                    DefaultPhysMaterialName;                                    // 0x0680   (0x0018)  
	TArray<FGameNameRedirect>                          ActiveGameNameRedirects;                                    // 0x0698   (0x0010)  
	TArray<FClassRedirect>                             ActiveClassRedirects;                                       // 0x06A8   (0x0010)  
	TArray<FPluginRedirect>                            ActivePluginRedirects;                                      // 0x06B8   (0x0010)  
	TArray<FStructRedirect>                            ActiveStructRedirects;                                      // 0x06C8   (0x0010)  
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                               // 0x06D8   (0x0008)  
	FSoftObjectPath                                    PreIntegratedSkinBRDFTextureName;                           // 0x06E0   (0x0018)  
	class UTexture2D*                                  BlueNoiseTexture;                                           // 0x06F8   (0x0008)  
	FSoftObjectPath                                    BlueNoiseTextureName;                                       // 0x0700   (0x0018)  
	class UTexture2D*                                  MiniFontTexture;                                            // 0x0718   (0x0008)  
	FSoftObjectPath                                    MiniFontTextureName;                                        // 0x0720   (0x0018)  
	class UTexture*                                    WeightMapPlaceholderTexture;                                // 0x0738   (0x0008)  
	FSoftObjectPath                                    WeightMapPlaceholderTextureName;                            // 0x0740   (0x0018)  
	class UTexture2D*                                  LightMapDensityTexture;                                     // 0x0758   (0x0008)  
	FSoftObjectPath                                    LightMapDensityTextureName;                                 // 0x0760   (0x0018)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0778   (0x0008)  MISSED
	class UGameViewportClient*                         GameViewport;                                               // 0x0780   (0x0008)  
	TArray<FString>                                    DeferredCommands;                                           // 0x0788   (0x0010)  
	float                                              NearClipPlane;                                              // 0x0798   (0x0004)  
	bool                                               bSubtitlesEnabled : 1;                                      // 0x079C:0 (0x0001)  
	bool                                               bSubtitlesForcedOff : 1;                                    // 0x079C:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x079D   (0x0003)  MISSED
	int32_t                                            MaximumLoopIterationCount;                                  // 0x07A0   (0x0004)  
	bool                                               bCanBlueprintsTickByDefault : 1;                            // 0x07A4:0 (0x0001)  
	bool                                               bOptimizeAnimBlueprintMemberVariableAccess : 1;             // 0x07A4:1 (0x0001)  
	bool                                               bAllowMultiThreadedAnimationUpdate : 1;                     // 0x07A4:2 (0x0001)  
	bool                                               bEnableEditorPSysRealtimeLOD : 1;                           // 0x07A4:3 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x07A4:4 (0x0001)  MISSED
	bool                                               bSmoothFrameRate : 1;                                       // 0x07A4:5 (0x0001)  
	bool                                               bUseFixedFrameRate : 1;                                     // 0x07A4:6 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x07A5   (0x0003)  MISSED
	float                                              FixedFrameRate;                                             // 0x07A8   (0x0004)  
	FFloatRange                                        SmoothedFrameRateRange;                                     // 0x07AC   (0x0010)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x07BC   (0x0004)  MISSED
	class UEngineCustomTimeStep*                       CustomTimeStep;                                             // 0x07C0   (0x0008)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x07C8   (0x0020)  MISSED
	FSoftClassPath                                     CustomTimeStepClassName;                                    // 0x07E8   (0x0018)  
	class UTimecodeProvider*                           TimecodeProvider;                                           // 0x0800   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x0808   (0x0020)  MISSED
	FSoftClassPath                                     TimecodeProviderClassName;                                  // 0x0828   (0x0018)  
	bool                                               bGenerateDefaultTimecode;                                   // 0x0840   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0841   (0x0003)  MISSED
	FFrameRate                                         GenerateDefaultTimecodeFrameRate;                           // 0x0844   (0x0008)  
	float                                              GenerateDefaultTimecodeFrameDelay;                          // 0x084C   (0x0004)  
	bool                                               bCheckForMultiplePawnsSpawnedInAFrame : 1;                  // 0x0850:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0851   (0x0003)  MISSED
	int32_t                                            NumPawnsAllowedToBeSpawnedInAFrame;                         // 0x0854   (0x0004)  
	bool                                               bShouldGenerateLowQualityLightmaps : 1;                     // 0x0858:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0859   (0x0003)  MISSED
	FColor                                             C_WorldBox;                                                 // 0x085C   (0x0004)  
	FColor                                             C_BrushWire;                                                // 0x0860   (0x0004)  
	FColor                                             C_AddWire;                                                  // 0x0864   (0x0004)  
	FColor                                             C_SubtractWire;                                             // 0x0868   (0x0004)  
	FColor                                             C_SemiSolidWire;                                            // 0x086C   (0x0004)  
	FColor                                             C_NonSolidWire;                                             // 0x0870   (0x0004)  
	FColor                                             C_WireBackground;                                           // 0x0874   (0x0004)  
	FColor                                             C_ScaleBoxHi;                                               // 0x0878   (0x0004)  
	FColor                                             C_VolumeCollision;                                          // 0x087C   (0x0004)  
	FColor                                             C_BSPCollision;                                             // 0x0880   (0x0004)  
	FColor                                             C_OrthoBackground;                                          // 0x0884   (0x0004)  
	FColor                                             C_Volume;                                                   // 0x0888   (0x0004)  
	FColor                                             C_BrushShape;                                               // 0x088C   (0x0004)  
	float                                              StreamingDistanceFactor;                                    // 0x0890   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x0894   (0x0004)  MISSED
	FDirectoryPath                                     GameScreenshotSaveDirectory;                                // 0x0898   (0x0010)  
	ETransitionType                                    TransitionType;                                             // 0x08A8   (0x0001)  
	unsigned char                                      UnknownData13_6[0x7];                                       // 0x08A9   (0x0007)  MISSED
	FString                                            TransitionDescription;                                      // 0x08B0   (0x0010)  
	FString                                            TransitionGameMode;                                         // 0x08C0   (0x0010)  
	bool                                               bAllowMatureLanguage : 1;                                   // 0x08D0:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x08D1   (0x0003)  MISSED
	float                                              CameraRotationThreshold;                                    // 0x08D4   (0x0004)  
	float                                              CameraTranslationThreshold;                                 // 0x08D8   (0x0004)  
	float                                              PrimitiveProbablyVisibleTime;                               // 0x08DC   (0x0004)  
	float                                              MaxOcclusionPixelsFraction;                                 // 0x08E0   (0x0004)  
	bool                                               bPauseOnLossOfFocus : 1;                                    // 0x08E4:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x08E5   (0x0003)  MISSED
	int32_t                                            MaxParticleResize;                                          // 0x08E8   (0x0004)  
	int32_t                                            MaxParticleResizeWarn;                                      // 0x08EC   (0x0004)  
	TArray<FDropNoteInfo>                              PendingDroppedNotes;                                        // 0x08F0   (0x0010)  
	float                                              NetClientTicksPerSecond;                                    // 0x0900   (0x0004)  
	float                                              DisplayGamma;                                               // 0x0904   (0x0004)  
	float                                              MinDesiredFrameRate;                                        // 0x0908   (0x0004)  
	FLinearColor                                       DefaultSelectedMaterialColor;                               // 0x090C   (0x0010)  
	FLinearColor                                       SelectedMaterialColor;                                      // 0x091C   (0x0010)  
	FLinearColor                                       SelectionOutlineColor;                                      // 0x092C   (0x0010)  
	FLinearColor                                       SubduedSelectionOutlineColor;                               // 0x093C   (0x0010)  
	FLinearColor                                       SelectedMaterialColorOverride;                              // 0x094C   (0x0010)  
	bool                                               bIsOverridingSelectedColor;                                 // 0x095C   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x095D   (0x0003)  MISSED
	bool                                               bEnableOnScreenDebugMessages : 1;                           // 0x0960:0 (0x0001)  
	bool                                               bEnableOnScreenDebugMessagesDisplay : 1;                    // 0x0960:1 (0x0001)  
	bool                                               bSuppressMapWarnings : 1;                                   // 0x0960:2 (0x0001)  
	bool                                               bDisableAILogging : 1;                                      // 0x0960:3 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0961   (0x0003)  MISSED
	uint32_t                                           bEnableVisualLogRecordingOnStart;                           // 0x0964   (0x0004)  
	int32_t                                            ScreenSaverInhibitorSemaphore;                              // 0x0968   (0x0004)  
	bool                                               bLockReadOnlyLevels : 1;                                    // 0x096C:0 (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x096D   (0x0003)  MISSED
	FString                                            ParticleEventManagerClassPath;                              // 0x0970   (0x0010)  
	float                                              SelectionHighlightIntensity;                                // 0x0980   (0x0004)  
	float                                              BSPSelectionHighlightIntensity;                             // 0x0984   (0x0004)  
	float                                              SelectionHighlightIntensityBillboards;                      // 0x0988   (0x0004)  
	unsigned char                                      UnknownData19_6[0x26C];                                     // 0x098C   (0x026C)  MISSED
	TArray<FNetDriverDefinition>                       NetDriverDefinitions;                                       // 0x0BF8   (0x0010)  
	TArray<FString>                                    ServerActors;                                               // 0x0C08   (0x0010)  
	TArray<FString>                                    RuntimeServerActors;                                        // 0x0C18   (0x0010)  
	float                                              NetErrorLogInterval;                                        // 0x0C28   (0x0004)  
	bool                                               bStartedLoadMapMovie : 1;                                   // 0x0C2C:0 (0x0001)  
	unsigned char                                      UnknownData20_5[0x1B];                                      // 0x0C2D   (0x001B)  MISSED
	int32_t                                            NextWorldContextHandle;                                     // 0x0C48   (0x0004)  
	unsigned char                                      UnknownData21_7[0xD4];                                      // 0x0C4C   (0x00D4)  MISSED
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UScriptViewportClient : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDebugDisplayProperty
{ 
	class UObject*                                     Obj;                                                        // 0x0000   (0x0008)  
	class UClass*                                      WithinClass;                                                // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0328 (808 bytes) (0x000038 - 0x000360) align 8 pad: 0x0000
class UGameViewportClient : public UScriptViewportClient
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	class UConsole*                                    ViewportConsole;                                            // 0x0040   (0x0008)  
	TArray<FDebugDisplayProperty>                      DebugProperties;                                            // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0058   (0x0010)  MISSED
	int32_t                                            MaxSplitscreenPlayers;                                      // 0x0068   (0x0004)  
	unsigned char                                      UnknownData02_6[0xC];                                       // 0x006C   (0x000C)  MISSED
	class UWorld*                                      World;                                                      // 0x0078   (0x0008)  
	class UGameInstance*                               GameInstance;                                               // 0x0080   (0x0008)  
	unsigned char                                      UnknownData03_7[0x2D8];                                     // 0x0088   (0x02D8)  MISSED


	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	// void SSSwapControllers();                                                                                                // [0x181c2c0] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	// void ShowTitleSafeArea();                                                                                                // [0x20a39e0] Exec|Native|Public   
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	// void SetConsoleTarget(int32_t PlayerIndex);                                                                              // [0x4069290] Exec|Native|Public   
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0210 (528 bytes) (0x000048 - 0x000258) align 8 pad: 0x0000
class ULocalPlayer : public UPlayer
{ 
public:
	unsigned char                                      UnknownData00_3[0x28];                                      // 0x0048   (0x0028)  MISSED
	class UGameViewportClient*                         ViewportClient;                                             // 0x0070   (0x0008)  
	unsigned char                                      UnknownData01_6[0x1C];                                      // 0x0078   (0x001C)  MISSED
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                  // 0x0094   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	class UClass*                                      PendingLevelPlayerControllerClass;                          // 0x0098   (0x0008)  
	bool                                               bSentSplitJoin : 1;                                         // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x17];                                      // 0x00A1   (0x0017)  MISSED
	int32_t                                            ControllerId;                                               // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData04_7[0x19C];                                     // 0x00BC   (0x019C)  MISSED
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class ULocalPlayerSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UGameInstanceSubsystem : public USubsystem
{ 
public:
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSingleAnimationPlayData
{ 
	class UAnimationAsset*                             AnimToPlay;                                                 // 0x0000   (0x0008)  
	bool                                               bSavedLooping : 1;                                          // 0x0008:0 (0x0001)  
	bool                                               bSavedPlaying : 1;                                          // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SavedPosition;                                              // 0x000C   (0x0004)  
	float                                              SavedPlayRate;                                              // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x0830 (2096 bytes) (0x0006A0 - 0x000ED0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                                // 0x06A0   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x06A8   (0x0008)  
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x06B0   (0x0008)  
	class UAnimInstance*                               PostProcessAnimInstance;                                    // 0x06B8   (0x0008)  
	FSingleAnimationPlayData                           AnimationData;                                              // 0x06C0   (0x0018)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x06D8   (0x0010)  MISSED
	FVector                                            RootBoneTranslation;                                        // 0x06E8   (0x000C)  
	FVector                                            LineCheckBoundsScale;                                       // 0x06F4   (0x000C)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0700   (0x0030)  MISSED
	TArray<class UAnimInstance*>                       LinkedInstances;                                            // 0x0730   (0x0010)  
	TArray<FTransform>                                 CachedBoneSpaceTransforms;                                  // 0x0740   (0x0010)  
	TArray<FTransform>                                 CachedComponentSpaceTransforms;                             // 0x0750   (0x0010)  
	unsigned char                                      UnknownData02_6[0x150];                                     // 0x0760   (0x0150)  MISSED
	float                                              GlobalAnimRateScale;                                        // 0x08B0   (0x0004)  
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                   // 0x08B4   (0x0001)  
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                                 // 0x08B5   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x08B6   (0x0001)  MISSED
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                              // 0x08B7   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x08B8   (0x0001)  MISSED
	bool                                               bDisablePostProcessBlueprint : 1;                           // 0x08B9:0 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x08B9:1 (0x0001)  MISSED
	bool                                               bUpdateOverlapsOnAnimationFinalize : 1;                     // 0x08B9:2 (0x0001)  
	unsigned char                                      UnknownBit06 : 1;                                           // 0x08B9:3 (0x0001)  MISSED
	bool                                               bHasValidBodies : 1;                                        // 0x08B9:4 (0x0001)  
	bool                                               bBlendPhysics : 1;                                          // 0x08B9:5 (0x0001)  
	bool                                               bEnablePhysicsOnDedicatedServer : 1;                        // 0x08B9:6 (0x0001)  
	bool                                               bUpdateJointsFromAnimation : 1;                             // 0x08B9:7 (0x0001)  
	bool                                               bDisableClothSimulation : 1;                                // 0x08BA:0 (0x0001)  
	unsigned char                                      UnknownData07_3[0x5];                                       // 0x08BB   (0x0005)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x08C0:0 (0x0001)  MISSED
	bool                                               bDisableRigidBodyAnimNode : 1;                              // 0x08C0:1 (0x0001)  
	bool                                               bAllowAnimCurveEvaluation : 1;                              // 0x08C0:2 (0x0001)  
	bool                                               bDisableAnimCurves : 1;                                     // 0x08C0:3 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x08C0:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x08C0:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x08C0:6 (0x0001)  MISSED
	bool                                               bCollideWithEnvironment : 1;                                // 0x08C0:7 (0x0001)  
	bool                                               bCollideWithAttachedChildren : 1;                           // 0x08C1:0 (0x0001)  
	bool                                               bLocalSpaceSimulation : 1;                                  // 0x08C1:1 (0x0001)  
	bool                                               bResetAfterTeleport : 1;                                    // 0x08C1:2 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x08C1:3 (0x0001)  MISSED
	bool                                               bDeferKinematicBoneUpdate : 1;                              // 0x08C1:4 (0x0001)  
	bool                                               bNoSkeletonUpdate : 1;                                      // 0x08C1:5 (0x0001)  
	bool                                               bPauseAnims : 1;                                            // 0x08C1:6 (0x0001)  
	bool                                               bUseRefPoseOnInitAnim : 1;                                  // 0x08C1:7 (0x0001)  
	bool                                               bEnablePerPolyCollision : 1;                                // 0x08C2:0 (0x0001)  
	bool                                               bForceRefpose : 1;                                          // 0x08C2:1 (0x0001)  
	bool                                               bOnlyAllowAutonomousTickPose : 1;                           // 0x08C2:2 (0x0001)  
	bool                                               bIsAutonomousTickPose : 1;                                  // 0x08C2:3 (0x0001)  
	bool                                               bOldForceRefPose : 1;                                       // 0x08C2:4 (0x0001)  
	bool                                               bShowPrePhysBones : 1;                                      // 0x08C2:5 (0x0001)  
	bool                                               bRequiredBonesUpToDate : 1;                                 // 0x08C2:6 (0x0001)  
	bool                                               bAnimTreeInitialised : 1;                                   // 0x08C2:7 (0x0001)  
	bool                                               bIncludeComponentLocationIntoBounds : 1;                    // 0x08C3:0 (0x0001)  
	bool                                               bEnableLineCheckWithBounds : 1;                             // 0x08C3:1 (0x0001)  
	bool                                               bPropagateCurvesToSlaves : 1;                               // 0x08C3:2 (0x0001)  
	bool                                               bSkipKinematicUpdateWhenInterpolating : 1;                  // 0x08C3:3 (0x0001)  
	bool                                               bSkipBoundsUpdateWhenInterpolating : 1;                     // 0x08C3:4 (0x0001)  
	unsigned char                                      UnknownBit13 : 1;                                           // 0x08C3:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x08C3:6 (0x0001)  MISSED
	bool                                               bNeedsQueuedAnimEventsDispatched : 1;                       // 0x08C3:7 (0x0001)  
	unsigned char                                      UnknownData15_5[0x2];                                       // 0x08C4   (0x0002)  MISSED
	uint16_t                                           CachedAnimCurveUidVersion;                                  // 0x08C6   (0x0002)  
	float                                              ClothBlendWeight;                                           // 0x08C8   (0x0004)  
	bool                                               bWaitForParallelClothTask;                                  // 0x08CC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x08CD   (0x0003)  MISSED
	TArray<FName>                                      DisallowedAnimCurves;                                       // 0x08D0   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x08E0   (0x0008)  
	unsigned char                                      UnknownData17_6[0x8];                                       // 0x08E8   (0x0008)  MISSED
	SDK_UNDEFINED(16,47) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                  // 0x08F0   (0x0010)  
	class UClass*                                      ClothingSimulationFactory;                                  // 0x0900   (0x0008)  
	unsigned char                                      UnknownData18_6[0xD0];                                      // 0x0908   (0x00D0)  MISSED
	float                                              TeleportDistanceThreshold;                                  // 0x09D8   (0x0004)  
	float                                              TeleportRotationThreshold;                                  // 0x09DC   (0x0004)  
	unsigned char                                      UnknownData19_6[0x8];                                       // 0x09E0   (0x0008)  MISSED
	uint32_t                                           LastPoseTickFrame;                                          // 0x09E8   (0x0004)  
	unsigned char                                      UnknownData20_6[0x54];                                      // 0x09EC   (0x0054)  MISSED
	class UClothingSimulationInteractor*               ClothingInteractor;                                         // 0x0A40   (0x0008)  
	unsigned char                                      UnknownData21_6[0xC8];                                      // 0x0A48   (0x00C8)  MISSED
	SDK_UNDEFINED(16,48) /* FMulticastInlineDelegate */ __um(OnAnimInitialized);                                   // 0x0B10   (0x0010)  
	unsigned char                                      UnknownData22_7[0x3A8];                                     // 0x0B20   (0x03A8)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x413f580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	// void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);                                                   // [0x413f4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	// void ToggleDisablePostProcessBlueprint();                                                                                // [0x413f4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.TermBodiesBelow
	// void TermBodiesBelow(FName ParentBoneName);                                                                              // [0x413f440] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	// void SuspendClothingSimulation();                                                                                        // [0x413f420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	// void Stop();                                                                                                             // [0x413f400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x413f330] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateClothInEditor
	// void SetUpdateClothInEditor(bool NewUpdateState);                                                                        // [0x2060660] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	// void SetUpdateAnimationInEditor(bool NewUpdateState);                                                                    // [0x2060660] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	// void SetTeleportRotationThreshold(float Threshold);                                                                      // [0x413f2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	// void SetTeleportDistanceThreshold(float Threshold);                                                                      // [0x413f230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	// void SetPosition(float InPos, bool bFireNotifies);                                                                       // [0x413f150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	// void SetPlayRate(float Rate);                                                                                            // [0x413f0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	// void SetPhysicsBlendWeight(float PhysicsBlendWeight);                                                                    // [0x413f050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	// void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);             // [0x413ef30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);                                         // [0x413ee10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	// void SetEnablePhysicsBlending(bool bNewBlendPhysics);                                                                    // [0x413ed80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	// void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);                           // [0x413ec70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	// void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);                                                          // [0x413eba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	// void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);                                                         // [0x413eb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	// void SetDisableAnimCurves(bool bInDisableAnimCurves);                                                                    // [0x413ea80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	// void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);                                             // [0x413e9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	// void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);                                  // [0x413e8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	// void SetClothMaxDistanceScale(float Scale);                                                                              // [0x413e820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	// void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);                                 // [0x413e750] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimClass
	// void SetAnimClass(class UClass* NewClass);                                                                               // [0x413e5b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	// void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);                                                      // [0x413e6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	// void SetAnimation(class UAnimationAsset* NewAnimToPlay);                                                                 // [0x413e640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	// void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);          // [0x413e450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	// void SetAllowRigidBodyAnimNode(bool bInAllow, bool bReinitAnim);                                                         // [0x413e280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	// void SetAllowedAnimCurvesEvaluation(TArray<FName>& List, bool bAllow);                                                   // [0x413e350] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	// void SetAllowAnimCurveEvaluation(bool bInAllow);                                                                         // [0x413e1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	// void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x413e0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	// void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);      // [0x413df90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	// void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);   // [0x413de20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	// void SetAllBodiesSimulatePhysics(bool bNewSimulate);                                                                     // [0x413dd90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	// void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);                              // [0x413dcb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	// void SetAllBodiesBelowSimulatePhysics(FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);                          // [0x413db80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	// void SetAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf); // [0x413da00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	// void ResumeClothingSimulation();                                                                                         // [0x413d9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	// void ResetClothTeleportMode();                                                                                           // [0x413d9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	// void ResetAnimInstanceDynamics(ETeleportType InTeleportType);                                                            // [0x413d940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	// void ResetAllowedAnimCurveEvaluation();                                                                                  // [0x413d920] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	// void ResetAllBodiesSimulatePhysics();                                                                                    // [0x413d900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	// void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);                                                 // [0x413d830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	// void Play(bool bLooping);                                                                                                // [0x413d7a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	// void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float position, float PlayRate); // [0x413d5e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x413d510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x413d480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	// bool K2_GetClosestPointOnPhysicsAsset(FVector& WorldPosition, FVector& ClosestWorldPosition, FVector& Normal, FName& BoneName, float& Distance); // [0x413d280] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x413d250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	// bool IsClothingSimulationSuspended();                                                                                    // [0x413d220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	// bool IsBodyGravityEnabled(FName BoneName);                                                                               // [0x413d180] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	// bool HasValidAnimationInstance();                                                                                        // [0x413d150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	// float GetTeleportRotationThreshold();                                                                                    // [0x413d120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	// float GetTeleportDistanceThreshold();                                                                                    // [0x413d120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute_Ref
	// bool GetStringAttribute_Ref(FName& BoneName, FName& AttributeName, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413cf60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute
	// bool GetStringAttribute(FName& BoneName, FName& AttributeName, FString DefaultValue, FString& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413cd30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	// FVector GetSkeletalCenterOfMass();                                                                                       // [0x413ccf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	// class UAnimInstance* GetPostProcessInstance();                                                                           // [0x413ccc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	// float GetPosition();                                                                                                     // [0x413cc90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x413cc60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	// float GetMorphTarget(FName MorphTargetName);                                                                             // [0x413cbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x413cb20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x413ca80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x413c990] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x413c8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
	// bool GetIntegerAttribute_Ref(FName& BoneName, FName& AttributeName, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413c750] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute
	// bool GetIntegerAttribute(FName& BoneName, FName& AttributeName, int32_t DefaultValue, int32_t& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413c560] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
	// bool GetFloatAttribute_Ref(FName& BoneName, FName& AttributeName, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413c3b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute
	// bool GetFloatAttribute(FName& BoneName, FName& AttributeName, float DefaultValue, float& OutValue, ECustomBoneAttributeLookup LookupType); // [0x413c1c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	// bool GetDisablePostProcessBlueprint();                                                                                   // [0x413c190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	// bool GetDisableAnimCurves();                                                                                             // [0x413c160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	// void GetCurrentJointAngles(FName InBoneName, float& Swing1Angle, float& TwistAngle, float& Swing2Angle);                 // [0x413bfe0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	// float GetClothMaxDistanceScale();                                                                                        // [0x413bf80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	// class UClothingSimulationInteractor* GetClothingSimulationInteractor();                                                  // [0x413bfb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	// float GetBoneMass(FName BoneName, bool bScaleMass);                                                                      // [0x413beb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	// class UAnimInstance* GetAnimInstance();                                                                                  // [0x413be50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimClass
	// class UClass* GetAnimClass();                                                                                            // [0x413be20] Final|Native|Public  
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	// TEnumAsByte<EAnimationMode> GetAnimationMode();                                                                          // [0x413be80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	// bool GetAllowRigidBodyAnimNode();                                                                                        // [0x413bdc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	// bool GetAllowedAnimCurveEvaluate();                                                                                      // [0x413bdf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	// void ForceClothNextUpdateTeleportAndReset();                                                                             // [0x413bda0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	// void ForceClothNextUpdateTeleport();                                                                                     // [0x413bd80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	// FName FindConstraintBoneName(int32_t ConstraintIndex);                                                                   // [0x413bcf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x413bcd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	// void BreakConstraint(FVector Impulse, FVector HitLocation, FName InBoneName);                                            // [0x413bba0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	// void BindClothToMasterPoseComponent();                                                                                   // [0x413bb80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	// void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);                                                           // [0x413bab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	// void AddImpulseToAllBodiesBelow(FVector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);                    // [0x413b930] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	// void AddForceToAllBodiesBelow(FVector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);                      // [0x413b7b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	// void AccumulateAllBodiesBelowPhysicsBlendWeight(FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType); // [0x413b690] Final|Native|Public|HasOutParms|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimNotifyEventReference
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     NotifySource;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FAnimNotifyQueue
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	TArray<FAnimNotifyEventReference>                  AnimNotifies;                                               // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,49) /* TMap<FName, FAnimNotifyArray> */ __um(UnfilteredMontageAnimNotifies);                  // 0x0020   (0x0050)  
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAnimLinkableElement
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UAnimMontage*                                LinkedMontage;                                              // 0x0008   (0x0008)  
	int32_t                                            SlotIndex;                                                  // 0x0010   (0x0004)  
	int32_t                                            SegmentIndex;                                               // 0x0014   (0x0004)  
	TEnumAsByte<EAnimLinkMethod>                       LinkMethod;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<EAnimLinkMethod>                       CachedLinkMethod;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x001A   (0x0002)  MISSED
	float                                              SegmentBeginTime;                                           // 0x001C   (0x0004)  
	float                                              SegmentLength;                                              // 0x0020   (0x0004)  
	float                                              LinkValue;                                                  // 0x0024   (0x0004)  
	class UAnimSequenceBase*                           LinkedSequence;                                             // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x0088 (136 bytes) (0x000030 - 0x0000B8) align 8 pad: 0x0000
struct FAnimNotifyEvent : FAnimLinkableElement
{ 
	float                                              DisplayTime;                                                // 0x0030   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x0034   (0x0004)  
	float                                              EndTriggerTimeOffset;                                       // 0x0038   (0x0004)  
	float                                              TriggerWeightThreshold;                                     // 0x003C   (0x0004)  
	FName                                              NotifyName;                                                 // 0x0040   (0x0008)  
	class UAnimNotify*                                 Notify;                                                     // 0x0048   (0x0008)  
	class UAnimNotifyState*                            NotifyStateClass;                                           // 0x0050   (0x0008)  
	float                                              Duration;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FAnimLinkableElement                               EndLink;                                                    // 0x0060   (0x0030)  
	bool                                               bConvertedFromBranchingPoint;                               // 0x0090   (0x0001)  
	TEnumAsByte<EMontageNotifyTickType>                MontageTickType;                                            // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0092   (0x0002)  MISSED
	float                                              NotifyTriggerChance;                                        // 0x0094   (0x0004)  
	TEnumAsByte<ENotifyFilterType>                     NotifyFilterType;                                           // 0x0098   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            NotifyFilterLOD;                                            // 0x009C   (0x0004)  
	bool                                               bTriggerOnDedicatedServer;                                  // 0x00A0   (0x0001)  
	bool                                               bTriggerOnFollower;                                         // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x00A2   (0x0002)  MISSED
	int32_t                                            TrackIndex;                                                 // 0x00A4   (0x0004)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x00A8   (0x0010)  MISSED
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x0298 (664 bytes) (0x000028 - 0x0002C0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UAnimInstance : public UObject
{ 
public:
	class USkeleton*                                   CurrentSkeleton;                                            // 0x0028   (0x0008)  
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                             // 0x0030   (0x0001)  
	bool                                               bUseMultiThreadedAnimationUpdate : 1;                       // 0x0031:0 (0x0001)  
	bool                                               bUsingCopyPoseFromMesh : 1;                                 // 0x0031:1 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0031:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0031:3 (0x0001)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x0031:4 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x0031:5 (0x0001)  
	bool                                               bQueueMontageEvents : 1;                                    // 0x0031:6 (0x0001)  
	unsigned char                                      UnknownData02_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	SDK_UNDEFINED(16,50) /* FMulticastInlineDelegate */ __um(OnMontageBlendingOut);                                // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,51) /* FMulticastInlineDelegate */ __um(OnMontageStarted);                                    // 0x0048   (0x0010)  
	SDK_UNDEFINED(16,52) /* FMulticastInlineDelegate */ __um(OnMontageEnded);                                      // 0x0058   (0x0010)  
	SDK_UNDEFINED(16,53) /* FMulticastInlineDelegate */ __um(OnAllMontageInstancesEnded);                          // 0x0068   (0x0010)  
	unsigned char                                      UnknownData03_6[0x88];                                      // 0x0078   (0x0088)  MISSED
	FAnimNotifyQueue                                   NotifyQueue;                                                // 0x0100   (0x0070)  
	TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState;                                      // 0x0170   (0x0010)  
	unsigned char                                      UnknownData04_7[0x138];                                     // 0x0180   (0x0138)  MISSED


	/// Functions
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	// void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);                                                        // [0x3ffe9c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.UnlinkAnimClassLayers
	// void UnlinkAnimClassLayers(class UClass* InClass);                                                                       // [0x4000070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	// class APawn* TryGetPawnOwner();                                                                                          // [0x16fc6d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	// void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);                                                        // [0x3ffffa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	// void SnapshotPose(FPoseSnapshot& Snapshot);                                                                              // [0x3fffed0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	// void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Value);                                                              // [0x3ff4150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	// void SetReceiveNotifiesFromLinkedInstances(bool bSet);                                                                   // [0x3fffe40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	// void SetPropagateNotifiesToLinkedInstances(bool bSet);                                                                   // [0x3fffdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	// void SetMorphTarget(FName MorphTargetName, float Value);                                                                 // [0x3fffce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	// void SavePoseSnapshot(FName SnapshotName);                                                                               // [0x3fffc50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.ResetDynamics
	// void ResetDynamics(ETeleportType InTeleportType);                                                                        // [0x3fffbd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	// class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendoutTime, float InPlayRate, int32_t LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt); // [0x3fff970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimation
	// float PlaySlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendoutTime, float InPlayRate, int32_t LoopCount); // [0x3fff7a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_StopGroupByName
	// void Montage_StopGroupByName(float InBlendOutTime, FName GroupName);                                                     // [0x3fff6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	// void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);                                                    // [0x3fff600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	// void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);                                                // [0x3fff530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	// void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);                                                // [0x3fff460] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	// void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, class UAnimMontage* Montage);                  // [0x3fff350] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	// void Montage_Resume(class UAnimMontage* Montage);                                                                        // [0x3fff2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Play
	// float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages); // [0x3fff110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	// void Montage_Pause(class UAnimMontage* Montage);                                                                         // [0x3fff080] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	// void Montage_JumpToSectionsEnd(FName SectionName, class UAnimMontage* Montage);                                          // [0x3ffefb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	// void Montage_JumpToSection(FName SectionName, class UAnimMontage* Montage);                                              // [0x3ffeee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	// bool Montage_IsPlaying(class UAnimMontage* Montage);                                                                     // [0x3ffee40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	// bool Montage_IsActive(class UAnimMontage* Montage);                                                                      // [0x3ffeda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	// float Montage_GetPosition(class UAnimMontage* Montage);                                                                  // [0x3ffed00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	// float Montage_GetPlayRate(class UAnimMontage* Montage);                                                                  // [0x3ffec60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	// bool Montage_GetIsStopped(class UAnimMontage* Montage);                                                                  // [0x3ffebc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	// FName Montage_GetCurrentSection(class UAnimMontage* Montage);                                                            // [0x3ffeb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	// float Montage_GetBlendTime(class UAnimMontage* Montage);                                                                 // [0x3ffea90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.LockAIResources
	// void LockAIResources(bool bLockMovement, bool LockAILogic);                                                              // [0x3ffe9c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimGraphByTag
	// void LinkAnimGraphByTag(FName InTag, class UClass* InClass);                                                             // [0x3ffe8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.LinkAnimClassLayers
	// void LinkAnimClassLayers(class UClass* InClass);                                                                         // [0x3ffe860] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	// bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder); // [0x3ffe700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	// bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, FName SlotNodeName);                                         // [0x3ffe630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	// bool IsAnyMontagePlaying();                                                                                              // [0x3ffe600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	// bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);                                                       // [0x3ffe530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	// bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, float& OutMarkerTime);                                    // [0x3ffe410] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	// FMarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);                                                     // [0x3ffe360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	// float GetRelevantAnimTimeRemainingFraction(int32_t MachineIndex, int32_t StateIndex);                                    // [0x3ffe290] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	// float GetRelevantAnimTimeRemaining(int32_t MachineIndex, int32_t StateIndex);                                            // [0x3ffe1c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	// float GetRelevantAnimTimeFraction(int32_t MachineIndex, int32_t StateIndex);                                             // [0x3ffe0f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	// float GetRelevantAnimTime(int32_t MachineIndex, int32_t StateIndex);                                                     // [0x3ffe020] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	// float GetRelevantAnimLength(int32_t MachineIndex, int32_t StateIndex);                                                   // [0x3ffdf50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	// bool GetReceiveNotifiesFromLinkedInstances();                                                                            // [0x3ffdf20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	// bool GetPropagateNotifiesToLinkedInstances();                                                                            // [0x3ffdef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	// class USkeletalMeshComponent* GetOwningComponent();                                                                      // [0x3ffdec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	// class AActor* GetOwningActor();                                                                                          // [0x3ffde90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
	// void GetLinkedAnimLayerInstancesByGroup(FName InGroup, TArray<UAnimInstance*>& OutLinkedInstances);                      // [0x3ffdda0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroupAndClass(FName InGroup, class UClass* InClass);                    // [0x3ffdcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	// class UAnimInstance* GetLinkedAnimLayerInstanceByGroup(FName InGroup);                                                   // [0x3ffdc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	// class UAnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);                                           // [0x3ffdb90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	// void GetLinkedAnimGraphInstancesByTag(FName InTag, TArray<UAnimInstance*>& OutLinkedInstances);                          // [0x3ffdaa0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	// class UAnimInstance* GetLinkedAnimGraphInstanceByTag(FName InTag);                                                       // [0x3ffda00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	// float GetInstanceTransitionTimeElapsedFraction(int32_t MachineIndex, int32_t TransitionIndex);                           // [0x3ffd930] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	// float GetInstanceTransitionTimeElapsed(int32_t MachineIndex, int32_t TransitionIndex);                                   // [0x3ffd860] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	// float GetInstanceTransitionCrossfadeDuration(int32_t MachineIndex, int32_t TransitionIndex);                             // [0x3ffd790] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	// float GetInstanceStateWeight(int32_t MachineIndex, int32_t StateIndex);                                                  // [0x3ffd6c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	// float GetInstanceMachineWeight(int32_t MachineIndex);                                                                    // [0x3ffd620] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	// float GetInstanceCurrentStateElapsedTime(int32_t MachineIndex);                                                          // [0x3ffd580] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	// float GetInstanceAssetPlayerTimeFromEndFraction(int32_t AssetPlayerIndex);                                               // [0x3ffd4e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	// float GetInstanceAssetPlayerTimeFromEnd(int32_t AssetPlayerIndex);                                                       // [0x3ffd440] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	// float GetInstanceAssetPlayerTimeFraction(int32_t AssetPlayerIndex);                                                      // [0x3ffd3a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	// float GetInstanceAssetPlayerTime(int32_t AssetPlayerIndex);                                                              // [0x3ffd300] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	// float GetInstanceAssetPlayerLength(int32_t AssetPlayerIndex);                                                            // [0x3ffd260] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x3ffd1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	// FName GetCurrentStateName(int32_t MachineIndex);                                                                         // [0x3ffd130] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	// class UAnimMontage* GetCurrentActiveMontage();                                                                           // [0x3ffd100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetAllCurveNames
	// void GetAllCurveNames(TArray<FName>& OutNames);                                                                          // [0x3ffd050] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.GetActiveCurveNames
	// void GetActiveCurveNames(EAnimCurveType CurveType, TArray<FName>& OutNames);                                             // [0x3ffcf60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	// void ClearMorphTargets();                                                                                                // [0x3ffcf40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	// float CalculateDirection(FVector& Velocity, FRotator& BaseRotation);                                                     // [0x3ffce40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	// void BlueprintUpdateAnimation(float DeltaTimeX);                                                                         // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	// void BlueprintPostEvaluateAnimation();                                                                                   // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	// void BlueprintLinkedAnimationLayersInitialized();                                                                        // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	// void BlueprintInitializeAnimation();                                                                                     // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	// void BlueprintBeginPlay();                                                                                               // [0x24710f0] Event|Public|BlueprintEvent 
};
#pragma pack(pop)

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UTimecodeProvider : public UObject
{ 
public:
	float                                              FrameDelay;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.TimecodeProvider.GetTimecode
	// FTimecode GetTimecode();                                                                                                 // [0x4164c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetSynchronizationState
	// ETimecodeProviderSynchronizationState GetSynchronizationState();                                                         // [0x2004570] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetQualifiedFrameTime
	// FQualifiedFrameTime GetQualifiedFrameTime();                                                                             // [0x4164bc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                               // [0x4164af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedTimecode
	// FTimecode GetDelayedTimecode();                                                                                          // [0x4164ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	// FQualifiedFrameTime GetDelayedQualifiedFrameTime();                                                                      // [0x4164a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimecodeProvider.FetchTimecode
	// bool FetchTimecode(FQualifiedFrameTime& OutFrameTime);                                                                   // [0x41649b0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TimecodeProvider.FetchAndUpdate
	// void FetchAndUpdate();                                                                                                   // [0x20a39e0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UEngineCustomTimeStep : public UObject
{ 
public:
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x00A0 (160 bytes) (0x000220 - 0x0002C0) align 8 pad: 0x0000
class AGameModeBase : public AInfo
{ 
public:
	FString                                            OptionsString;                                              // 0x0220   (0x0010)  
	class UClass*                                      GameSessionClass;                                           // 0x0230   (0x0008)  
	class UClass*                                      GameStateClass;                                             // 0x0238   (0x0008)  
	class UClass*                                      PlayerControllerClass;                                      // 0x0240   (0x0008)  
	class UClass*                                      PlayerStateClass;                                           // 0x0248   (0x0008)  
	class UClass*                                      HUDClass;                                                   // 0x0250   (0x0008)  
	class UClass*                                      DefaultPawnClass;                                           // 0x0258   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x0260   (0x0008)  
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                       // 0x0268   (0x0008)  
	class UClass*                                      ServerStatReplicatorClass;                                  // 0x0270   (0x0008)  
	class AGameSession*                                GameSession;                                                // 0x0278   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0280   (0x0008)  
	class AServerStatReplicator*                       ServerStatReplicator;                                       // 0x0288   (0x0008)  
	FText                                              DefaultPlayerName;                                          // 0x0290   (0x0018)  
	bool                                               bUseSeamlessTravel : 1;                                     // 0x02A8:0 (0x0001)  
	bool                                               bStartPlayersAsSpectators : 1;                              // 0x02A8:1 (0x0001)  
	bool                                               bPauseable : 1;                                             // 0x02A8:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x02A9   (0x0017)  MISSED


	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	// void StartPlay();                                                                                                        // [0x8ee6c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	// class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);                                 // [0x405de00] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	// class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                      // [0x405dce0] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ShouldReset
	// bool ShouldReset(class AActor* ActorToReset);                                                                            // [0x405d7b0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	// void ReturnToMainMenuHost();                                                                                             // [0x405c6d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	// void RestartPlayerAtTransform(class AController* NewPlayer, FTransform& SpawnTransform);                                 // [0x405c5b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	// void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);                                  // [0x405c4e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	// void RestartPlayer(class AController* NewPlayer);                                                                        // [0x405c450] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.ResetLevel
	// void ResetLevel();                                                                                                       // [0x405c410] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	// bool PlayerCanRestart(class APlayerController* Player);                                                                  // [0x1fd3b00] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.MustSpectate
	// bool MustSpectate(class APlayerController* NewPlayerController);                                                         // [0x405ab40] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	// void K2_PostLogin(class APlayerController* NewPlayer);                                                                   // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	// void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);                         // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	// void K2_OnRestartPlayer(class AController* NewPlayer);                                                                   // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	// void K2_OnLogout(class AController* ExitingController);                                                                  // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	// void K2_OnChangeName(class AController* Other, FString NewName, bool bNameChange);                                       // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	// class AActor* K2_FindPlayerStart(class AController* Player, FString IncomingName);                                       // [0x4059fd0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	// void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);                                               // [0x1fbf960] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	// void InitializeHUDForPlayer(class APlayerController* NewPlayer);                                                         // [0x2081c50] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x4037120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x4059d10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	// void HandleStartingNewPlayer(class APlayerController* NewPlayer);                                                        // [0x2126260] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	// int32_t GetNumSpectators();                                                                                              // [0x4058d00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	// int32_t GetNumPlayers();                                                                                                 // [0x4058cd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	// class UClass* GetDefaultPawnClassForController(class AController* InController);                                         // [0x4058610] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	// class AActor* FindPlayerStart(class AController* Player, FString IncomingName);                                          // [0x40576b0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	// class AActor* ChoosePlayerStart(class AController* Player);                                                              // [0x4056900] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.GameModeBase.ChangeName
	// void ChangeName(class AController* Controller, FString NewName, bool bNameChange);                                       // [0x40567d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameModeBase.CanSpectate
	// bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);                                       // [0x40566e0] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
public:
	class UTexture*                                    Texture;                                                    // 0x0040   (0x0008)  
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FExpressionInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              InputName;                                                  // 0x0004   (0x0008)  
	FName                                              ExpressionName;                                             // 0x000C   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0018 (24 bytes) (0x000048 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0048   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0020 (32 bytes) (0x000060 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0060   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0068   (0x0010)  
	FName                                              Group;                                                      // 0x0078   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.Pawn
/// Size: 0x0060 (96 bytes) (0x000220 - 0x000280) align 8 pad: 0x0000
class APawn : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               bUseControllerRotationPitch : 1;                            // 0x0228:0 (0x0001)  
	bool                                               bUseControllerRotationYaw : 1;                              // 0x0228:1 (0x0001)  
	bool                                               bUseControllerRotationRoll : 1;                             // 0x0228:2 (0x0001)  
	bool                                               bCanAffectNavigationGeneration : 1;                         // 0x0228:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0229   (0x0003)  MISSED
	float                                              BaseEyeHeight;                                              // 0x022C   (0x0004)  
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                          // 0x0230   (0x0001)  
	EAutoPossessAI                                     AutoPossessAI;                                              // 0x0231   (0x0001)  
	char                                               RemoteViewPitch;                                            // 0x0232   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x0233   (0x0005)  MISSED
	class UClass*                                      AIControllerClass;                                          // 0x0238   (0x0008)  
	class APlayerState*                                PlayerState;                                                // 0x0240   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0248   (0x0008)  MISSED
	class AController*                                 LastHitBy;                                                  // 0x0250   (0x0008)  
	class AController*                                 Controller;                                                 // 0x0258   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0260   (0x0004)  MISSED
	FVector                                            ControlInputVector;                                         // 0x0264   (0x000C)  
	FVector                                            LastControlInputVector;                                     // 0x0270   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x027C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	// void SpawnDefaultController();                                                                                           // [0x410afb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	// void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);                                                // [0x4109eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	// void ReceiveUnpossessed(class AController* OldController);                                                               // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.ReceivePossessed
	// void ReceivePossessed(class AController* NewController);                                                                 // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	// void PawnMakeNoise(float Loudness, FVector NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);        // [0x4109350] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x8ee6e0] Native|Public        
	// Function /Script/Engine.Pawn.OnRep_Controller
	// void OnRep_Controller();                                                                                                 // [0x4109330] Native|Public        
	// Function /Script/Engine.Pawn.LaunchPawn
	// void LaunchPawn(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x41090f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.K2_GetMovementInputVector
	// FVector K2_GetMovementInputVector();                                                                                     // [0x4108f90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	// bool IsPlayerControlled();                                                                                               // [0x4037120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsPawnControlled
	// bool IsPawnControlled();                                                                                                 // [0x41090c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x4109060] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x4109030] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsControlled
	// bool IsControlled();                                                                                                     // [0x4109000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.IsBotControlled
	// bool IsBotControlled();                                                                                                  // [0x4059d10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	// FVector GetPendingMovementInputVector();                                                                                 // [0x4108f90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	// FVector GetNavAgentLocation();                                                                                           // [0x4108ed0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementComponent
	// class UPawnMovementComponent* GetMovementComponent();                                                                    // [0x403fc10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	// class AActor* GetMovementBaseActor(class APawn* Pawn);                                                                   // [0x4108e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	// FVector GetLastMovementInputVector();                                                                                    // [0x4108e00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x4108cf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetController
	// class AController* GetController();                                                                                      // [0x2017300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	// FRotator GetBaseAimRotation();                                                                                           // [0x4108b10] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	// void DetachFromControllerPendingDestroy();                                                                               // [0x20cbd50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	// FVector ConsumeMovementInputVector();                                                                                    // [0x4108ad0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddMovementInput
	// void AddMovementInput(FVector WorldDirection, float ScaleValue, bool bForce);                                            // [0x41085b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	// void AddControllerYawInput(float Val);                                                                                   // [0x4108440] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	// void AddControllerRollInput(float Val);                                                                                  // [0x200ee20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	// void AddControllerPitchInput(float Val);                                                                                 // [0x41083b0] Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FBasedMovementInfo
{ 
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
	FVector_NetQuantize100                             Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	bool                                               bServerHasBaseComponent;                                    // 0x0028   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0029   (0x0001)  
	bool                                               bServerHasVelocity;                                         // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FRootMotionSourceSettings
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize10 : FVector
{ 
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FRootMotionSourceGroup
{ 
	unsigned char                                      UnknownData00_7[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bHasAdditiveSources : 1;                                    // 0x0028:0 (0x0001)  
	bool                                               bHasOverrideSources : 1;                                    // 0x0028:1 (0x0001)  
	bool                                               bHasOverrideSourcesWithIgnoreZAccumulate : 1;               // 0x0028:2 (0x0001)  
	bool                                               bIsAdditiveVelocityApplied : 1;                             // 0x0028:3 (0x0001)  
	FRootMotionSourceSettings                          LastAccumulatedSettings;                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FVector_NetQuantize10                              LastPreAdditiveVelocity;                                    // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FRootMotionMovementParams
{ 
	bool                                               bHasRootMotion;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         RootMotionTransform;                                        // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FRepRootMotionMontage
{ 
	bool                                               bIsActive;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UAnimMontage*                                AnimMontage;                                                // 0x0008   (0x0008)  
	float                                              position;                                                   // 0x0010   (0x0004)  
	FVector_NetQuantize100                             Location;                                                   // 0x0014   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0030   (0x0008)  
	FName                                              MovementBaseBoneName;                                       // 0x0038   (0x0008)  
	bool                                               bRelativePosition;                                          // 0x0040   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	FRootMotionSourceGroup                             AuthoritativeRootMotion;                                    // 0x0048   (0x0038)  
	FVector_NetQuantize10                              Acceleration;                                               // 0x0080   (0x000C)  
	FVector_NetQuantize10                              LinearVelocity;                                             // 0x008C   (0x000C)  
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 8 pad: 0x0000
struct FSimulatedRootMotionReplicatedMove
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FRepRootMotionMontage                              RootMotion;                                                 // 0x0008   (0x0098)  
};

/// Class /Script/Engine.Character
/// Size: 0x0240 (576 bytes) (0x000280 - 0x0004C0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ACharacter : public APawn
{ 
public:
	class USkeletalMeshComponent*                      Mesh;                                                       // 0x0280   (0x0008)  
	class UCharacterMovementComponent*                 CharacterMovement;                                          // 0x0288   (0x0008)  
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0290   (0x0008)  
	FBasedMovementInfo                                 BasedMovement;                                              // 0x0298   (0x0030)  
	FBasedMovementInfo                                 ReplicatedBasedMovement;                                    // 0x02C8   (0x0030)  
	float                                              AnimRootMotionTranslationScale;                             // 0x02F8   (0x0004)  
	FVector                                            BaseTranslationOffset;                                      // 0x02FC   (0x000C)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0308   (0x0008)  MISSED
	FQuat                                              BaseRotationOffset;                                         // 0x0310   (0x0010)  
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;               // 0x0320   (0x0004)  
	float                                              ReplayLastTransformUpdateTimeStamp;                         // 0x0324   (0x0004)  
	char                                               ReplicatedMovementMode;                                     // 0x0328   (0x0001)  
	bool                                               bInBaseReplication;                                         // 0x0329   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x032A   (0x0002)  MISSED
	float                                              CrouchedEyeHeight;                                          // 0x032C   (0x0004)  
	bool                                               bIsCrouched : 1;                                            // 0x0330:0 (0x0001)  
	bool                                               bProxyIsJumpForceApplied : 1;                               // 0x0330:1 (0x0001)  
	bool                                               bPressedJump : 1;                                           // 0x0330:2 (0x0001)  
	bool                                               bClientUpdating : 1;                                        // 0x0330:3 (0x0001)  
	bool                                               bClientWasFalling : 1;                                      // 0x0330:4 (0x0001)  
	bool                                               bClientResimulateRootMotion : 1;                            // 0x0330:5 (0x0001)  
	bool                                               bClientResimulateRootMotionSources : 1;                     // 0x0330:6 (0x0001)  
	bool                                               bSimGravityDisabled : 1;                                    // 0x0330:7 (0x0001)  
	bool                                               bClientCheckEncroachmentOnNetUpdate : 1;                    // 0x0331:0 (0x0001)  
	bool                                               bServerMoveIgnoreRootMotion : 1;                            // 0x0331:1 (0x0001)  
	bool                                               bWasJumping : 1;                                            // 0x0331:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              JumpKeyHoldTime;                                            // 0x0334   (0x0004)  
	float                                              JumpForceTimeRemaining;                                     // 0x0338   (0x0004)  
	float                                              ProxyJumpForceStartedTime;                                  // 0x033C   (0x0004)  
	float                                              JumpMaxHoldTime;                                            // 0x0340   (0x0004)  
	int32_t                                            JumpMaxCount;                                               // 0x0344   (0x0004)  
	int32_t                                            JumpCurrentCount;                                           // 0x0348   (0x0004)  
	int32_t                                            JumpCurrentCountPreJump;                                    // 0x034C   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0350   (0x0008)  MISSED
	SDK_UNDEFINED(16,54) /* FMulticastInlineDelegate */ __um(OnReachedJumpApex);                                   // 0x0358   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0368   (0x0010)  MISSED
	SDK_UNDEFINED(16,55) /* FMulticastInlineDelegate */ __um(MovementModeChangedDelegate);                         // 0x0378   (0x0010)  
	SDK_UNDEFINED(16,56) /* FMulticastInlineDelegate */ __um(OnCharacterMovementUpdated);                          // 0x0388   (0x0010)  
	FRootMotionSourceGroup                             SavedRootMotion;                                            // 0x0398   (0x0038)  
	FRootMotionMovementParams                          ClientRootMotionParams;                                     // 0x03D0   (0x0040)  
	TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves;                                         // 0x0410   (0x0010)  
	FRepRootMotionMontage                              RepRootMotion;                                              // 0x0420   (0x0098)  


	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	// void UnCrouch(bool bClientSimulation);                                                                                   // [0x2082760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopJumping
	// void StopJumping();                                                                                                      // [0x402ee70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.StopAnimMontage
	// void StopAnimMontage(class UAnimMontage* AnimMontage);                                                                   // [0x402ede0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ServerMovePacked
	// void ServerMovePacked(FCharacterServerMovePackedBits PackedBits);                                                        // [0x402ea10] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveOld
	// void ServerMoveOld(float OldTimeStamp, FVector_NetQuantize10 OldAccel, char OldMoveFlags);                               // [0x402e8a0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveNoBase
	// void ServerMoveNoBase(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x402e600] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	// void ServerMoveDualNoBase(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, char ClientMovementMode); // [0x402e200] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	// void ServerMoveDualHybridRootMotion(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x402dd70] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMoveDual
	// void ServerMoveDual(float TimeStamp0, FVector_NetQuantize10 InAccel0, char PendingFlags, uint32_t View0, float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char NewFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x402d8e0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.ServerMove
	// void ServerMove(float Timestamp, FVector_NetQuantize10 InAccel, FVector_NetQuantize100 ClientLoc, char CompressedMoveFlags, char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, char ClientMovementMode); // [0x402d5a0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	// void RootMotionDebugClientPrintOnScreen(FString inString);                                                               // [0x402d500] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.PlayAnimMontage
	// float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);                        // [0x402d3e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	// void OnWalkingOffLedge(FVector& PreviousFloorImpactNormal, FVector& PreviousFloorContactNormal, FVector& PreviousLocation, float TimeDelta); // [0x402d240] Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnRep_RootMotion
	// void OnRep_RootMotion();                                                                                                 // [0x402d220] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	// void OnRep_ReplicatedBasedMovement();                                                                                    // [0x402d200] Native|Public        
	// Function /Script/Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	// void OnRep_ReplayLastTransformUpdateTimeStamp();                                                                         // [0x402d1e0] Final|Native|Public  
	// Function /Script/Engine.Character.OnRep_IsCrouched
	// void OnRep_IsCrouched();                                                                                                 // [0x2108ca0] Native|Public        
	// Function /Script/Engine.Character.OnLaunched
	// void OnLaunched(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                              // [0x24710f0] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.Character.OnLanded
	// void OnLanded(FHitResult& Hit);                                                                                          // [0x24710f0] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.Character.OnJumped
	// void OnJumped();                                                                                                         // [0x402d1c0] Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.LaunchCharacter
	// void LaunchCharacter(FVector LaunchVelocity, bool bXYOverride, bool bZOverride);                                         // [0x402d090] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	// void K2_UpdateCustomMovement(float DeltaTime);                                                                           // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	// void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                             // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	// void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, char PrevCustomMode, char NewCustomMode); // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	// void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);                                               // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Character.Jump
	// void Jump();                                                                                                             // [0x21093c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	// bool IsPlayingRootMotion();                                                                                              // [0x402d060] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	// bool IsPlayingNetworkedRootMotionMontage();                                                                              // [0x402d030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	// bool IsJumpProvidingForce();                                                                                             // [0x402d000] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.HasAnyRootMotion
	// bool HasAnyRootMotion();                                                                                                 // [0x402cfd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetCurrentMontage
	// class UAnimMontage* GetCurrentMontage();                                                                                 // [0x402c940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	// FVector GetBaseTranslationOffset();                                                                                      // [0x402c910] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	// FRotator GetBaseRotationOffsetRotator();                                                                                 // [0x402c8c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	// float GetAnimRootMotionTranslationScale();                                                                               // [0x402c890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.Crouch
	// void Crouch(bool bClientSimulation);                                                                                     // [0x402c800] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	// void ClientVeryShortAdjustPosition(float Timestamp, FVector NewLoc, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x402c480] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientMoveResponsePacked
	// void ClientMoveResponsePacked(FCharacterMoveResponsePackedBits PackedBits);                                              // [0x402c390] Net|Native|Event|Public|NetClient|NetValidate 
	// Function /Script/Engine.Character.ClientCheatWalk
	// void ClientCheatWalk();                                                                                                  // [0x402c370] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatGhost
	// void ClientCheatGhost();                                                                                                 // [0x20c7270] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientCheatFly
	// void ClientCheatFly();                                                                                                   // [0x402c350] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	// void ClientAdjustRootMotionSourcePosition(float Timestamp, FRootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x402be70] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	// void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, FVector ServerLoc, FVector_NetQuantizeNormal ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x402bb40] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAdjustPosition
	// void ClientAdjustPosition(float Timestamp, FVector NewLoc, FVector NewVel, class UPrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, char ServerMovementMode); // [0x402b8b0] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.Character.ClientAckGoodMove
	// void ClientAckGoodMove(float Timestamp);                                                                                 // [0x402b830] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.Character.CanJumpInternal
	// bool CanJumpInternal();                                                                                                  // [0x402b800] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/Engine.Character.CanJump
	// bool CanJump();                                                                                                          // [0x402b7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CanCrouch
	// bool CanCrouch();                                                                                                        // [0x402b7a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	// void CacheInitialMeshOffset(FVector MeshRelativeLocation, FRotator MeshRelativeRotation);                                // [0x402b6b0] Native|Public|HasDefaults|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FSplineCurves
{ 
	FInterpCurveVector                                 position;                                                   // 0x0000   (0x0018)  
	FInterpCurveQuat                                   Rotation;                                                   // 0x0018   (0x0018)  
	FInterpCurveVector                                 Scale;                                                      // 0x0030   (0x0018)  
	FInterpCurveFloat                                  ReparamTable;                                               // 0x0048   (0x0018)  
	class USplineMetadata*                             MetaData;                                                   // 0x0060   (0x0008)  
	uint32_t                                           Version;                                                    // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x0100 (256 bytes) (0x000450 - 0x000550) align 16 pad: 0x0000
class USplineComponent : public UPrimitiveComponent
{ 
public:
	FSplineCurves                                      SplineCurves;                                               // 0x0450   (0x0070)  
	FInterpCurveVector                                 SplineInfo;                                                 // 0x04C0   (0x0018)  
	FInterpCurveQuat                                   SplineRotInfo;                                              // 0x04D8   (0x0018)  
	FInterpCurveVector                                 SplineScaleInfo;                                            // 0x04F0   (0x0018)  
	FInterpCurveFloat                                  SplineReparamTable;                                         // 0x0508   (0x0018)  
	bool                                               bAllowSplineEditingPerInstance;                             // 0x0520   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0521   (0x0003)  MISSED
	int32_t                                            ReparamStepsPerSegment;                                     // 0x0524   (0x0004)  
	float                                              Duration;                                                   // 0x0528   (0x0004)  
	bool                                               bStationaryEndpoints;                                       // 0x052C   (0x0001)  
	bool                                               bSplineHasBeenEdited;                                       // 0x052D   (0x0001)  
	bool                                               bModifiedByConstructionScript;                              // 0x052E   (0x0001)  
	bool                                               bInputSplinePointsToConstructionScript;                     // 0x052F   (0x0001)  
	bool                                               bDrawDebug;                                                 // 0x0530   (0x0001)  
	bool                                               bClosedLoop;                                                // 0x0531   (0x0001)  
	bool                                               bLoopPositionOverride;                                      // 0x0532   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0533   (0x0001)  MISSED
	float                                              LoopPosition;                                               // 0x0534   (0x0004)  
	FVector                                            DefaultUpVector;                                            // 0x0538   (0x000C)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x0544   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	// void UpdateSpline();                                                                                                     // [0x41571c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	// void SetWorldLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation);                                             // [0x41570e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	// void SetUpVectorAtSplinePoint(int32_t PointIndex, FVector& InUpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4156f70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	// void SetUnselectedSplineSegmentColor(FLinearColor& SegmentColor);                                                        // [0x4156720] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	// void SetTangentsAtSplinePoint(int32_t PointIndex, FVector& InArriveTangent, FVector& InLeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4156da0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentColor
	// void SetTangentColor(FLinearColor& TangentColor);                                                                        // [0x4156720] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	// void SetTangentAtSplinePoint(int32_t PointIndex, FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4156c30] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	// void SetSplineWorldPoints(TArray<FVector>& Points);                                                                      // [0x4156b80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	// void SetSplinePointType(int32_t PointIndex, TEnumAsByte<ESplinePointType> Type, bool bUpdateSpline);                     // [0x4156940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	// void SetSplinePoints(TArray<FVector>& Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);  // [0x4156a50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	// void SetSplineLocalPoints(TArray<FVector>& Points);                                                                      // [0x4156890] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	// void SetSelectedSplineSegmentColor(FLinearColor& SegmentColor);                                                          // [0x4156720] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetScaleAtSplinePoint
	// void SetScaleAtSplinePoint(int32_t PointIndex, FVector& InScaleVector, bool bUpdateSpline);                              // [0x4156610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetRotationAtSplinePoint
	// void SetRotationAtSplinePoint(int32_t PointIndex, FRotator& InRotation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x41564a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	// void SetLocationAtSplinePoint(int32_t PointIndex, FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4156330] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	// void SetDrawDebug(bool bShow);                                                                                           // [0x41562a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	// void SetDefaultUpVector(FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x41561c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	// void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);                                         // [0x41560a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	// void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);                                                              // [0x4155fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	// void RemoveSplinePoint(int32_t Index, bool bUpdateSpline);                                                               // [0x4155f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	// bool IsClosedLoop();                                                                                                     // [0x4155ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	// FVector GetWorldTangentAtDistanceAlongSpline(float Distance);                                                            // [0x4155e20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	// FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x4155d30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	// FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);                                                          // [0x4155c80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	// FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);                                                   // [0x4155b90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	// FVector GetWorldLocationAtSplinePoint(int32_t PointIndex);                                                               // [0x4155ae0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	// FVector GetWorldLocationAtDistanceAlongSpline(float Distance);                                                           // [0x4155a30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	// FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);                                                  // [0x4155940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	// FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);                                                          // [0x4155890] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	// FVector GetVectorPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                               // [0x41557b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	// FVector GetVectorPropertyAtSplineInputKey(float InKey, FName PropertyName);                                              // [0x41556d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	// FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x41555a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	// FVector GetUpVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x41554c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplineInputKey
	// FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x41553d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	// FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x41552e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	// FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale); // [0x4155140] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	// FTransform GetTransformAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4154ff0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplineInputKey
	// FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4154e90] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	// FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4154d30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	// FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);    // [0x4154c00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	// FVector GetTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x4153270] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplineInputKey
	// FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                    // [0x4154b10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	// FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x4154a20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	// TEnumAsByte<ESplinePointType> GetSplinePointType(int32_t PointIndex);                                                    // [0x4154980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	// float GetSplineLength();                                                                                                 // [0x4154950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	// FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);                                                           // [0x41547d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	// FVector GetScaleAtSplinePoint(int32_t PointIndex);                                                                       // [0x4154720] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplineInputKey
	// FVector GetScaleAtSplineInputKey(float InKey);                                                                           // [0x4154680] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	// FVector GetScaleAtDistanceAlongSpline(float Distance);                                                                   // [0x41545e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	// FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x41544b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	// FRotator GetRotationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x41543d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplineInputKey
	// FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x41542e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	// FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x41541f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	// float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);         // [0x41540d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	// float GetRollAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                     // [0x4154000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtSplineInputKey
	// float GetRollAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                         // [0x4153f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	// float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                 // [0x4153e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	// FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity); // [0x4153d10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	// FVector GetRightVectorAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);            // [0x4153c30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplineInputKey
	// FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                // [0x4153b40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	// FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);        // [0x4153a50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplineSegments
	// int32_t GetNumberOfSplineSegments();                                                                                     // [0x4153a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	// int32_t GetNumberOfSplinePoints();                                                                                       // [0x41539f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	// FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);   // [0x41538c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	// FVector GetLocationAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);               // [0x41537e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplineInputKey
	// FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                   // [0x41536f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	// FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x4153600] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	// void GetLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& Location, FVector& Tangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x4153480] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	// void GetLocalLocationAndTangentAtSplinePoint(int32_t PointIndex, FVector& LocalLocation, FVector& LocalTangent);         // [0x4153350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	// FVector GetLeaveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);           // [0x4153270] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	// float GetInputKeyAtDistanceAlongSpline(float Distance);                                                                  // [0x41531d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	// float GetFloatPropertyAtSplinePoint(int32_t Index, FName PropertyName);                                                  // [0x4153100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	// float GetFloatPropertyAtSplineInputKey(float InKey, FName PropertyName);                                                 // [0x4153030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	// float GetDistanceAlongSplineAtSplinePoint(int32_t PointIndex);                                                           // [0x4152f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
	// float GetDistanceAlongSplineAtSplineInputKey(float InKey);                                                               // [0x4152ef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	// FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);  // [0x4152dc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	// FVector GetDirectionAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);              // [0x4152ce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplineInputKey
	// FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                  // [0x4152bf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	// FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x4152b00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	// FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);                                         // [0x4152a60] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	// FVector GetArriveTangentAtSplinePoint(int32_t PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);          // [0x4152980] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	// FVector FindUpVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x4152890] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	// FTransform FindTransformClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale); // [0x4152730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	// FVector FindTangentClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);  // [0x4152640] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	// FVector FindScaleClosestToWorldLocation(FVector& WorldLocation);                                                         // [0x4152590] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	// FRotator FindRotationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x41524a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	// float FindRollClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);       // [0x41523c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	// FVector FindRightVectorClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x41522d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	// FVector FindLocationClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x41521e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	// float FindInputKeyClosestToWorldLocation(FVector& WorldLocation);                                                        // [0x4152140] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	// FVector FindDirectionClosestToWorldLocation(FVector& WorldLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x4152050] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	// void ClearSplinePoints(bool bUpdateSpline);                                                                              // [0x4151fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	// void AddSplineWorldPoint(FVector& position);                                                                             // [0x4151f20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	// void AddSplinePointAtIndex(FVector& position, int32_t Index, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline); // [0x4151db0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	// void AddSplinePoint(FVector& position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);         // [0x4151c90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	// void AddSplineLocalPoint(FVector& position);                                                                             // [0x4151c00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoints
	// void AddPoints(TArray<FSplinePoint>& Points, bool bUpdateSpline);                                                        // [0x4151b00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SplineComponent.AddPoint
	// void AddPoint(FSplinePoint& Point, bool bUpdateSpline);                                                                  // [0x41519f0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CameraShakeBase
/// Size: 0x0088 (136 bytes) (0x000028 - 0x0000B0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UCameraShakeBase : public UObject
{ 
public:
	bool                                               bSingleInstance;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ShakeScale;                                                 // 0x002C   (0x0004)  
	class UCameraShakePattern*                         RootShakePattern;                                           // 0x0030   (0x0008)  
	class APlayerCameraManager*                        CameraManager;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0x68];                                      // 0x0040   (0x0068)  MISSED


	/// Functions
	// Function /Script/Engine.CameraShakeBase.SetRootShakePattern
	// void SetRootShakePattern(class UCameraShakePattern* InPattern);                                                          // [0x40282e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeBase.GetRootShakePattern
	// class UCameraShakePattern* GetRootShakePattern();                                                                        // [0x18226e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Class /Script/Engine.Commandlet
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000080) align 8 pad: 0x0000
class UCommandlet : public UObject
{ 
public:
	FString                                            HelpDescription;                                            // 0x0028   (0x0010)  
	FString                                            HelpUsage;                                                  // 0x0038   (0x0010)  
	FString                                            HelpWebLink;                                                // 0x0048   (0x0010)  
	TArray<FString>                                    HelpParamNames;                                             // 0x0058   (0x0010)  
	TArray<FString>                                    HelpParamDescriptions;                                      // 0x0068   (0x0010)  
	bool                                               IsServer : 1;                                               // 0x0078:0 (0x0001)  
	bool                                               IsClient : 1;                                               // 0x0078:1 (0x0001)  
	bool                                               IsEditor : 1;                                               // 0x0078:2 (0x0001)  
	bool                                               LogToConsole : 1;                                           // 0x0078:3 (0x0001)  
	bool                                               ShowErrorCount : 1;                                         // 0x0078:4 (0x0001)  
	bool                                               ShowProgress : 1;                                           // 0x0078:5 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioComponentParam
{ 
	FName                                              paramName;                                                  // 0x0000   (0x0008)  
	float                                              FloatParam;                                                 // 0x0008   (0x0004)  
	bool                                               BoolParam;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            IntParam;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWaveParam;                                             // 0x0018   (0x0008)  
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x0668 (1640 bytes) (0x0001F8 - 0x000860) align 16 pad: 0x0000
class UAudioComponent : public USceneComponent
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x01F8   (0x0008)  
	TArray<FAudioComponentParam>                       InstanceParameters;                                         // 0x0200   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0210   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0218:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0218:1 (0x0001)  
	bool                                               bShouldRemainActiveIfDropped : 1;                           // 0x0218:2 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0218:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0218:4 (0x0001)  
	bool                                               bOverrideSubtitlePriority : 1;                              // 0x0218:5 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0218:6 (0x0001)  
	bool                                               bEnableLowPassFilter : 1;                                   // 0x0218:7 (0x0001)  
	bool                                               bOverridePriority : 1;                                      // 0x0219:0 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x0219:1 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0219:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0219:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0219:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0219:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x0219:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0219:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x021A:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x021A:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x021A:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x021A:3 (0x0001)  MISSED
	bool                                               bAutoManageAttachment : 1;                                  // 0x021A:4 (0x0001)  
	unsigned char                                      UnknownData10_5[0x5];                                       // 0x021B   (0x0005)  MISSED
	FName                                              AudioComponentUserID;                                       // 0x0220   (0x0008)  
	float                                              PitchModulationMin;                                         // 0x0228   (0x0004)  
	float                                              PitchModulationMax;                                         // 0x022C   (0x0004)  
	float                                              VolumeModulationMin;                                        // 0x0230   (0x0004)  
	float                                              VolumeModulationMax;                                        // 0x0234   (0x0004)  
	float                                              VolumeMultiplier;                                           // 0x0238   (0x0004)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x023C   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0240   (0x0004)  
	float                                              Priority;                                                   // 0x0244   (0x0004)  
	float                                              SubtitlePriority;                                           // 0x0248   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x024C   (0x0004)  MISSED
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0250   (0x0008)  
	float                                              PitchMultiplier;                                            // 0x0258   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x025C   (0x0004)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x0260   (0x0008)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0268   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0270   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x0610   (0x0008)  
	SDK_UNDEFINED(80,57) /* TSet<USoundConcurrency*> */ __um(ConcurrencySet);                                      // 0x0618   (0x0050)  
	unsigned char                                      UnknownData13_6[0xC];                                       // 0x0668   (0x000C)  MISSED
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x0674   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x0675   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x0676   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x0677   (0x0001)  MISSED
	FSoundModulationDefaultRoutingSettings             ModulationRouting;                                          // 0x0678   (0x0048)  
	SDK_UNDEFINED(16,58) /* FMulticastInlineDelegate */ __um(OnAudioPlayStateChanged);                             // 0x06C0   (0x0010)  
	unsigned char                                      UnknownData15_6[0x18];                                      // 0x06D0   (0x0018)  MISSED
	SDK_UNDEFINED(16,59) /* FMulticastInlineDelegate */ __um(OnAudioVirtualizationChanged);                        // 0x06E8   (0x0010)  
	unsigned char                                      UnknownData16_6[0x18];                                      // 0x06F8   (0x0018)  MISSED
	SDK_UNDEFINED(16,60) /* FMulticastInlineDelegate */ __um(OnAudioFinished);                                     // 0x0710   (0x0010)  
	unsigned char                                      UnknownData17_6[0x18];                                      // 0x0720   (0x0018)  MISSED
	SDK_UNDEFINED(16,61) /* FMulticastInlineDelegate */ __um(OnAudioPlaybackPercent);                              // 0x0738   (0x0010)  
	unsigned char                                      UnknownData18_6[0x18];                                      // 0x0748   (0x0018)  MISSED
	SDK_UNDEFINED(16,62) /* FMulticastInlineDelegate */ __um(OnAudioSingleEnvelopeValue);                          // 0x0760   (0x0010)  
	unsigned char                                      UnknownData19_6[0x18];                                      // 0x0770   (0x0018)  MISSED
	SDK_UNDEFINED(16,63) /* FMulticastInlineDelegate */ __um(OnAudioMultiEnvelopeValue);                           // 0x0788   (0x0010)  
	unsigned char                                      UnknownData20_6[0x18];                                      // 0x0798   (0x0018)  MISSED
	SDK_UNDEFINED(16,64) /* FDelegateProperty */       __um(OnQueueSubtitles);                                     // 0x07B0   (0x0010)  
	SDK_UNDEFINED(8,65) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                             // 0x07C0   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x07C8   (0x0008)  
	unsigned char                                      UnknownData21_7[0x90];                                      // 0x07D0   (0x0090)  MISSED


	/// Functions
	// Function /Script/Engine.AudioComponent.StopDelayed
	// void StopDelayed(float DelayTime);                                                                                       // [0x4012540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Stop
	// void Stop();                                                                                                             // [0x4012520] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	// void SetWaveParameter(FName InName, class USoundWave* InWave);                                                           // [0x4012450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	// void SetVolumeMultiplier(float NewVolumeMultiplier);                                                                     // [0x40123d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetUISound
	// void SetUISound(bool bInUISound);                                                                                        // [0x4012340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	// void SetSubmixSend(class USoundSubmixBase* Submix, float SendLevel);                                                     // [0x40121f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPreEffect
	// void SetSourceBusSendPreEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                         // [0x40120a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPostEffect
	// void SetSourceBusSendPostEffect(class USoundSourceBus* SoundSourceBus, float SourceBusSendLevel);                        // [0x4011fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetSound
	// void SetSound(class USoundBase* NewSound);                                                                               // [0x4011f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	// void SetPitchMultiplier(float NewPitchMultiplier);                                                                       // [0x4011da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetPaused
	// void SetPaused(bool bPause);                                                                                             // [0x4011d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetOutputToBusOnly
	// void SetOutputToBusOnly(bool bInOutputToBusOnly);                                                                        // [0x4011c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	// void SetLowPassFilterFrequency(float InLowPassFilterFrequency);                                                          // [0x4011c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	// void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);                                                               // [0x4011b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	// void SetIntParameter(FName InName, int32_t inInt);                                                                       // [0x4011aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	// void SetFloatParameter(FName InName, float InFloat);                                                                     // [0x4011950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	// void SetBoolParameter(FName InName, bool InBool);                                                                        // [0x4011570] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPreEffect
	// void SetAudioBusSendPreEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);                                       // [0x40114a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPostEffect
	// void SetAudioBusSendPostEffect(class UAudioBus* AudioBus, float AudioBusSendLevel);                                      // [0x40113d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.PlayQuantized
	// void PlayQuantized(class UObject* WorldContextObject, class UQuartzClockHandle*& InClockHandle, FQuartzQuantizationBoundary& InQuantizationBoundary, FDelegateProperty& InDelegate, float InStartTime, float InFadeInDuration, float InFadeVolumeLevel, EAudioFaderCurve InFadeCurve); // [0x4011090] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.Play
	// void Play(float StartTime);                                                                                              // [0x4011000] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.IsVirtualized
	// bool IsVirtualized();                                                                                                    // [0x4010fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x4010fa0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedFFTData
	// bool HasCookedFFTData();                                                                                                 // [0x4010f70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	// bool HasCookedAmplitudeEnvelopeData();                                                                                   // [0x4010f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetPlayState
	// EAudioComponentPlayState GetPlayState();                                                                                 // [0x4010f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	// bool GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData);              // [0x4010e30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedFFTData
	// bool GetCookedFFTData(TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData);        // [0x4010d10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	// bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData);                  // [0x4010c50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeData
	// bool GetCookedEnvelopeData(float& OutEnvelopeData);                                                                      // [0x4010ba0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel, EAudioFaderCurve FadeCurve);                                  // [0x4010a80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, EAudioFaderCurve FadeCurve);                   // [0x4010920] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings);                                // [0x4010730] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, EAudioFaderCurve FadeCurve);                      // [0x400fb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	// void AdjustAttenuation(FSoundAttenuationSettings& InAttenuationSettings);                                                // [0x400fa70] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0090 (144 bytes) (0x0000B0 - 0x000140) align 8 pad: 0x0000
class UApplicationLifecycleComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,66) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                   // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,67) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                   // 0x00C0   (0x0010)  
	SDK_UNDEFINED(16,68) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);              // 0x00D0   (0x0010)  
	SDK_UNDEFINED(16,69) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);             // 0x00E0   (0x0010)  
	SDK_UNDEFINED(16,70) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                    // 0x00F0   (0x0010)  
	SDK_UNDEFINED(16,71) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);            // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,72) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);         // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,73) /* FMulticastInlineDelegate */ __um(OnTemperatureChangeDelegate);                         // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,74) /* FMulticastInlineDelegate */ __um(OnLowPowerModeDelegate);                              // 0x0130   (0x0010)  
};

/// Class /Script/Engine.GameMode
/// Size: 0x0048 (72 bytes) (0x0002C0 - 0x000308) align 8 pad: 0x0000
class AGameMode : public AGameModeBase
{ 
public:
	FName                                              MatchState;                                                 // 0x02C0   (0x0008)  
	bool                                               bDelayedStart : 1;                                          // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x02C9   (0x0003)  MISSED
	int32_t                                            NumSpectators;                                              // 0x02CC   (0x0004)  
	int32_t                                            NumPlayers;                                                 // 0x02D0   (0x0004)  
	int32_t                                            NumBots;                                                    // 0x02D4   (0x0004)  
	float                                              MinRespawnDelay;                                            // 0x02D8   (0x0004)  
	int32_t                                            NumTravellingPlayers;                                       // 0x02DC   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x02E0   (0x0008)  
	TArray<class APlayerState*>                        InactivePlayerArray;                                        // 0x02E8   (0x0010)  
	float                                              InactivePlayerStateLifeSpan;                                // 0x02F8   (0x0004)  
	int32_t                                            MaxInactivePlayers;                                         // 0x02FC   (0x0004)  
	bool                                               bHandleDedicatedServerReplays;                              // 0x0300   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0301   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	// void StartMatch();                                                                                                       // [0x2120db0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.SetBandwidthLimit
	// void SetBandwidthLimit(float AsyncIOBandwidthLimit);                                                                     // [0x405c8b0] Exec|Native|Public   
	// Function /Script/Engine.GameMode.Say
	// void Say(FString Msg);                                                                                                   // [0x405c810] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.RestartGame
	// void RestartGame();                                                                                                      // [0x405c430] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	// bool ReadyToStartMatch();                                                                                                // [0x1fdbb60] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	// bool ReadyToEndMatch();                                                                                                  // [0x402b7a0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	// void K2_OnSetMatchState(FName NewState);                                                                                 // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	// bool IsMatchInProgress();                                                                                                // [0x4059f10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.GetMatchState
	// FName GetMatchState();                                                                                                   // [0x4058c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameMode.EndMatch
	// void EndMatch();                                                                                                         // [0x2079260] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameMode.AbortMatch
	// void AbortMatch();                                                                                                       // [0x2079280] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0050 (80 bytes) (0x000220 - 0x000270) align 8 pad: 0x0000
class AGameStateBase : public AInfo
{ 
public:
	class UClass*                                      GameModeClass;                                              // 0x0220   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x0228   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x0230   (0x0008)  
	TArray<class APlayerState*>                        PlayerArray;                                                // 0x0238   (0x0010)  
	bool                                               bReplicatedHasBegunPlay;                                    // 0x0248   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0249   (0x0003)  MISSED
	float                                              ReplicatedWorldTimeSeconds;                                 // 0x024C   (0x0004)  
	float                                              ServerWorldTimeSecondsDelta;                                // 0x0250   (0x0004)  
	float                                              ServerWorldTimeSecondsUpdateFrequency;                      // 0x0254   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0258   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	// void OnRep_SpectatorClass();                                                                                             // [0x1fd54e0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	// void OnRep_ReplicatedWorldTimeSeconds();                                                                                 // [0x8ee6c0] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	// void OnRep_ReplicatedHasBegunPlay();                                                                                     // [0x4062f90] Native|Protected     
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	// void OnRep_GameModeClass();                                                                                              // [0x1fd4280] Native|Protected     
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	// bool HasMatchStarted();                                                                                                  // [0x1fd4a50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasMatchEnded
	// bool HasMatchEnded();                                                                                                    // [0x4062df0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	// bool HasBegunPlay();                                                                                                     // [0x2038620] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	// float GetServerWorldTimeSeconds();                                                                                       // [0x4062c90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	// float GetPlayerStartTime(class AController* Controller);                                                                 // [0x40627a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	// float GetPlayerRespawnDelay(class AController* Controller);                                                              // [0x4062700] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.GameState
/// Size: 0x0020 (32 bytes) (0x000270 - 0x000290) align 8 pad: 0x0000
class AGameState : public AGameStateBase
{ 
public:
	FName                                              MatchState;                                                 // 0x0270   (0x0008)  
	FName                                              PreviousMatchState;                                         // 0x0278   (0x0008)  
	int32_t                                            ElapsedTime;                                                // 0x0280   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0284   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	// void OnRep_MatchState();                                                                                                 // [0x4062f70] Native|Public        
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	// void OnRep_ElapsedTime();                                                                                                // [0x405c410] Native|Public        
};

/// Class /Script/Engine.Controller
/// Size: 0x0078 (120 bytes) (0x000220 - 0x000298) align 8 pad: 0x0000
class AController : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	class APlayerState*                                PlayerState;                                                // 0x0228   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0230   (0x0008)  MISSED
	SDK_UNDEFINED(16,75) /* FMulticastInlineDelegate */ __um(OnInstigatedAnyDamage);                               // 0x0238   (0x0010)  
	FName                                              StateName;                                                  // 0x0248   (0x0008)  
	class APawn*                                       Pawn;                                                       // 0x0250   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0258   (0x0008)  MISSED
	class ACharacter*                                  Character;                                                  // 0x0260   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x0268   (0x0008)  
	unsigned char                                      UnknownData03_6[0x18];                                      // 0x0270   (0x0018)  MISSED
	FRotator                                           ControlRotation;                                            // 0x0288   (0x000C)  
	bool                                               bAttachToPawn : 1;                                          // 0x0294:0 (0x0001)  
	unsigned char                                      UnknownData04_7[0x3];                                       // 0x0295   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	// void UnPossess();                                                                                                        // [0x40376d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.StopMovement
	// void StopMovement();                                                                                                     // [0x40376b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	// void SetInitialLocationAndRotation(FVector& NewLocation, FRotator& NewRotation);                                         // [0x40375c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	// void SetIgnoreMoveInput(bool bNewMoveInput);                                                                             // [0x4037530] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	// void SetIgnoreLookInput(bool bNewLookInput);                                                                             // [0x40374a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.SetControlRotation
	// void SetControlRotation(FRotator& NewRotation);                                                                          // [0x4037410] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	// void ResetIgnoreMoveInput();                                                                                             // [0x1fd52c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	// void ResetIgnoreLookInput();                                                                                             // [0x1fd5260] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	// void ResetIgnoreInputFlags();                                                                                            // [0x40373f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.ReceiveUnPossess
	// void ReceiveUnPossess(class APawn* UnpossessedPawn);                                                                     // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceivePossess
	// void ReceivePossess(class APawn* PossessedPawn);                                                                         // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	// void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser); // [0x24710f0] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.Controller.Possess
	// void Possess(class APawn* InPawn);                                                                                       // [0x4037360] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	// void OnRep_PlayerState();                                                                                                // [0x1fd54e0] Native|Public        
	// Function /Script/Engine.Controller.OnRep_Pawn
	// void OnRep_Pawn();                                                                                                       // [0x1fd4280] Native|Public        
	// Function /Script/Engine.Controller.LineOfSightTo
	// bool LineOfSightTo(class AActor* Other, FVector ViewPoint, bool bAlternateChecks);                                       // [0x4037230] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.K2_GetPawn
	// class APawn* K2_GetPawn();                                                                                               // [0x4037200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsPlayerController
	// bool IsPlayerController();                                                                                               // [0x40371d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x40371a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	// bool IsLookInputIgnored();                                                                                               // [0x1fd4a80] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	// bool IsLocalPlayerController();                                                                                          // [0x4037150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.IsLocalController
	// bool IsLocalController();                                                                                                // [0x4037120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetViewTarget
	// class AActor* GetViewTarget();                                                                                           // [0x40370f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetDesiredRotation
	// FRotator GetDesiredRotation();                                                                                           // [0x4036ef0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.GetControlRotation
	// FRotator GetControlRotation();                                                                                           // [0x4036eb0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Controller.ClientSetRotation
	// void ClientSetRotation(FRotator NewRotation, bool bResetCamera);                                                         // [0x4036d80] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// Function /Script/Engine.Controller.ClientSetLocation
	// void ClientSetLocation(FVector NewLocation, FRotator NewRotation);                                                       // [0x4036c40] Net|NetReliableNative|Event|Public|HasDefaults|NetClient|NetValidate 
	// Function /Script/Engine.Controller.CastToPlayerController
	// class APlayerController* CastToPlayerController();                                                                       // [0x4036c10] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FActiveForceFeedbackEffect
{ 
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Class /Script/Engine.PlayerController
/// Size: 0x02E8 (744 bytes) (0x000298 - 0x000580) align 8 pad: 0x0000
class APlayerController : public AController
{ 
public:
	class UPlayer*                                     Player;                                                     // 0x0298   (0x0008)  
	class APawn*                                       AcknowledgedPawn;                                           // 0x02A0   (0x0008)  
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                    // 0x02A8   (0x0008)  
	class AHUD*                                        MyHUD;                                                      // 0x02B0   (0x0008)  
	class APlayerCameraManager*                        PlayerCameraManager;                                        // 0x02B8   (0x0008)  
	class UClass*                                      PlayerCameraManagerClass;                                   // 0x02C0   (0x0008)  
	bool                                               bAutoManageActiveCameraTarget;                              // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	FRotator                                           TargetViewRotation;                                         // 0x02CC   (0x000C)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x02D8   (0x000C)  MISSED
	float                                              SmoothTargetViewRotationSpeed;                              // 0x02E4   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x02E8   (0x0008)  MISSED
	TArray<class AActor*>                              HiddenActors;                                               // 0x02F0   (0x0010)  
	SDK_UNDEFINED(16,76) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenPrimitiveComponents);       // 0x0300   (0x0010)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0310   (0x0004)  MISSED
	float                                              LastSpectatorStateSynchTime;                                // 0x0314   (0x0004)  
	FVector                                            LastSpectatorSyncLocation;                                  // 0x0318   (0x000C)  
	FRotator                                           LastSpectatorSyncRotation;                                  // 0x0324   (0x000C)  
	int32_t                                            ClientCap;                                                  // 0x0330   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0334   (0x0004)  MISSED
	class UCheatManager*                               CheatManager;                                               // 0x0338   (0x0008)  
	class UClass*                                      CheatClass;                                                 // 0x0340   (0x0008)  
	class UPlayerInput*                                PlayerInput;                                                // 0x0348   (0x0008)  
	TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects;                                 // 0x0350   (0x0010)  
	unsigned char                                      UnknownData05_6[0x80];                                      // 0x0360   (0x0080)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x03E0:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit07 : 1;                                           // 0x03E0:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x03E0:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x03E0:3 (0x0001)  MISSED
	bool                                               bPlayerIsWaiting : 1;                                       // 0x03E0:4 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x03E1   (0x0003)  MISSED
	char                                               NetPlayerIndex;                                             // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3B];                                      // 0x03E5   (0x003B)  MISSED
	class UNetConnection*                              PendingSwapConnection;                                      // 0x0420   (0x0008)  
	class UNetConnection*                              NetConnection;                                              // 0x0428   (0x0008)  
	unsigned char                                      UnknownData12_6[0xC];                                       // 0x0430   (0x000C)  MISSED
	float                                              InputYawScale;                                              // 0x043C   (0x0004)  
	float                                              InputPitchScale;                                            // 0x0440   (0x0004)  
	float                                              InputRollScale;                                             // 0x0444   (0x0004)  
	bool                                               bShowMouseCursor : 1;                                       // 0x0448:0 (0x0001)  
	bool                                               bEnableClickEvents : 1;                                     // 0x0448:1 (0x0001)  
	bool                                               bEnableTouchEvents : 1;                                     // 0x0448:2 (0x0001)  
	bool                                               bEnableMouseOverEvents : 1;                                 // 0x0448:3 (0x0001)  
	bool                                               bEnableTouchOverEvents : 1;                                 // 0x0448:4 (0x0001)  
	bool                                               bForceFeedbackEnabled : 1;                                  // 0x0448:5 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x0449   (0x0003)  MISSED
	float                                              ForceFeedbackScale;                                         // 0x044C   (0x0004)  
	TArray<FKey>                                       ClickEventKeys;                                             // 0x0450   (0x0010)  
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                         // 0x0460   (0x0001)  
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                         // 0x0461   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                   // 0x0462   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                   // 0x0463   (0x0001)  
	float                                              HitResultTraceDistance;                                     // 0x0464   (0x0004)  
	uint16_t                                           SeamlessTravelCount;                                        // 0x0468   (0x0002)  
	uint16_t                                           LastCompletedSeamlessTravelCount;                           // 0x046A   (0x0002)  
	unsigned char                                      UnknownData14_6[0x74];                                      // 0x046C   (0x0074)  MISSED
	class UInputComponent*                             InactiveStateInputComponent;                                // 0x04E0   (0x0008)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x04E8:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x04E8:1 (0x0001)  MISSED
	bool                                               bShouldPerformFullTickWhenPaused : 1;                       // 0x04E8:2 (0x0001)  
	unsigned char                                      UnknownData17_5[0x17];                                      // 0x04E9   (0x0017)  MISSED
	class UTouchInterface*                             CurrentTouchInterface;                                      // 0x0500   (0x0008)  
	unsigned char                                      UnknownData18_6[0x50];                                      // 0x0508   (0x0050)  MISSED
	class ASpectatorPawn*                              SpectatorPawn;                                              // 0x0558   (0x0008)  
	unsigned char                                      UnknownData19_6[0x4];                                       // 0x0560   (0x0004)  MISSED
	bool                                               bIsLocalPlayerController;                                   // 0x0564   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0565   (0x0003)  MISSED
	FVector                                            SpawnLocation;                                              // 0x0568   (0x000C)  
	unsigned char                                      UnknownData21_7[0xC];                                       // 0x0574   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	// bool WasInputKeyJustReleased(FKey Key);                                                                                  // [0x411a170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	// bool WasInputKeyJustPressed(FKey Key);                                                                                   // [0x411a080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	// void ToggleSpeaking(bool bInSpeaking);                                                                                   // [0x4119ff0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.TestServerLevelVisibilityChange
	// void TestServerLevelVisibilityChange(FName PackageName, FName Filename);                                                 // [0x4119f20] Final|Exec|Native|Private 
	// Function /Script/Engine.PlayerController.SwitchLevel
	// void SwitchLevel(FString URL);                                                                                           // [0x4119e80] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.StopHapticEffect
	// void StopHapticEffect(EControllerHand hand);                                                                             // [0x4119de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.StartFire
	// void StartFire(char FireModeNum);                                                                                        // [0x41197f0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	// void SetVirtualJoystickVisibility(bool bVisible);                                                                        // [0x4119200] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	// void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing); // [0x4119060] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetName
	// void SetName(FString S);                                                                                                 // [0x4118fc0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.SetMouseLocation
	// void SetMouseLocation(int32_t X, int32_t Y);                                                                             // [0x4118ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	// void SetMouseCursorWidget(TEnumAsByte<EMouseCursor> Cursor, class UUserWidget* CursorWidget);                            // [0x4118e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	// void SetHapticsByValue(float Frequency, float Amplitude, EControllerHand hand);                                          // [0x4118be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetDisableHaptics
	// void SetDisableHaptics(bool bNewDisabled);                                                                               // [0x4118b30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	// void SetControllerLightColor(FColor Color);                                                                              // [0x4118ab0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	// void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x41188d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	// void SetAudioListenerOverride(class USceneComponent* AttachToComponent, FVector Location, FRotator Rotation);            // [0x41187a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	// void SetAudioListenerAttenuationOverride(class USceneComponent* AttachToComponent, FVector AttenuationLocationOVerride); // [0x41186c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	// void ServerViewSelf(FViewTargetTransitionParams TransitionParams);                                                       // [0x41185d0] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	// void ServerViewPrevPlayer();                                                                                             // [0x4118580] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	// void ServerViewNextPlayer();                                                                                             // [0x4118530] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	// void ServerVerifyViewTarget();                                                                                           // [0x41184e0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	// void ServerUpdateMultipleLevelsVisibility(TArray<FUpdateLevelVisibilityLevelInfo> LevelVisibilities);                    // [0x4118420] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	// void ServerUpdateLevelVisibility(FUpdateLevelVisibilityLevelInfo LevelVisibility);                                       // [0x4118360] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	// void ServerUpdateCamera(FVector_NetQuantize CamLoc, int32_t CamPitchAndYaw);                                             // [0x4118230] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	// void ServerUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x41180d0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x4118080] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	// void ServerShortTimeout();                                                                                               // [0x4118030] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	// void ServerSetSpectatorWaiting(bool bWaiting);                                                                           // [0x4117f70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	// void ServerSetSpectatorLocation(FVector NewLoc, FRotator NewRot);                                                        // [0x4117e30] Net|Native|Event|Public|NetServer|HasDefaults|NetValidate 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	// void ServerRestartPlayer();                                                                                              // [0x4117de0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerPause
	// void ServerPause();                                                                                                      // [0x4117d90] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	// void ServerNotifyLoadedWorld(FName WorldPackageName);                                                                    // [0x4117cd0] Final|Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	// void ServerMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x4117b70] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExecRPC
	// void ServerExecRPC(FString Msg);                                                                                         // [0x4117ab0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerExec
	// void ServerExec(FString Msg);                                                                                            // [0x4117a10] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	// void ServerCheckClientPossessionReliable();                                                                              // [0x41179c0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	// void ServerCheckClientPossession();                                                                                      // [0x4117970] Net|Native|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerChangeName
	// void ServerChangeName(FString S);                                                                                        // [0x41178b0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerCamera
	// void ServerCamera(FName NewMode);                                                                                        // [0x41177f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	// void ServerAcknowledgePossession(class APawn* P);                                                                        // [0x4117730] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.PlayerController.SendToConsole
	// void SendToConsole(FString Command);                                                                                     // [0x4117690] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.RestartLevel
	// void RestartLevel();                                                                                                     // [0x20b0e10] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ResetControllerLightColor
	// void ResetControllerLightColor();                                                                                        // [0x4117670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	// bool ProjectWorldLocationToScreen(FVector WorldLocation, FVector2D& ScreenLocation, bool bPlayerViewportRelative);       // [0x4117400] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	// void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, EControllerHand hand, float Scale, bool bLoop);    // [0x41172a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	// void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, FLatentActionInfo LatentInfo); // [0x4116ff0] Final|Native|Private|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Pause
	// void Pause();                                                                                                            // [0x4116b30] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	// void OnServerStartedVisualLogger(bool bIsLogging);                                                                       // [0x4116aa0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.LocalTravel
	// void LocalTravel(FString URL);                                                                                           // [0x4116a00] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.K2_ClientPlayForceFeedback
	// void K2_ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused); // [0x4116840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	// bool IsInputKeyDown(FKey Key);                                                                                           // [0x4116750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetViewportSize
	// void GetViewportSize(int32_t& SizeX, int32_t& SizeY);                                                                    // [0x4116670] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	// class ASpectatorPawn* GetSpectatorPawn();                                                                                // [0x4116650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetMousePosition
	// bool GetMousePosition(float& LocationX, float& LocationY);                                                               // [0x4116530] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	// FVector GetInputVectorKeyState(FKey Key);                                                                                // [0x4116420] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	// void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed); // [0x4116290] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	// void GetInputMouseDelta(float& DeltaX, float& DeltaY);                                                                   // [0x41161b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	// void GetInputMotionState(FVector& Tilt, FVector& RotationRate, FVector& Gravity, FVector& Acceleration);                 // [0x4116020] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	// float GetInputKeyTimeDown(FKey Key);                                                                                     // [0x4115f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	// void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);             // [0x4115df0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	// float GetInputAnalogKeyState(FKey Key);                                                                                  // [0x4115cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHUD
	// class AHUD* GetHUD();                                                                                                    // [0x41152e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	// bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x4115b20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	// bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x4115970] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	// bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x41157c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	// bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, FHitResult& HitResult); // [0x4115630] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	// bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, FHitResult& HitResult); // [0x41154a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	// bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, FHitResult& HitResult);    // [0x4115310] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	// FVector GetFocalLocation();                                                                                              // [0x41152a0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.FOV
	// void FOV(float NewFOV);                                                                                                  // [0x41150f0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.EnableCheats
	// void EnableCheats();                                                                                                     // [0x41150d0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	// bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, FVector& WorldLocation, FVector& WorldDirection);      // [0x4114f40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	// bool DeprojectMousePositionToWorld(FVector& WorldLocation, FVector& WorldDirection);                                     // [0x4114e40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerController.ConsoleKey
	// void ConsoleKey(FKey Key);                                                                                               // [0x4114d50] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.ClientWasKicked
	// void ClientWasKicked(FText KickReason);                                                                                  // [0x4114c90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	// void ClientVoiceHandshakeComplete();                                                                                     // [0x4114c70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	// void ClientUpdateMultipleLevelsStreamingStatus(TArray<FUpdateLevelStreamingLevelStatus> LevelStatuses);                  // [0x4114bd0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	// void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32_t LODIndex); // [0x4114a10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	// void ClientUnmutePlayer(FUniqueNetIdRepl PlayerId);                                                                      // [0x41148f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	// void ClientTravelInternal(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);       // [0x4114770] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientTravel
	// void ClientTravel(FString URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, FGuid MapPackageGuid);               // [0x41145f0] Final|Native|Public|HasDefaults 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	// void ClientTeamMessage(class APlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);                 // [0x4114480] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	// void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, FName Tag);                                // [0x41143b0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakesFromSource
	// void ClientStopCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);            // [0x41142e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	// void ClientStopCameraShake(class UClass* Shake, bool bImmediately);                                                      // [0x4114210] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStopCameraAnim
	// void ClientStopCameraAnim(class UCameraAnim* AnimToStop);                                                                // [0x4114180] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	// void ClientStartOnlineSession();                                                                                         // [0x4114160] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientStartCameraShakeFromSource
	// void ClientStartCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent);          // [0x4114090] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientStartCameraShake
	// void ClientStartCameraShake(class UClass* Shake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4113f20] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	// void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);                                                  // [0x3730390] Net|Native|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	// void ClientSetViewTarget(class AActor* A, FViewTargetTransitionParams TransitionParams);                                 // [0x4113e20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	// void ClientSetSpectatorWaiting(bool bWaiting);                                                                           // [0x4113d90] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	// void ClientSetHUD(class UClass* NewHUDClass);                                                                            // [0x4113d00] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	// void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32_t CinematicTextureGroups); // [0x4113bf0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	// void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);       // [0x4113a70] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	// void ClientSetCameraMode(FName NewCamMode);                                                                              // [0x41139e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	// void ClientSetCameraFade(bool bEnableFading, FColor FadeColor, FVector2D FadeAlpha, float FadeTime, bool bFadeAudio, bool bHoldWhenFinished); // [0x41137d0] Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	// void ClientSetBlockOnAsyncLoading();                                                                                     // [0x20cd6e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	// void ClientReturnToMainMenuWithTextReason(FText ReturnReason);                                                           // [0x4113710] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenu
	// void ClientReturnToMainMenu(FString ReturnReason);                                                                       // [0x4113670] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	// void ClientRetryClientRestart(class APawn* NewPawn);                                                                     // [0x41135e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRestart
	// void ClientRestart(class APawn* NewPawn);                                                                                // [0x4113550] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReset
	// void ClientReset();                                                                                                      // [0x4113530] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	// void ClientRepObjRef(class UObject* Object);                                                                             // [0x41134a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	// void ClientReceiveLocalizedMessage(class UClass* Message, int32_t Switch, class APlayerState* RelatedPlayerState, class APlayerState* RelatedPlayerState1, class UObject* OptionalObject); // [0x4113300] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	// void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32_t CinematicTextureGroups); // [0x41131a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	// void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);                                                   // [0x4113080] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	// void ClientPlaySoundAtLocation(class USoundBase* Sound, FVector Location, float VolumeMultiplier, float PitchMultiplier); // [0x4112f10] Net|Native|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	// void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);                            // [0x4112e00] Net|Native|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback_Internal
	// void ClientPlayForceFeedback_Internal(class UForceFeedbackEffect* ForceFeedbackEffect, FForceFeedbackParameters Params); // [0x4112d10] Final|Net|Native|Event|Private|NetClient 
	// Function /Script/Engine.PlayerController.ClientPlayCameraAnim
	// void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendoutTime, bool bLoop, bool bRandomStartTime, ECameraShakePlaySpace Space, FRotator CustomPlaySpace); // [0x4112a40] Net|Native|Event|Public|HasDefaults|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	// void ClientMutePlayer(FUniqueNetIdRepl PlayerId);                                                                        // [0x4112920] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientMessage
	// void ClientMessage(FString S, FName Type, float MsgLifeTime);                                                            // [0x41127f0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	// void ClientIgnoreMoveInput(bool bIgnore);                                                                                // [0x4112760] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	// void ClientIgnoreLookInput(bool bIgnore);                                                                                // [0x41126d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGotoState
	// void ClientGotoState(FName NewState);                                                                                    // [0x4112640] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	// void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);                                                        // [0x4112570] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	// void ClientForceGarbageCollection();                                                                                     // [0x1fd96e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	// void ClientFlushLevelStreaming();                                                                                        // [0x4112550] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	// void ClientEndOnlineSession();                                                                                           // [0x201c120] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	// void ClientEnableNetworkVoice(bool bEnable);                                                                             // [0x41124c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	// void ClientCommitMapChange();                                                                                            // [0x20b10d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	// void ClientClearCameraLensEffects();                                                                                     // [0x12287b0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	// void ClientCapBandwidth(int32_t Cap);                                                                                    // [0x4112430] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	// void ClientCancelPendingMapChange();                                                                                     // [0x4112410] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	// void ClientAddTextureStreamingLoc(FVector InLoc, float Duration, bool bOverrideLocation);                                // [0x41122e0] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	// void ClearAudioListenerOverride();                                                                                       // [0x41122c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	// void ClearAudioListenerAttenuationOverride();                                                                            // [0x41122a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.CanRestartPlayer
	// bool CanRestartPlayer();                                                                                                 // [0x4112270] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.Camera
	// void Camera(FName NewMode);                                                                                              // [0x41121e0] Exec|Native|Public   
	// Function /Script/Engine.PlayerController.AddYawInput
	// void AddYawInput(float Val);                                                                                             // [0x4112150] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddRollInput
	// void AddRollInput(float Val);                                                                                            // [0x41120c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.AddPitchInput
	// void AddPitchInput(float Val);                                                                                           // [0x4112030] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	// void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);                                                   // [0x20b6950] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0040 (64 bytes) (0x0000B0 - 0x0000F0) align 8 pad: 0x0000
class UMovementComponent : public UActorComponent
{ 
public:
	class USceneComponent*                             UpdatedComponent;                                           // 0x00B0   (0x0008)  
	class UPrimitiveComponent*                         UpdatedPrimitive;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00C0   (0x0004)  MISSED
	FVector                                            Velocity;                                                   // 0x00C4   (0x000C)  
	FVector                                            PlaneConstraintNormal;                                      // 0x00D0   (0x000C)  
	FVector                                            PlaneConstraintOrigin;                                      // 0x00DC   (0x000C)  
	bool                                               bUpdateOnlyIfRendered : 1;                                  // 0x00E8:0 (0x0001)  
	bool                                               bAutoUpdateTickRegistration : 1;                            // 0x00E8:1 (0x0001)  
	bool                                               bTickBeforeOwner : 1;                                       // 0x00E8:2 (0x0001)  
	bool                                               bAutoRegisterUpdatedComponent : 1;                          // 0x00E8:3 (0x0001)  
	bool                                               bConstrainToPlane : 1;                                      // 0x00E8:4 (0x0001)  
	bool                                               bSnapToPlaneAtStart : 1;                                    // 0x00E8:5 (0x0001)  
	bool                                               bAutoRegisterPhysicsVolumeUpdates : 1;                      // 0x00E8:6 (0x0001)  
	bool                                               bComponentShouldUpdatePhysicsVolume : 1;                    // 0x00E8:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x00E9   (0x0002)  MISSED
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                                 // 0x00EB   (0x0001)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00EC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	// void StopMovementImmediately();                                                                                          // [0x211c850] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	// void SnapUpdatedComponentToPlane();                                                                                      // [0x1768320] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	// void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);                                                    // [0x40f20d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	// void SetPlaneConstraintOrigin(FVector PlaneOrigin);                                                                      // [0x40f1f70] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	// void SetPlaneConstraintNormal(FVector PlaneNormal);                                                                      // [0x40f1ee0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	// void SetPlaneConstraintFromVectors(FVector Forward, FVector Up);                                                         // [0x40f1df0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	// void SetPlaneConstraintEnabled(bool bEnabled);                                                                           // [0x40f1d60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	// void SetPlaneConstraintAxisSetting(EPlaneConstraintAxisSetting NewAxisSetting);                                          // [0x200a5f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	// void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);                                                              // [0x40f1b30] Native|Public        
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	// bool K2_MoveUpdatedComponent(FVector Delta, FRotator NewRotation, FHitResult& OutHit, bool bSweep, bool bTeleport);      // [0x40f1640] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed
	// float K2_GetModifiedMaxSpeed();                                                                                          // [0x40f1600] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.K2_GetMaxSpeedModifier
	// float K2_GetMaxSpeedModifier();                                                                                          // [0x40f15c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	// bool IsExceedingMaxSpeed(float MaxSpeed);                                                                                // [0x40f1480] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	// FVector GetPlaneConstraintOrigin();                                                                                      // [0x40f1440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	// FVector GetPlaneConstraintNormal();                                                                                      // [0x40f1400] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	// EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();                                                             // [0x40f13e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	// class APhysicsVolume* GetPhysicsVolume();                                                                                // [0x40f13b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	// float GetMaxSpeed();                                                                                                     // [0x40f1370] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	// float GetGravityZ();                                                                                                     // [0x40f1190] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	// FVector ConstrainNormalToPlane(FVector Normal);                                                                          // [0x40f10e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	// FVector ConstrainLocationToPlane(FVector Location);                                                                      // [0x40f1030] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	// FVector ConstrainDirectionToPlane(FVector Direction);                                                                    // [0x40f0f80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovementProperties
{ 
	bool                                               bCanCrouch : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bCanJump : 1;                                               // 0x0000:1 (0x0001)  
	bool                                               bCanWalk : 1;                                               // 0x0000:2 (0x0001)  
	bool                                               bCanSwim : 1;                                               // 0x0000:3 (0x0001)  
	bool                                               bCanFly : 1;                                                // 0x0000:4 (0x0001)  
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x002F (47 bytes) (0x000001 - 0x000030) align 8 pad: 0x0000
struct FNavAgentProperties : FMovementProperties
{ 
	unsigned char                                      UnknownData00_3[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AgentRadius;                                                // 0x0004   (0x0004)  
	float                                              AgentHeight;                                                // 0x0008   (0x0004)  
	float                                              AgentStepHeight;                                            // 0x000C   (0x0004)  
	float                                              NavWalkingSearchHeightScale;                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FSoftClassPath                                     PreferredNavData;                                           // 0x0018   (0x0018)  
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0040 (64 bytes) (0x0000F0 - 0x000130) align 8 pad: 0x0000
class UNavMovementComponent : public UMovementComponent
{ 
public:
	FNavAgentProperties                                NavAgentProps;                                              // 0x00F0   (0x0030)  
	float                                              FixedPathBrakingDistance;                                   // 0x0120   (0x0004)  
	bool                                               bUpdateNavAgentWithOwnersCollision : 1;                     // 0x0124:0 (0x0001)  
	bool                                               bUseAccelerationForPaths : 1;                               // 0x0124:1 (0x0001)  
	bool                                               bUseFixedBrakingDistanceForPaths : 1;                       // 0x0124:2 (0x0001)  
	FMovementProperties                                MovementState;                                              // 0x0125   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0126   (0x0002)  MISSED
	class UObject*                                     PathFollowingComp;                                          // 0x0128   (0x0008)  


	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	// void StopMovementKeepPathing();                                                                                          // [0x40f4ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	// void StopActiveMovement();                                                                                               // [0x40f4c80] Native|Public|BlueprintCallable 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	// bool IsSwimming();                                                                                                       // [0x40f4c50] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	// bool IsMovingOnGround();                                                                                                 // [0x4030600] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	// bool IsFlying();                                                                                                         // [0x212bee0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	// bool IsFalling();                                                                                                        // [0x4010fa0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	// bool IsCrouching();                                                                                                      // [0x40f4c20] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0008 (8 bytes) (0x000130 - 0x000138) align 8 pad: 0x0000
class UPawnMovementComponent : public UNavMovementComponent
{ 
public:
	class APawn*                                       PawnOwner;                                                  // 0x0130   (0x0008)  


	/// Functions
	// Function /Script/Engine.PawnMovementComponent.K2_GetInputVector
	// FVector K2_GetInputVector();                                                                                             // [0x4108f50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	// bool IsMoveInputIgnored();                                                                                               // [0x4109090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	// FVector GetPendingInputVector();                                                                                         // [0x4108f50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	// class APawn* GetPawnOwner();                                                                                             // [0x4108f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	// FVector GetLastInputVector();                                                                                            // [0x4108dc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	// FVector ConsumeInputVector();                                                                                            // [0x4108a90] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	// void AddInputVector(FVector WorldVector, bool bForce);                                                                   // [0x41084d0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ATriggerBase : public AActor
{ 
public:
	class UShapeComponent*                             CollisionComponent;                                         // 0x0220   (0x0008)  
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x0000 (0 bytes) (0x000228 - 0x000228) align 8 pad: 0x0000
class ATriggerBox : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.DamageType
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UDamageType : public UObject
{ 
public:
	bool                                               bCausedByWorld : 1;                                         // 0x0028:0 (0x0001)  
	bool                                               bScaleMomentumByMass : 1;                                   // 0x0028:1 (0x0001)  
	bool                                               bRadialDamageVelChange : 1;                                 // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DamageImpulse;                                              // 0x002C   (0x0004)  
	float                                              DestructibleImpulse;                                        // 0x0030   (0x0004)  
	float                                              DestructibleDamageSpreadScale;                              // 0x0034   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x00E0 (224 bytes) (0x0000F0 - 0x0001D0) align 16 pad: 0x0000
class UProjectileMovementComponent : public UMovementComponent
{ 
public:
	float                                              InitialSpeed;                                               // 0x00F0   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x00F4   (0x0004)  
	bool                                               bRotationFollowsVelocity : 1;                               // 0x00F8:0 (0x0001)  
	bool                                               bRotationRemainsVertical : 1;                               // 0x00F8:1 (0x0001)  
	bool                                               bShouldBounce : 1;                                          // 0x00F8:2 (0x0001)  
	bool                                               bInitialVelocityInLocalSpace : 1;                           // 0x00F8:3 (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x00F8:4 (0x0001)  
	bool                                               bSimulationEnabled : 1;                                     // 0x00F8:5 (0x0001)  
	bool                                               bSweepCollision : 1;                                        // 0x00F8:6 (0x0001)  
	bool                                               bIsHomingProjectile : 1;                                    // 0x00F8:7 (0x0001)  
	bool                                               bBounceAngleAffectsFriction : 1;                            // 0x00F9:0 (0x0001)  
	bool                                               bIsSliding : 1;                                             // 0x00F9:1 (0x0001)  
	bool                                               bInterpMovement : 1;                                        // 0x00F9:2 (0x0001)  
	bool                                               bInterpRotation : 1;                                        // 0x00F9:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x00FA   (0x0002)  MISSED
	float                                              PreviousHitTime;                                            // 0x00FC   (0x0004)  
	FVector                                            PreviousHitNormal;                                          // 0x0100   (0x000C)  
	float                                              ProjectileGravityScale;                                     // 0x010C   (0x0004)  
	float                                              Buoyancy;                                                   // 0x0110   (0x0004)  
	float                                              Bounciness;                                                 // 0x0114   (0x0004)  
	float                                              Friction;                                                   // 0x0118   (0x0004)  
	float                                              BounceVelocityStopSimulatingThreshold;                      // 0x011C   (0x0004)  
	float                                              MinFrictionFraction;                                        // 0x0120   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	SDK_UNDEFINED(16,77) /* FMulticastInlineDelegate */ __um(OnProjectileBounce);                                  // 0x0128   (0x0010)  
	SDK_UNDEFINED(16,78) /* FMulticastInlineDelegate */ __um(OnProjectileStop);                                    // 0x0138   (0x0010)  
	float                                              HomingAccelerationMagnitude;                                // 0x0148   (0x0004)  
	SDK_UNDEFINED(8,79) /* TWeakObjectPtr<USceneComponent*> */ __um(HomingTargetComponent);                        // 0x014C   (0x0008)  
	float                                              MaxSimulationTimeStep;                                      // 0x0154   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0158   (0x0004)  
	int32_t                                            BounceAdditionalIterations;                                 // 0x015C   (0x0004)  
	float                                              InterpLocationTime;                                         // 0x0160   (0x0004)  
	float                                              InterpRotationTime;                                         // 0x0164   (0x0004)  
	float                                              InterpLocationMaxLagDistance;                               // 0x0168   (0x0004)  
	float                                              InterpLocationSnapToTargetDistance;                         // 0x016C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x60];                                      // 0x0170   (0x0060)  MISSED


	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x4129cf0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	// void SetVelocityInLocalSpace(FVector NewVelocity);                                                                       // [0x4129c60] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.SetInterpolatedComponent
	// void SetInterpolatedComponent(class USceneComponent* Component);                                                         // [0x4129ac0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.ResetInterpolation
	// void ResetInterpolation();                                                                                               // [0x4012520] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	// void OnProjectileStopDelegate__DelegateSignature(FHitResult& ImpactResult);                                              // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	// void OnProjectileBounceDelegate__DelegateSignature(FHitResult& ImpactResult, FVector& ImpactVelocity);                   // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/Engine.ProjectileMovementComponent.MoveInterpolationTarget
	// void MoveInterpolationTarget(FVector& NewLocation, FRotator& NewRotation);                                               // [0x4129850] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	// FVector LimitVelocity(FVector NewVelocity);                                                                              // [0x41297a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	// bool IsVelocityUnderSimulationThreshold();                                                                               // [0x4129740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ProjectileMovementComponent.IsInterpolationComplete
	// bool IsInterpolationComplete();                                                                                          // [0x4129710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UPrimaryDataAsset : public UDataAsset
{ 
public:
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FStaticMeshComponentLODInfo
{ 
	unsigned char                                      UnknownData00_2[0x90];                                      // 0x0000   (0x0090)  MISSED
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FStreamingTextureBuildInfo
{ 
	uint32_t                                           PackedRelativeBox;                                          // 0x0000   (0x0004)  
	int32_t                                            TextureLevelIndex;                                          // 0x0004   (0x0004)  
	float                                              TexelFactor;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FLightmassPrimitiveSettings
{ 
	bool                                               bUseTwoSidedLighting : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bShadowIndirectOnly : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bUseEmissiveForStaticLighting : 1;                          // 0x0000:2 (0x0001)  
	bool                                               bUseVertexNormalForHemisphereGather : 1;                    // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              EmissiveLightFalloffExponent;                               // 0x0004   (0x0004)  
	float                                              EmissiveLightExplicitInfluenceRadius;                       // 0x0008   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x000C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0010   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0014   (0x0004)  
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x0068 (104 bytes) (0x000478 - 0x0004E0) align 16 pad: 0x0000
class UStaticMeshComponent : public UMeshComponent
{ 
public:
	int32_t                                            ForcedLodModel;                                             // 0x0478   (0x0004)  
	int32_t                                            PreviousLODLevel;                                           // 0x047C   (0x0004)  
	int32_t                                            MinLOD;                                                     // 0x0480   (0x0004)  
	int32_t                                            SubDivisionStepSize;                                        // 0x0484   (0x0004)  
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0488   (0x0008)  
	FColor                                             WireframeColorOverride;                                     // 0x0490   (0x0004)  
	bool                                               bEvaluateWorldPositionOffset : 1;                           // 0x0494:0 (0x0001)  
	bool                                               bOverrideWireframeColor : 1;                                // 0x0494:1 (0x0001)  
	bool                                               bOverrideMinLod : 1;                                        // 0x0494:2 (0x0001)  
	bool                                               bOverrideNavigationExport : 1;                              // 0x0494:3 (0x0001)  
	bool                                               bForceNavigationObstacle : 1;                               // 0x0494:4 (0x0001)  
	bool                                               bDisallowMeshPaintPerInstance : 1;                          // 0x0494:5 (0x0001)  
	bool                                               bIgnoreInstanceForTextureStreaming : 1;                     // 0x0494:6 (0x0001)  
	bool                                               bOverrideLightMapRes : 1;                                   // 0x0494:7 (0x0001)  
	bool                                               bCastDistanceFieldIndirectShadow : 1;                       // 0x0495:0 (0x0001)  
	bool                                               bOverrideDistanceFieldSelfShadowBias : 1;                   // 0x0495:1 (0x0001)  
	bool                                               bUseSubDivisions : 1;                                       // 0x0495:2 (0x0001)  
	bool                                               bUseDefaultCollision : 1;                                   // 0x0495:3 (0x0001)  
	bool                                               bReverseCulling : 1;                                        // 0x0495:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0496   (0x0002)  MISSED
	int32_t                                            OverriddenLightMapRes;                                      // 0x0498   (0x0004)  
	float                                              DistanceFieldIndirectShadowMinVisibility;                   // 0x049C   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x04A0   (0x0004)  
	float                                              StreamingDistanceMultiplier;                                // 0x04A4   (0x0004)  
	TArray<FStaticMeshComponentLODInfo>                LODData;                                                    // 0x04A8   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x04B8   (0x0010)  
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x04C8   (0x0018)  


	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	// bool SetStaticMesh(class UStaticMesh* NewMesh);                                                                          // [0x1988070] Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	// void SetReverseCulling(bool ReverseCulling);                                                                             // [0x415eb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	// void SetForcedLodModel(int32_t NewForcedLodModel);                                                                       // [0x415e700] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
	// void SetEvaluateWorldPositionOffsetInRayTracing(bool NewValue);                                                          // [0x415e670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	// void SetDistanceFieldSelfShadowBias(float NewValue);                                                                     // [0x415e3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	// void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);                                                                 // [0x415e360] Final|Native|Public  
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	// void GetLocalBounds(FVector& Min, FVector& Max);                                                                         // [0x415e1e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0020 (32 bytes) (0x000450 - 0x000470) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UArrowComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             ArrowColor;                                                 // 0x0450   (0x0004)  
	float                                              ArrowSize;                                                  // 0x0454   (0x0004)  
	float                                              ArrowLength;                                                // 0x0458   (0x0004)  
	float                                              ScreenSize;                                                 // 0x045C   (0x0004)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0460:0 (0x0001)  
	bool                                               bTreatAsASprite : 1;                                        // 0x0460:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0461   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	// void SetArrowColor(FLinearColor NewColor);                                                                               // [0x400c4f0] Native|Public|HasDefaults|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0020 (32 bytes) (0x000450 - 0x000470) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UShapeComponent : public UPrimitiveComponent
{ 
public:
	class UBodySetup*                                  ShapeBodySetup;                                             // 0x0450   (0x0008)  
	class UClass*                                      AreaClass;                                                  // 0x0458   (0x0008)  
	FColor                                             ShapeColor;                                                 // 0x0460   (0x0004)  
	bool                                               bDrawOnlyIfSelected : 1;                                    // 0x0464:0 (0x0001)  
	bool                                               bShouldCollideWhenPlacing : 1;                              // 0x0464:1 (0x0001)  
	bool                                               bDynamicObstacle : 1;                                       // 0x0464:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0465   (0x0003)  MISSED
};
#pragma pack(pop)

/// Class /Script/Engine.BoxComponent
/// Size: 0x0018 (24 bytes) (0x000468 - 0x000480) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UBoxComponent : public UShapeComponent
{ 
public:
	FVector                                            BoxExtent;                                                  // 0x0468   (0x000C)  
	float                                              LineThickness;                                              // 0x0474   (0x0004)  


	/// Functions
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	// void SetBoxExtent(FVector InBoxExtent, bool bUpdateOverlaps);                                                            // [0x4022900] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	// FVector GetUnscaledBoxExtent();                                                                                          // [0x40228d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	// FVector GetScaledBoxExtent();                                                                                            // [0x4022870] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FDebugTextInfo
{ 
	class AActor*                                      SrcActor;                                                   // 0x0000   (0x0008)  
	FVector                                            SrcActorOffset;                                             // 0x0008   (0x000C)  
	FVector                                            SrcActorDesiredOffset;                                      // 0x0014   (0x000C)  
	FString                                            DebugText;                                                  // 0x0020   (0x0010)  
	float                                              TimeRemaining;                                              // 0x0030   (0x0004)  
	float                                              Duration;                                                   // 0x0034   (0x0004)  
	FColor                                             TextColor;                                                  // 0x0038   (0x0004)  
	bool                                               bAbsoluteLocation : 1;                                      // 0x003C:0 (0x0001)  
	bool                                               bKeepAttachedToActor : 1;                                   // 0x003C:1 (0x0001)  
	bool                                               bDrawShadow : 1;                                            // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FVector                                            OrigActorLocation;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UFont*                                       Font;                                                       // 0x0050   (0x0008)  
	float                                              FontScale;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.HUD
/// Size: 0x00F0 (240 bytes) (0x000220 - 0x000310) align 8 pad: 0x0000
class AHUD : public AActor
{ 
public:
	class APlayerController*                           PlayerOwner;                                                // 0x0220   (0x0008)  
	bool                                               bLostFocusPaused : 1;                                       // 0x0228:0 (0x0001)  
	bool                                               bShowHUD : 1;                                               // 0x0228:1 (0x0001)  
	bool                                               bShowDebugInfo : 1;                                         // 0x0228:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0229   (0x0003)  MISSED
	int32_t                                            CurrentTargetIndex;                                         // 0x022C   (0x0004)  
	bool                                               bShowHitBoxDebugInfo : 1;                                   // 0x0230:0 (0x0001)  
	bool                                               bShowOverlays : 1;                                          // 0x0230:1 (0x0001)  
	bool                                               bEnableDebugTextShadow : 1;                                 // 0x0230:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0231   (0x0007)  MISSED
	TArray<class AActor*>                              PostRenderedActors;                                         // 0x0238   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0248   (0x0008)  MISSED
	TArray<FName>                                      DebugDisplay;                                               // 0x0250   (0x0010)  
	TArray<FName>                                      ToggledDebugCategories;                                     // 0x0260   (0x0010)  
	class UCanvas*                                     Canvas;                                                     // 0x0270   (0x0008)  
	class UCanvas*                                     DebugCanvas;                                                // 0x0278   (0x0008)  
	TArray<FDebugTextInfo>                             DebugTextList;                                              // 0x0280   (0x0010)  
	class UClass*                                      ShowDebugTargetDesiredClass;                                // 0x0290   (0x0008)  
	class AActor*                                      ShowDebugTargetActor;                                       // 0x0298   (0x0008)  
	unsigned char                                      UnknownData03_7[0x70];                                      // 0x02A0   (0x0070)  MISSED


	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	// void ShowHUD();                                                                                                          // [0x1781660] Exec|Native|Public   
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	// void ShowDebugToggleSubCategory(FName Category);                                                                         // [0x4069440] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	// void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);                                                        // [0x40693b0] Final|Exec|Native|Public 
	// Function /Script/Engine.HUD.ShowDebug
	// void ShowDebug(FName DebugType);                                                                                         // [0x4069320] Exec|Native|Public   
	// Function /Script/Engine.HUD.RemoveDebugText
	// void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);                                                   // [0x4069100] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	// void RemoveAllDebugStrings();                                                                                            // [0x40690e0] Final|Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	// void ReceiveHitBoxRelease(FName BoxName);                                                                                // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	// void ReceiveHitBoxEndCursorOver(FName BoxName);                                                                          // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	// void ReceiveHitBoxClick(FName BoxName);                                                                                  // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	// void ReceiveHitBoxBeginCursorOver(FName BoxName);                                                                        // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	// void ReceiveDrawHUD(int32_t SizeX, int32_t SizeY);                                                                       // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/Engine.HUD.Project
	// FVector Project(FVector Location);                                                                                       // [0x4068c30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	// void PreviousDebugTarget();                                                                                              // [0x4068c10] Exec|Native|Public   
	// Function /Script/Engine.HUD.NextDebugTarget
	// void NextDebugTarget();                                                                                                  // [0x4062f90] Exec|Native|Public   
	// Function /Script/Engine.HUD.GetTextSize
	// void GetTextSize(FString Text, float& OutWidth, float& OutHeight, class UFont* Font, float Scale);                       // [0x40680f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x1183fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetOwningPawn
	// class APawn* GetOwningPawn();                                                                                            // [0x40680c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	// void GetActorsInSelectionRectangle(class UClass* ClassFilter, FVector2D& FirstPoint, FVector2D& SecondPoint, TArray<AActor*>& OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed); // [0x4067ea0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.HUD.DrawTextureSimple
	// void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);         // [0x4067cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawTexture
	// void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, FLinearColor TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x4067890] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawText
	// void DrawText(FString Text, FLinearColor TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition); // [0x4067650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawRect
	// void DrawRect(FLinearColor RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);                       // [0x4067490] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	// void DrawMaterialTriangle(class UMaterialInterface* Material, FVector2D V0_Pos, FVector2D V1_Pos, FVector2D V2_Pos, FVector2D V0_UV, FVector2D V1_UV, FVector2D V2_UV, FLinearColor V0_Color, FLinearColor V1_Color, FLinearColor V2_Color); // [0x40671a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	// void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition); // [0x4066f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawMaterial
	// void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, FVector2D RotPivot); // [0x4066bb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.DrawLine
	// void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, FLinearColor LineColor, float LineThickness); // [0x40669b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.Deproject
	// void Deproject(float ScreenX, float ScreenY, FVector& WorldPosition, FVector& WorldDirection);                           // [0x4066830] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.HUD.AddHitBox
	// void AddHitBox(FVector2D position, FVector2D Size, FName InName, bool bConsumesInput, int32_t Priority);                 // [0x4066510] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.HUD.AddDebugText
	// void AddDebugText(FString DebugText, class AActor* SrcActor, float Duration, FVector Offset, FVector DesiredOffset, FColor TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow); // [0x4066150] Final|Net|NetReliableNative|Event|Public|HasDefaults|NetClient 
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FWeightedBlendable
{ 
	float                                              Weight;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UObject*                                     Object;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FWeightedBlendables
{ 
	TArray<FWeightedBlendable>                         Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x0560 (1376 bytes) (0x000000 - 0x000560) align 16 pad: 0x0000
struct FPostProcessSettings
{ 
	bool                                               bOverride_TemperatureType : 1;                              // 0x0000:0 (0x0001)  
	bool                                               bOverride_WhiteTemp : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_WhiteTint : 1;                                    // 0x0000:2 (0x0001)  
	bool                                               bOverride_ColorSaturation : 1;                              // 0x0000:3 (0x0001)  
	bool                                               bOverride_ColorContrast : 1;                                // 0x0000:4 (0x0001)  
	bool                                               bOverride_ColorGamma : 1;                                   // 0x0000:5 (0x0001)  
	bool                                               bOverride_ColorGain : 1;                                    // 0x0000:6 (0x0001)  
	bool                                               bOverride_ColorOffset : 1;                                  // 0x0000:7 (0x0001)  
	bool                                               bOverride_ColorSaturationShadows : 1;                       // 0x0001:0 (0x0001)  
	bool                                               bOverride_ColorContrastShadows : 1;                         // 0x0001:1 (0x0001)  
	bool                                               bOverride_ColorGammaShadows : 1;                            // 0x0001:2 (0x0001)  
	bool                                               bOverride_ColorGainShadows : 1;                             // 0x0001:3 (0x0001)  
	bool                                               bOverride_ColorOffsetShadows : 1;                           // 0x0001:4 (0x0001)  
	bool                                               bOverride_ColorSaturationMidtones : 1;                      // 0x0001:5 (0x0001)  
	bool                                               bOverride_ColorContrastMidtones : 1;                        // 0x0001:6 (0x0001)  
	bool                                               bOverride_ColorGammaMidtones : 1;                           // 0x0001:7 (0x0001)  
	bool                                               bOverride_ColorGainMidtones : 1;                            // 0x0002:0 (0x0001)  
	bool                                               bOverride_ColorOffsetMidtones : 1;                          // 0x0002:1 (0x0001)  
	bool                                               bOverride_ColorSaturationHighlights : 1;                    // 0x0002:2 (0x0001)  
	bool                                               bOverride_ColorContrastHighlights : 1;                      // 0x0002:3 (0x0001)  
	bool                                               bOverride_ColorGammaHighlights : 1;                         // 0x0002:4 (0x0001)  
	bool                                               bOverride_ColorGainHighlights : 1;                          // 0x0002:5 (0x0001)  
	bool                                               bOverride_ColorOffsetHighlights : 1;                        // 0x0002:6 (0x0001)  
	bool                                               bOverride_ColorCorrectionShadowsMax : 1;                    // 0x0002:7 (0x0001)  
	bool                                               bOverride_ColorCorrectionHighlightsMin : 1;                 // 0x0003:0 (0x0001)  
	bool                                               bOverride_BlueCorrection : 1;                               // 0x0003:1 (0x0001)  
	bool                                               bOverride_ExpandGamut : 1;                                  // 0x0003:2 (0x0001)  
	bool                                               bOverride_ToneCurveAmount : 1;                              // 0x0003:3 (0x0001)  
	bool                                               bOverride_FilmWhitePoint : 1;                               // 0x0003:4 (0x0001)  
	bool                                               bOverride_FilmSaturation : 1;                               // 0x0003:5 (0x0001)  
	bool                                               bOverride_FilmChannelMixerRed : 1;                          // 0x0003:6 (0x0001)  
	bool                                               bOverride_FilmChannelMixerGreen : 1;                        // 0x0003:7 (0x0001)  
	bool                                               bOverride_FilmChannelMixerBlue : 1;                         // 0x0004:0 (0x0001)  
	bool                                               bOverride_FilmContrast : 1;                                 // 0x0004:1 (0x0001)  
	bool                                               bOverride_FilmDynamicRange : 1;                             // 0x0004:2 (0x0001)  
	bool                                               bOverride_FilmHealAmount : 1;                               // 0x0004:3 (0x0001)  
	bool                                               bOverride_FilmToeAmount : 1;                                // 0x0004:4 (0x0001)  
	bool                                               bOverride_FilmShadowTint : 1;                               // 0x0004:5 (0x0001)  
	bool                                               bOverride_FilmShadowTintBlend : 1;                          // 0x0004:6 (0x0001)  
	bool                                               bOverride_FilmShadowTintAmount : 1;                         // 0x0004:7 (0x0001)  
	bool                                               bOverride_FilmSlope : 1;                                    // 0x0005:0 (0x0001)  
	bool                                               bOverride_FilmToe : 1;                                      // 0x0005:1 (0x0001)  
	bool                                               bOverride_FilmShoulder : 1;                                 // 0x0005:2 (0x0001)  
	bool                                               bOverride_FilmBlackClip : 1;                                // 0x0005:3 (0x0001)  
	bool                                               bOverride_FilmWhiteClip : 1;                                // 0x0005:4 (0x0001)  
	bool                                               bOverride_SceneColorTint : 1;                               // 0x0005:5 (0x0001)  
	bool                                               bOverride_SceneFringeIntensity : 1;                         // 0x0005:6 (0x0001)  
	bool                                               bOverride_ChromaticAberrationStartOffset : 1;               // 0x0005:7 (0x0001)  
	bool                                               bOverride_AmbientCubemapTint : 1;                           // 0x0006:0 (0x0001)  
	bool                                               bOverride_AmbientCubemapIntensity : 1;                      // 0x0006:1 (0x0001)  
	bool                                               bOverride_BloomMethod : 1;                                  // 0x0006:2 (0x0001)  
	bool                                               bOverride_BloomIntensity : 1;                               // 0x0006:3 (0x0001)  
	bool                                               bOverride_BloomThreshold : 1;                               // 0x0006:4 (0x0001)  
	bool                                               bOverride_Bloom1Tint : 1;                                   // 0x0006:5 (0x0001)  
	bool                                               bOverride_Bloom1Size : 1;                                   // 0x0006:6 (0x0001)  
	bool                                               bOverride_Bloom2Size : 1;                                   // 0x0006:7 (0x0001)  
	bool                                               bOverride_Bloom2Tint : 1;                                   // 0x0007:0 (0x0001)  
	bool                                               bOverride_Bloom3Tint : 1;                                   // 0x0007:1 (0x0001)  
	bool                                               bOverride_Bloom3Size : 1;                                   // 0x0007:2 (0x0001)  
	bool                                               bOverride_Bloom4Tint : 1;                                   // 0x0007:3 (0x0001)  
	bool                                               bOverride_Bloom4Size : 1;                                   // 0x0007:4 (0x0001)  
	bool                                               bOverride_Bloom5Tint : 1;                                   // 0x0007:5 (0x0001)  
	bool                                               bOverride_Bloom5Size : 1;                                   // 0x0007:6 (0x0001)  
	bool                                               bOverride_Bloom6Tint : 1;                                   // 0x0007:7 (0x0001)  
	bool                                               bOverride_Bloom6Size : 1;                                   // 0x0008:0 (0x0001)  
	bool                                               bOverride_BloomSizeScale : 1;                               // 0x0008:1 (0x0001)  
	bool                                               bOverride_BloomConvolutionTexture : 1;                      // 0x0008:2 (0x0001)  
	bool                                               bOverride_BloomConvolutionSize : 1;                         // 0x0008:3 (0x0001)  
	bool                                               bOverride_BloomConvolutionCenterUV : 1;                     // 0x0008:4 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilter : 1;                    // 0x0008:5 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMin : 1;                 // 0x0008:6 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMax : 1;                 // 0x0008:7 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMult : 1;                // 0x0009:0 (0x0001)  
	bool                                               bOverride_BloomConvolutionBufferScale : 1;                  // 0x0009:1 (0x0001)  
	bool                                               bOverride_BloomDirtMaskIntensity : 1;                       // 0x0009:2 (0x0001)  
	bool                                               bOverride_BloomDirtMaskTint : 1;                            // 0x0009:3 (0x0001)  
	bool                                               bOverride_BloomDirtMask : 1;                                // 0x0009:4 (0x0001)  
	bool                                               bOverride_CameraShutterSpeed : 1;                           // 0x0009:5 (0x0001)  
	bool                                               bOverride_CameraISO : 1;                                    // 0x0009:6 (0x0001)  
	bool                                               bOverride_AutoExposureMethod : 1;                           // 0x0009:7 (0x0001)  
	bool                                               bOverride_AutoExposureLowPercent : 1;                       // 0x000A:0 (0x0001)  
	bool                                               bOverride_AutoExposureHighPercent : 1;                      // 0x000A:1 (0x0001)  
	bool                                               bOverride_AutoExposureMinBrightness : 1;                    // 0x000A:2 (0x0001)  
	bool                                               bOverride_AutoExposureMaxBrightness : 1;                    // 0x000A:3 (0x0001)  
	bool                                               bOverride_AutoExposureCalibrationConstant : 1;              // 0x000A:4 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedUp : 1;                          // 0x000A:5 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedDown : 1;                        // 0x000A:6 (0x0001)  
	bool                                               bOverride_AutoExposureBias : 1;                             // 0x000A:7 (0x0001)  
	bool                                               bOverride_AutoExposureBiasCurve : 1;                        // 0x000B:0 (0x0001)  
	bool                                               bOverride_AutoExposureMeterMask : 1;                        // 0x000B:1 (0x0001)  
	bool                                               bOverride_AutoExposureApplyPhysicalCameraExposure : 1;      // 0x000B:2 (0x0001)  
	bool                                               bOverride_HistogramLogMin : 1;                              // 0x000B:3 (0x0001)  
	bool                                               bOverride_HistogramLogMax : 1;                              // 0x000B:4 (0x0001)  
	bool                                               bOverride_LensFlareIntensity : 1;                           // 0x000B:5 (0x0001)  
	bool                                               bOverride_LensFlareTint : 1;                                // 0x000B:6 (0x0001)  
	bool                                               bOverride_LensFlareTints : 1;                               // 0x000B:7 (0x0001)  
	bool                                               bOverride_LensFlareBokehSize : 1;                           // 0x000C:0 (0x0001)  
	bool                                               bOverride_LensFlareBokehShape : 1;                          // 0x000C:1 (0x0001)  
	bool                                               bOverride_LensFlareThreshold : 1;                           // 0x000C:2 (0x0001)  
	bool                                               bOverride_VignetteIntensity : 1;                            // 0x000C:3 (0x0001)  
	bool                                               bOverride_GrainIntensity : 1;                               // 0x000C:4 (0x0001)  
	bool                                               bOverride_GrainJitter : 1;                                  // 0x000C:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionIntensity : 1;                    // 0x000C:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionStaticFraction : 1;               // 0x000C:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadius : 1;                       // 0x000D:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeDistance : 1;                 // 0x000D:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeRadius : 1;                   // 0x000D:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionDistance : 1;                     // 0x000D:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadiusInWS : 1;                   // 0x000D:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionPower : 1;                        // 0x000D:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionBias : 1;                         // 0x000D:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionQuality : 1;                      // 0x000D:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipBlend : 1;                     // 0x000E:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipScale : 1;                     // 0x000E:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipThreshold : 1;                 // 0x000E:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionTemporalBlendWeight : 1;          // 0x000E:3 (0x0001)  
	unsigned char                                      UnknownData00_3[0x1];                                       // 0x000F   (0x0001)  MISSED
	bool                                               bOverride_RayTracingAO : 1;                                 // 0x0010:0 (0x0001)  
	bool                                               bOverride_RayTracingAOSamplesPerPixel : 1;                  // 0x0010:1 (0x0001)  
	bool                                               bOverride_RayTracingAOIntensity : 1;                        // 0x0010:2 (0x0001)  
	bool                                               bOverride_RayTracingAORadius : 1;                           // 0x0010:3 (0x0001)  
	unsigned char                                      UnknownData01_3[0x3];                                       // 0x0011   (0x0003)  MISSED
	bool                                               bOverride_LPVIntensity : 1;                                 // 0x0014:0 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionIntensity : 1;             // 0x0014:1 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionRadius : 1;                // 0x0014:2 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionExponent : 1;                  // 0x0014:3 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionExponent : 1;                 // 0x0014:4 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionIntensity : 1;                 // 0x0014:5 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionIntensity : 1;                // 0x0014:6 (0x0001)  
	bool                                               bOverride_LPVSize : 1;                                      // 0x0014:7 (0x0001)  
	bool                                               bOverride_LPVSecondaryOcclusionIntensity : 1;               // 0x0015:0 (0x0001)  
	bool                                               bOverride_LPVSecondaryBounceIntensity : 1;                  // 0x0015:1 (0x0001)  
	bool                                               bOverride_LPVGeometryVolumeBias : 1;                        // 0x0015:2 (0x0001)  
	bool                                               bOverride_LPVVplInjectionBias : 1;                          // 0x0015:3 (0x0001)  
	bool                                               bOverride_LPVEmissiveInjectionIntensity : 1;                // 0x0015:4 (0x0001)  
	bool                                               bOverride_LPVFadeRange : 1;                                 // 0x0015:5 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionFadeRange : 1;             // 0x0015:6 (0x0001)  
	bool                                               bOverride_IndirectLightingColor : 1;                        // 0x0015:7 (0x0001)  
	bool                                               bOverride_IndirectLightingIntensity : 1;                    // 0x0016:0 (0x0001)  
	bool                                               bOverride_ColorGradingIntensity : 1;                        // 0x0016:1 (0x0001)  
	bool                                               bOverride_ColorGradingLUT : 1;                              // 0x0016:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalDistance : 1;                    // 0x0016:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFstop : 1;                            // 0x0016:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldMinFstop : 1;                         // 0x0016:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldBladeCount : 1;                       // 0x0016:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldSensorWidth : 1;                      // 0x0016:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurRadius : 1;                  // 0x0017:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurAmount : 1;                  // 0x0017:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalRegion : 1;                      // 0x0017:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearTransitionRegion : 1;             // 0x0017:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarTransitionRegion : 1;              // 0x0017:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldScale : 1;                            // 0x0017:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearBlurSize : 1;                     // 0x0017:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarBlurSize : 1;                      // 0x0017:7 (0x0001)  
	bool                                               bOverride_MobileHQGaussian : 1;                             // 0x0018:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldOcclusion : 1;                        // 0x0018:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldSkyFocusDistance : 1;                 // 0x0018:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldVignetteSize : 1;                     // 0x0018:3 (0x0001)  
	bool                                               bOverride_MotionBlurAmount : 1;                             // 0x0018:4 (0x0001)  
	bool                                               bOverride_MotionBlurMax : 1;                                // 0x0018:5 (0x0001)  
	bool                                               bOverride_MotionBlurTargetFPS : 1;                          // 0x0018:6 (0x0001)  
	bool                                               bOverride_MotionBlurPerObjectSize : 1;                      // 0x0018:7 (0x0001)  
	bool                                               bOverride_ScreenPercentage : 1;                             // 0x0019:0 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionIntensity : 1;               // 0x0019:1 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionQuality : 1;                 // 0x0019:2 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionMaxRoughness : 1;            // 0x0019:3 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionRoughnessScale : 1;          // 0x0019:4 (0x0001)  
	unsigned char                                      UnknownData02_3[0x2];                                       // 0x001A   (0x0002)  MISSED
	bool                                               bOverride_ReflectionsType : 1;                              // 0x001C:0 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxRoughness : 1;            // 0x001C:1 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxBounces : 1;              // 0x001C:2 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsSamplesPerPixel : 1;         // 0x001C:3 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsShadows : 1;                 // 0x001C:4 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsTranslucency : 1;            // 0x001C:5 (0x0001)  
	bool                                               bOverride_TranslucencyType : 1;                             // 0x001C:6 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMaxRoughness : 1;           // 0x001C:7 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefractionRays : 1;         // 0x001D:0 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencySamplesPerPixel : 1;        // 0x001D:1 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyShadows : 1;                // 0x001D:2 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefraction : 1;             // 0x001D:3 (0x0001)  
	bool                                               bOverride_RayTracingGI : 1;                                 // 0x001D:4 (0x0001)  
	bool                                               bOverride_RayTracingGIMaxBounces : 1;                       // 0x001D:5 (0x0001)  
	bool                                               bOverride_RayTracingGISamplesPerPixel : 1;                  // 0x001D:6 (0x0001)  
	bool                                               bOverride_PathTracingMaxBounces : 1;                        // 0x001D:7 (0x0001)  
	bool                                               bOverride_PathTracingSamplesPerPixel : 1;                   // 0x001E:0 (0x0001)  
	bool                                               bOverride_PathTracingFilterWidth : 1;                       // 0x001E:1 (0x0001)  
	bool                                               bOverride_PathTracingEnableEmissive : 1;                    // 0x001E:2 (0x0001)  
	bool                                               bOverride_PathTracingMaxPathExposure : 1;                   // 0x001E:3 (0x0001)  
	bool                                               bOverride_PathTracingEnableDenoiser : 1;                    // 0x001E:4 (0x0001)  
	unsigned char                                      UnknownData03_3[0x1];                                       // 0x001F   (0x0001)  MISSED
	bool                                               bMobileHQGaussian : 1;                                      // 0x0020:0 (0x0001)  
	TEnumAsByte<EBloomMethod>                          BloomMethod;                                                // 0x0021   (0x0001)  
	TEnumAsByte<EAutoExposureMethod>                   AutoExposureMethod;                                         // 0x0022   (0x0001)  
	TEnumAsByte<ETemperatureMethod>                    TemperatureType;                                            // 0x0023   (0x0001)  
	float                                              WhiteTemp;                                                  // 0x0024   (0x0004)  
	float                                              WhiteTint;                                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FVector4                                           ColorSaturation;                                            // 0x0030   (0x0010)  
	FVector4                                           ColorContrast;                                              // 0x0040   (0x0010)  
	FVector4                                           ColorGamma;                                                 // 0x0050   (0x0010)  
	FVector4                                           ColorGain;                                                  // 0x0060   (0x0010)  
	FVector4                                           ColorOffset;                                                // 0x0070   (0x0010)  
	FVector4                                           ColorSaturationShadows;                                     // 0x0080   (0x0010)  
	FVector4                                           ColorContrastShadows;                                       // 0x0090   (0x0010)  
	FVector4                                           ColorGammaShadows;                                          // 0x00A0   (0x0010)  
	FVector4                                           ColorGainShadows;                                           // 0x00B0   (0x0010)  
	FVector4                                           ColorOffsetShadows;                                         // 0x00C0   (0x0010)  
	FVector4                                           ColorSaturationMidtones;                                    // 0x00D0   (0x0010)  
	FVector4                                           ColorContrastMidtones;                                      // 0x00E0   (0x0010)  
	FVector4                                           ColorGammaMidtones;                                         // 0x00F0   (0x0010)  
	FVector4                                           ColorGainMidtones;                                          // 0x0100   (0x0010)  
	FVector4                                           ColorOffsetMidtones;                                        // 0x0110   (0x0010)  
	FVector4                                           ColorSaturationHighlights;                                  // 0x0120   (0x0010)  
	FVector4                                           ColorContrastHighlights;                                    // 0x0130   (0x0010)  
	FVector4                                           ColorGammaHighlights;                                       // 0x0140   (0x0010)  
	FVector4                                           ColorGainHighlights;                                        // 0x0150   (0x0010)  
	FVector4                                           ColorOffsetHighlights;                                      // 0x0160   (0x0010)  
	float                                              ColorCorrectionHighlightsMin;                               // 0x0170   (0x0004)  
	float                                              ColorCorrectionShadowsMax;                                  // 0x0174   (0x0004)  
	float                                              BlueCorrection;                                             // 0x0178   (0x0004)  
	float                                              ExpandGamut;                                                // 0x017C   (0x0004)  
	float                                              ToneCurveAmount;                                            // 0x0180   (0x0004)  
	float                                              FilmSlope;                                                  // 0x0184   (0x0004)  
	float                                              FilmToe;                                                    // 0x0188   (0x0004)  
	float                                              FilmShoulder;                                               // 0x018C   (0x0004)  
	float                                              FilmBlackClip;                                              // 0x0190   (0x0004)  
	float                                              FilmWhiteClip;                                              // 0x0194   (0x0004)  
	FLinearColor                                       FilmWhitePoint;                                             // 0x0198   (0x0010)  
	FLinearColor                                       FilmShadowTint;                                             // 0x01A8   (0x0010)  
	float                                              FilmShadowTintBlend;                                        // 0x01B8   (0x0004)  
	float                                              FilmShadowTintAmount;                                       // 0x01BC   (0x0004)  
	float                                              FilmSaturation;                                             // 0x01C0   (0x0004)  
	FLinearColor                                       FilmChannelMixerRed;                                        // 0x01C4   (0x0010)  
	FLinearColor                                       FilmChannelMixerGreen;                                      // 0x01D4   (0x0010)  
	FLinearColor                                       FilmChannelMixerBlue;                                       // 0x01E4   (0x0010)  
	float                                              FilmContrast;                                               // 0x01F4   (0x0004)  
	float                                              FilmToeAmount;                                              // 0x01F8   (0x0004)  
	float                                              FilmHealAmount;                                             // 0x01FC   (0x0004)  
	float                                              FilmDynamicRange;                                           // 0x0200   (0x0004)  
	FLinearColor                                       SceneColorTint;                                             // 0x0204   (0x0010)  
	float                                              SceneFringeIntensity;                                       // 0x0214   (0x0004)  
	float                                              ChromaticAberrationStartOffset;                             // 0x0218   (0x0004)  
	float                                              BloomIntensity;                                             // 0x021C   (0x0004)  
	float                                              BloomThreshold;                                             // 0x0220   (0x0004)  
	float                                              BloomSizeScale;                                             // 0x0224   (0x0004)  
	float                                              Bloom1Size;                                                 // 0x0228   (0x0004)  
	float                                              Bloom2Size;                                                 // 0x022C   (0x0004)  
	float                                              Bloom3Size;                                                 // 0x0230   (0x0004)  
	float                                              Bloom4Size;                                                 // 0x0234   (0x0004)  
	float                                              Bloom5Size;                                                 // 0x0238   (0x0004)  
	float                                              Bloom6Size;                                                 // 0x023C   (0x0004)  
	FLinearColor                                       Bloom1Tint;                                                 // 0x0240   (0x0010)  
	FLinearColor                                       Bloom2Tint;                                                 // 0x0250   (0x0010)  
	FLinearColor                                       Bloom3Tint;                                                 // 0x0260   (0x0010)  
	FLinearColor                                       Bloom4Tint;                                                 // 0x0270   (0x0010)  
	FLinearColor                                       Bloom5Tint;                                                 // 0x0280   (0x0010)  
	FLinearColor                                       Bloom6Tint;                                                 // 0x0290   (0x0010)  
	float                                              BloomConvolutionSize;                                       // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	class UTexture2D*                                  BloomConvolutionTexture;                                    // 0x02A8   (0x0008)  
	FVector2D                                          BloomConvolutionCenterUV;                                   // 0x02B0   (0x0008)  
	float                                              BloomConvolutionPreFilterMin;                               // 0x02B8   (0x0004)  
	float                                              BloomConvolutionPreFilterMax;                               // 0x02BC   (0x0004)  
	float                                              BloomConvolutionPreFilterMult;                              // 0x02C0   (0x0004)  
	float                                              BloomConvolutionBufferScale;                                // 0x02C4   (0x0004)  
	class UTexture*                                    BloomDirtMask;                                              // 0x02C8   (0x0008)  
	float                                              BloomDirtMaskIntensity;                                     // 0x02D0   (0x0004)  
	FLinearColor                                       BloomDirtMaskTint;                                          // 0x02D4   (0x0010)  
	FLinearColor                                       AmbientCubemapTint;                                         // 0x02E4   (0x0010)  
	float                                              AmbientCubemapIntensity;                                    // 0x02F4   (0x0004)  
	class UTextureCube*                                AmbientCubemap;                                             // 0x02F8   (0x0008)  
	float                                              CameraShutterSpeed;                                         // 0x0300   (0x0004)  
	float                                              CameraISO;                                                  // 0x0304   (0x0004)  
	float                                              DepthOfFieldFstop;                                          // 0x0308   (0x0004)  
	float                                              DepthOfFieldMinFstop;                                       // 0x030C   (0x0004)  
	int32_t                                            DepthOfFieldBladeCount;                                     // 0x0310   (0x0004)  
	float                                              AutoExposureBias;                                           // 0x0314   (0x0004)  
	float                                              AutoExposureBiasBackup;                                     // 0x0318   (0x0004)  
	bool                                               bOverride_AutoExposureBiasBackup : 1;                       // 0x031C:0 (0x0001)  
	unsigned char                                      UnknownData06_3[0x3];                                       // 0x031D   (0x0003)  MISSED
	bool                                               AutoExposureApplyPhysicalCameraExposure : 1;                // 0x0320:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x0321   (0x0007)  MISSED
	class UCurveFloat*                                 AutoExposureBiasCurve;                                      // 0x0328   (0x0008)  
	class UTexture*                                    AutoExposureMeterMask;                                      // 0x0330   (0x0008)  
	float                                              AutoExposureLowPercent;                                     // 0x0338   (0x0004)  
	float                                              AutoExposureHighPercent;                                    // 0x033C   (0x0004)  
	float                                              AutoExposureMinBrightness;                                  // 0x0340   (0x0004)  
	float                                              AutoExposureMaxBrightness;                                  // 0x0344   (0x0004)  
	float                                              AutoExposureSpeedUp;                                        // 0x0348   (0x0004)  
	float                                              AutoExposureSpeedDown;                                      // 0x034C   (0x0004)  
	float                                              HistogramLogMin;                                            // 0x0350   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x0354   (0x0004)  
	float                                              AutoExposureCalibrationConstant;                            // 0x0358   (0x0004)  
	float                                              LensFlareIntensity;                                         // 0x035C   (0x0004)  
	FLinearColor                                       LensFlareTint;                                              // 0x0360   (0x0010)  
	float                                              LensFlareBokehSize;                                         // 0x0370   (0x0004)  
	float                                              LensFlareThreshold;                                         // 0x0374   (0x0004)  
	class UTexture*                                    LensFlareBokehShape;                                        // 0x0378   (0x0008)  
	FLinearColor                                       LensFlareTints[8];                                          // 0x0380   (0x0080)  
	float                                              VignetteIntensity;                                          // 0x0400   (0x0004)  
	float                                              GrainJitter;                                                // 0x0404   (0x0004)  
	float                                              GrainIntensity;                                             // 0x0408   (0x0004)  
	float                                              AmbientOcclusionIntensity;                                  // 0x040C   (0x0004)  
	float                                              AmbientOcclusionStaticFraction;                             // 0x0410   (0x0004)  
	float                                              AmbientOcclusionRadius;                                     // 0x0414   (0x0004)  
	bool                                               AmbientOcclusionRadiusInWS : 1;                             // 0x0418:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0419   (0x0003)  MISSED
	float                                              AmbientOcclusionFadeDistance;                               // 0x041C   (0x0004)  
	float                                              AmbientOcclusionFadeRadius;                                 // 0x0420   (0x0004)  
	float                                              AmbientOcclusionDistance;                                   // 0x0424   (0x0004)  
	float                                              AmbientOcclusionPower;                                      // 0x0428   (0x0004)  
	float                                              AmbientOcclusionBias;                                       // 0x042C   (0x0004)  
	float                                              AmbientOcclusionQuality;                                    // 0x0430   (0x0004)  
	float                                              AmbientOcclusionMipBlend;                                   // 0x0434   (0x0004)  
	float                                              AmbientOcclusionMipScale;                                   // 0x0438   (0x0004)  
	float                                              AmbientOcclusionMipThreshold;                               // 0x043C   (0x0004)  
	float                                              AmbientOcclusionTemporalBlendWeight;                        // 0x0440   (0x0004)  
	bool                                               RayTracingAO : 1;                                           // 0x0444:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0445   (0x0003)  MISSED
	int32_t                                            RayTracingAOSamplesPerPixel;                                // 0x0448   (0x0004)  
	float                                              RayTracingAOIntensity;                                      // 0x044C   (0x0004)  
	float                                              RayTracingAORadius;                                         // 0x0450   (0x0004)  
	FLinearColor                                       IndirectLightingColor;                                      // 0x0454   (0x0010)  
	float                                              IndirectLightingIntensity;                                  // 0x0464   (0x0004)  
	ERayTracingGlobalIlluminationType                  RayTracingGIType;                                           // 0x0468   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0469   (0x0003)  MISSED
	int32_t                                            RayTracingGIMaxBounces;                                     // 0x046C   (0x0004)  
	int32_t                                            RayTracingGISamplesPerPixel;                                // 0x0470   (0x0004)  
	float                                              ColorGradingIntensity;                                      // 0x0474   (0x0004)  
	class UTexture*                                    ColorGradingLUT;                                            // 0x0478   (0x0008)  
	float                                              DepthOfFieldSensorWidth;                                    // 0x0480   (0x0004)  
	float                                              DepthOfFieldFocalDistance;                                  // 0x0484   (0x0004)  
	float                                              DepthOfFieldDepthBlurAmount;                                // 0x0488   (0x0004)  
	float                                              DepthOfFieldDepthBlurRadius;                                // 0x048C   (0x0004)  
	float                                              DepthOfFieldFocalRegion;                                    // 0x0490   (0x0004)  
	float                                              DepthOfFieldNearTransitionRegion;                           // 0x0494   (0x0004)  
	float                                              DepthOfFieldFarTransitionRegion;                            // 0x0498   (0x0004)  
	float                                              DepthOfFieldScale;                                          // 0x049C   (0x0004)  
	float                                              DepthOfFieldNearBlurSize;                                   // 0x04A0   (0x0004)  
	float                                              DepthOfFieldFarBlurSize;                                    // 0x04A4   (0x0004)  
	float                                              DepthOfFieldOcclusion;                                      // 0x04A8   (0x0004)  
	float                                              DepthOfFieldSkyFocusDistance;                               // 0x04AC   (0x0004)  
	float                                              DepthOfFieldVignetteSize;                                   // 0x04B0   (0x0004)  
	float                                              MotionBlurAmount;                                           // 0x04B4   (0x0004)  
	float                                              MotionBlurMax;                                              // 0x04B8   (0x0004)  
	int32_t                                            MotionBlurTargetFPS;                                        // 0x04BC   (0x0004)  
	float                                              MotionBlurPerObjectSize;                                    // 0x04C0   (0x0004)  
	float                                              LPVIntensity;                                               // 0x04C4   (0x0004)  
	float                                              LPVVplInjectionBias;                                        // 0x04C8   (0x0004)  
	float                                              LPVSize;                                                    // 0x04CC   (0x0004)  
	float                                              LPVSecondaryOcclusionIntensity;                             // 0x04D0   (0x0004)  
	float                                              LPVSecondaryBounceIntensity;                                // 0x04D4   (0x0004)  
	float                                              LPVGeometryVolumeBias;                                      // 0x04D8   (0x0004)  
	float                                              LPVEmissiveInjectionIntensity;                              // 0x04DC   (0x0004)  
	float                                              LPVDirectionalOcclusionIntensity;                           // 0x04E0   (0x0004)  
	float                                              LPVDirectionalOcclusionRadius;                              // 0x04E4   (0x0004)  
	float                                              LPVDiffuseOcclusionExponent;                                // 0x04E8   (0x0004)  
	float                                              LPVSpecularOcclusionExponent;                               // 0x04EC   (0x0004)  
	float                                              LPVDiffuseOcclusionIntensity;                               // 0x04F0   (0x0004)  
	float                                              LPVSpecularOcclusionIntensity;                              // 0x04F4   (0x0004)  
	EReflectionsType                                   ReflectionsType;                                            // 0x04F8   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x04F9   (0x0003)  MISSED
	float                                              ScreenSpaceReflectionIntensity;                             // 0x04FC   (0x0004)  
	float                                              ScreenSpaceReflectionQuality;                               // 0x0500   (0x0004)  
	float                                              ScreenSpaceReflectionMaxRoughness;                          // 0x0504   (0x0004)  
	float                                              RayTracingReflectionsMaxRoughness;                          // 0x0508   (0x0004)  
	int32_t                                            RayTracingReflectionsMaxBounces;                            // 0x050C   (0x0004)  
	int32_t                                            RayTracingReflectionsSamplesPerPixel;                       // 0x0510   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingReflectionsShadows;                               // 0x0514   (0x0001)  
	bool                                               RayTracingReflectionsTranslucency : 1;                      // 0x0515:0 (0x0001)  
	ETranslucencyType                                  TranslucencyType;                                           // 0x0516   (0x0001)  
	unsigned char                                      UnknownData12_6[0x1];                                       // 0x0517   (0x0001)  MISSED
	float                                              RayTracingTranslucencyMaxRoughness;                         // 0x0518   (0x0004)  
	int32_t                                            RayTracingTranslucencyRefractionRays;                       // 0x051C   (0x0004)  
	int32_t                                            RayTracingTranslucencySamplesPerPixel;                      // 0x0520   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingTranslucencyShadows;                              // 0x0524   (0x0001)  
	bool                                               RayTracingTranslucencyRefraction : 1;                       // 0x0525:0 (0x0001)  
	unsigned char                                      UnknownData13_5[0x2];                                       // 0x0526   (0x0002)  MISSED
	int32_t                                            PathTracingMaxBounces;                                      // 0x0528   (0x0004)  
	int32_t                                            PathTracingSamplesPerPixel;                                 // 0x052C   (0x0004)  
	float                                              PathTracingFilterWidth;                                     // 0x0530   (0x0004)  
	bool                                               PathTracingEnableEmissive : 1;                              // 0x0534:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0535   (0x0003)  MISSED
	float                                              PathTracingMaxPathExposure;                                 // 0x0538   (0x0004)  
	bool                                               PathTracingEnableDenoiser : 1;                              // 0x053C:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x053D   (0x0003)  MISSED
	float                                              LPVFadeRange;                                               // 0x0540   (0x0004)  
	float                                              LPVDirectionalOcclusionFadeRange;                           // 0x0544   (0x0004)  
	float                                              ScreenPercentage;                                           // 0x0548   (0x0004)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x054C   (0x0004)  MISSED
	FWeightedBlendables                                WeightedBlendables;                                         // 0x0550   (0x0010)  
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0578 (1400 bytes) (0x0001F8 - 0x000770) align 16 pad: 0x0000
class UPostProcessComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x01F8   (0x0008)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0200   (0x0560)  
	float                                              Priority;                                                   // 0x0760   (0x0004)  
	float                                              BlendRadius;                                                // 0x0764   (0x0004)  
	float                                              BlendWeight;                                                // 0x0768   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x076C:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x076C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x076D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x411dfb0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x0028 (40 bytes) (0x000220 - 0x000248) align 8 pad: 0x0000
class ANavigationObjectBase : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0228   (0x0008)  
	class UBillboardComponent*                         GoodSprite;                                                 // 0x0230   (0x0008)  
	class UBillboardComponent*                         BadSprite;                                                  // 0x0238   (0x0008)  
	bool                                               bIsPIEPlayerStart : 1;                                      // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0241   (0x0007)  MISSED
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x0008 (8 bytes) (0x000248 - 0x000250) align 8 pad: 0x0000
class APlayerStart : public ANavigationObjectBase
{ 
public:
	FName                                              PlayerStartTag;                                             // 0x0248   (0x0008)  
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0088 (136 bytes) (0x000220 - 0x0002A8) align 8 pad: 0x0000
class ASkeletalMeshActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	bool                                               bShouldDoAnimNotifies : 1;                                  // 0x0228:0 (0x0001)  
	bool                                               bWakeOnLevelStart : 1;                                      // 0x0228:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0229   (0x0007)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x0230   (0x0008)  
	class USkeletalMesh*                               ReplicatedMesh;                                             // 0x0238   (0x0008)  
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                        // 0x0240   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial0;                                        // 0x0248   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial1;                                        // 0x0250   (0x0008)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0258   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	// void OnRep_ReplicatedPhysAsset();                                                                                        // [0x1781680] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	// void OnRep_ReplicatedMesh();                                                                                             // [0x1781660] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	// void OnRep_ReplicatedMaterial1();                                                                                        // [0x1fb6340] Native|Public        
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	// void OnRep_ReplicatedMaterial0();                                                                                        // [0x17816a0] Native|Public        
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x0000 (0 bytes) (0x000220 - 0x000220) align 8 pad: 0x0000
class ATargetPoint : public AActor
{ 
public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000058) align 8 pad: 0x0000
class UAISystemBase : public UObject
{ 
public:
	FSoftClassPath                                     AISystemClassName;                                          // 0x0028   (0x0018)  
	FName                                              AISystemModuleName;                                         // 0x0040   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	bool                                               bInstantiateAISystemOnClient;                               // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantize : FVector
{ 
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FVector_NetQuantizeNormal : FVector
{ 
};

/// Struct /Script/Engine.HitResult
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 4 pad: 0x0000
struct FHitResult
{ 
	int32_t                                            FaceIndex;                                                  // 0x0000   (0x0004)  
	float                                              Time;                                                       // 0x0004   (0x0004)  
	float                                              Distance;                                                   // 0x0008   (0x0004)  
	FVector_NetQuantize                                Location;                                                   // 0x000C   (0x000C)  
	FVector_NetQuantize                                ImpactPoint;                                                // 0x0018   (0x000C)  
	FVector_NetQuantizeNormal                          Normal;                                                     // 0x0024   (0x000C)  
	FVector_NetQuantizeNormal                          ImpactNormal;                                               // 0x0030   (0x000C)  
	FVector_NetQuantize                                TraceStart;                                                 // 0x003C   (0x000C)  
	FVector_NetQuantize                                TraceEnd;                                                   // 0x0048   (0x000C)  
	float                                              PenetrationDepth;                                           // 0x0054   (0x0004)  
	int32_t                                            Item;                                                       // 0x0058   (0x0004)  
	char                                               ElementIndex;                                               // 0x005C   (0x0001)  
	bool                                               bBlockingHit : 1;                                           // 0x005D:0 (0x0001)  
	bool                                               bStartPenetrating : 1;                                      // 0x005D:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x005E   (0x0002)  MISSED
	SDK_UNDEFINED(8,80) /* TWeakObjectPtr<UPhysicalMaterial*> */ __um(PhysMaterial);                               // 0x0060   (0x0008)  
	SDK_UNDEFINED(8,81) /* TWeakObjectPtr<AActor*> */  __um(Actor);                                                // 0x0068   (0x0008)  
	SDK_UNDEFINED(8,82) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                                // 0x0070   (0x0008)  
	FName                                              BoneName;                                                   // 0x0078   (0x0008)  
	FName                                              MyBoneName;                                                 // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x0094 (148 bytes) (0x000000 - 0x000094) align 4 pad: 0x0000
struct FFindFloorResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bWalkableFloor : 1;                                         // 0x0000:1 (0x0001)  
	bool                                               bLineTrace : 1;                                             // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FloorDist;                                                  // 0x0004   (0x0004)  
	float                                              LineDist;                                                   // 0x0008   (0x0004)  
	FHitResult                                         HitResult;                                                  // 0x000C   (0x0088)  
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FNavAvoidanceMask
{ 
	bool                                               bGroup0 : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bGroup1 : 1;                                                // 0x0000:1 (0x0001)  
	bool                                               bGroup2 : 1;                                                // 0x0000:2 (0x0001)  
	bool                                               bGroup3 : 1;                                                // 0x0000:3 (0x0001)  
	bool                                               bGroup4 : 1;                                                // 0x0000:4 (0x0001)  
	bool                                               bGroup5 : 1;                                                // 0x0000:5 (0x0001)  
	bool                                               bGroup6 : 1;                                                // 0x0000:6 (0x0001)  
	bool                                               bGroup7 : 1;                                                // 0x0000:7 (0x0001)  
	bool                                               bGroup8 : 1;                                                // 0x0001:0 (0x0001)  
	bool                                               bGroup9 : 1;                                                // 0x0001:1 (0x0001)  
	bool                                               bGroup10 : 1;                                               // 0x0001:2 (0x0001)  
	bool                                               bGroup11 : 1;                                               // 0x0001:3 (0x0001)  
	bool                                               bGroup12 : 1;                                               // 0x0001:4 (0x0001)  
	bool                                               bGroup13 : 1;                                               // 0x0001:5 (0x0001)  
	bool                                               bGroup14 : 1;                                               // 0x0001:6 (0x0001)  
	bool                                               bGroup15 : 1;                                               // 0x0001:7 (0x0001)  
	bool                                               bGroup16 : 1;                                               // 0x0002:0 (0x0001)  
	bool                                               bGroup17 : 1;                                               // 0x0002:1 (0x0001)  
	bool                                               bGroup18 : 1;                                               // 0x0002:2 (0x0001)  
	bool                                               bGroup19 : 1;                                               // 0x0002:3 (0x0001)  
	bool                                               bGroup20 : 1;                                               // 0x0002:4 (0x0001)  
	bool                                               bGroup21 : 1;                                               // 0x0002:5 (0x0001)  
	bool                                               bGroup22 : 1;                                               // 0x0002:6 (0x0001)  
	bool                                               bGroup23 : 1;                                               // 0x0002:7 (0x0001)  
	bool                                               bGroup24 : 1;                                               // 0x0003:0 (0x0001)  
	bool                                               bGroup25 : 1;                                               // 0x0003:1 (0x0001)  
	bool                                               bGroup26 : 1;                                               // 0x0003:2 (0x0001)  
	bool                                               bGroup27 : 1;                                               // 0x0003:3 (0x0001)  
	bool                                               bGroup28 : 1;                                               // 0x0003:4 (0x0001)  
	bool                                               bGroup29 : 1;                                               // 0x0003:5 (0x0001)  
	bool                                               bGroup30 : 1;                                               // 0x0003:6 (0x0001)  
	bool                                               bGroup31 : 1;                                               // 0x0003:7 (0x0001)  
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x09B8 (2488 bytes) (0x000138 - 0x000AF0) align 16 pad: 0x0000
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0138   (0x0010)  MISSED
	class ACharacter*                                  CharacterOwner;                                             // 0x0148   (0x0008)  
	float                                              GravityScale;                                               // 0x0150   (0x0004)  
	float                                              MaxStepHeight;                                              // 0x0154   (0x0004)  
	float                                              JumpZVelocity;                                              // 0x0158   (0x0004)  
	float                                              JumpOffJumpZFactor;                                         // 0x015C   (0x0004)  
	float                                              WalkableFloorAngle;                                         // 0x0160   (0x0004)  
	float                                              WalkableFloorZ;                                             // 0x0164   (0x0004)  
	TEnumAsByte<EMovementMode>                         MovementMode;                                               // 0x0168   (0x0001)  
	char                                               CustomMovementMode;                                         // 0x0169   (0x0001)  
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                       // 0x016A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x016B   (0x0001)  MISSED
	float                                              GroundFriction;                                             // 0x016C   (0x0004)  
	unsigned char                                      UnknownData02_6[0x1C];                                      // 0x0170   (0x001C)  MISSED
	float                                              MaxWalkSpeed;                                               // 0x018C   (0x0004)  
	float                                              MaxWalkSpeedCrouched;                                       // 0x0190   (0x0004)  
	float                                              MaxSwimSpeed;                                               // 0x0194   (0x0004)  
	float                                              MaxFlySpeed;                                                // 0x0198   (0x0004)  
	float                                              MaxCustomMovementSpeed;                                     // 0x019C   (0x0004)  
	float                                              MaxAcceleration;                                            // 0x01A0   (0x0004)  
	float                                              MinAnalogWalkSpeed;                                         // 0x01A4   (0x0004)  
	float                                              BrakingFrictionFactor;                                      // 0x01A8   (0x0004)  
	float                                              BrakingFriction;                                            // 0x01AC   (0x0004)  
	float                                              BrakingSubStepTime;                                         // 0x01B0   (0x0004)  
	float                                              BrakingDecelerationWalking;                                 // 0x01B4   (0x0004)  
	float                                              BrakingDecelerationFalling;                                 // 0x01B8   (0x0004)  
	float                                              BrakingDecelerationSwimming;                                // 0x01BC   (0x0004)  
	float                                              BrakingDecelerationFlying;                                  // 0x01C0   (0x0004)  
	float                                              AirControl;                                                 // 0x01C4   (0x0004)  
	float                                              AirControlBoostMultiplier;                                  // 0x01C8   (0x0004)  
	float                                              AirControlBoostVelocityThreshold;                           // 0x01CC   (0x0004)  
	float                                              FallingLateralFriction;                                     // 0x01D0   (0x0004)  
	float                                              CrouchedHalfHeight;                                         // 0x01D4   (0x0004)  
	float                                              Buoyancy;                                                   // 0x01D8   (0x0004)  
	float                                              PerchRadiusThreshold;                                       // 0x01DC   (0x0004)  
	float                                              PerchAdditionalHeight;                                      // 0x01E0   (0x0004)  
	FRotator                                           RotationRate;                                               // 0x01E4   (0x000C)  
	bool                                               bUseSeparateBrakingFriction : 1;                            // 0x01F0:0 (0x0001)  
	bool                                               bApplyGravityWhileJumping : 1;                              // 0x01F0:1 (0x0001)  
	bool                                               bUseControllerDesiredRotation : 1;                          // 0x01F0:2 (0x0001)  
	bool                                               bOrientRotationToMovement : 1;                              // 0x01F0:3 (0x0001)  
	bool                                               bSweepWhileNavWalking : 1;                                  // 0x01F0:4 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01F0:5 (0x0001)  MISSED
	bool                                               bMovementInProgress : 1;                                    // 0x01F0:6 (0x0001)  
	bool                                               bEnableScopedMovementUpdates : 1;                           // 0x01F0:7 (0x0001)  
	bool                                               bEnableServerDualMoveScopedMovementUpdates : 1;             // 0x01F1:0 (0x0001)  
	bool                                               bForceMaxAccel : 1;                                         // 0x01F1:1 (0x0001)  
	bool                                               bRunPhysicsWithNoController : 1;                            // 0x01F1:2 (0x0001)  
	bool                                               bForceNextFloorCheck : 1;                                   // 0x01F1:3 (0x0001)  
	bool                                               bShrinkProxyCapsule : 1;                                    // 0x01F1:4 (0x0001)  
	bool                                               bCanWalkOffLedges : 1;                                      // 0x01F1:5 (0x0001)  
	bool                                               bCanWalkOffLedgesWhenCrouching : 1;                         // 0x01F1:6 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x01F1:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x01F2:0 (0x0001)  MISSED
	bool                                               bNetworkSkipProxyPredictionOnNetUpdate : 1;                 // 0x01F2:1 (0x0001)  
	bool                                               bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;        // 0x01F2:2 (0x0001)  
	bool                                               bDeferUpdateMoveComponent : 1;                              // 0x01F2:3 (0x0001)  
	bool                                               bEnablePhysicsInteraction : 1;                              // 0x01F2:4 (0x0001)  
	bool                                               bTouchForceScaledToMass : 1;                                // 0x01F2:5 (0x0001)  
	bool                                               bPushForceScaledToMass : 1;                                 // 0x01F2:6 (0x0001)  
	bool                                               bPushForceUsingZOffset : 1;                                 // 0x01F2:7 (0x0001)  
	bool                                               bScalePushForceToVelocity : 1;                              // 0x01F3:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x4];                                       // 0x01F4   (0x0004)  MISSED
	class USceneComponent*                             DeferredUpdatedMoveComponent;                               // 0x01F8   (0x0008)  
	float                                              MaxOutOfWaterStepHeight;                                    // 0x0200   (0x0004)  
	float                                              OutofWaterZ;                                                // 0x0204   (0x0004)  
	float                                              Mass;                                                       // 0x0208   (0x0004)  
	float                                              StandingDownwardForceScale;                                 // 0x020C   (0x0004)  
	float                                              InitialPushForceFactor;                                     // 0x0210   (0x0004)  
	float                                              PushForceFactor;                                            // 0x0214   (0x0004)  
	float                                              PushForcePointZOffsetFactor;                                // 0x0218   (0x0004)  
	float                                              TouchForceFactor;                                           // 0x021C   (0x0004)  
	float                                              MinTouchForce;                                              // 0x0220   (0x0004)  
	float                                              MaxTouchForce;                                              // 0x0224   (0x0004)  
	float                                              RepulsionForce;                                             // 0x0228   (0x0004)  
	FVector                                            Acceleration;                                               // 0x022C   (0x000C)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0238   (0x0008)  MISSED
	FQuat                                              LastUpdateRotation;                                         // 0x0240   (0x0010)  
	FVector                                            LastUpdateLocation;                                         // 0x0250   (0x000C)  
	FVector                                            LastUpdateVelocity;                                         // 0x025C   (0x000C)  
	float                                              ServerLastTransformUpdateTimeStamp;                         // 0x0268   (0x0004)  
	float                                              ServerLastClientGoodMoveAckTime;                            // 0x026C   (0x0004)  
	float                                              ServerLastClientAdjustmentTime;                             // 0x0270   (0x0004)  
	FVector                                            PendingImpulseToApply;                                      // 0x0274   (0x000C)  
	FVector                                            PendingForceToApply;                                        // 0x0280   (0x000C)  
	float                                              AnalogInputModifier;                                        // 0x028C   (0x0004)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x0290   (0x000C)  MISSED
	float                                              MaxSimulationTimeStep;                                      // 0x029C   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x02A0   (0x0004)  
	int32_t                                            MaxJumpApexAttemptsPerSimulation;                           // 0x02A4   (0x0004)  
	float                                              MaxDepenetrationWithGeometry;                               // 0x02A8   (0x0004)  
	float                                              MaxDepenetrationWithGeometryAsProxy;                        // 0x02AC   (0x0004)  
	float                                              MaxDepenetrationWithPawn;                                   // 0x02B0   (0x0004)  
	float                                              MaxDepenetrationWithPawnAsProxy;                            // 0x02B4   (0x0004)  
	float                                              NetworkSimulatedSmoothLocationTime;                         // 0x02B8   (0x0004)  
	float                                              NetworkSimulatedSmoothRotationTime;                         // 0x02BC   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;             // 0x02C0   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;             // 0x02C4   (0x0004)  
	float                                              NetProxyShrinkRadius;                                       // 0x02C8   (0x0004)  
	float                                              NetProxyShrinkHalfHeight;                                   // 0x02CC   (0x0004)  
	float                                              NetworkMaxSmoothUpdateDistance;                             // 0x02D0   (0x0004)  
	float                                              NetworkNoSmoothUpdateDistance;                              // 0x02D4   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                    // 0x02D8   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustments;                     // 0x02DC   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;      // 0x02E0   (0x0004)  
	float                                              NetworkLargeClientCorrectionDistance;                       // 0x02E4   (0x0004)  
	float                                              LedgeCheckThreshold;                                        // 0x02E8   (0x0004)  
	float                                              JumpOutOfWaterPitch;                                        // 0x02EC   (0x0004)  
	FFindFloorResult                                   currentFloor;                                               // 0x02F0   (0x0094)  
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                    // 0x0384   (0x0001)  
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                   // 0x0385   (0x0001)  
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                         // 0x0386   (0x0001)  
	bool                                               bMaintainHorizontalGroundVelocity : 1;                      // 0x0387:0 (0x0001)  
	bool                                               bImpartBaseVelocityX : 1;                                   // 0x0387:1 (0x0001)  
	bool                                               bImpartBaseVelocityY : 1;                                   // 0x0387:2 (0x0001)  
	bool                                               bImpartBaseVelocityZ : 1;                                   // 0x0387:3 (0x0001)  
	bool                                               bImpartBaseAngularVelocity : 1;                             // 0x0387:4 (0x0001)  
	bool                                               bJustTeleported : 1;                                        // 0x0387:5 (0x0001)  
	bool                                               bNetworkUpdateReceived : 1;                                 // 0x0387:6 (0x0001)  
	bool                                               bNetworkMovementModeChanged : 1;                            // 0x0387:7 (0x0001)  
	bool                                               bIgnoreClientMovementErrorChecksAndCorrection : 1;          // 0x0388:0 (0x0001)  
	bool                                               bServerAcceptClientAuthoritativePosition : 1;               // 0x0388:1 (0x0001)  
	bool                                               bNotifyApex : 1;                                            // 0x0388:2 (0x0001)  
	bool                                               bCheatFlying : 1;                                           // 0x0388:3 (0x0001)  
	bool                                               bWantsToCrouch : 1;                                         // 0x0388:4 (0x0001)  
	bool                                               bCrouchMaintainsBaseLocation : 1;                           // 0x0388:5 (0x0001)  
	bool                                               bIgnoreBaseRotation : 1;                                    // 0x0388:6 (0x0001)  
	bool                                               bFastAttachedMove : 1;                                      // 0x0388:7 (0x0001)  
	bool                                               bAlwaysCheckFloor : 1;                                      // 0x0389:0 (0x0001)  
	bool                                               bUseFlatBaseForFloorChecks : 1;                             // 0x0389:1 (0x0001)  
	bool                                               bPerformingJumpOff : 1;                                     // 0x0389:2 (0x0001)  
	bool                                               bWantsToLeaveNavWalking : 1;                                // 0x0389:3 (0x0001)  
	bool                                               bUseRVOAvoidance : 1;                                       // 0x0389:4 (0x0001)  
	bool                                               bRequestedMoveUseAcceleration : 1;                          // 0x0389:5 (0x0001)  
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0389:6 (0x0001)  MISSED
	bool                                               bWasSimulatingRootMotion : 1;                               // 0x0389:7 (0x0001)  
	bool                                               bAllowPhysicsRotationDuringAnimRootMotion : 1;              // 0x038A:0 (0x0001)  
	bool                                               bHasRequestedVelocity : 1;                                  // 0x038A:1 (0x0001)  
	bool                                               bRequestedMoveWithMaxSpeed : 1;                             // 0x038A:2 (0x0001)  
	bool                                               bWasAvoidanceUpdated : 1;                                   // 0x038A:3 (0x0001)  
	unsigned char                                      UnknownBit10 : 1;                                           // 0x038A:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x038A:5 (0x0001)  MISSED
	bool                                               bProjectNavMeshWalking : 1;                                 // 0x038A:6 (0x0001)  
	bool                                               bProjectNavMeshOnBothWorldChannels : 1;                     // 0x038A:7 (0x0001)  
	unsigned char                                      UnknownData12_5[0x11];                                      // 0x038B   (0x0011)  MISSED
	float                                              AvoidanceConsiderationRadius;                               // 0x039C   (0x0004)  
	FVector                                            RequestedVelocity;                                          // 0x03A0   (0x000C)  
	int32_t                                            AvoidanceUID;                                               // 0x03AC   (0x0004)  
	FNavAvoidanceMask                                  AvoidanceGroup;                                             // 0x03B0   (0x0004)  
	FNavAvoidanceMask                                  GroupsToAvoid;                                              // 0x03B4   (0x0004)  
	FNavAvoidanceMask                                  GroupsToIgnore;                                             // 0x03B8   (0x0004)  
	float                                              AvoidanceWeight;                                            // 0x03BC   (0x0004)  
	FVector                                            PendingLaunchVelocity;                                      // 0x03C0   (0x000C)  
	unsigned char                                      UnknownData13_6[0xA4];                                      // 0x03CC   (0x00A4)  MISSED
	float                                              NavMeshProjectionInterval;                                  // 0x0470   (0x0004)  
	float                                              NavMeshProjectionTimer;                                     // 0x0474   (0x0004)  
	float                                              NavMeshProjectionInterpSpeed;                               // 0x0478   (0x0004)  
	float                                              NavMeshProjectionHeightScaleUp;                             // 0x047C   (0x0004)  
	float                                              NavMeshProjectionHeightScaleDown;                           // 0x0480   (0x0004)  
	float                                              NavWalkingFloorDistTolerance;                               // 0x0484   (0x0004)  
	FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                    // 0x0488   (0x0030)  
	unsigned char                                      UnknownData14_6[0x18];                                      // 0x04B8   (0x0018)  MISSED
	float                                              MinTimeBetweenTimeStampResets;                              // 0x04D0   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4AC];                                     // 0x04D4   (0x04AC)  MISSED
	FRootMotionSourceGroup                             CurrentRootMotion;                                          // 0x0980   (0x0038)  
	FRootMotionSourceGroup                             ServerCorrectionRootMotion;                                 // 0x09B8   (0x0038)  
	unsigned char                                      UnknownData16_6[0x90];                                      // 0x09F0   (0x0090)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0A80   (0x0040)  
	FVector                                            AnimRootMotionVelocity;                                     // 0x0AC0   (0x000C)  
	unsigned char                                      UnknownData17_7[0x24];                                      // 0x0ACC   (0x0024)  MISSED


	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	// void SetWalkableFloorZ(float InWalkableFloorZ);                                                                          // [0x4030c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	// void SetWalkableFloorAngle(float InWalkableFloorAngle);                                                                  // [0x4030ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	// void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, char NewCustomMode);                                    // [0x4030ad0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	// void SetGroupsToIgnoreMask(FNavAvoidanceMask& GroupMask);                                                                // [0x1ab59e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	// void SetGroupsToIgnore(int32_t GroupFlags);                                                                              // [0x1ab5950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	// void SetGroupsToAvoidMask(FNavAvoidanceMask& GroupMask);                                                                 // [0x1ab58c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	// void SetGroupsToAvoid(int32_t GroupFlags);                                                                               // [0x1ab5830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	// void SetAvoidanceGroupMask(FNavAvoidanceMask& GroupMask);                                                                // [0x1ab5460] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	// void SetAvoidanceGroup(int32_t GroupFlags);                                                                              // [0x1ab53d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	// void SetAvoidanceEnabled(bool bEnable);                                                                                  // [0x4030a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	// float K2_GetWalkableFloorZ();                                                                                            // [0x4030a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	// float K2_GetWalkableFloorAngle();                                                                                        // [0x40309e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	// float K2_GetModifiedMaxAcceleration();                                                                                   // [0x40309a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	// void K2_FindFloor(FVector CapsuleLocation, FFindFloorResult& FloorResult);                                               // [0x4030850] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	// void K2_ComputeFloorDist(FVector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, FFindFloorResult& FloorResult); // [0x4030630] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	// bool IsWalking();                                                                                                        // [0x4030600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	// bool IsWalkable(FHitResult& Hit);                                                                                        // [0x4030510] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	// float GetValidPerchRadius();                                                                                             // [0x40304e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	// float GetPerchRadiusThreshold();                                                                                         // [0x40304b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	// class UPrimitiveComponent* GetMovementBase();                                                                            // [0x4030480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	// float GetMinAnalogSpeed();                                                                                               // [0x4030440] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	// float GetMaxJumpHeightWithJumpTime();                                                                                    // [0x4030400] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	// float GetMaxJumpHeight();                                                                                                // [0x40303c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	// float GetMaxBrakingDeceleration();                                                                                       // [0x4030380] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                              // [0x4030340] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateVelocity
	// FVector GetLastUpdateVelocity();                                                                                         // [0x4030310] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRotation
	// FRotator GetLastUpdateRotation();                                                                                        // [0x40302c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateLocation
	// FVector GetLastUpdateLocation();                                                                                         // [0x4030290] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	// FVector GetImpartedMovementBaseVelocity();                                                                               // [0x4030250] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	// FVector GetCurrentAcceleration();                                                                                        // [0x4030210] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	// class ACharacter* GetCharacterOwner();                                                                                   // [0x40301f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	// float GetAnalogInputModifier();                                                                                          // [0x40301c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	// void DisableMovement();                                                                                                  // [0x1ffd4c0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	// void ClearAccumulatedForces();                                                                                           // [0x1fd52a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	// void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x402ffa0] Native|Protected|HasOutParms 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	// void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);                              // [0x402fe30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	// void AddImpulse(FVector Impulse, bool bVelocityChange);                                                                  // [0x402fd50] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	// void AddForce(FVector Force);                                                                                            // [0x402fcc0] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x00F8 (248 bytes) (0x000028 - 0x000120) align 8 pad: 0x0000
class UGameUserSettings : public UObject
{ 
public:
	bool                                               bUseVSync;                                                  // 0x0028   (0x0001)  
	bool                                               bUseDynamicResolution;                                      // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_6[0x56];                                      // 0x002A   (0x0056)  MISSED
	uint32_t                                           ResolutionSizeX;                                            // 0x0080   (0x0004)  
	uint32_t                                           ResolutionSizeY;                                            // 0x0084   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeX;                           // 0x0088   (0x0004)  
	uint32_t                                           LastUserConfirmedResolutionSizeY;                           // 0x008C   (0x0004)  
	int32_t                                            WindowPosX;                                                 // 0x0090   (0x0004)  
	int32_t                                            WindowPosY;                                                 // 0x0094   (0x0004)  
	int32_t                                            FullscreenMode;                                             // 0x0098   (0x0004)  
	int32_t                                            LastConfirmedFullscreenMode;                                // 0x009C   (0x0004)  
	int32_t                                            PreferredFullscreenMode;                                    // 0x00A0   (0x0004)  
	uint32_t                                           Version;                                                    // 0x00A4   (0x0004)  
	int32_t                                            AudioQualityLevel;                                          // 0x00A8   (0x0004)  
	int32_t                                            LastConfirmedAudioQualityLevel;                             // 0x00AC   (0x0004)  
	float                                              FrameRateLimit;                                             // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	int32_t                                            DesiredScreenWidth;                                         // 0x00B8   (0x0004)  
	bool                                               bUseDesiredScreenHeight;                                    // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	int32_t                                            DesiredScreenHeight;                                        // 0x00C0   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenWidth;                        // 0x00C4   (0x0004)  
	int32_t                                            LastUserConfirmedDesiredScreenHeight;                       // 0x00C8   (0x0004)  
	float                                              LastRecommendedScreenWidth;                                 // 0x00CC   (0x0004)  
	float                                              LastRecommendedScreenHeight;                                // 0x00D0   (0x0004)  
	float                                              LastCPUBenchmarkResult;                                     // 0x00D4   (0x0004)  
	float                                              LastGPUBenchmarkResult;                                     // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<float>                                      LastCPUBenchmarkSteps;                                      // 0x00E0   (0x0010)  
	TArray<float>                                      LastGPUBenchmarkSteps;                                      // 0x00F0   (0x0010)  
	float                                              LastGPUBenchmarkMultiplier;                                 // 0x0100   (0x0004)  
	bool                                               bUseHDRDisplayOutput;                                       // 0x0104   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0105   (0x0003)  MISSED
	int32_t                                            HDRDisplayOutputNits;                                       // 0x0108   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	SDK_UNDEFINED(16,83) /* FMulticastInlineDelegate */ __um(OnGameUserSettingsUINeedsUpdate);                     // 0x0110   (0x0010)  


	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	// void ValidateSettings();                                                                                                 // [0x1822d50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	// bool SupportsHDRDisplayOutput();                                                                                         // [0x4063ac0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	// void SetVSyncEnabled(bool bEnable);                                                                                      // [0x4063910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	// void SetVisualEffectQuality(int32_t Value);                                                                              // [0x4063a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	// void SetViewDistanceQuality(int32_t Value);                                                                              // [0x40639a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	// void SetToDefaults();                                                                                                    // [0x3714490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	// void SetTextureQuality(int32_t Value);                                                                                   // [0x4063880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	// void SetShadowQuality(int32_t Value);                                                                                    // [0x40637f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetShadingQuality
	// void SetShadingQuality(int32_t Value);                                                                                   // [0x4063760] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	// void SetScreenResolution(FIntPoint Resolution);                                                                          // [0x40636e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	// void SetResolutionScaleValueEx(float NewScaleValue);                                                                     // [0x4063660] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValue
	// void SetResolutionScaleValue(int32_t NewScaleValue);                                                                     // [0x40635d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	// void SetResolutionScaleNormalized(float NewScaleNormalized);                                                             // [0x4063550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetPostProcessingQuality
	// void SetPostProcessingQuality(int32_t Value);                                                                            // [0x40634c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	// void SetOverallScalabilityLevel(int32_t Value);                                                                          // [0x4063430] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	// void SetFullscreenMode(TEnumAsByte<EWindowMode> InFullscreenMode);                                                       // [0x40633b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	// void SetFrameRateLimit(float NewLimit);                                                                                  // [0x4063330] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	// void SetFoliageQuality(int32_t Value);                                                                                   // [0x40632a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	// void SetDynamicResolutionEnabled(bool bEnable);                                                                          // [0x4063210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	// void SetBenchmarkFallbackValues();                                                                                       // [0x40631f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	// void SetAudioQualityLevel(int32_t QualityLevel);                                                                         // [0x4063160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	// void SetAntiAliasingQuality(int32_t Value);                                                                              // [0x40630d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	// void SaveSettings();                                                                                                     // [0x4026330] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	// void RunHardwareBenchmark(int32_t WorkScale, float CPUMultiplier, float GPUMultiplier);                                  // [0x4062fd0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.RevertVideoMode
	// void RevertVideoMode();                                                                                                  // [0x4062fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	// void ResetToCurrentSettings();                                                                                           // [0x181a630] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	// void LoadSettings(bool bForceReload);                                                                                    // [0x40262a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	// bool IsVSyncEnabled();                                                                                                   // [0x4062f40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	// bool IsVSyncDirty();                                                                                                     // [0x4062f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	// bool IsScreenResolutionDirty();                                                                                          // [0x4062ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	// bool IsHDREnabled();                                                                                                     // [0x4062eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	// bool IsFullscreenModeDirty();                                                                                            // [0x4062e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	// bool IsDynamicResolutionEnabled();                                                                                       // [0x4062e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	// bool IsDynamicResolutionDirty();                                                                                         // [0x4062e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.IsDirty
	// bool IsDirty();                                                                                                          // [0x1822ce0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	// int32_t GetVisualEffectQuality();                                                                                        // [0x4062dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                        // [0x4062d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                             // [0x4062d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetSyncInterval
	// int32_t GetSyncInterval();                                                                                               // [0x4062d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x4062d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetShadingQuality
	// int32_t GetShadingQuality();                                                                                             // [0x4062cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	// FIntPoint GetScreenResolution();                                                                                         // [0x4062c50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleNormalized
	// float GetResolutionScaleNormalized();                                                                                    // [0x4062c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	// void GetResolutionScaleInformationEx(float& CurrentScaleNormalized, float& CurrentScaleValue, float& MinScaleValue, float& MaxScaleValue); // [0x4062a80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformation
	// void GetResolutionScaleInformation(float& CurrentScaleNormalized, int32_t& CurrentScaleValue, int32_t& MinScaleValue, int32_t& MaxScaleValue); // [0x40628e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	// float GetRecommendedResolutionScale();                                                                                   // [0x40628a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	// TEnumAsByte<EWindowMode> GetPreferredFullscreenMode();                                                                   // [0x4062870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetPostProcessingQuality
	// int32_t GetPostProcessingQuality();                                                                                      // [0x4062840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	// int32_t GetOverallScalabilityLevel();                                                                                    // [0x40626d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedScreenResolution
	// FIntPoint GetLastConfirmedScreenResolution();                                                                            // [0x4062690] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetLastConfirmedFullscreenMode
	// TEnumAsByte<EWindowMode> GetLastConfirmedFullscreenMode();                                                               // [0x4062660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	// class UGameUserSettings* GetGameUserSettings();                                                                          // [0x4062630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	// TEnumAsByte<EWindowMode> GetFullscreenMode();                                                                            // [0x4062600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	// float GetFrameRateLimit();                                                                                               // [0x40625d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetFramePace
	// int32_t GetFramePace();                                                                                                  // [0x40625a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	// int32_t GetFoliageQuality();                                                                                             // [0x4062570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	// FIntPoint GetDesktopResolution();                                                                                        // [0x4062530] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	// FIntPoint GetDefaultWindowPosition();                                                                                    // [0x40624f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	// TEnumAsByte<EWindowMode> GetDefaultWindowMode();                                                                         // [0x40624c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	// float GetDefaultResolutionScale();                                                                                       // [0x4062480] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	// FIntPoint GetDefaultResolution();                                                                                        // [0x4062440] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	// int32_t GetCurrentHDRDisplayNits();                                                                                      // [0x4062410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	// int32_t GetAudioQualityLevel();                                                                                          // [0x9c17c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                        // [0xbdada0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	// void EnableHDRDisplayOutput(bool bEnable, int32_t DisplayNits);                                                          // [0x4062340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ConfirmVideoMode
	// void ConfirmVideoMode();                                                                                                 // [0x31d11a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	// void ApplySettings(bool bCheckForCommandLineOverrides);                                                                  // [0x40622b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	// void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);                                                        // [0x4062220] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	// void ApplyNonResolutionSettings();                                                                                       // [0x20a39e0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	// void ApplyHardwareBenchmarkResults();                                                                                    // [0x16fc850] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ALevelScriptActor : public AActor
{ 
public:
	bool                                               bInputEnabled : 1;                                          // 0x0220:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0221   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	// void WorldOriginLocationChanged(FIntVector OldOriginLocation, FIntVector NewOriginLocation);                             // [0x24710f0] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	// void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning); // [0x40d5860] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	// bool RemoteEvent(FName EventName);                                                                                       // [0x40d4fa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	// void LevelReset();                                                                                                       // [0x24710f0] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UNavAreaBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStreamingLevelsToConsider
{ 
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FLevelCollection
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class AGameStateBase*                              GameState;                                                  // 0x0008   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0010   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0018   (0x0008)  
	class ULevel*                                      PersistentLevel;                                            // 0x0020   (0x0008)  
	SDK_UNDEFINED(80,84) /* TSet<ULevel*> */           __um(Levels);                                               // 0x0028   (0x0050)  
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FWorldPSCPool
{ 
	SDK_UNDEFINED(80,85) /* TMap<UParticleSystem*, FPSCPool> */ __um(WorldParticleSystemPools);                    // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.World
/// Size: 0x0770 (1904 bytes) (0x000028 - 0x000798) align 8 pad: 0x0000
class UWorld : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class ULevel*                                      PersistentLevel;                                            // 0x0030   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0038   (0x0008)  
	class ULineBatchComponent*                         LineBatcher;                                                // 0x0040   (0x0008)  
	class ULineBatchComponent*                         PersistentLineBatcher;                                      // 0x0048   (0x0008)  
	class ULineBatchComponent*                         ForegroundLineBatcher;                                      // 0x0050   (0x0008)  
	class AGameNetworkManager*                         NetworkManager;                                             // 0x0058   (0x0008)  
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                    // 0x0060   (0x0008)  
	TArray<class UObject*>                             ExtraReferencedObjects;                                     // 0x0068   (0x0010)  
	TArray<class UObject*>                             PerModuleDataObjects;                                       // 0x0078   (0x0010)  
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0088   (0x0010)  
	FStreamingLevelsToConsider                         StreamingLevelsToConsider;                                  // 0x0098   (0x0028)  
	FString                                            StreamingLevelsPrefix;                                      // 0x00C0   (0x0010)  
	class ULevel*                                      CurrentLevelPendingVisibility;                              // 0x00D0   (0x0008)  
	class ULevel*                                      CurrentLevelPendingInvisibility;                            // 0x00D8   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x00E0   (0x0008)  
	class AParticleEventManager*                       MyParticleEventManager;                                     // 0x00E8   (0x0008)  
	class APhysicsVolume*                              DefaultPhysicsVolume;                                       // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x16];                                      // 0x00F8   (0x0016)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x010E:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x010E:1 (0x0001)  MISSED
	bool                                               bAreConstraintsDirty : 1;                                   // 0x010E:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x010F   (0x0001)  MISSED
	class UNavigationSystemBase*                       NavigationSystem;                                           // 0x0110   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x0118   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0120   (0x0008)  
	class UAISystemBase*                               AISystem;                                                   // 0x0128   (0x0008)  
	class UAvoidanceManager*                           AvoidanceManager;                                           // 0x0130   (0x0008)  
	TArray<class ULevel*>                              Levels;                                                     // 0x0138   (0x0010)  
	TArray<FLevelCollection>                           LevelCollections;                                           // 0x0148   (0x0010)  
	unsigned char                                      UnknownData05_6[0x28];                                      // 0x0158   (0x0028)  MISSED
	class UGameInstance*                               OwningGameInstance;                                         // 0x0180   (0x0008)  
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x0188   (0x0010)  
	class UCanvas*                                     CanvasForRenderingToTarget;                                 // 0x0198   (0x0008)  
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                        // 0x01A0   (0x0008)  
	unsigned char                                      UnknownData06_6[0x50];                                      // 0x01A8   (0x0050)  MISSED
	class UPhysicsFieldComponent*                      PhysicsField;                                               // 0x01F8   (0x0008)  
	SDK_UNDEFINED(80,86) /* TSet<UActorComponent*> */  __um(ComponentsThatNeedPreEndOfFrameSync);                  // 0x0200   (0x0050)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                         // 0x0250   (0x0010)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;            // 0x0260   (0x0010)  
	unsigned char                                      UnknownData07_6[0x370];                                     // 0x0270   (0x0370)  MISSED
	class UWorldComposition*                           WorldComposition;                                           // 0x05E0   (0x0008)  
	unsigned char                                      UnknownData08_6[0x90];                                      // 0x05E8   (0x0090)  MISSED
	FWorldPSCPool                                      PSCPool;                                                    // 0x0678   (0x0058)  
	unsigned char                                      UnknownData09_7[0xC8];                                      // 0x06D0   (0x00C8)  MISSED


	/// Functions
	// Function /Script/Engine.World.K2_GetWorldSettings
	// class AWorldSettings* K2_GetWorldSettings();                                                                             // [0x416cef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.World.HandleTimelineScrubbed
	// void HandleTimelineScrubbed();                                                                                           // [0x416ced0] Final|Native|Public  
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavigationSystemBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x05F0 (1520 bytes) (0x000000 - 0x0005F0) align 16 pad: 0x0000
struct FMinimalViewInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
	float                                              DesiredFOV;                                                 // 0x001C   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0020   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0024   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0028   (0x0004)  
	float                                              AspectRatio;                                                // 0x002C   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0038   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0040   (0x0560)  
	FVector2D                                          OffCenterProjectionOffset;                                  // 0x05A0   (0x0008)  
	unsigned char                                      UnknownData03_7[0x48];                                      // 0x05A8   (0x0048)  MISSED
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x0600 (1536 bytes) (0x000000 - 0x000600) align 16 pad: 0x0000
struct FCameraCacheEntry
{ 
	float                                              Timestamp;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0xC];                                       // 0x0004   (0x000C)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x05F0)  
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x0610 (1552 bytes) (0x000000 - 0x000610) align 16 pad: 0x0000
struct FTViewTarget
{ 
	class AActor*                                      Target;                                                     // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x05F0)  
	class APlayerState*                                PlayerState;                                                // 0x0600   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0608   (0x0008)  MISSED
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x25F0 (9712 bytes) (0x000220 - 0x002810) align 16 pad: 0x0000
class APlayerCameraManager : public AActor
{ 
public:
	class APlayerController*                           PCOwner;                                                    // 0x0220   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x0228   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0230   (0x0008)  MISSED
	float                                              DefaultFOV;                                                 // 0x0238   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x023C   (0x0004)  MISSED
	float                                              DefaultOrthoWidth;                                          // 0x0240   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0244   (0x0004)  MISSED
	float                                              DefaultAspectRatio;                                         // 0x0248   (0x0004)  
	unsigned char                                      UnknownData03_6[0x44];                                      // 0x024C   (0x0044)  MISSED
	FCameraCacheEntry                                  CameraCache;                                                // 0x0290   (0x0600)  
	FCameraCacheEntry                                  LastFrameCameraCache;                                       // 0x0890   (0x0600)  
	FTViewTarget                                       ViewTarget;                                                 // 0x0E90   (0x0610)  
	FTViewTarget                                       PendingViewTarget;                                          // 0x14A0   (0x0610)  
	unsigned char                                      UnknownData04_6[0x30];                                      // 0x1AB0   (0x0030)  MISSED
	FCameraCacheEntry                                  CameraCachePrivate;                                         // 0x1AE0   (0x0600)  
	FCameraCacheEntry                                  LastFrameCameraCachePrivate;                                // 0x20E0   (0x0600)  
	TArray<class UCameraModifier*>                     ModifierList;                                               // 0x26E0   (0x0010)  
	TArray<class UClass*>                              DefaultModifiers;                                           // 0x26F0   (0x0010)  
	float                                              FreeCamDistance;                                            // 0x2700   (0x0004)  
	FVector                                            FreeCamOffset;                                              // 0x2704   (0x000C)  
	FVector                                            ViewTargetOffset;                                           // 0x2710   (0x000C)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x271C   (0x0004)  MISSED
	SDK_UNDEFINED(16,87) /* FMulticastInlineDelegate */ __um(OnAudioFadeChangeEvent);                              // 0x2720   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x2730   (0x0010)  MISSED
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                          // 0x2740   (0x0010)  
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                       // 0x2750   (0x0008)  
	class UCameraAnimInst*                             AnimInstPool[8];                                            // 0x2758   (0x0040)  
	TArray<FPostProcessSettings>                       PostProcessBlendCache;                                      // 0x2798   (0x0010)  
	unsigned char                                      UnknownData07_6[0x10];                                      // 0x27A8   (0x0010)  MISSED
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                                // 0x27B8   (0x0010)  
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                  // 0x27C8   (0x0010)  
	class ACameraActor*                                AnimCameraActor;                                            // 0x27D8   (0x0008)  
	bool                                               bIsOrthographic : 1;                                        // 0x27E0:0 (0x0001)  
	bool                                               bDefaultConstrainAspectRatio : 1;                           // 0x27E0:1 (0x0001)  
	unsigned char                                      UnknownBit08 : 1;                                           // 0x27E0:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x27E0:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit10 : 1;                                           // 0x27E0:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit11 : 1;                                           // 0x27E0:5 (0x0001)  MISSED
	bool                                               bClientSimulatingViewTarget : 1;                            // 0x27E0:6 (0x0001)  
	bool                                               bUseClientSideCameraUpdates : 1;                            // 0x27E0:7 (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x27E1:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x27E1:1 (0x0001)  MISSED
	bool                                               bGameCameraCutThisFrame : 1;                                // 0x27E1:2 (0x0001)  
	unsigned char                                      UnknownData14_5[0x2];                                       // 0x27E2   (0x0002)  MISSED
	float                                              ViewPitchMin;                                               // 0x27E4   (0x0004)  
	float                                              ViewPitchMax;                                               // 0x27E8   (0x0004)  
	float                                              ViewYawMin;                                                 // 0x27EC   (0x0004)  
	float                                              ViewYawMax;                                                 // 0x27F0   (0x0004)  
	float                                              ViewRollMin;                                                // 0x27F4   (0x0004)  
	float                                              ViewRollMax;                                                // 0x27F8   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x27FC   (0x0004)  MISSED
	float                                              ServerUpdateCameraTimeout;                                  // 0x2800   (0x0004)  
	unsigned char                                      UnknownData16_7[0xC];                                       // 0x2804   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
	// void SwapPendingViewTargetWhenUsingClientSideCameraUpdates();                                                            // [0x4119e60] Final|Native|Protected 
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	// void StopCameraShake(class UCameraShakeBase* ShakeInstance, bool bImmediately);                                          // [0x4119d10] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	// void StopCameraFade();                                                                                                   // [0x1197f50] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopCameraAnimInst
	// void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);                                               // [0x1fd5760] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	// void StopAllInstancesOfCameraShakeFromSource(class UClass* Shake, class UCameraShakeSourceComponent* SourceComponent, bool bImmediately); // [0x4119c00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	// void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);                                              // [0x4119b30] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	// void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);                                             // [0x4119a60] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakesFromSource
	// void StopAllCameraShakesFromSource(class UCameraShakeSourceComponent* SourceComponent, bool bImmediately);               // [0x4119990] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x4119900] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraAnims
	// void StopAllCameraAnims(bool bImmediate);                                                                                // [0x4119870] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShakeFromSource
	// class UCameraShakeBase* StartCameraShakeFromSource(class UClass* ShakeClass, class UCameraShakeSourceComponent* SourceComponent, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4119600] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShake
	// class UCameraShakeBase* StartCameraShake(class UClass* ShakeClass, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4119480] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	// void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, FLinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished); // [0x4119290] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	// void SetManualCameraFade(float InFadeAmount, FLinearColor Color, bool bInFadeAudio);                                     // [0x4118cf0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	// void SetGameCameraCutThisFrame();                                                                                        // [0x4118bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	// bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);                                                      // [0x41175d0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	// void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);                                                // [0x4117540] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnim
	// class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendoutTime, bool bLoop, bool bRandomStartTime, float Duration, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x4116ce0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	// void PhotographyCameraModify(FVector NewCameraLocation, FVector PreviousCameraLocation, FVector OriginalCameraLocation, FVector& ResultCameraLocation); // [0x4116b50] BlueprintCosmetic|Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	// void OnPhotographySessionStart();                                                                                        // [0x1fb6340] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	// void OnPhotographySessionEnd();                                                                                          // [0x17816a0] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	// void OnPhotographyMultiPartCaptureStart();                                                                               // [0x1781680] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	// void OnPhotographyMultiPartCaptureEnd();                                                                                 // [0x1781660] BlueprintCosmetic|Native|Event|Public|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	// class APlayerController* GetOwningPlayerController();                                                                    // [0x4116620] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	// float GetFOVAngle();                                                                                                     // [0x4030400] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	// FRotator GetCameraRotation();                                                                                            // [0x4115260] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	// FVector GetCameraLocation();                                                                                             // [0x4115220] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	// class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);                                           // [0x4115180] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	// void ClearCameraLensEffects();                                                                                           // [0x2108ca0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	// bool BlueprintUpdateCamera(class AActor* CameraTarget, FVector& NewCameraLocation, FRotator& NewCameraRotation, float& NewCameraFOV); // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	// class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);                                                // [0x4111f90] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	// class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);                           // [0x4111ef0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlayerState
/// Size: 0x0100 (256 bytes) (0x000220 - 0x000320) align 8 pad: 0x0000
class APlayerState : public AInfo
{ 
public:
	float                                              Score;                                                      // 0x0220   (0x0004)  
	int32_t                                            PlayerId;                                                   // 0x0224   (0x0004)  
	char                                               Ping;                                                       // 0x0228   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0229   (0x0001)  MISSED
	bool                                               bShouldUpdateReplicatedPing : 1;                            // 0x022A:0 (0x0001)  
	bool                                               bIsSpectator : 1;                                           // 0x022A:1 (0x0001)  
	bool                                               bOnlySpectator : 1;                                         // 0x022A:2 (0x0001)  
	bool                                               bIsABot : 1;                                                // 0x022A:3 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x022A:4 (0x0001)  MISSED
	bool                                               bIsInactive : 1;                                            // 0x022A:5 (0x0001)  
	bool                                               bFromPreviousLevel : 1;                                     // 0x022A:6 (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x022B   (0x0001)  MISSED
	int32_t                                            StartTime;                                                  // 0x022C   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x0230   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0238   (0x0008)  MISSED
	FString                                            SavedNetworkAddress;                                        // 0x0240   (0x0010)  
	FUniqueNetIdRepl                                   UniqueId;                                                   // 0x0250   (0x0028)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0278   (0x0008)  MISSED
	class APawn*                                       PawnPrivate;                                                // 0x0280   (0x0008)  
	unsigned char                                      UnknownData05_6[0x78];                                      // 0x0288   (0x0078)  MISSED
	FString                                            PlayerNamePrivate;                                          // 0x0300   (0x0010)  
	unsigned char                                      UnknownData06_7[0x10];                                      // 0x0310   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	// void ReceiveOverrideWith(class APlayerState* OldPlayerState);                                                            // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	// void ReceiveCopyProperties(class APlayerState* NewPlayerState);                                                          // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	// void OnRep_UniqueId();                                                                                                   // [0x8ee5a0] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_Score
	// void OnRep_Score();                                                                                                      // [0x1781660] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	// void OnRep_PlayerName();                                                                                                 // [0x1781680] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                   // [0x1fb6340] Native|Public        
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	// void OnRep_bIsInactive();                                                                                                // [0x17816a0] Native|Public        
	// Function /Script/Engine.PlayerState.IsOnlyASpectator
	// bool IsOnlyASpectator();                                                                                                 // [0x411e750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PlayerState.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x411e560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0028 (40 bytes) (0x000280 - 0x0002A8) align 8 pad: 0x0000
class ADefaultPawn : public APawn
{ 
public:
	float                                              BaseTurnRate;                                               // 0x0280   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x0284   (0x0004)  
	class UPawnMovementComponent*                      MovementComponent;                                          // 0x0288   (0x0008)  
	class USphereComponent*                            CollisionComponent;                                         // 0x0290   (0x0008)  
	class UStaticMeshComponent*                        MeshComponent;                                              // 0x0298   (0x0008)  
	bool                                               bAddDefaultMovementBindings : 1;                            // 0x02A0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02A1   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	// void TurnAtRate(float Rate);                                                                                             // [0x4040a40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	// void MoveUp_World(float Val);                                                                                            // [0x403ff40] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveRight
	// void MoveRight(float Val);                                                                                               // [0x403feb0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.MoveForward
	// void MoveForward(float Val);                                                                                             // [0x403fe20] Native|Public|BlueprintCallable 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	// void LookUpAtRate(float Rate);                                                                                           // [0x403fd90] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0000 (0 bytes) (0x0002A8 - 0x0002A8) align 8 pad: 0x0000
class ASpectatorPawn : public ADefaultPawn
{ 
public:
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x0088 (136 bytes) (0x0001F8 - 0x000280) align 16 pad: 0x0000
class USpringArmComponent : public USceneComponent
{ 
public:
	float                                              TargetArmLength;                                            // 0x01F8   (0x0004)  
	FVector                                            SocketOffset;                                               // 0x01FC   (0x000C)  
	FVector                                            TargetOffset;                                               // 0x0208   (0x000C)  
	float                                              ProbeSize;                                                  // 0x0214   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                               // 0x0218   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	bool                                               bDoCollisionTest : 1;                                       // 0x021C:0 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x021C:1 (0x0001)  
	bool                                               bInheritPitch : 1;                                          // 0x021C:2 (0x0001)  
	bool                                               bInheritYaw : 1;                                            // 0x021C:3 (0x0001)  
	bool                                               bInheritRoll : 1;                                           // 0x021C:4 (0x0001)  
	bool                                               bEnableCameraLag : 1;                                       // 0x021C:5 (0x0001)  
	bool                                               bEnableCameraRotationLag : 1;                               // 0x021C:6 (0x0001)  
	bool                                               bUseCameraLagSubstepping : 1;                               // 0x021C:7 (0x0001)  
	bool                                               bDrawDebugLagMarkers : 1;                                   // 0x021D:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x021E   (0x0002)  MISSED
	float                                              CameraLagSpeed;                                             // 0x0220   (0x0004)  
	float                                              CameraRotationLagSpeed;                                     // 0x0224   (0x0004)  
	float                                              CameraLagMaxTimeStep;                                       // 0x0228   (0x0004)  
	float                                              CameraLagMaxDistance;                                       // 0x022C   (0x0004)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0230   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	// bool IsCollisionFixApplied();                                                                                            // [0x4159d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	// FVector GetUnfixedCameraPosition();                                                                                      // [0x4159d20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	// FRotator GetTargetRotation();                                                                                            // [0x4159ce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UCameraModifier : public UObject
{ 
public:
	bool                                               bDebug : 1;                                                 // 0x0028:0 (0x0001)  
	bool                                               bExclusive : 1;                                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	char                                               Priority;                                                   // 0x002C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	class APlayerCameraManager*                        CameraOwner;                                                // 0x0030   (0x0008)  
	float                                              AlphaInTime;                                                // 0x0038   (0x0004)  
	float                                              AlphaOutTime;                                               // 0x003C   (0x0004)  
	float                                              Alpha;                                                      // 0x0040   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0044   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.CameraModifier.IsDisabled
	// bool IsDisabled();                                                                                                       // [0x1822ce0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	// class AActor* GetViewTarget();                                                                                           // [0x3727e90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CameraModifier.EnableModifier
	// void EnableModifier();                                                                                                   // [0x4026330] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.DisableModifier
	// void DisableModifier(bool bImmediate);                                                                                   // [0x40262a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	// void BlueprintModifyPostProcess(float DeltaTime, float& PostProcessBlendWeight, FPostProcessSettings& PostProcessSettings); // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	// void BlueprintModifyCamera(float DeltaTime, FVector ViewLocation, FRotator ViewRotation, float FOV, FVector& NewViewLocation, FRotator& NewViewRotation, float& NewFOV); // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FActiveCameraShakeInfo
{ 
	class UCameraShakeBase*                            ShakeInstance;                                              // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,88) /* TWeakObjectPtr<UCameraShakeSourceComponent*> */ __um(ShakeSource);                      // 0x0008   (0x0008)  
	bool                                               bIsCustomInitialized;                                       // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x0068 (104 bytes) (0x000048 - 0x0000B0) align 8 pad: 0x0000
class UCameraModifier_CameraShake : public UCameraModifier
{ 
public:
	TArray<FActiveCameraShakeInfo>                     ActiveShakes;                                               // 0x0048   (0x0010)  
	SDK_UNDEFINED(80,89) /* TMap<UClass*, FPooledCameraShakes> */ __um(ExpiredPooledShakesMap);                    // 0x0058   (0x0050)  
	float                                              SplitScreenShakeScale;                                      // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class USoundNode : public UObject
{ 
public:
	TArray<class USoundNode*>                          ChildNodes;                                                 // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class USoundNodeAssetReferencer : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SkyLight
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class ASkyLight : public AInfo
{ 
public:
	class USkyLightComponent*                          LightComponent;                                             // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x1781660] Native|Public        
};

/// Class /Script/Engine.Texture
/// Size: 0x0120 (288 bytes) (0x000060 - 0x000180) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UTexture : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0060   (0x0008)  MISSED
	FGuid                                              LightingGuid;                                               // 0x0068   (0x0010)  
	int32_t                                            LODBias;                                                    // 0x0078   (0x0004)  
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x007C   (0x0001)  
	TEnumAsByte<TextureFilter>                         Filter;                                                     // 0x007D   (0x0001)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x007E   (0x0001)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x007F   (0x0001)  
	FPerPlatformFloat                                  Downscale;                                                  // 0x0080   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x0084   (0x0001)  
	bool                                               sRGB : 1;                                                   // 0x0085:0 (0x0001)  
	bool                                               bNoTiling : 1;                                              // 0x0085:1 (0x0001)  
	bool                                               VirtualTextureStreaming : 1;                                // 0x0085:2 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0085:3 (0x0001)  
	bool                                               bNotOfflineProcessed : 1;                                   // 0x0085:4 (0x0001)  
	bool                                               bAsyncResourceReleaseHasBeenStarted : 1;                    // 0x0085:5 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0086   (0x0002)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0088   (0x0010)  
	unsigned char                                      UnknownData02_7[0xE0];                                      // 0x0098   (0x00E0)  MISSED
};
#pragma pack(pop)

/// Class /Script/Engine.TextureCube
/// Size: 0x0058 (88 bytes) (0x000178 - 0x0001D0) align 16 pad: 0x0000
class UTextureCube : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0178   (0x0058)  MISSED
};

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FInstancedStaticMeshInstanceData
{ 
	FMatrix                                            Transform;                                                  // 0x0000   (0x0040)  
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FInstancedStaticMeshMappingInfo
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x00B0 (176 bytes) (0x0004E0 - 0x000590) align 16 pad: 0x0000
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
public:
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x04E0   (0x0010)  
	int32_t                                            NumCustomDataFloats;                                        // 0x04F0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x04F4   (0x0004)  MISSED
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x04F8   (0x0010)  
	int32_t                                            InstancingRandomSeed;                                       // 0x0508   (0x0004)  
	int32_t                                            InstanceStartCullDistance;                                  // 0x050C   (0x0004)  
	int32_t                                            InstanceEndCullDistance;                                    // 0x0510   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0514   (0x0004)  MISSED
	TArray<int32_t>                                    InstanceReorderTable;                                       // 0x0518   (0x0010)  
	unsigned char                                      UnknownData02_6[0x48];                                      // 0x0528   (0x0048)  MISSED
	int32_t                                            NumPendingLightmaps;                                        // 0x0570   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0574   (0x0004)  MISSED
	TArray<FInstancedStaticMeshMappingInfo>            CachedMappings;                                             // 0x0578   (0x0010)  
	unsigned char                                      UnknownData04_7[0x8];                                       // 0x0588   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	// bool UpdateInstanceTransform(int32_t InstanceIndex, FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x406ec00] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCustomDataValue
	// bool SetCustomDataValue(int32_t InstanceIndex, int32_t CustomDataIndex, float CustomDataValue, bool bMarkRenderStateDirty); // [0x406eaa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	// void SetCullDistances(int32_t StartCullDistance, int32_t EndCullDistance);                                               // [0x406e9d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	// bool RemoveInstance(int32_t InstanceIndex);                                                                              // [0x406e910] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	// bool GetInstanceTransform(int32_t InstanceIndex, FTransform& OutInstanceTransform, bool bWorldSpace);                    // [0x406dfb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	// TArray<int32_t> GetInstancesOverlappingSphere(FVector& Center, float Radius, bool bSphereInWorldSpace);                  // [0x406e240] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	// TArray<int32_t> GetInstancesOverlappingBox(FBox& Box, bool bBoxInWorldSpace);                                            // [0x406e110] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	// int32_t GetInstanceCount();                                                                                              // [0x406df80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	// void ClearInstances();                                                                                                   // [0x406d710] Native|Public|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	// bool BatchUpdateInstancesTransforms(int32_t StartInstanceIndex, TArray<FTransform>& NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x406d510] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	// bool BatchUpdateInstancesTransform(int32_t StartInstanceIndex, int32_t NumInstances, FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport); // [0x406d2c0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	// int32_t AddInstanceWorldSpace(FTransform& WorldTransform);                                                               // [0x406d0a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstances
	// TArray<int32_t> AddInstances(TArray<FTransform>& InstanceTransforms, bool bShouldReturnIndices);                         // [0x406d180] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	// int32_t AddInstance(FTransform& InstanceTransform);                                                                      // [0x406cfc0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x00F0 (240 bytes) (0x000590 - 0x000680) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0590   (0x0008)  MISSED
	TArray<int32_t>                                    SortedInstances;                                            // 0x0598   (0x0010)  
	int32_t                                            NumBuiltInstances;                                          // 0x05A8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x05AC   (0x0004)  MISSED
	FBox                                               BuiltInstanceBounds;                                        // 0x05B0   (0x001C)  
	FBox                                               UnbuiltInstanceBounds;                                      // 0x05CC   (0x001C)  
	TArray<FBox>                                       UnbuiltInstanceBoundsList;                                  // 0x05E8   (0x0010)  
	bool                                               bEnableDensityScaling : 1;                                  // 0x05F8:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x05F9   (0x0007)  MISSED
	int32_t                                            OcclusionLayerNumNodes;                                     // 0x0600   (0x0004)  
	FBoxSphereBounds                                   CacheMeshExtendedBounds;                                    // 0x0604   (0x001C)  
	bool                                               bDisableCollision;                                          // 0x0620   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0621   (0x0003)  MISSED
	int32_t                                            InstanceCountToRender;                                      // 0x0624   (0x0004)  
	unsigned char                                      UnknownData04_7[0x50];                                      // 0x0628   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
	// bool RemoveInstances(TArray<int32_t>& InstancesToRemove);                                                                // [0x40691d0] Final|Native|Public|HasOutParms|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class AStaticMeshActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x0220   (0x0008)  
	bool                                               bStaticMeshReplicateMovement;                               // 0x0228   (0x0001)  
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                            // 0x0229   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x022A   (0x0006)  MISSED


	/// Functions
	// Function /Script/Engine.StaticMeshActor.SetMobility
	// void SetMobility(TEnumAsByte<EComponentMobility> InMobility);                                                            // [0x415e8b0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FLightmassMaterialInterfaceSettings
{ 
	float                                              EmissiveBoost;                                              // 0x0000   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0004   (0x0004)  
	float                                              ExportResolutionScale;                                      // 0x0008   (0x0004)  
	bool                                               bCastShadowAsMasked : 1;                                    // 0x000C:0 (0x0001)  
	bool                                               bOverrideCastShadowAsMasked : 1;                            // 0x000C:1 (0x0001)  
	bool                                               bOverrideEmissiveBoost : 1;                                 // 0x000C:2 (0x0001)  
	bool                                               bOverrideDiffuseBoost : 1;                                  // 0x000C:3 (0x0001)  
	bool                                               bOverrideExportResolutionScale : 1;                         // 0x000C:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMaterialTextureInfo
{ 
	float                                              SamplingScale;                                              // 0x0000   (0x0004)  
	int32_t                                            UVChannelIndex;                                             // 0x0004   (0x0004)  
	FName                                              TextureName;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000088) align 8 pad: 0x0000
class UMaterialInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	class USubsurfaceProfile*                          SubsurfaceProfile;                                          // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0040   (0x0010)  MISSED
	FLightmassMaterialInterfaceSettings                LightmassSettings;                                          // 0x0050   (0x0010)  
	TArray<FMaterialTextureInfo>                       TextureStreamingData;                                       // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0080   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	// void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int32_t CinematicTextureGroups, bool bFastResponse); // [0x40ee1c0] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialMask
	// class UPhysicalMaterialMask* GetPhysicalMaterialMask();                                                                  // [0x40edbb0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialFromMap
	// class UPhysicalMaterial* GetPhysicalMaterialFromMap(int32_t Index);                                                      // [0x40edb10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	// class UPhysicalMaterial* GetPhysicalMaterial();                                                                          // [0x3727e90] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetParameterInfo
	// FMaterialParameterInfo GetParameterInfo(TEnumAsByte<EMaterialParameterAssociation> Association, FName ParameterName, class UMaterialFunctionInterface* LayerFunction); // [0x40ed9f0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	// class UMaterial* GetBaseMaterial();                                                                                      // [0x40ed9c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMaterialParameterInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<EMaterialParameterAssociation>         Association;                                                // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            Index;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FScalarParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	float                                              ParameterValue;                                             // 0x0010   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 pad: 0x0000
struct FVectorParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       ParameterValue;                                             // 0x0010   (0x0010)  
	FGuid                                              ExpressionGUID;                                             // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UTexture*                                    ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FRuntimeVirtualTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class URuntimeVirtualTexture*                      ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FFontParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UFont*                                       FontValue;                                                  // 0x0010   (0x0008)  
	int32_t                                            FontPage;                                                   // 0x0018   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x001C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMaterialInstanceBasePropertyOverrides
{ 
	bool                                               bOverride_OpacityMaskClipValue : 1;                         // 0x0000:0 (0x0001)  
	bool                                               bOverride_BlendMode : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ShadingModel : 1;                                 // 0x0000:2 (0x0001)  
	bool                                               bOverride_DitheredLODTransition : 1;                        // 0x0000:3 (0x0001)  
	bool                                               bOverride_CastDynamicShadowAsMasked : 1;                    // 0x0000:4 (0x0001)  
	bool                                               bOverride_TwoSided : 1;                                     // 0x0000:5 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x0000:6 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x0000:7 (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0001:0 (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0002   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0003   (0x0001)  
	float                                              OpacityMaskClipValue;                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FStaticParameterBase
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	bool                                               bOverride;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0004 (4 bytes) (0x000024 - 0x000028) align 4 pad: 0x0000
struct FStaticSwitchParameter : FStaticParameterBase
{ 
	bool                                               Value;                                                      // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0004 (4 bytes) (0x000024 - 0x000028) align 4 pad: 0x0000
struct FStaticComponentMaskParameter : FStaticParameterBase
{ 
	bool                                               R;                                                          // 0x0024   (0x0001)  
	bool                                               G;                                                          // 0x0025   (0x0001)  
	bool                                               B;                                                          // 0x0026   (0x0001)  
	bool                                               A;                                                          // 0x0027   (0x0001)  
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x0008 (8 bytes) (0x000024 - 0x00002C) align 4 pad: 0x0000
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase
{ 
	int32_t                                            WeightmapIndex;                                             // 0x0024   (0x0004)  
	bool                                               bWeightBasedBlend;                                          // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FMaterialLayersFunctions
{ 
	TArray<class UMaterialFunctionInterface*>          Layers;                                                     // 0x0000   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          Blends;                                                     // 0x0010   (0x0010)  
	TArray<bool>                                       LayerStates;                                                // 0x0020   (0x0010)  
	FString                                            KeyString;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0044 (68 bytes) (0x000024 - 0x000068) align 8 pad: 0x0000
struct FStaticMaterialLayersParameter : FStaticParameterBase
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMaterialLayersFunctions                           Value;                                                      // 0x0028   (0x0040)  
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FStaticParameterSet
{ 
	TArray<FStaticSwitchParameter>                     StaticSwitchParameters;                                     // 0x0000   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameters;                              // 0x0010   (0x0010)  
	TArray<FStaticTerrainLayerWeightParameter>         TerrainLayerWeightParameters;                               // 0x0020   (0x0010)  
	TArray<FStaticMaterialLayersParameter>             MaterialLayersParameters;                                   // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMaterialCachedParameterEntry
{ 
	TArray<uint64_t>                                   NameHashes;                                                 // 0x0000   (0x0010)  
	TArray<FMaterialParameterInfo>                     ParameterInfos;                                             // 0x0010   (0x0010)  
	TArray<FGuid>                                      ExpressionGuids;                                            // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameters
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 8 pad: 0x0000
struct FMaterialCachedParameters
{ 
	FMaterialCachedParameterEntry                      RuntimeEntries[5];                                          // 0x0000   (0x00F0)  
	TArray<float>                                      ScalarValues;                                               // 0x00F0   (0x0010)  
	TArray<FLinearColor>                               VectorValues;                                               // 0x0100   (0x0010)  
	TArray<class UTexture*>                            TextureValues;                                              // 0x0110   (0x0010)  
	TArray<class UFont*>                               FontValues;                                                 // 0x0120   (0x0010)  
	TArray<int32_t>                                    FontPageValues;                                             // 0x0130   (0x0010)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextureValues;                                // 0x0140   (0x0010)  
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0288 (648 bytes) (0x000088 - 0x000310) align 8 pad: 0x0000
class UMaterialInstance : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x0090   (0x0040)  
	class UMaterialInterface*                          Parent;                                                     // 0x00D0   (0x0008)  
	bool                                               bHasStaticPermutationResource : 1;                          // 0x00D8:0 (0x0001)  
	bool                                               bOverrideSubsurfaceProfile : 1;                             // 0x00D8:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00D9   (0x0007)  MISSED
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x00E0   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x00F0   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0100   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x0110   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0120   (0x0010)  
	FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides;                                      // 0x0130   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0138   (0x0010)  MISSED
	FStaticParameterSet                                StaticParameters;                                           // 0x0148   (0x0040)  
	FMaterialCachedParameters                          CachedLayerParameters;                                      // 0x0188   (0x0150)  
	TArray<class UObject*>                             CachedReferencedTextures;                                   // 0x02D8   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x02E8   (0x0028)  MISSED
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0008 (8 bytes) (0x000310 - 0x000318) align 8 pad: 0x0000
class UMaterialInstanceConstant : public UMaterialInstance
{ 
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0310   (0x0008)  


	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x40edf50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x40ede00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x40edcb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UDynamicBlueprintBinding : public UObject
{ 
public:
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBPComponentClassOverride
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
	class UClass*                                      ComponentClass;                                             // 0x0008   (0x0008)  
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x00F8 (248 bytes) (0x000230 - 0x000328) align 8 pad: 0x0000
class UBlueprintGeneratedClass : public UClass
{ 
public:
	int32_t                                            NumReplicatedProperties;                                    // 0x0230   (0x0004)  
	bool                                               bHasNativizedParent : 1;                                    // 0x0234:0 (0x0001)  
	bool                                               bHasCookedComponentInstancingData : 1;                      // 0x0234:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0235   (0x0003)  MISSED
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                      // 0x0238   (0x0010)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0248   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0258   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0268   (0x0010)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0278   (0x0008)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0280   (0x0008)  
	class UStructProperty*                             UberGraphFramePointerProperty;                              // 0x0288   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0290   (0x0008)  MISSED
	class UFunction*                                   UberGraphFunction;                                          // 0x0298   (0x0008)  
	SDK_UNDEFINED(80,90) /* TMap<FName, FBlueprintCookedComponentInstancingData> */ __um(CookedComponentInstancingData); // 0x02A0   (0x0050)  
	unsigned char                                      UnknownData02_7[0x38];                                      // 0x02F0   (0x0038)  MISSED
};

/// Class /Script/Engine.CameraActor
/// Size: 0x0590 (1424 bytes) (0x000220 - 0x0007B0) align 16 pad: 0x0000
class ACameraActor : public AActor
{ 
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                      // 0x0220   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0221   (0x0007)  MISSED
	class UCameraComponent*                            CameraComponent;                                            // 0x0228   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0230   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0238   (0x0008)  MISSED
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0241   (0x0003)  MISSED
	float                                              AspectRatio;                                                // 0x0244   (0x0004)  
	float                                              FOVAngle;                                                   // 0x0248   (0x0004)  
	float                                              PostProcessBlendWeight;                                     // 0x024C   (0x0004)  
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0250   (0x0560)  


	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	// int32_t GetAutoActivatePlayerIndex();                                                                                    // [0x40263f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x05D8 (1496 bytes) (0x0001F8 - 0x0007D0) align 16 pad: 0x0000
class UCameraComponent : public USceneComponent
{ 
public:
	float                                              FieldOfView;                                                // 0x01F8   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x01FC   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0200   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0204   (0x0004)  
	float                                              AspectRatio;                                                // 0x0208   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x020C:0 (0x0001)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x020C:1 (0x0001)  
	bool                                               bLockToHmd : 1;                                             // 0x020C:2 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x020C:3 (0x0001)  
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x020D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x32];                                      // 0x020E   (0x0032)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0240   (0x0004)  
	unsigned char                                      UnknownData01_6[0x2C];                                      // 0x0244   (0x002C)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0270   (0x0560)  


	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	// void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);                                                              // [0x40283f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	// void SetProjectionMode(TEnumAsByte<ECameraProjectionMode> InProjectionMode);                                             // [0x4028260] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	// void SetPostProcessBlendWeight(float InPostProcessBlendWeight);                                                          // [0x40281e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	// void SetOrthoWidth(float InOrthoWidth);                                                                                  // [0x4028160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	// void SetOrthoNearClipPlane(float InOrthoNearClipPlane);                                                                  // [0x40280e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	// void SetOrthoFarClipPlane(float InOrthoFarClipPlane);                                                                    // [0x4028060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	// void SetFieldOfView(float InFieldOfView);                                                                                // [0x37b12b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	// void SetConstraintAspectRatio(bool bInConstrainAspectRatio);                                                             // [0x4027f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	// void SetAspectRatio(float InAspectRatio);                                                                                // [0x4027ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x4027da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.OnCameraMeshHiddenChanged
	// void OnCameraMeshHiddenChanged();                                                                                        // [0xbbc500] Final|Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.GetCameraView
	// void GetCameraView(float DeltaTime, FMinimalViewInfo& DesiredView);                                                      // [0x4026420] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x4026150] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UBlueprintCore : public UObject
{ 
public:
	class UClass*                                      SkeletonGeneratedClass;                                     // 0x0028   (0x0008)  
	class UClass*                                      GeneratedClass;                                             // 0x0030   (0x0008)  
	bool                                               bLegacyNeedToPurgeSkelRefs;                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FGuid                                              BlueprintGuid;                                              // 0x003C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.Blueprint
/// Size: 0x0050 (80 bytes) (0x000050 - 0x0000A0) align 8 pad: 0x0000
class UBlueprint : public UBlueprintCore
{ 
public:
	class UClass*                                      ParentClass;                                                // 0x0050   (0x0008)  
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                              // 0x0058   (0x0001)  
	bool                                               bRecompileOnLoad : 1;                                       // 0x0059:0 (0x0001)  
	bool                                               bHasBeenRegenerated : 1;                                    // 0x0059:1 (0x0001)  
	bool                                               bIsRegeneratingOnLoad : 1;                                  // 0x0059:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x005A   (0x0002)  MISSED
	int32_t                                            BlueprintSystemVersion;                                     // 0x005C   (0x0004)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0060   (0x0008)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0068   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0078   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0088   (0x0010)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0098   (0x0008)  
};

/// Class /Script/Engine.Model
/// Size: 0x0230 (560 bytes) (0x000028 - 0x000258) align 8 pad: 0x0000
class UModel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x230];                                     // 0x0028   (0x0230)  MISSED
};

/// Class /Script/Engine.Channel
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000068) align 8 pad: 0x0000
class UChannel : public UObject
{ 
public:
	class UNetConnection*                              Connection;                                                 // 0x0028   (0x0008)  
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0030   (0x0038)  MISSED
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0228 (552 bytes) (0x000068 - 0x000290) align 8 pad: 0x0000
class UActorChannel : public UChannel
{ 
public:
	class AActor*                                      Actor;                                                      // 0x0068   (0x0008)  
	unsigned char                                      UnknownData00_6[0xE8];                                      // 0x0070   (0x00E8)  MISSED
	TArray<class UObject*>                             CreateSubObjects;                                           // 0x0158   (0x0010)  
	unsigned char                                      UnknownData01_7[0x128];                                     // 0x0168   (0x0128)  MISSED
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000080) align 8 pad: 0x0000
class UAnimationAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInterpolationParameter
{ 
	float                                              InterpolationTime;                                          // 0x0000   (0x0004)  
	TEnumAsByte<EFilterInterpolationType>              InterpolationType;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FPerBoneInterpolation
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              InterpolationSpeedPerSec;                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBlendSample
{ 
	class UAnimSequence*                               Animation;                                                  // 0x0000   (0x0008)  
	FVector                                            SampleValue;                                                // 0x0008   (0x000C)  
	float                                              RateScale;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FEditorElement
{ 
	int32_t                                            Indices[3];                                                 // 0x0000   (0x000C)  
	float                                              Weights[3];                                                 // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBlendParameter
{ 
	FString                                            DisplayName;                                                // 0x0000   (0x0010)  
	float                                              Min;                                                        // 0x0010   (0x0004)  
	float                                              Max;                                                        // 0x0014   (0x0004)  
	int32_t                                            GridNum;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x00C8 (200 bytes) (0x000080 - 0x000148) align 8 pad: 0x0000
class UBlendSpaceBase : public UAnimationAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0080   (0x0008)  MISSED
	bool                                               bRotationBlendInMeshSpace;                                  // 0x0088   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	float                                              AnimLength;                                                 // 0x008C   (0x0004)  
	FInterpolationParameter                            InterpolationParam[3];                                      // 0x0090   (0x0018)  
	float                                              TargetWeightInterpolationSpeedPerSec;                       // 0x00A8   (0x0004)  
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                          // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	TArray<FPerBoneInterpolation>                      PerBoneBlend;                                               // 0x00B0   (0x0010)  
	int32_t                                            SampleIndexWithMarkers;                                     // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<FBlendSample>                               SampleData;                                                 // 0x00C8   (0x0010)  
	TArray<FEditorElement>                             GridSamples;                                                // 0x00D8   (0x0010)  
	FBlendParameter                                    BlendParameters[3];                                         // 0x00E8   (0x0060)  
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 8 pad: 0x0000
class UBlendSpace : public UBlendSpaceBase
{ 
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                       // 0x0148   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0000 (0 bytes) (0x000150 - 0x000150) align 8 pad: 0x0000
class UAimOffsetBlendSpace : public UBlendSpace
{ 
public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 8 pad: 0x0000
class UBlendSpace1D : public UBlendSpaceBase
{ 
public:
	bool                                               bScaleAnimation;                                            // 0x0148   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0000 (0 bytes) (0x000150 - 0x000150) align 8 pad: 0x0000
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
public:
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AAmbientSound : public AActor
{ 
public:
	class UAudioComponent*                             AudioComponent;                                             // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	// void Stop();                                                                                                             // [0x3ff78b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.Play
	// void Play(float StartTime);                                                                                              // [0x3ff7380] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeOut
	// void FadeOut(float FadeOutDuration, float FadeVolumeLevel);                                                              // [0x3ff7140] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.FadeIn
	// void FadeIn(float FadeInDuration, float FadeVolumeLevel);                                                                // [0x3ff7070] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	// void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);                                                  // [0x3ff6f00] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.CustomAttributeSetting
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCustomAttributeSetting
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Meaning;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x0098 (152 bytes) (0x000038 - 0x0000D0) align 8 pad: 0x0000
class UAnimationSettings : public UDeveloperSettings
{ 
public:
	int32_t                                            CompressCommandletVersion;                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FString>                                    KeyEndEffectorsMatchNameArray;                              // 0x0040   (0x0010)  
	bool                                               ForceRecompression;                                         // 0x0050   (0x0001)  
	bool                                               bForceBelowThreshold;                                       // 0x0051   (0x0001)  
	bool                                               bFirstRecompressUsingCurrentOrDefault;                      // 0x0052   (0x0001)  
	bool                                               bRaiseMaxErrorToExisting;                                   // 0x0053   (0x0001)  
	bool                                               bEnablePerformanceLog;                                      // 0x0054   (0x0001)  
	bool                                               bStripAnimationDataOnDedicatedServer;                       // 0x0055   (0x0001)  
	bool                                               bTickAnimationOnSkeletalMeshInit;                           // 0x0056   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0057   (0x0001)  MISSED
	TArray<FCustomAttributeSetting>                    BoneCustomAttributesNames;                                  // 0x0058   (0x0010)  
	TArray<FString>                                    BoneNamesWithCustomAttributes;                              // 0x0068   (0x0010)  
	SDK_UNDEFINED(80,91) /* TMap<FName, ECustomAttributeBlendType> */ __um(AttributeBlendModes);                   // 0x0078   (0x0050)  
	ECustomAttributeBlendType                          DefaultAttributeBlendMode;                                  // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FAnimGroupInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x0028 (40 bytes) (0x0000A0 - 0x0000C8) align 8 pad: 0x0000
class UAnimBlueprint : public UBlueprint
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A0   (0x0008)  MISSED
	class USkeleton*                                   TargetSkeleton;                                             // 0x00A8   (0x0008)  
	TArray<FAnimGroupInfo>                             Groups;                                                     // 0x00B0   (0x0010)  
	bool                                               bUseMultiThreadedAnimationUpdate;                           // 0x00C0   (0x0001)  
	bool                                               bWarnAboutBlueprintUsage;                                   // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x00C2   (0x0006)  MISSED
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBakedStateExitTransition
{ 
	int32_t                                            CanTakeDelegateIndex;                                       // 0x0000   (0x0004)  
	int32_t                                            CustomResultNodeIndex;                                      // 0x0004   (0x0004)  
	int32_t                                            TransitionIndex;                                            // 0x0008   (0x0004)  
	bool                                               bDesiredTransitionReturnValue;                              // 0x000C   (0x0001)  
	bool                                               bAutomaticRemainingTimeRule;                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<int32_t>                                    PoseEvaluatorLinks;                                         // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FBakedAnimationState
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
	TArray<FBakedStateExitTransition>                  Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
	bool                                               bIsAConduit;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            EntryRuleNodeIndex;                                         // 0x002C   (0x0004)  
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0030   (0x0010)  
	TArray<int32_t>                                    LayerNodeIndices;                                           // 0x0040   (0x0010)  
	bool                                               bAlwaysResetOnEntry;                                        // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FAnimationStateBase
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0038 (56 bytes) (0x000008 - 0x000040) align 8 pad: 0x0000
struct FAnimationTransitionBetweenStates : FAnimationStateBase
{ 
	int32_t                                            PreviousState;                                              // 0x0008   (0x0004)  
	int32_t                                            NextState;                                                  // 0x000C   (0x0004)  
	float                                              CrossfadeDuration;                                          // 0x0010   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x0014   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0018   (0x0004)  
	int32_t                                            InterruptNotify;                                            // 0x001C   (0x0004)  
	EAlphaBlendOption                                  BlendMode;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0028   (0x0008)  
	class UBlendProfile*                               BlendProfile;                                               // 0x0030   (0x0008)  
	TEnumAsByte<ETransitionLogicType>                  LogicType;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FBakedAnimationStateMachine
{ 
	FName                                              MachineName;                                                // 0x0000   (0x0008)  
	int32_t                                            InitialState;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FBakedAnimationState>                       States;                                                     // 0x0010   (0x0010)  
	TArray<FAnimationTransitionBetweenStates>          Transitions;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FExposedValueCopyRecord
{ 
	int32_t                                            CopyIndex;                                                  // 0x0000   (0x0004)  
	EPostCopyOperation                                 PostCopyOperation;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FExposedValueHandler
{ 
	FName                                              BoundFunction;                                              // 0x0000   (0x0008)  
	TArray<FExposedValueCopyRecord>                    CopyRecords;                                                // 0x0008   (0x0010)  
	class UFunction*                                   Function;                                                   // 0x0018   (0x0008)  
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0020   (0x0030)  MISSED
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x0288 (648 bytes) (0x000328 - 0x0005B0) align 8 pad: 0x0000
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0328   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0330   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0340   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0348   (0x0010)  
	SDK_UNDEFINED(80,92) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                   // 0x0358   (0x0050)  
	unsigned char                                      UnknownData01_6[0x80];                                      // 0x03A8   (0x0080)  MISSED
	TArray<FName>                                      SyncGroupNames;                                             // 0x0428   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0438   (0x0010)  
	SDK_UNDEFINED(80,93) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphAssetPlayerInformation);        // 0x0448   (0x0050)  
	SDK_UNDEFINED(80,94) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                        // 0x0498   (0x0050)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x04E8   (0x00C8)  
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UAnimBoneCompressionCodec : public UObject
{ 
public:
	FString                                            Description;                                                // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UAnimBoneCompressionSettings : public UObject
{ 
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                     // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FAnimBlueprintFunction
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              Group;                                                      // 0x0008   (0x0008)  
	int32_t                                            OutputPoseNodeIndex;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      InputPoseNames;                                             // 0x0018   (0x0010)  
	TArray<int32_t>                                    InputPoseNodeIndices;                                       // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0038   (0x0028)  MISSED
	bool                                               bImplemented;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FAnimBlueprintFunctionData
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	SDK_UNDEFINED(16,95) /* TArray<InputPoseNodeProperties> */ __um(InputPoseNodeProperties);                      // 0x0020   (0x0010)  
	SDK_UNDEFINED(16,96) /* TArray<InputProperties> */ __um(InputProperties);                                      // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0308 (776 bytes) (0x000028 - 0x000330) align 8 pad: 0x0000
class UAnimClassData : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0030   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0040   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0048   (0x0010)  
	SDK_UNDEFINED(80,97) /* TMap<FName, FCachedPoseIndices> */ __um(OrderedSavedPoseIndicesMap);                   // 0x0058   (0x0050)  
	TArray<FAnimBlueprintFunction>                     AnimBlueprintFunctions;                                     // 0x00A8   (0x0010)  
	TArray<FAnimBlueprintFunctionData>                 AnimBlueprintFunctionData;                                  // 0x00B8   (0x0010)  
	SDK_UNDEFINED(16,98) /* TArray<AnimNodeProperties> */ __um(AnimNodeProperties);                                // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00D8   (0x0010)  MISSED
	SDK_UNDEFINED(16,99) /* TArray<LinkedAnimGraphNodeProperties> */ __um(LinkedAnimGraphNodeProperties);          // 0x00E8   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x00F8   (0x0010)  MISSED
	SDK_UNDEFINED(16,100) /* TArray<LinkedAnimLayerNodeProperties> */ __um(LinkedAnimLayerNodeProperties);         // 0x0108   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0118   (0x0010)  MISSED
	SDK_UNDEFINED(16,101) /* TArray<PreUpdateNodeProperties> */ __um(PreUpdateNodeProperties);                     // 0x0128   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0138   (0x0010)  MISSED
	SDK_UNDEFINED(16,102) /* TArray<DynamicResetNodeProperties> */ __um(DynamicResetNodeProperties);               // 0x0148   (0x0010)  
	unsigned char                                      UnknownData05_6[0x10];                                      // 0x0158   (0x0010)  MISSED
	SDK_UNDEFINED(16,103) /* TArray<StateMachineNodeProperties> */ __um(StateMachineNodeProperties);               // 0x0168   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0178   (0x0010)  MISSED
	SDK_UNDEFINED(16,104) /* TArray<InitializationNodeProperties> */ __um(InitializationNodeProperties);           // 0x0188   (0x0010)  
	unsigned char                                      UnknownData07_6[0x10];                                      // 0x0198   (0x0010)  MISSED
	SDK_UNDEFINED(80,105) /* TMap<FName, FGraphAssetPlayerInformation> */ __um(GraphNameAssetPlayers);             // 0x01A8   (0x0050)  
	TArray<FName>                                      SyncGroupNames;                                             // 0x01F8   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0208   (0x0010)  
	SDK_UNDEFINED(80,106) /* TMap<FName, FAnimGraphBlendOptions> */ __um(GraphBlendOptions);                       // 0x0218   (0x0050)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x0268   (0x00C8)  
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimClassInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSmartName
{ 
	FName                                              DisplayName;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FAnimCurveBase
{ 
	FName                                              LastObservedName;                                           // 0x0000   (0x0008)  
	FSmartName                                         Name;                                                       // 0x0008   (0x000C)  
	int32_t                                            CurveTypeFlags;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0080 (128 bytes) (0x000018 - 0x000098) align 8 pad: 0x0000
struct FFloatCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurve;                                                 // 0x0018   (0x0080)  
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FRawCurveTracks
{ 
	TArray<FFloatCurve>                                FloatCurves;                                                // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x0028 (40 bytes) (0x000080 - 0x0000A8) align 8 pad: 0x0000
class UAnimSequenceBase : public UAnimationAsset
{ 
public:
	TArray<FAnimNotifyEvent>                           Notifies;                                                   // 0x0080   (0x0010)  
	float                                              SequenceLength;                                             // 0x0090   (0x0004)  
	float                                              RateScale;                                                  // 0x0094   (0x0004)  
	FRawCurveTracks                                    RawCurveData;                                               // 0x0098   (0x0010)  


	/// Functions
	// Function /Script/Engine.AnimSequenceBase.GetPlayLength
	// float GetPlayLength();                                                                                                   // [0x1822c40] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x0000 (0 bytes) (0x0000A8 - 0x0000A8) align 8 pad: 0x0000
class UAnimCompositeBase : public UAnimSequenceBase
{ 
public:
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSegment
{ 
	class UAnimSequenceBase*                           AnimReference;                                              // 0x0000   (0x0008)  
	float                                              StartPos;                                                   // 0x0008   (0x0004)  
	float                                              AnimStartTime;                                              // 0x000C   (0x0004)  
	float                                              AnimEndTime;                                                // 0x0010   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0014   (0x0004)  
	int32_t                                            LoopingCount;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimTrack
{ 
	TArray<FAnimSegment>                               AnimSegments;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x0010 (16 bytes) (0x0000A8 - 0x0000B8) align 8 pad: 0x0000
class UAnimComposite : public UAnimCompositeBase
{ 
public:
	FAnimTrack                                         AnimationTrack;                                             // 0x00A8   (0x0010)  
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
public:
	bool                                               bNeedsSkeleton : 1;                                         // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	TEnumAsByte<AnimationCompressionFormat>            TranslationCompressionFormat;                               // 0x003C   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            RotationCompressionFormat;                                  // 0x003D   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            ScaleCompressionFormat;                                     // 0x003E   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x003F   (0x0001)  MISSED
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	float                                              MaxEffectorDiff;                                            // 0x004C   (0x0004)  
	float                                              MinEffectorDiff;                                            // 0x0050   (0x0004)  
	float                                              EffectorDiffSocket;                                         // 0x0054   (0x0004)  
	float                                              ParentKeyScale;                                             // 0x0058   (0x0004)  
	bool                                               bRetarget : 1;                                              // 0x005C:0 (0x0001)  
	bool                                               bActuallyFilterLinearKeys : 1;                              // 0x005C:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x0078 (120 bytes) (0x000060 - 0x0000D8) align 8 pad: 0x0000
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
public:
	float                                              MaxZeroingThreshold;                                        // 0x0060   (0x0004)  
	float                                              MaxPosDiffBitwise;                                          // 0x0064   (0x0004)  
	float                                              MaxAngleDiffBitwise;                                        // 0x0068   (0x0004)  
	float                                              MaxScaleDiffBitwise;                                        // 0x006C   (0x0004)  
	SDK_UNDEFINED(16,107) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedRotationFormats);      // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,108) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedTranslationFormats);   // 0x0080   (0x0010)  
	SDK_UNDEFINED(16,109) /* TArray<TEnumAsByte<AnimationCompressionFormat>> */ __um(AllowedScaleFormats);         // 0x0090   (0x0010)  
	bool                                               bResampleAnimation : 1;                                     // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	float                                              ResampledFramerate;                                         // 0x00A4   (0x0004)  
	int32_t                                            MinKeysForResampling;                                       // 0x00A8   (0x0004)  
	bool                                               bUseAdaptiveError : 1;                                      // 0x00AC:0 (0x0001)  
	bool                                               bUseOverrideForEndEffectors : 1;                            // 0x00AC:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	int32_t                                            TrackHeightBias;                                            // 0x00B0   (0x0004)  
	float                                              ParentingDivisor;                                           // 0x00B4   (0x0004)  
	float                                              ParentingDivisorExponent;                                   // 0x00B8   (0x0004)  
	bool                                               bUseAdaptiveError2 : 1;                                     // 0x00BC:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	float                                              RotationErrorSourceRatio;                                   // 0x00C0   (0x0004)  
	float                                              TranslationErrorSourceRatio;                                // 0x00C4   (0x0004)  
	float                                              ScaleErrorSourceRatio;                                      // 0x00C8   (0x0004)  
	float                                              MaxErrorPerTrackRatio;                                      // 0x00CC   (0x0004)  
	float                                              PerturbationProbeSize;                                      // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
public:
	int32_t                                            MinKeys;                                                    // 0x0040   (0x0004)  
	bool                                               bStartAtSecondKey : 1;                                      // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimCurveCompressionCodec : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UAnimCurveCompressionSettings : public UObject
{ 
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                      // 0x0028   (0x0008)  
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimLayerInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimMetaData : public UObject
{ 
public:
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAlphaBlend
{ 
	class UCurveFloat*                                 CustomCurve;                                                // 0x0000   (0x0008)  
	float                                              BlendTime;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x000C   (0x0018)  MISSED
	EAlphaBlendOption                                  BlendOption;                                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0025   (0x000B)  MISSED
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FAnimSyncMarker
{ 
	FName                                              MarkerName;                                                 // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMarkerSyncData
{ 
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
struct FCompositeSection : FAnimLinkableElement
{ 
	FName                                              SectionName;                                                // 0x0030   (0x0008)  
	float                                              StartTime;                                                  // 0x0038   (0x0004)  
	FName                                              NextSectionName;                                            // 0x003C   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSlotAnimationTrack
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	FAnimTrack                                         AnimTrack;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
struct FBranchingPoint : FAnimLinkableElement
{ 
	FName                                              EventName;                                                  // 0x0030   (0x0008)  
	float                                              DisplayTime;                                                // 0x0038   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FBranchingPointMarker
{ 
	int32_t                                            NotifyIndex;                                                // 0x0000   (0x0004)  
	float                                              TriggerTime;                                                // 0x0004   (0x0004)  
	TEnumAsByte<EAnimNotifyEventType>                  NotifyEventType;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FTimeStretchCurveMarker
{ 
	float                                              Time[3];                                                    // 0x0000   (0x000C)  
	float                                              Alpha;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTimeStretchCurve
{ 
	float                                              SamplingRate;                                               // 0x0000   (0x0004)  
	float                                              CurveValueMinPrecision;                                     // 0x0004   (0x0004)  
	TArray<FTimeStretchCurveMarker>                    Markers;                                                    // 0x0008   (0x0010)  
	float                                              Sum_dT_i_by_C_i[3];                                         // 0x0018   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x0128 (296 bytes) (0x0000A8 - 0x0001D0) align 8 pad: 0x0000
class UAnimMontage : public UAnimCompositeBase
{ 
public:
	FAlphaBlend                                        BlendIn;                                                    // 0x00A8   (0x0030)  
	float                                              BlendInTime;                                                // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FAlphaBlend                                        BlendOut;                                                   // 0x00E0   (0x0030)  
	float                                              BlendoutTime;                                               // 0x0110   (0x0004)  
	float                                              BlendOutTriggerTime;                                        // 0x0114   (0x0004)  
	FName                                              SyncGroup;                                                  // 0x0118   (0x0008)  
	int32_t                                            SyncSlotIndex;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	FMarkerSyncData                                    MarkerData;                                                 // 0x0128   (0x0020)  
	TArray<FCompositeSection>                          CompositeSections;                                          // 0x0148   (0x0010)  
	TArray<FSlotAnimationTrack>                        SlotAnimTracks;                                             // 0x0158   (0x0010)  
	TArray<FBranchingPoint>                            BranchingPoints;                                            // 0x0168   (0x0010)  
	bool                                               bEnableRootMotionTranslation;                               // 0x0178   (0x0001)  
	bool                                               bEnableRootMotionRotation;                                  // 0x0179   (0x0001)  
	bool                                               bEnableAutoBlendOut;                                        // 0x017A   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x017B   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x017C   (0x0004)  MISSED
	TArray<FBranchingPointMarker>                      BranchingPointMarkers;                                      // 0x0180   (0x0010)  
	TArray<int32_t>                                    BranchingPointStateNotifyIndices;                           // 0x0190   (0x0010)  
	FTimeStretchCurve                                  TimeStretchCurve;                                           // 0x01A0   (0x0028)  
	FName                                              TimeStretchCurveName;                                       // 0x01C8   (0x0008)  


	/// Functions
	// Function /Script/Engine.AnimMontage.GetDefaultBlendOutTime
	// float GetDefaultBlendOutTime();                                                                                          // [0x20793a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000090) align 16 pad: 0x0000
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	FVector                                            Scale;                                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData00_6[0x1C];                                      // 0x0064   (0x001C)  MISSED
	bool                                               Attached : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              SocketName;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UAnimNotify_PlaySound : public UAnimNotify
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0038   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0040   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0044   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x004C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              SocketName;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	bool                                               bDestroyAtEnd;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0038   (0x0008)  
	FName                                              SecondSocketName;                                           // 0x0040   (0x0008)  
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                             // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x004C   (0x0008)  
	bool                                               bRecycleSpawnedSystems : 1;                                 // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0055   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	// class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);   // [0x24710f0] Event|Public|BlueprintEvent|Const 
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FTrackToSkeletonMap
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FStringCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Value;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0020 (32 bytes) (0x000068 - 0x000088) align 8 pad: 0x0000
struct FStringCurve : FIndexedCurve
{ 
	FString                                            DefaultValue;                                               // 0x0068   (0x0010)  
	TArray<FStringCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedStringCustomAttribute
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FBakedStringCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FStringCurve                                       StringCurve;                                                // 0x0008   (0x0088)  
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FIntegralKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	int32_t                                            Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0018 (24 bytes) (0x000068 - 0x000080) align 8 pad: 0x0000
struct FIntegralCurve : FIndexedCurve
{ 
	TArray<FIntegralKey>                               Keys;                                                       // 0x0068   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0078   (0x0004)  
	bool                                               bUseDefaultValueBeforeFirstKey;                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Struct /Script/Engine.BakedIntegerCustomAttribute
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FBakedIntegerCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FIntegralCurve                                     IntCurve;                                                   // 0x0008   (0x0080)  
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSimpleCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
struct FSimpleCurve : FRealCurve
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	TArray<FSimpleCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedFloatCustomAttribute
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FBakedFloatCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FSimpleCurve                                       FloatCurve;                                                 // 0x0008   (0x0088)  
};

/// Struct /Script/Engine.BakedCustomAttributePerBoneData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBakedCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FBakedStringCustomAttribute>                StringAttributes;                                           // 0x0008   (0x0010)  
	TArray<FBakedIntegerCustomAttribute>               IntAttributes;                                              // 0x0018   (0x0010)  
	TArray<FBakedFloatCustomAttribute>                 FloatAttributes;                                            // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x0118 (280 bytes) (0x0000A8 - 0x0001C0) align 8 pad: 0x0000
class UAnimSequence : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable;                                    // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00C0   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00D0   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D8   (0x0008)  
	unsigned char                                      UnknownData02_6[0x70];                                      // 0x00E0   (0x0070)  MISSED
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                           // 0x0150   (0x0001)  
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                                // 0x0151   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x0152   (0x0006)  MISSED
	class UAnimSequence*                               RefPoseSeq;                                                 // 0x0158   (0x0008)  
	int32_t                                            RefFrameIndex;                                              // 0x0160   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0164   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x016C   (0x0004)  MISSED
	TArray<FTransform>                                 RetargetSourceAssetReferencePose;                           // 0x0170   (0x0010)  
	EAnimInterpolationType                             Interpolation;                                              // 0x0180   (0x0001)  
	bool                                               bEnableRootMotion;                                          // 0x0181   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x0182   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x0183   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x0184   (0x0001)  
	bool                                               bRootMotionSettingsCopiedFromMontage;                       // 0x0185   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0186   (0x0002)  MISSED
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0188   (0x0010)  
	unsigned char                                      UnknownData06_6[0x18];                                      // 0x0198   (0x0018)  MISSED
	TArray<FBakedCustomAttributePerBoneData>           BakedPerBoneCustomAttributeData;                            // 0x01B0   (0x0010)  
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimSetMeshLinkup
{ 
	TArray<int32_t>                                    BoneToTrackTable;                                           // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00C8 (200 bytes) (0x000028 - 0x0000F0) align 8 pad: 0x0000
class UAnimSet : public UObject
{ 
public:
	bool                                               bAnimRotationOnly : 1;                                      // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	TArray<FName>                                      TrackBoneNames;                                             // 0x0030   (0x0010)  
	TArray<FAnimSetMeshLinkup>                         LinkupCache;                                                // 0x0040   (0x0010)  
	TArray<char>                                       BoneUseAnimTranslation;                                     // 0x0050   (0x0010)  
	TArray<char>                                       ForceUseMeshTranslation;                                    // 0x0060   (0x0010)  
	TArray<FName>                                      UseTranslationBoneNames;                                    // 0x0070   (0x0010)  
	TArray<FName>                                      ForceMeshTranslationBoneNames;                              // 0x0080   (0x0010)  
	FName                                              PreviewSkelMeshName;                                        // 0x0090   (0x0008)  
	FName                                              BestRatioSkelMeshName;                                      // 0x0098   (0x0008)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x00A0   (0x0050)  MISSED
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x0018 (24 bytes) (0x0002B8 - 0x0002D0) align 16 pad: 0x0000
class UAnimSingleNodeInstance : public UAnimInstance
{ 
public:
	class UAnimationAsset*                             CurrentAsset;                                               // 0x02B8   (0x0008)  
	SDK_UNDEFINED(16,110) /* FDelegateProperty */      __um(PostEvaluateAnimEvent);                                // 0x02C0   (0x0010)  


	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	// void StopAnim();                                                                                                         // [0x4008cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	// void SetReverse(bool bInReverse);                                                                                        // [0x4008c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	// void SetPreviewCurveOverride(FName& PoseName, float Value, bool bRemoveIfZero);                                          // [0x4008b40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	// void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);                            // [0x4008a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	// void SetPosition(float InPosition, bool bFireNotifies);                                                                  // [0x4008940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	// void SetPlayRate(float InPlayRate);                                                                                      // [0x4008830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	// void SetPlaying(bool bIsPlaying);                                                                                        // [0x40088b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	// void SetLooping(bool bIsLooping);                                                                                        // [0x40087a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	// void SetBlendSpaceInput(FVector& InBlendInput);                                                                          // [0x4008710] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	// void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);                              // [0x40085f0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	// void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);                                                 // [0x40084e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	// float GetLength();                                                                                                       // [0x40084b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	// class UAnimationAsset* GetAnimationAsset();                                                                              // [0x4008480] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UAnimStateMachineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x0038 (56 bytes) (0x0000A8 - 0x0000E0) align 8 pad: 0x0000
class UAnimStreamable : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	EAnimInterpolationType                             Interpolation;                                              // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FName                                              RetargetSource;                                             // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x00B8   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00C8   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D0   (0x0008)  
	bool                                               bEnableRootMotion;                                          // 0x00D8   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x00D9   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x00DA   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x00DB   (0x0001)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000078) align 8 pad: 0x0000
class UAssetExportTask : public UObject
{ 
public:
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	class UExporter*                                   Exporter;                                                   // 0x0030   (0x0008)  
	FString                                            Filename;                                                   // 0x0038   (0x0010)  
	bool                                               bSelected;                                                  // 0x0048   (0x0001)  
	bool                                               bReplaceIdentical;                                          // 0x0049   (0x0001)  
	bool                                               bPrompt;                                                    // 0x004A   (0x0001)  
	bool                                               bAutomated;                                                 // 0x004B   (0x0001)  
	bool                                               bUseFileArchive;                                            // 0x004C   (0x0001)  
	bool                                               bWriteEmptyFiles;                                           // 0x004D   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	TArray<class UObject*>                             IgnoreObjectList;                                           // 0x0050   (0x0010)  
	class UObject*                                     Options;                                                    // 0x0060   (0x0008)  
	TArray<FString>                                    Errors;                                                     // 0x0068   (0x0010)  
};

/// Class /Script/Engine.AssetManager
/// Size: 0x0450 (1104 bytes) (0x000028 - 0x000478) align 8 pad: 0x0000
class UAssetManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x2B8];                                     // 0x0028   (0x02B8)  MISSED
	TArray<class UObject*>                             ObjectReferenceList;                                        // 0x02E0   (0x0010)  
	bool                                               bIsGlobalAsyncScanEnvironment;                              // 0x02F0   (0x0001)  
	bool                                               bShouldGuessTypeAndName;                                    // 0x02F1   (0x0001)  
	bool                                               bShouldUseSynchronousLoad;                                  // 0x02F2   (0x0001)  
	bool                                               bIsLoadingFromPakFiles;                                     // 0x02F3   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x02F4   (0x0001)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x02F5   (0x0001)  
	bool                                               bIsBulkScanning;                                            // 0x02F6   (0x0001)  
	bool                                               bIsPrimaryAssetDirectoryCurrent;                            // 0x02F7   (0x0001)  
	bool                                               bIsManagementDatabaseCurrent;                               // 0x02F8   (0x0001)  
	bool                                               bUpdateManagementDatabaseAfterScan;                         // 0x02F9   (0x0001)  
	bool                                               bIncludeOnlyOnDiskAssets;                                   // 0x02FA   (0x0001)  
	bool                                               bHasCompletedInitialScan;                                   // 0x02FB   (0x0001)  
	int32_t                                            NumberOfSpawnedNotifications;                               // 0x02FC   (0x0004)  
	unsigned char                                      UnknownData01_7[0x178];                                     // 0x0300   (0x0178)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FPrimaryAssetRules
{ 
	int32_t                                            Priority;                                                   // 0x0000   (0x0004)  
	int32_t                                            ChunkId;                                                    // 0x0004   (0x0004)  
	bool                                               bApplyRecursively;                                          // 0x0008   (0x0001)  
	EPrimaryAssetCookRule                              CookRule;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FPrimaryAssetTypeInfo
{ 
	FName                                              PrimaryAssetType;                                           // 0x0000   (0x0008)  
	SDK_UNDEFINED(40,111) /* TWeakObjectPtr<UClass*> */ __um(AssetBaseClass);                                      // 0x0008   (0x0028)  
	class UClass*                                      AssetBaseClassLoaded;                                       // 0x0030   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0038   (0x0001)  
	bool                                               bIsEditorOnly;                                              // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x003A   (0x0006)  MISSED
	TArray<FDirectoryPath>                             Directories;                                                // 0x0040   (0x0010)  
	TArray<FSoftObjectPath>                            SpecificAssets;                                             // 0x0050   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0060   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	TArray<FString>                                    AssetScanPaths;                                             // 0x0070   (0x0010)  
	bool                                               bIsDynamicAsset;                                            // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	int32_t                                            NumberOfAssets;                                             // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FPrimaryAssetRulesOverride
{ 
	FPrimaryAssetId                                    PrimaryAssetId;                                             // 0x0000   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0010   (0x000C)  
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPrimaryAssetRulesCustomOverride
{ 
	FPrimaryAssetType                                  PrimaryAssetType;                                           // 0x0000   (0x0008)  
	FDirectoryPath                                     FilterDirectory;                                            // 0x0008   (0x0010)  
	FString                                            FilterString;                                               // 0x0018   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAssetManagerRedirect
{ 
	FString                                            Old;                                                        // 0x0000   (0x0010)  
	FString                                            New;                                                        // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x000100) align 8 pad: 0x0000
class UAssetManagerSettings : public UDeveloperSettings
{ 
public:
	TArray<FPrimaryAssetTypeInfo>                      PrimaryAssetTypesToScan;                                    // 0x0038   (0x0010)  
	TArray<FDirectoryPath>                             DirectoriesToExclude;                                       // 0x0048   (0x0010)  
	TArray<FPrimaryAssetRulesOverride>                 PrimaryAssetRules;                                          // 0x0058   (0x0010)  
	TArray<FPrimaryAssetRulesCustomOverride>           CustomPrimaryAssetRules;                                    // 0x0068   (0x0010)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x0078   (0x0001)  
	bool                                               bShouldManagerDetermineTypeAndName;                         // 0x0079   (0x0001)  
	bool                                               bShouldGuessTypeAndNameInEditor;                            // 0x007A   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x007B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FAssetManagerRedirect>                      PrimaryAssetIdRedirects;                                    // 0x0080   (0x0010)  
	TArray<FAssetManagerRedirect>                      PrimaryAssetTypeRedirects;                                  // 0x0090   (0x0010)  
	TArray<FAssetManagerRedirect>                      AssetPathRedirects;                                         // 0x00A0   (0x0010)  
	SDK_UNDEFINED(80,112) /* TSet<FName> */            __um(MetaDataTagsForAssetRegistry);                         // 0x00B0   (0x0050)  
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAssetMapping
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	class UAnimationAsset*                             TargetAsset;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UAssetMappingTable : public UObject
{ 
public:
	TArray<FAssetMapping>                              MappedAssets;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
public:
	SDK_UNDEFINED(16,113) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0030   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	class USaveGame*                                   SaveGameObject;                                             // 0x0060   (0x0008)  


	/// Functions
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	// class UAsyncActionHandleSaveGame* AsyncSaveGameToSlot(class UObject* WorldContextObject, class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex); // [0x40105d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
	// class UAsyncActionHandleSaveGame* AsyncLoadGameFromSlot(class UObject* WorldContextObject, FString SlotName, int32_t UserIndex); // [0x400ff70] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0030   (0x0048)  MISSED
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,114) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	// class UAsyncActionLoadPrimaryAsset* AsyncLoadPrimaryAsset(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x4010090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,115) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	// class UAsyncActionLoadPrimaryAssetClass* AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, FPrimaryAssetId PrimaryAsset, TArray<FName>& LoadBundles); // [0x40101d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,116) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	// class UAsyncActionLoadPrimaryAssetList* AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x4010470] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,117) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	// class UAsyncActionLoadPrimaryAssetClassList* AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& LoadBundles); // [0x4010310] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0010 (16 bytes) (0x000078 - 0x000088) align 8 pad: 0x0000
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	SDK_UNDEFINED(16,118) /* FMulticastInlineDelegate */ __um(Completed);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<FPrimaryAssetId>& PrimaryAssetList, TArray<FName>& AddBundles, TArray<FName>& RemoveBundles); // [0x400fdb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	// class UAsyncActionChangePrimaryAssetBundles* AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<FName>& NewBundles, TArray<FName>& OldBundles); // [0x400fc50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AAtmosphericFog : public AInfo
{ 
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                    // 0x0220   (0x0008)  
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FAtmospherePrecomputeParameters
{ 
	float                                              DensityHeight;                                              // 0x0000   (0x0004)  
	float                                              DecayHeight;                                                // 0x0004   (0x0004)  
	int32_t                                            MaxScatteringOrder;                                         // 0x0008   (0x0004)  
	int32_t                                            TransmittanceTexWidth;                                      // 0x000C   (0x0004)  
	int32_t                                            TransmittanceTexHeight;                                     // 0x0010   (0x0004)  
	int32_t                                            IrradianceTexWidth;                                         // 0x0014   (0x0004)  
	int32_t                                            IrradianceTexHeight;                                        // 0x0018   (0x0004)  
	int32_t                                            InscatterAltitudeSampleNum;                                 // 0x001C   (0x0004)  
	int32_t                                            InscatterMuNum;                                             // 0x0020   (0x0004)  
	int32_t                                            InscatterMuSNum;                                            // 0x0024   (0x0004)  
	int32_t                                            InscatterNuNum;                                             // 0x0028   (0x0004)  
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x0108 (264 bytes) (0x0001F8 - 0x000300) align 16 pad: 0x0000
class UAtmosphericFogComponent : public USceneComponent
{ 
public:
	float                                              SunMultiplier;                                              // 0x01F8   (0x0004)  
	float                                              FogMultiplier;                                              // 0x01FC   (0x0004)  
	float                                              DensityMultiplier;                                          // 0x0200   (0x0004)  
	float                                              DensityOffset;                                              // 0x0204   (0x0004)  
	float                                              DistanceScale;                                              // 0x0208   (0x0004)  
	float                                              AltitudeScale;                                              // 0x020C   (0x0004)  
	float                                              DistanceOffset;                                             // 0x0210   (0x0004)  
	float                                              GroundOffset;                                               // 0x0214   (0x0004)  
	float                                              StartDistance;                                              // 0x0218   (0x0004)  
	float                                              SunDiscScale;                                               // 0x021C   (0x0004)  
	float                                              DefaultBrightness;                                          // 0x0220   (0x0004)  
	FColor                                             DefaultLightColor;                                          // 0x0224   (0x0004)  
	bool                                               bDisableSunDisk : 1;                                        // 0x0228:0 (0x0001)  
	bool                                               bAtmosphereAffectsSunIlluminance : 1;                       // 0x0228:1 (0x0001)  
	bool                                               bDisableGroundScattering : 1;                               // 0x0228:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0229   (0x0003)  MISSED
	FAtmospherePrecomputeParameters                    PrecomputeParams;                                           // 0x022C   (0x002C)  
	class UTexture2D*                                  TransmittanceTexture;                                       // 0x0258   (0x0008)  
	class UTexture2D*                                  IrradianceTexture;                                          // 0x0260   (0x0008)  
	unsigned char                                      UnknownData01_7[0x98];                                      // 0x0268   (0x0098)  MISSED


	/// Functions
	// Function /Script/Engine.AtmosphericFogComponent.StartPrecompute
	// void StartPrecompute();                                                                                                  // [0xbbc500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetSunMultiplier
	// void SetSunMultiplier(float NewSunMultiplier);                                                                           // [0x40122c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetStartDistance
	// void SetStartDistance(float NewStartDistance);                                                                           // [0x4012170] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetPrecomputeParams
	// void SetPrecomputeParams(float DensityHeight, int32_t MaxScatteringOrder, int32_t InscatterAltitudeSampleNum);           // [0x4011e20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetFogMultiplier
	// void SetFogMultiplier(float NewFogMultiplier);                                                                           // [0x4011a20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceScale
	// void SetDistanceScale(float NewDistanceScale);                                                                           // [0x40118d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceOffset
	// void SetDistanceOffset(float NewDistanceOffset);                                                                         // [0x4011850] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityOffset
	// void SetDensityOffset(float NewDensityOffset);                                                                           // [0x40117d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityMultiplier
	// void SetDensityMultiplier(float NewDensityMultiplier);                                                                   // [0x4011750] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultLightColor
	// void SetDefaultLightColor(FLinearColor NewLightColor);                                                                   // [0x40116c0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultBrightness
	// void SetDefaultBrightness(float NewBrightness);                                                                          // [0x4011640] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.SetAltitudeScale
	// void SetAltitudeScale(float NewAltitudeScale);                                                                           // [0x4011350] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableSunDisk
	// void DisableSunDisk(bool NewSunDisk);                                                                                    // [0x4010890] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AtmosphericFogComponent.DisableGroundScattering
	// void DisableGroundScattering(bool NewGroundScattering);                                                                  // [0x4010800] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.AudioBus
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UAudioBus : public UObject
{ 
public:
	EAudioBusChannels                                  AudioBusChannels;                                           // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioQualitySettings
{ 
	FText                                              DisplayName;                                                // 0x0000   (0x0018)  
	int32_t                                            MaxChannels;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundDebugEntry
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundDebugEntry
{ 
	FName                                              DebugName;                                                  // 0x0000   (0x0008)  
	FSoftObjectPath                                    Sound;                                                      // 0x0008   (0x0018)  
};

/// Struct /Script/Engine.DefaultAudioBusSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FDefaultAudioBusSettings
{ 
	FSoftObjectPath                                    AudioBus;                                                   // 0x0000   (0x0018)  
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0160 (352 bytes) (0x000038 - 0x000198) align 8 pad: 0x0000
class UAudioSettings : public UDeveloperSettings
{ 
public:
	FSoftObjectPath                                    DefaultSoundClassName;                                      // 0x0038   (0x0018)  
	FSoftObjectPath                                    DefaultMediaSoundClassName;                                 // 0x0050   (0x0018)  
	FSoftObjectPath                                    DefaultSoundConcurrencyName;                                // 0x0068   (0x0018)  
	FSoftObjectPath                                    DefaultBaseSoundMix;                                        // 0x0080   (0x0018)  
	FSoftObjectPath                                    VoiPSoundClass;                                             // 0x0098   (0x0018)  
	FSoftObjectPath                                    MasterSubmix;                                               // 0x00B0   (0x0018)  
	FSoftObjectPath                                    BaseDefaultSubmix;                                          // 0x00C8   (0x0018)  
	FSoftObjectPath                                    ReverbSubmix;                                               // 0x00E0   (0x0018)  
	FSoftObjectPath                                    EQSubmix;                                                   // 0x00F8   (0x0018)  
	EVoiceSampleRate                                   VoiPSampleRate;                                             // 0x0110   (0x0004)  
	float                                              DefaultReverbSendLevel;                                     // 0x0114   (0x0004)  
	int32_t                                            MaximumConcurrentStreams;                                   // 0x0118   (0x0004)  
	float                                              GlobalMinPitchScale;                                        // 0x011C   (0x0004)  
	float                                              GlobalMaxPitchScale;                                        // 0x0120   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<FAudioQualitySettings>                      QualityLevels;                                              // 0x0128   (0x0010)  
	bool                                               bAllowPlayWhenSilent : 1;                                   // 0x0138:0 (0x0001)  
	bool                                               bDisableMasterEQ : 1;                                       // 0x0138:1 (0x0001)  
	bool                                               bAllowCenterChannel3DPanning : 1;                           // 0x0138:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0139   (0x0003)  MISSED
	uint32_t                                           NumStoppingSources;                                         // 0x013C   (0x0004)  
	EPanningMethod                                     PanningMethod;                                              // 0x0140   (0x0001)  
	EMonoChannelUpmixMethod                            MonoChannelUpmixMethod;                                     // 0x0141   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0142   (0x0006)  MISSED
	FString                                            DialogueFilenameFormat;                                     // 0x0148   (0x0010)  
	TArray<FSoundDebugEntry>                           DebugSounds;                                                // 0x0158   (0x0010)  
	TArray<FDefaultAudioBusSettings>                   DefaultAudioBuses;                                          // 0x0168   (0x0010)  
	class USoundClass*                                 DefaultSoundClass;                                          // 0x0178   (0x0008)  
	class USoundClass*                                 DefaultMediaSoundClass;                                     // 0x0180   (0x0008)  
	class USoundConcurrency*                           DefaultSoundConcurrency;                                    // 0x0188   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0190   (0x0008)  MISSED
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FReverbSettings
{ 
	bool                                               bApplyReverb;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UReverbEffect*                               ReverbEffect;                                               // 0x0008   (0x0008)  
	class USoundEffectSubmixPreset*                    ReverbPluginEffect;                                         // 0x0010   (0x0008)  
	float                                              Volume;                                                     // 0x0018   (0x0004)  
	float                                              FadeTime;                                                   // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FInteriorSettings
{ 
	bool                                               bIsWorldSettings;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ExteriorVolume;                                             // 0x0004   (0x0004)  
	float                                              ExteriorTime;                                               // 0x0008   (0x0004)  
	float                                              ExteriorLPF;                                                // 0x000C   (0x0004)  
	float                                              ExteriorLPFTime;                                            // 0x0010   (0x0004)  
	float                                              InteriorVolume;                                             // 0x0014   (0x0004)  
	float                                              InteriorTime;                                               // 0x0018   (0x0004)  
	float                                              InteriorLPF;                                                // 0x001C   (0x0004)  
	float                                              InteriorLPFTime;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.AudioVolumeSubmixSendSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAudioVolumeSubmixSendSettings
{ 
	EAudioVolumeLocationState                          ListenerLocationState;                                      // 0x0000   (0x0001)  
	EAudioVolumeLocationState                          SourceLocationState;                                        // 0x0001   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FSoundSubmixSendInfo>                       SubmixSends;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AudioVolumeSubmixOverrideSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAudioVolumeSubmixOverrideSettings
{ 
	class USoundSubmix*                                Submix;                                                     // 0x0000   (0x0008)  
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0008   (0x0010)  
	float                                              CrossfadeTime;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0070 (112 bytes) (0x000258 - 0x0002C8) align 8 pad: 0x0000
class AAudioVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0258   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x025C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x025D   (0x0003)  MISSED
	FReverbSettings                                    Settings;                                                   // 0x0260   (0x0020)  
	FInteriorSettings                                  AmbientZoneSettings;                                        // 0x0280   (0x0024)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	TArray<FAudioVolumeSubmixSendSettings>             SubmixSendSettings;                                         // 0x02A8   (0x0010)  
	TArray<FAudioVolumeSubmixOverrideSettings>         SubmixOverrideSettings;                                     // 0x02B8   (0x0010)  


	/// Functions
	// Function /Script/Engine.AudioVolume.SetSubmixSendSettings
	// void SetSubmixSendSettings(TArray<FAudioVolumeSubmixSendSettings>& NewSubmixSendSettings);                               // [0x4015ed0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetSubmixOverrideSettings
	// void SetSubmixOverrideSettings(TArray<FAudioVolumeSubmixOverrideSettings>& NewSubmixOverrideSettings);                   // [0x4015e00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	// void SetReverbSettings(FReverbSettings& NewReverbSettings);                                                              // [0x4015bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetPriority
	// void SetPriority(float NewPriority);                                                                                     // [0x4015b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	// void SetInteriorSettings(FInteriorSettings& NewInteriorSettings);                                                        // [0x4015aa0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.SetEnabled
	// void SetEnabled(bool bNewEnabled);                                                                                       // [0x4015a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x20345e0] Final|Native|Private 
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UAutoDestroySubsystem : public UTickableWorldSubsystem
{ 
public:
	TArray<class AActor*>                              ActorsToPoll;                                               // 0x0040   (0x0010)  


	/// Functions
	// Function /Script/Engine.AutoDestroySubsystem.OnActorEndPlay
	// void OnActorEndPlay(class AActor* Actor, TEnumAsByte<EEndPlayReason> EndPlayReason);                                     // [0x4015870] Final|Native|Private 
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FEditorMapPerformanceTestDefinition
{ 
	FSoftObjectPath                                    PerformanceTestmap;                                         // 0x0000   (0x0018)  
	int32_t                                            TestTimer;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FFilePath
{ 
	FString                                            FilePath;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FImportFactorySettingValues
{ 
	FString                                            SettingName;                                                // 0x0000   (0x0010)  
	FString                                            Value;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FEditorImportWorkflowDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 8 pad: 0x0000
struct FBuildPromotionImportWorkflowSettings
{ 
	FEditorImportWorkflowDefinition                    Diffuse;                                                    // 0x0000   (0x0020)  
	FEditorImportWorkflowDefinition                    Normal;                                                     // 0x0020   (0x0020)  
	FEditorImportWorkflowDefinition                    StaticMesh;                                                 // 0x0040   (0x0020)  
	FEditorImportWorkflowDefinition                    ReimportStaticMesh;                                         // 0x0060   (0x0020)  
	FEditorImportWorkflowDefinition                    BlendShapeMesh;                                             // 0x0080   (0x0020)  
	FEditorImportWorkflowDefinition                    MorphMesh;                                                  // 0x00A0   (0x0020)  
	FEditorImportWorkflowDefinition                    SkeletalMesh;                                               // 0x00C0   (0x0020)  
	FEditorImportWorkflowDefinition                    Animation;                                                  // 0x00E0   (0x0020)  
	FEditorImportWorkflowDefinition                    Sound;                                                      // 0x0100   (0x0020)  
	FEditorImportWorkflowDefinition                    SurroundSound;                                              // 0x0120   (0x0020)  
	TArray<FEditorImportWorkflowDefinition>            OtherAssetsToImport;                                        // 0x0140   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FBuildPromotionOpenAssetSettings
{ 
	FFilePath                                          BlueprintAsset;                                             // 0x0000   (0x0010)  
	FFilePath                                          MaterialAsset;                                              // 0x0010   (0x0010)  
	FFilePath                                          ParticleSystemAsset;                                        // 0x0020   (0x0010)  
	FFilePath                                          SkeletalMeshAsset;                                          // 0x0030   (0x0010)  
	FFilePath                                          StaticMeshAsset;                                            // 0x0040   (0x0010)  
	FFilePath                                          TextureAsset;                                               // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBuildPromotionNewProjectSettings
{ 
	FDirectoryPath                                     NewProjectFolderOverride;                                   // 0x0000   (0x0010)  
	FString                                            NewProjectNameOverride;                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (496 bytes) (0x000000 - 0x0001F0) align 8 pad: 0x0000
struct FBuildPromotionTestSettings
{ 
	FFilePath                                          DefaultStaticMeshAsset;                                     // 0x0000   (0x0010)  
	FBuildPromotionImportWorkflowSettings              ImportWorkflow;                                             // 0x0010   (0x0150)  
	FBuildPromotionOpenAssetSettings                   OpenAssets;                                                 // 0x0160   (0x0060)  
	FBuildPromotionNewProjectSettings                  NewProjectSettings;                                         // 0x01C0   (0x0020)  
	FFilePath                                          SourceControlMaterial;                                      // 0x01E0   (0x0010)  
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMaterialEditorPromotionSettings
{ 
	FFilePath                                          DefaultMaterialAsset;                                       // 0x0000   (0x0010)  
	FFilePath                                          DefaultDiffuseTexture;                                      // 0x0010   (0x0010)  
	FFilePath                                          DefaultNormalTexture;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleEditorPromotionSettings
{ 
	FFilePath                                          DefaultParticleAsset;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FBlueprintEditorPromotionSettings
{ 
	FFilePath                                          FirstMeshPath;                                              // 0x0000   (0x0010)  
	FFilePath                                          SecondMeshPath;                                             // 0x0010   (0x0010)  
	FFilePath                                          DefaultParticleAsset;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FExternalToolDefinition
{ 
	FString                                            ToolName;                                                   // 0x0000   (0x0010)  
	FFilePath                                          ExecutablePath;                                             // 0x0010   (0x0010)  
	FString                                            CommandLineOptions;                                         // 0x0020   (0x0010)  
	FDirectoryPath                                     WorkingDirectory;                                           // 0x0030   (0x0010)  
	FString                                            ScriptExtension;                                            // 0x0040   (0x0010)  
	FDirectoryPath                                     ScriptDirectory;                                            // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FEditorImportExportTestDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	FString                                            ExportFileExtension;                                        // 0x0010   (0x0010)  
	bool                                               bSkipExport;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLaunchOnTestSettings
{ 
	FFilePath                                          LaunchOnTestmap;                                            // 0x0000   (0x0010)  
	FString                                            DeviceID;                                                   // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0318 (792 bytes) (0x000028 - 0x000340) align 8 pad: 0x0000
class UAutomationTestSettings : public UObject
{ 
public:
	TArray<FString>                                    EngineTestModules;                                          // 0x0028   (0x0010)  
	TArray<FString>                                    EditorTestModules;                                          // 0x0038   (0x0010)  
	FSoftObjectPath                                    AutomationTestmap;                                          // 0x0048   (0x0018)  
	TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps;                                  // 0x0060   (0x0010)  
	TArray<FSoftObjectPath>                            AssetsToOpen;                                               // 0x0070   (0x0010)  
	TArray<FString>                                    MapsToPIETest;                                              // 0x0080   (0x0010)  
	FBuildPromotionTestSettings                        BuildPromotionTest;                                         // 0x0090   (0x01F0)  
	FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest;                                // 0x0280   (0x0030)  
	FParticleEditorPromotionSettings                   ParticleEditorPromotionTest;                                // 0x02B0   (0x0010)  
	FBlueprintEditorPromotionSettings                  BlueprintEditorPromotionTest;                               // 0x02C0   (0x0030)  
	TArray<FString>                                    TestLevelFolders;                                           // 0x02F0   (0x0010)  
	TArray<FExternalToolDefinition>                    ExternalTools;                                              // 0x0300   (0x0010)  
	TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions;                                // 0x0310   (0x0010)  
	TArray<FLaunchOnTestSettings>                      LaunchOnSettings;                                           // 0x0320   (0x0010)  
	FIntPoint                                          DefaultScreenshotResolution;                                // 0x0330   (0x0008)  
	float                                              PIETestDuration;                                            // 0x0338   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00B8 (184 bytes) (0x000028 - 0x0000E0) align 8 pad: 0x0000
class UAvoidanceManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	float                                              DefaultTimeToLive;                                          // 0x0030   (0x0004)  
	float                                              LockTimeAfterAvoid;                                         // 0x0034   (0x0004)  
	float                                              LockTimeAfterClean;                                         // 0x0038   (0x0004)  
	float                                              DeltaTimeToPredict;                                         // 0x003C   (0x0004)  
	float                                              ArtificialRadiusExpansion;                                  // 0x0040   (0x0004)  
	float                                              TestHeightDifference;                                       // 0x0044   (0x0004)  
	float                                              HeightCheckMargin;                                          // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x94];                                      // 0x004C   (0x0094)  MISSED


	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	// bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);                           // [0x4015940] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	// int32_t GetObjectCount();                                                                                                // [0x4015840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	// int32_t GetNewAvoidanceUID();                                                                                            // [0x4015810] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	// FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);                                        // [0x4015760] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBandwidthTestItem
{ 
	TArray<char>                                       Kilobyte;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBandwidthTestGenerator
{ 
	TArray<FBandwidthTestItem>                         ReplicatedBuffers;                                          // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x0020 (32 bytes) (0x000220 - 0x000240) align 8 pad: 0x0000
class ABandwidthTestActor : public AActor
{ 
public:
	FBandwidthTestGenerator                            BandwidthGenerator;                                         // 0x0220   (0x0020)  
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0020 (32 bytes) (0x000450 - 0x000470) align 16 pad: 0x0000
class UBillboardComponent : public UPrimitiveComponent
{ 
public:
	class UTexture2D*                                  Sprite;                                                     // 0x0450   (0x0008)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0458:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0459   (0x0003)  MISSED
	float                                              ScreenSize;                                                 // 0x045C   (0x0004)  
	float                                              U;                                                          // 0x0460   (0x0004)  
	float                                              UL;                                                         // 0x0464   (0x0004)  
	float                                              V;                                                          // 0x0468   (0x0004)  
	float                                              VL;                                                         // 0x046C   (0x0004)  


	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	// void SetUV(int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);                                                    // [0x4015fa0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	// void SetSpriteAndUV(class UTexture2D* NewSprite, int32_t NewU, int32_t NewUL, int32_t NewV, int32_t NewVL);              // [0x4015c70] Native|Public|BlueprintCallable 
	// Function /Script/Engine.BillboardComponent.SetSprite
	// void SetSprite(class UTexture2D* NewSprite);                                                                             // [0x31d1370] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlendableInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FBoneNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            ParentIndex;                                                // 0x0008   (0x0004)  
	TEnumAsByte<EBoneTranslationRetargetingMode>       TranslationRetargetingMode;                                 // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FVirtualBone
{ 
	FName                                              SourceBoneName;                                             // 0x0000   (0x0008)  
	FName                                              TargetBoneName;                                             // 0x0008   (0x0008)  
	FName                                              VirtualBoneName;                                            // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FSmartNameContainer
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAnimSlotGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	TArray<FName>                                      SlotNames;                                                  // 0x0008   (0x0010)  
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0368 (872 bytes) (0x000028 - 0x000390) align 8 pad: 0x0000
class USkeleton : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<FBoneNode>                                  BoneTree;                                                   // 0x0038   (0x0010)  
	TArray<FTransform>                                 RefLocalPoses;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_6[0x118];                                     // 0x0058   (0x0118)  MISSED
	FGuid                                              VirtualBoneGuid;                                            // 0x0170   (0x0010)  
	TArray<FVirtualBone>                               VirtualBones;                                               // 0x0180   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0190   (0x0010)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x01A0   (0x0050)  MISSED
	FSmartNameContainer                                SmartNames;                                                 // 0x01F0   (0x0050)  
	unsigned char                                      UnknownData03_6[0x30];                                      // 0x0240   (0x0030)  MISSED
	TArray<class UBlendProfile*>                       BlendProfiles;                                              // 0x0270   (0x0010)  
	TArray<FAnimSlotGroup>                             SlotGroups;                                                 // 0x0280   (0x0010)  
	unsigned char                                      UnknownData04_6[0xF0];                                      // 0x0290   (0x00F0)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0380   (0x0010)  
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FBlendProfileBoneEntry
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              BlendScale;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UBlendProfile : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class USkeleton*                                   OwningSkeleton;                                             // 0x0030   (0x0008)  
	TArray<FBlendProfileBoneEntry>                     ProfileEntries;                                             // 0x0038   (0x0010)  
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ABlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintExtension : public UObject
{ 
public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintMapLibrary.SetMapPropertyByName
	// void SetMapPropertyByName(class UObject* Object, FName PropertyName, TMap<int32_t, int32_t>& Value);                     // [0x401a6f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Values
	// void Map_Values(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Values);                                             // [0x401a5e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Remove
	// bool Map_Remove(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                        // [0x401a430] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Length
	// int32_t Map_Length(TMap<int32_t, int32_t>& TargetMap);                                                                   // [0x401a380] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Keys
	// void Map_Keys(TMap<int32_t, int32_t>& TargetMap, TArray<int32_t>& Keys);                                                 // [0x401a270] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Find
	// bool Map_Find(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                          // [0x4019fd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Contains
	// bool Map_Contains(TMap<int32_t, int32_t>& TargetMap, int32_t& Key);                                                      // [0x4019e20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Clear
	// void Map_Clear(TMap<int32_t, int32_t>& TargetMap);                                                                       // [0x4019d80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Add
	// void Map_Add(TMap<int32_t, int32_t>& TargetMap, int32_t& Key, int32_t& Value);                                           // [0x4019b00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintPathsLibrary.VideoCaptureDir
	// FString VideoCaptureDir();                                                                                               // [0x401ff70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ValidatePath
	// void ValidatePath(FString InPath, bool& bDidSucceed, FText& OutReason);                                                  // [0x401fe00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Split
	// void Split(FString InPath, FString& PathPart, FString& FilenamePart, FString& ExtensionPart);                            // [0x401fc40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SourceConfigDir
	// FString SourceConfigDir();                                                                                               // [0x401ead0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
	// bool ShouldSaveToUserDir();                                                                                              // [0x401fc10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ShaderWorkingDir
	// FString ShaderWorkingDir();                                                                                              // [0x401fb90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SetProjectFilePath
	// void SetProjectFilePath(FString NewGameProjectFilePath);                                                                 // [0x401fb00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPathsLibrary.SetExtension
	// FString SetExtension(FString InPath, FString InNewExtension);                                                            // [0x401f9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ScreenShotDir
	// FString ScreenShotDir();                                                                                                 // [0x401f940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.SandboxesDir
	// FString SandboxesDir();                                                                                                  // [0x401f140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RootDir
	// FString RootDir();                                                                                                       // [0x401f0c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
	// void RemoveDuplicateSlashes(FString InPath, FString& OutPath);                                                           // [0x401efd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectUserDir
	// FString ProjectUserDir();                                                                                                // [0x401ef50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectSavedDir
	// FString ProjectSavedDir();                                                                                               // [0x401eed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPluginsDir
	// FString ProjectPluginsDir();                                                                                             // [0x401ee50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
	// FString ProjectPersistentDownloadDir();                                                                                  // [0x401edd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectModsDir
	// FString ProjectModsDir();                                                                                                // [0x401ed50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectLogDir
	// FString ProjectLogDir();                                                                                                 // [0x401ecd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectIntermediateDir
	// FString ProjectIntermediateDir();                                                                                        // [0x401ec50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectDir
	// FString ProjectDir();                                                                                                    // [0x401ebd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectContentDir
	// FString ProjectContentDir();                                                                                             // [0x401eb50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectConfigDir
	// FString ProjectConfigDir();                                                                                              // [0x401ead0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ProfilingDir
	// FString ProfilingDir();                                                                                                  // [0x401ea50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeFilename
	// void NormalizeFilename(FString InPath, FString& OutPath);                                                                // [0x401e960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeDirectoryName
	// void NormalizeDirectoryName(FString InPath, FString& OutPath);                                                           // [0x401e870] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeValidFileName
	// FString MakeValidFileName(FString inString, FString InReplacementChar);                                                  // [0x401e730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeStandardFilename
	// void MakeStandardFilename(FString InPath, FString& OutPath);                                                             // [0x401e640] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePlatformFilename
	// void MakePlatformFilename(FString InPath, FString& OutPath);                                                             // [0x401e550] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePathRelativeTo
	// bool MakePathRelativeTo(FString InPath, FString InRelativeTo, FString& OutPath);                                         // [0x401e3f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.LaunchDir
	// FString LaunchDir();                                                                                                     // [0x401e370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsSamePath
	// bool IsSamePath(FString PathA, FString PathB);                                                                           // [0x401e280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRestrictedPath
	// bool IsRestrictedPath(FString InPath);                                                                                   // [0x401e1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRelative
	// bool IsRelative(FString InPath);                                                                                         // [0x401e140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsProjectFilePathSet
	// bool IsProjectFilePathSet();                                                                                             // [0x401e110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.IsDrive
	// bool IsDrive(FString InPath);                                                                                            // [0x401e070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
	// bool HasProjectPersistentDownloadDir();                                                                                  // [0x401e040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
	// TArray<FString> GetToolTipLocalizationPaths();                                                                           // [0x401e000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
	// TArray<FString> GetRestrictedFolderNames();                                                                              // [0x401dfc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRelativePathToRoot
	// FString GetRelativePathToRoot();                                                                                         // [0x401df80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
	// TArray<FString> GetPropertyNameLocalizationPaths();                                                                      // [0x401df40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetProjectFilePath
	// FString GetProjectFilePath();                                                                                            // [0x401dec0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPath
	// FString GetPath(FString InPath);                                                                                         // [0x401dde0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
	// FString GetInvalidFileSystemChars();                                                                                     // [0x401dc20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
	// TArray<FString> GetGameLocalizationPaths();                                                                              // [0x401dbe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetExtension
	// FString GetExtension(FString InPath, bool bIncludeDot);                                                                  // [0x401dac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
	// TArray<FString> GetEngineLocalizationPaths();                                                                            // [0x401da80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
	// TArray<FString> GetEditorLocalizationPaths();                                                                            // [0x401da40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetCleanFilename
	// FString GetCleanFilename(FString InPath);                                                                                // [0x401d930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GetBaseFilename
	// FString GetBaseFilename(FString InPath, bool bRemovePath);                                                               // [0x401d810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GeneratedConfigDir
	// FString GeneratedConfigDir();                                                                                            // [0x401d790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameUserDeveloperDir
	// FString GameUserDeveloperDir();                                                                                          // [0x401d710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameSourceDir
	// FString GameSourceDir();                                                                                                 // [0x401d690] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameDevelopersDir
	// FString GameDevelopersDir();                                                                                             // [0x401d610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
	// FString GameAgnosticSavedDir();                                                                                          // [0x401d590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FileExists
	// bool FileExists(FString InPath);                                                                                         // [0x401d4f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.FeaturePackDir
	// FString FeaturePackDir();                                                                                                // [0x401d470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterprisePluginsDir
	// FString EnterprisePluginsDir();                                                                                          // [0x401d3f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
	// FString EnterpriseFeaturePackDir();                                                                                      // [0x401d370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseDir
	// FString EnterpriseDir();                                                                                                 // [0x401d2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
	// FString EngineVersionAgnosticUserDir();                                                                                  // [0x401d270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineUserDir
	// FString EngineUserDir();                                                                                                 // [0x401d1f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSourceDir
	// FString EngineSourceDir();                                                                                               // [0x401d170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSavedDir
	// FString EngineSavedDir();                                                                                                // [0x401d0f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EnginePluginsDir
	// FString EnginePluginsDir();                                                                                              // [0x401d070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineIntermediateDir
	// FString EngineIntermediateDir();                                                                                         // [0x401cff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineDir
	// FString EngineDir();                                                                                                     // [0x401cf70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineContentDir
	// FString EngineContentDir();                                                                                              // [0x401cef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineConfigDir
	// FString EngineConfigDir();                                                                                               // [0x401ce70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DirectoryExists
	// bool DirectoryExists(FString InPath);                                                                                    // [0x401cdd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.DiffDir
	// FString DiffDir();                                                                                                       // [0x401cd50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CreateTempFilename
	// FString CreateTempFilename(FString Path, FString Prefix, FString Extension);                                             // [0x401cbc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertToSandboxPath
	// FString ConvertToSandboxPath(FString InPath, FString InSandboxName);                                                     // [0x401ca80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
	// FString ConvertRelativePathToFull(FString InPath, FString InBasePath);                                                   // [0x401c940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
	// FString ConvertFromSandboxPath(FString InPath, FString InSandboxName);                                                   // [0x401c800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.Combine
	// FString Combine(TArray<FString>& InPaths);                                                                               // [0x401c6f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
	// bool CollapseRelativeDirectories(FString InPath, FString& OutPath);                                                      // [0x401c5f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.CloudDir
	// FString CloudDir();                                                                                                      // [0x401c570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.ChangeExtension
	// FString ChangeExtension(FString InPath, FString InNewExtension);                                                         // [0x401c410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.BugItDir
	// FString BugItDir();                                                                                                      // [0x401c280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationTransientDir
	// FString AutomationTransientDir();                                                                                        // [0x401c200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationLogDir
	// FString AutomationLogDir();                                                                                              // [0x401c180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationDir
	// FString AutomationDir();                                                                                                 // [0x401c100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x00D0 (208 bytes) (0x0001A8 - 0x000278) align 8 pad: 0x0000
class UPlatformGameInstance : public UGameInstance
{ 
public:
	SDK_UNDEFINED(16,119) /* FMulticastInlineDelegate */ __um(ApplicationWillDeactivateDelegate);                  // 0x01A8   (0x0010)  
	SDK_UNDEFINED(16,120) /* FMulticastInlineDelegate */ __um(ApplicationHasReactivatedDelegate);                  // 0x01B8   (0x0010)  
	SDK_UNDEFINED(16,121) /* FMulticastInlineDelegate */ __um(ApplicationWillEnterBackgroundDelegate);             // 0x01C8   (0x0010)  
	SDK_UNDEFINED(16,122) /* FMulticastInlineDelegate */ __um(ApplicationHasEnteredForegroundDelegate);            // 0x01D8   (0x0010)  
	SDK_UNDEFINED(16,123) /* FMulticastInlineDelegate */ __um(ApplicationWillTerminateDelegate);                   // 0x01E8   (0x0010)  
	SDK_UNDEFINED(16,124) /* FMulticastInlineDelegate */ __um(ApplicationShouldUnloadResourcesDelegate);           // 0x01F8   (0x0010)  
	SDK_UNDEFINED(16,125) /* FMulticastInlineDelegate */ __um(ApplicationReceivedStartupArgumentsDelegate);        // 0x0208   (0x0010)  
	SDK_UNDEFINED(16,126) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForRemoteNotificationsDelegate); // 0x0218   (0x0010)  
	SDK_UNDEFINED(16,127) /* FMulticastInlineDelegate */ __um(ApplicationRegisteredForUserNotificationsDelegate);  // 0x0228   (0x0010)  
	SDK_UNDEFINED(16,128) /* FMulticastInlineDelegate */ __um(ApplicationFailedToRegisterForRemoteNotificationsDelegate); // 0x0238   (0x0010)  
	SDK_UNDEFINED(16,129) /* FMulticastInlineDelegate */ __um(ApplicationReceivedRemoteNotificationDelegate);      // 0x0248   (0x0010)  
	SDK_UNDEFINED(16,130) /* FMulticastInlineDelegate */ __um(ApplicationReceivedLocalNotificationDelegate);       // 0x0258   (0x0010)  
	SDK_UNDEFINED(16,131) /* FMulticastInlineDelegate */ __um(ApplicationReceivedScreenOrientationChangedNotificationDelegate); // 0x0268   (0x0010)  
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	// int32_t ScheduleLocalNotificationFromNow(int32_t inSecondsFromNow, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x401f6b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	// void ScheduleLocalNotificationBadgeFromNow(int32_t inSecondsFromNow, FString ActivationEvent);                           // [0x401f5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	// int32_t ScheduleLocalNotificationBadgeAtTime(FDateTime& FireDateTime, bool LocalTime, FString ActivationEvent);          // [0x401f4a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	// int32_t ScheduleLocalNotificationAtTime(FDateTime& FireDateTime, bool LocalTime, FText& Title, FText& Body, FText& Action, FString ActivationEvent); // [0x401f1c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification
	// void GetLaunchNotification(bool& NotificationLaunchedApp, FString& ActivationEvent, int32_t& FireDate);                  // [0x401dca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetDeviceOrientation
	// TEnumAsByte<EScreenOrientation> GetDeviceOrientation();                                                                  // [0x401da10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	// void ClearAllLocalNotifications();                                                                                       // [0x401c550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
	// void CancelLocalNotificationById(int32_t NotificationId);                                                                // [0x401c390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification
	// void CancelLocalNotification(FString ActivationEvent);                                                                   // [0x401c300] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.BlueprintSetLibrary.SetSetPropertyByName
	// void SetSetPropertyByName(class UObject* Object, FName PropertyName, TSet<int32_t>& Value);                              // [0x40229e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Union
	// void Set_Union(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                               // [0x4023770] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_ToArray
	// void Set_ToArray(TSet<int32_t>& A, TArray<int32_t>& Result);                                                             // [0x4023660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_RemoveItems
	// void Set_RemoveItems(TSet<int32_t>& TargetSet, TArray<int32_t>& Items);                                                  // [0x4023550] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Remove
	// bool Set_Remove(TSet<int32_t>& TargetSet, int32_t& Item);                                                                // [0x40233a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Length
	// int32_t Set_Length(TSet<int32_t>& TargetSet);                                                                            // [0x40232f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Intersection
	// void Set_Intersection(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                        // [0x4023170] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Difference
	// void Set_Difference(TSet<int32_t>& A, TSet<int32_t>& B, TSet<int32_t>& Result);                                          // [0x4022ff0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Contains
	// bool Set_Contains(TSet<int32_t>& TargetSet, int32_t& ItemToFind);                                                        // [0x4022e40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Clear
	// void Set_Clear(TSet<int32_t>& TargetSet);                                                                                // [0x4022da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_AddItems
	// void Set_AddItems(TSet<int32_t>& TargetSet, TArray<int32_t>& NewItems);                                                  // [0x4022c90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Add
	// void Set_Add(TSet<int32_t>& TargetSet, int32_t& NewItem);                                                                // [0x4022ae0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FKShapeElem
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	float                                              RestOffset;                                                 // 0x0008   (0x0004)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	bool                                               bContributeToMass : 1;                                      // 0x0018:0 (0x0001)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData02_7[0x16];                                      // 0x001A   (0x0016)  MISSED
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
struct FKSphereElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
struct FKBoxElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              X;                                                          // 0x0048   (0x0004)  
	float                                              Y;                                                          // 0x004C   (0x0004)  
	float                                              Z;                                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
struct FKSphylElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius;                                                     // 0x0048   (0x0004)  
	float                                              Length;                                                     // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 16 pad: 0x0000
struct FKConvexElem : FKShapeElem
{ 
	TArray<FVector>                                    VertexData;                                                 // 0x0030   (0x0010)  
	TArray<int32_t>                                    IndexData;                                                  // 0x0040   (0x0010)  
	FBox                                               ElemBox;                                                    // 0x0050   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0070   (0x0030)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00A0   (0x0010)  MISSED
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0028 (40 bytes) (0x000030 - 0x000058) align 8 pad: 0x0000
struct FKTaperedCapsuleElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius0;                                                    // 0x0048   (0x0004)  
	float                                              Radius1;                                                    // 0x004C   (0x0004)  
	float                                              Length;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FKAggregateGeom
{ 
	TArray<FKSphereElem>                               SphereElems;                                                // 0x0000   (0x0010)  
	TArray<FKBoxElem>                                  BoxElems;                                                   // 0x0010   (0x0010)  
	TArray<FKSphylElem>                                SphylElems;                                                 // 0x0020   (0x0010)  
	TArray<FKConvexElem>                               ConvexElems;                                                // 0x0030   (0x0010)  
	TArray<FKTaperedCapsuleElem>                       TaperedCapsuleElems;                                        // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.BodySetup
/// Size: 0x0258 (600 bytes) (0x000048 - 0x0002A0) align 8 pad: 0x0000
class UBodySetup : public UBodySetupCore
{ 
public:
	FKAggregateGeom                                    AggGeom;                                                    // 0x0048   (0x0058)  
	bool                                               bAlwaysFullAnimWeight : 1;                                  // 0x00A0:0 (0x0001)  
	bool                                               bConsiderForBounds : 1;                                     // 0x00A0:1 (0x0001)  
	bool                                               bMeshCollideAll : 1;                                        // 0x00A0:2 (0x0001)  
	bool                                               bDoubleSidedGeometry : 1;                                   // 0x00A0:3 (0x0001)  
	bool                                               bGenerateNonMirroredCollision : 1;                          // 0x00A0:4 (0x0001)  
	bool                                               bSharedCookedData : 1;                                      // 0x00A0:5 (0x0001)  
	bool                                               bGenerateMirroredCollision : 1;                             // 0x00A0:6 (0x0001)  
	bool                                               bSupportUVsAndFaceRemap : 1;                                // 0x00A0:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00A1   (0x0007)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x00A8   (0x0008)  
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData01_6[0x68];                                      // 0x00C0   (0x0068)  MISSED
	FBodyInstance                                      DefaultInstance;                                            // 0x0128   (0x0158)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0280   (0x0008)  MISSED
	FVector                                            BuildScale3D;                                               // 0x0288   (0x000C)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0294   (0x000C)  MISSED
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FBranchFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	int32_t                                            BlendDepth;                                                 // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FInputBlendPose
{ 
	TArray<FBranchFilter>                              BranchFilters;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UBoneMaskFilter : public UObject
{ 
public:
	TArray<FInputBlendPose>                            BlendPoses;                                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBookmarkBase : public UObject
{ 
public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UBookMark : public UBookmarkBase
{ 
public:
	FVector                                            Location;                                                   // 0x0028   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0034   (0x000C)  
	TArray<FString>                                    HiddenLevels;                                               // 0x0040   (0x0010)  
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UBookMark2D : public UBookmarkBase
{ 
public:
	float                                              Zoom2D;                                                     // 0x0028   (0x0004)  
	FIntPoint                                          Location;                                                   // 0x002C   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.BoundsCopyComponent
/// Size: 0x0070 (112 bytes) (0x0000B0 - 0x000120) align 16 pad: 0x0000
class UBoundsCopyComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(40,132) /* TWeakObjectPtr<AActor*> */ __um(BoundsSourceActor);                                   // 0x00B0   (0x0028)  
	bool                                               bUseCollidingComponentsForSourceBounds;                     // 0x00D8   (0x0001)  
	bool                                               bKeepOwnBoundsScale;                                        // 0x00D9   (0x0001)  
	bool                                               bUseCollidingComponentsForOwnBounds;                        // 0x00DA   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x00DB   (0x0005)  MISSED
	FTransform                                         PostTransform;                                              // 0x00E0   (0x0030)  
	bool                                               bCopyXBounds;                                               // 0x0110   (0x0001)  
	bool                                               bCopyYBounds;                                               // 0x0111   (0x0001)  
	bool                                               bCopyZBounds;                                               // 0x0112   (0x0001)  
	unsigned char                                      UnknownData01_7[0xD];                                       // 0x0113   (0x000D)  MISSED
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AReflectionCapture : public AActor
{ 
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                           // 0x0220   (0x0008)  
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x0000 (0 bytes) (0x000228 - 0x000228) align 8 pad: 0x0000
class ABoxReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x0078 (120 bytes) (0x0001F8 - 0x000270) align 16 pad: 0x0000
class UReflectionCaptureComponent : public USceneComponent
{ 
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                     // 0x01F8   (0x0008)  
	EReflectionSourceType                              ReflectionSourceType;                                       // 0x0200   (0x0001)  
	EMobileReflectionCompression                       MobileReflectionCompression;                                // 0x0201   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0202   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0208   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0210   (0x0004)  
	float                                              Brightness;                                                 // 0x0214   (0x0004)  
	bool                                               bModifyMaxValueRGBM;                                        // 0x0218   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	float                                              MaxValueRGBM;                                               // 0x021C   (0x0004)  
	FVector                                            CaptureOffset;                                              // 0x0220   (0x000C)  
	FGuid                                              MapBuildDataId;                                             // 0x022C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x14];                                      // 0x023C   (0x0014)  MISSED
	class UTextureCube*                                CachedEncodedHDRCubemap;                                    // 0x0250   (0x0008)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0258   (0x0018)  MISSED
};

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x0020 (32 bytes) (0x000270 - 0x000290) align 16 pad: 0x0000
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              BoxTransitionDistance;                                      // 0x0270   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	class UBoxComponent*                               PreviewInfluenceBox;                                        // 0x0278   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x0280   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UBreakpoint : public UObject
{ 
public:
	bool                                               bEnabled : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	class UEdGraphNode*                                Node;                                                       // 0x0030   (0x0008)  
	bool                                               bStepOnce : 1;                                              // 0x0038:0 (0x0001)  
	bool                                               bStepOnce_WasPreviouslyDisabled : 1;                        // 0x0038:1 (0x0001)  
	bool                                               bStepOnce_RemoveAfterHit : 1;                               // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBuilderPoly
{ 
	TArray<int32_t>                                    VertexIndices;                                              // 0x0000   (0x0010)  
	int32_t                                            Direction;                                                  // 0x0010   (0x0004)  
	FName                                              ItemName;                                                   // 0x0014   (0x0008)  
	int32_t                                            PolyFlags;                                                  // 0x001C   (0x0004)  
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000080) align 8 pad: 0x0000
class UBrushBuilder : public UObject
{ 
public:
	FString                                            BitmapFilename;                                             // 0x0028   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0038   (0x0010)  
	bool                                               NotifyBadParams : 1;                                        // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<FVector>                                    Vertices;                                                   // 0x0050   (0x0010)  
	TArray<FBuilderPoly>                               Polys;                                                      // 0x0060   (0x0010)  
	FName                                              Layer;                                                      // 0x0070   (0x0008)  
	bool                                               MergeCoplanars : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0010 (16 bytes) (0x000450 - 0x000460) align 16 pad: 0x0000
class UBrushComponent : public UPrimitiveComponent
{ 
public:
	class UModel*                                      Brush;                                                      // 0x0450   (0x0008)  
	class UBodySetup*                                  BrushBodySetup;                                             // 0x0458   (0x0008)  
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ABrushShape : public ABrush
{ 
public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x0278 (632 bytes) (0x000028 - 0x0002A0) align 8 pad: 0x0000
class UButtonStyleAsset : public UObject
{ 
public:
	FButtonStyle                                       ButtonStyle;                                                // 0x0028   (0x0278)  
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x05A8 (1448 bytes) (0x000028 - 0x0005D0) align 16 pad: 0x0000
class UCameraAnim : public UObject
{ 
public:
	class UInterpGroup*                                CameraInterpGroup;                                          // 0x0028   (0x0008)  
	float                                              AnimLength;                                                 // 0x0030   (0x0004)  
	FBox                                               BoundingBox;                                                // 0x0034   (0x001C)  
	bool                                               bRelativeToInitialTransform : 1;                            // 0x0050:0 (0x0001)  
	bool                                               bRelativeToInitialFOV : 1;                                  // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              BaseFOV;                                                    // 0x0054   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0058   (0x0008)  MISSED
	FPostProcessSettings                               BasePostProcessSettings;                                    // 0x0060   (0x0560)  
	float                                              BasePostProcessBlendWeight;                                 // 0x05C0   (0x0004)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x05C4   (0x000C)  MISSED
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x00E8 (232 bytes) (0x000028 - 0x000110) align 16 pad: 0x0000
class UCameraAnimInst : public UObject
{ 
public:
	class UCameraAnim*                                 CamAnim;                                                    // 0x0028   (0x0008)  
	class UInterpGroupInst*                            InterpGroupInst;                                            // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0038   (0x0018)  MISSED
	float                                              PlayRate;                                                   // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x14];                                      // 0x0054   (0x0014)  MISSED
	class UInterpTrackMove*                            MoveTrack;                                                  // 0x0068   (0x0008)  
	class UInterpTrackInstMove*                        MoveInst;                                                   // 0x0070   (0x0008)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x0078   (0x0001)  
	unsigned char                                      UnknownData02_7[0x97];                                      // 0x0079   (0x0097)  MISSED


	/// Functions
	// Function /Script/Engine.CameraAnimInst.Stop
	// void Stop(bool bImmediate);                                                                                              // [0x4028620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetScale
	// void SetScale(float NewDuration);                                                                                        // [0x4028370] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraAnimInst.SetDuration
	// void SetDuration(float NewDuration);                                                                                     // [0x4027fe0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ACameraBlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ACameraShakeSourceActor : public AActor
{ 
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                 // 0x0220   (0x0008)  
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0028 (40 bytes) (0x0001F8 - 0x000220) align 16 pad: 0x0000
class UCameraShakeSourceComponent : public USceneComponent
{ 
public:
	ECameraShakeAttenuation                            Attenuation;                                                // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01F9   (0x0003)  MISSED
	float                                              InnerAttenuationRadius;                                     // 0x01FC   (0x0004)  
	float                                              OuterAttenuationRadius;                                     // 0x0200   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0204   (0x0004)  MISSED
	class UClass*                                      CameraShake;                                                // 0x0208   (0x0008)  
	bool                                               bAutoStart;                                                 // 0x0210   (0x0001)  
	unsigned char                                      UnknownData02_7[0xF];                                       // 0x0211   (0x000F)  MISSED


	/// Functions
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
	// void StopAllCameraShakesOfType(class UClass* InCameraShake, bool bImmediately);                                          // [0x4028740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakes
	// void StopAllCameraShakes(bool bImmediately);                                                                             // [0x40286b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.StartCameraShake
	// void StartCameraShake(class UClass* InCameraShake, float Scale, ECameraShakePlaySpace PlaySpace, FRotator UserPlaySpaceRot); // [0x40284a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.Start
	// void Start();                                                                                                            // [0x4028480] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CameraShakeSourceComponent.GetAttenuationFactor
	// float GetAttenuationFactor(FVector& Location);                                                                           // [0x4026350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Canvas
/// Size: 0x02A8 (680 bytes) (0x000028 - 0x0002D0) align 16 pad: 0x0000
class UCanvas : public UObject
{ 
public:
	float                                              OrgX;                                                       // 0x0028   (0x0004)  
	float                                              OrgY;                                                       // 0x002C   (0x0004)  
	float                                              ClipX;                                                      // 0x0030   (0x0004)  
	float                                              ClipY;                                                      // 0x0034   (0x0004)  
	FColor                                             DrawColor;                                                  // 0x0038   (0x0004)  
	bool                                               bCenterX : 1;                                               // 0x003C:0 (0x0001)  
	bool                                               bCenterY : 1;                                               // 0x003C:1 (0x0001)  
	bool                                               bNoSmooth : 1;                                              // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	FPlane                                             ColorModulate;                                              // 0x0050   (0x0010)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x0060   (0x0008)  
	class UTexture2D*                                  GradientTexture0;                                           // 0x0068   (0x0008)  
	class UReporterGraph*                              ReporterGraph;                                              // 0x0070   (0x0008)  
	unsigned char                                      UnknownData02_7[0x258];                                     // 0x0078   (0x0258)  MISSED


	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	// FVector2D K2_TextSize(class UFont* RenderFont, FString RenderText, FVector2D Scale);                                     // [0x4027c70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_StrLen
	// FVector2D K2_StrLen(class UFont* RenderFont, FString RenderText);                                                        // [0x4027b80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Project
	// FVector K2_Project(FVector WorldLocation);                                                                               // [0x4027ad0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	// void K2_DrawTriangle(class UTexture* RenderTexture, TArray<FCanvasUVTri> Triangles);                                     // [0x40279a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	// void K2_DrawTexture(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, FVector2D PivotPoint); // [0x40276f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawText
	// void K2_DrawText(class UFont* RenderFont, FString RenderText, FVector2D ScreenPosition, FVector2D Scale, FLinearColor RenderColor, float Kerning, FLinearColor ShadowColor, FVector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, FLinearColor OutlineColor); // [0x4027330] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	// void K2_DrawPolygon(class UTexture* RenderTexture, FVector2D ScreenPosition, FVector2D Radius, int32_t NumberOfSides, FLinearColor RenderColor); // [0x4027180] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	// void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<FCanvasUVTri> Triangles);                  // [0x4027050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	// void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, float Rotation, FVector2D PivotPoint); // [0x4026e10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawLine
	// void K2_DrawLine(FVector2D ScreenPositionA, FVector2D ScreenPositionB, float Thickness, FLinearColor RenderColor);       // [0x4026cb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBox
	// void K2_DrawBox(FVector2D ScreenPosition, FVector2D ScreenSize, float Thickness, FLinearColor RenderColor);              // [0x4026b50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	// void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, FVector2D ScreenPosition, FVector2D ScreenSize, FVector2D CoordinatePosition, FVector2D CoordinateSize, FLinearColor RenderColor, FVector2D BorderScale, FVector2D BackgroundScale, float Rotation, FVector2D PivotPoint, FVector2D CornerSize); // [0x40266c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Canvas.K2_Deproject
	// void K2_Deproject(FVector2D ScreenPosition, FVector& WorldOrigin, FVector& WorldDirection);                              // [0x40265a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x0008 (8 bytes) (0x000178 - 0x000180) align 16 pad: 0x0000
class UTextureRenderTarget : public UTexture
{ 
public:
	float                                              TargetGamma;                                                // 0x0178   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x017C   (0x0004)  MISSED
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0030 (48 bytes) (0x000180 - 0x0001B0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0180   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0184   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x0188   (0x0010)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0198   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0199   (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x019A:0 (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x019A:1 (0x0001)  
	bool                                               bGPUSharedFlag : 1;                                         // 0x019A:2 (0x0001)  
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                         // 0x019B   (0x0001)  
	bool                                               bAutoGenerateMips : 1;                                      // 0x019C:0 (0x0001)  
	TEnumAsByte<TextureFilter>                         MipsSamplerFilter;                                          // 0x019D   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressU;                                               // 0x019E   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressV;                                               // 0x019F   (0x0001)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x01A1   (0x0007)  MISSED
};
#pragma pack(pop)

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0028 (40 bytes) (0x0001A8 - 0x0001D0) align 16 pad: 0x0000
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
public:
	SDK_UNDEFINED(16,133) /* FMulticastInlineDelegate */ __um(OnCanvasRenderTargetUpdate);                         // 0x01A8   (0x0010)  
	SDK_UNDEFINED(8,134) /* TWeakObjectPtr<UWorld*> */ __um(World);                                                // 0x01B8   (0x0008)  
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                    // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x01C1   (0x000F)  MISSED


	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	// void UpdateResource();                                                                                                   // [0x3714490] Native|Public|BlueprintCallable 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	// void ReceiveUpdate(class UCanvas* Canvas, int32_t Width, int32_t Height);                                                // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	// void GetSize(int32_t& Width, int32_t& Height);                                                                           // [0x402cca0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	// class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int32_t Width, int32_t Height); // [0x402c6c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0008 (8 bytes) (0x000468 - 0x000470) align 16 pad: 0x0000
class UCapsuleComponent : public UShapeComponent
{ 
public:
	float                                              CapsuleHalfHeight;                                          // 0x0468   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x046C   (0x0004)  


	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	// void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);                                           // [0x402ecc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	// void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);                                                               // [0x402ebe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	// void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);                                                       // [0x402eb00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	// void GetUnscaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                  // [0x402cee0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	// void GetUnscaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                     // [0x402cdf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	// float GetUnscaledCapsuleRadius();                                                                                        // [0x402cdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	// float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();                                                                  // [0x402cda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	// float GetUnscaledCapsuleHalfHeight();                                                                                    // [0x402cd80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x402cc60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	// void GetScaledCapsuleSize_WithoutHemisphere(float& OutRadius, float& OutHalfHeightWithoutHemisphere);                    // [0x402cb40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	// void GetScaledCapsuleSize(float& OutRadius, float& OutHalfHeight);                                                       // [0x402ca30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	// float GetScaledCapsuleRadius();                                                                                          // [0x402c9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	// float GetScaledCapsuleHalfHeight_WithoutHemisphere();                                                                    // [0x402c9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	// float GetScaledCapsuleHalfHeight();                                                                                      // [0x402c970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000088) align 8 pad: 0x0000
class UCheatManager : public UObject
{ 
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                   // 0x0028   (0x0008)  
	class UClass*                                      DebugCameraControllerClass;                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x40];                                      // 0x0038   (0x0040)  MISSED
	TArray<class UCheatManagerExtension*>              CheatManagerExtensions;                                     // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	// void Walk();                                                                                                             // [0x1822d50] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.ViewSelf
	// void ViewSelf();                                                                                                         // [0x4034fe0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewPlayer
	// void ViewPlayer(FString S);                                                                                              // [0x4034f40] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewClass
	// void ViewClass(class UClass* DesiredClass);                                                                              // [0x4034eb0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ViewActor
	// void ViewActor(FName ActorName);                                                                                         // [0x4034e20] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	// void UpdateSafeArea();                                                                                                   // [0x4034e00] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	// void ToggleServerStatReplicatorUpdateStatNet();                                                                          // [0x4034de0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	// void ToggleServerStatReplicatorClientOverwrite();                                                                        // [0x4034dc0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	// void ToggleDebugCamera();                                                                                                // [0x4034da0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ToggleAILogging
	// void ToggleAILogging();                                                                                                  // [0x4034d80] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	// void TestCollisionDistance();                                                                                            // [0x4034d60] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.Teleport
	// void Teleport();                                                                                                         // [0x1150060] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Summon
	// void Summon(FString ClassName);                                                                                          // [0x4034cc0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelOut
	// void StreamLevelOut(FName PackageName);                                                                                  // [0x4034c30] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.StreamLevelIn
	// void StreamLevelIn(FName PackageName);                                                                                   // [0x4034ba0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	// void SpawnServerStatReplicator();                                                                                        // [0x4034b80] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.Slomo
	// void Slomo(float NewTimeDilation);                                                                                       // [0x4034af0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	// void SetWorldOrigin();                                                                                                   // [0x4034ad0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	// void SetMouseSensitivityToDefault();                                                                                     // [0x2020d10] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	// void ServerToggleAILogging();                                                                                            // [0x40349f0] Net|NetReliableNative|Event|Public|NetServer|NetValidate 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	// void ReceiveInitCheatManager();                                                                                          // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	// void ReceiveEndPlay();                                                                                                   // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.CheatManager.PlayersOnly
	// void PlayersOnly();                                                                                                      // [0x16fc850] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	// void OnlyLoadLevel(FName PackageName);                                                                                   // [0x4034960] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.LogLoc
	// void LogLoc();                                                                                                           // [0x4034940] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.InvertMouse
	// void InvertMouse();                                                                                                      // [0x4034920] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.God
	// void God();                                                                                                              // [0x4026330] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Ghost
	// void Ghost();                                                                                                            // [0x4034900] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FreezeFrame
	// void FreezeFrame(float Delay);                                                                                           // [0x4034870] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.Fly
	// void Fly();                                                                                                              // [0x20cbd90] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.FlushLog
	// void FlushLog();                                                                                                         // [0x2020cd0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	// void EnableDebugCamera();                                                                                                // [0x2030270] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	// void DumpVoiceMutingState();                                                                                             // [0x4034850] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpPartyState
	// void DumpPartyState();                                                                                                   // [0x4034830] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	// void DumpOnlineSessionState();                                                                                           // [0x4034810] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DumpChatState
	// void DumpChatState();                                                                                                    // [0x40347f0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	// void DisableDebugCamera();                                                                                               // [0x20302f0] Native|Protected|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyTarget
	// void DestroyTarget();                                                                                                    // [0x20cc300] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	// void DestroyServerStatReplicator();                                                                                      // [0x40347d0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.DestroyPawns
	// void DestroyPawns(class UClass* aClass);                                                                                 // [0x3724160] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	// void DestroyAllPawnsExceptTarget();                                                                                      // [0x20cb070] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DestroyAll
	// void DestroyAll(class UClass* aClass);                                                                                   // [0x1822d70] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	// void DebugCapsuleSweepSize(float HalfHeight, float Radius);                                                              // [0x4034700] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	// void DebugCapsuleSweepPawn();                                                                                            // [0x40346e0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	// void DebugCapsuleSweepComplex(bool bTraceComplex);                                                                       // [0x4034650] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	// void DebugCapsuleSweepClear();                                                                                           // [0x4034630] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	// void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);                                                   // [0x40345b0] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	// void DebugCapsuleSweepCapture();                                                                                         // [0x4034590] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	// void DebugCapsuleSweep();                                                                                                // [0x4034570] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.DamageTarget
	// void DamageTarget(float DamageAmount);                                                                                   // [0x40344e0] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.CheatScript
	// void CheatScript(FString ScriptName);                                                                                    // [0x40343f0] Final|Exec|Native|Public 
	// Function /Script/Engine.CheatManager.ChangeSize
	// void ChangeSize(float F);                                                                                                // [0x3868500] Exec|Native|Public|BlueprintCallable 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	// void BugItStringCreator(FVector ViewLocation, FRotator ViewRotation, FString& GoString, FString& LocString);             // [0x4034230] Exec|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/Engine.CheatManager.BugItGo
	// void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);                                             // [0x4034040] Exec|Native|Public   
	// Function /Script/Engine.CheatManager.BugIt
	// void BugIt(FString ScreenShotDescription);                                                                               // [0x4033fa0] Exec|Native|Public   
};

/// Class /Script/Engine.CheatManagerExtension
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UCheatManagerExtension : public UObject
{ 
public:
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x0580 (1408 bytes) (0x000028 - 0x0005A8) align 8 pad: 0x0000
class UCheckBoxStyleAsset : public UObject
{ 
public:
	FCheckBoxStyle                                     CheckBoxStyle;                                              // 0x0028   (0x0580)  
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x0038 (56 bytes) (0x0001F8 - 0x000230) align 16 pad: 0x0000
class UChildActorComponent : public USceneComponent
{ 
public:
	class UClass*                                      ChildActorClass;                                            // 0x01F8   (0x0008)  
	class AActor*                                      ChildActor;                                                 // 0x0200   (0x0008)  
	class AActor*                                      ChildActorTemplate;                                         // 0x0208   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0210   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	// void SetChildActorClass(class UClass* InClass);                                                                          // [0x4034a40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x0008 (8 bytes) (0x001BA8 - 0x001BB0) align 8 pad: 0x0000
class UChildConnection : public UNetConnection
{ 
public:
	class UNetConnection*                              Parent;                                                     // 0x1BA8   (0x0008)  
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDelegateArray
{ 
	SDK_UNDEFINED(16,135) /* TArray<FDelegateProperty> */ __um(Delegates);                                         // 0x0000   (0x0010)  
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UPlatformInterfaceBase : public UObject
{ 
public:
	TArray<FDelegateArray>                             AllDelegates;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FString>                                    LocalCloudFiles;                                            // 0x0038   (0x0010)  
	bool                                               bSuppressDelegateCalls : 1;                                 // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FCollisionResponseTemplate
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0009   (0x0001)  MISSED
	bool                                               bCanModify;                                                 // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x21];                                      // 0x000B   (0x0021)  MISSED
	FName                                              ObjectTypeName;                                             // 0x002C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0038   (0x0010)  
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FCustomChannelSetup
{ 
	TEnumAsByte<ECollisionChannel>                     Channel;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    DefaultResponse;                                            // 0x0001   (0x0001)  
	bool                                               bTraceType;                                                 // 0x0002   (0x0001)  
	bool                                               bStaticObject;                                              // 0x0003   (0x0001)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCustomProfile
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FRedirector
{ 
	FName                                              OldName;                                                    // 0x0000   (0x0008)  
	FName                                              NewName;                                                    // 0x0008   (0x0008)  
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0138 (312 bytes) (0x000038 - 0x000170) align 8 pad: 0x0000
class UCollisionProfile : public UDeveloperSettings
{ 
public:
	TArray<FCollisionResponseTemplate>                 Profiles;                                                   // 0x0038   (0x0010)  
	TArray<FCustomChannelSetup>                        DefaultChannelResponses;                                    // 0x0048   (0x0010)  
	TArray<FCustomProfile>                             EditProfiles;                                               // 0x0058   (0x0010)  
	TArray<FRedirector>                                ProfileRedirects;                                           // 0x0068   (0x0010)  
	TArray<FRedirector>                                CollisionChannelRedirects;                                  // 0x0078   (0x0010)  
	unsigned char                                      UnknownData00_7[0xE8];                                      // 0x0088   (0x00E8)  MISSED
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FBlueprintComponentDelegateBinding
{ 
	FName                                              ComponentPropertyName;                                      // 0x0000   (0x0008)  
	FName                                              DelegatePropertyName;                                       // 0x0008   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ActorComponentInstanceDataTransientOuter
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UActorComponentInstanceDataTransientOuter : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveTable
/// Size: 0x0078 (120 bytes) (0x000028 - 0x0000A0) align 8 pad: 0x0000
class UCurveTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0028   (0x0078)  MISSED
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x0028 (40 bytes) (0x0000A0 - 0x0000C8) align 8 pad: 0x0000
class UCompositeCurveTable : public UCurveTable
{ 
public:
	TArray<class UCurveTable*>                         ParentTables;                                               // 0x00A0   (0x0010)  
	TArray<class UCurveTable*>                         OldParentTables;                                            // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/Engine.DataTable
/// Size: 0x0088 (136 bytes) (0x000028 - 0x0000B0) align 8 pad: 0x0000
class UDataTable : public UObject
{ 
public:
	class UScriptStruct*                               RowStruct;                                                  // 0x0028   (0x0008)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0030   (0x0050)  MISSED
	bool                                               bStripFromClientBuilds : 1;                                 // 0x0080:0 (0x0001)  
	bool                                               bIgnoreExtraFields : 1;                                     // 0x0080:1 (0x0001)  
	bool                                               bIgnoreMissingFields : 1;                                   // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0081   (0x0007)  MISSED
	FString                                            ImportKeyField;                                             // 0x0088   (0x0010)  
	unsigned char                                      UnknownData02_7[0x18];                                      // 0x0098   (0x0018)  MISSED
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0028 (40 bytes) (0x0000B0 - 0x0000D8) align 8 pad: 0x0000
class UCompositeDataTable : public UDataTable
{ 
public:
	TArray<class UDataTable*>                          ParentTables;                                               // 0x00B0   (0x0010)  
	TArray<class UDataTable*>                          OldParentTables;                                            // 0x00C0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00D0   (0x0008)  MISSED
};

/// Class /Script/Engine.Console
/// Size: 0x0108 (264 bytes) (0x000028 - 0x000130) align 8 pad: 0x0000
class UConsole : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	class ULocalPlayer*                                ConsoleTargetPlayer;                                        // 0x0038   (0x0008)  
	class UTexture2D*                                  DefaultTexture_Black;                                       // 0x0040   (0x0008)  
	class UTexture2D*                                  DefaultTexture_White;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0050   (0x0018)  MISSED
	TArray<FString>                                    HistoryBuffer;                                              // 0x0068   (0x0010)  
	unsigned char                                      UnknownData02_7[0xB8];                                      // 0x0078   (0x00B8)  MISSED
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0018 (24 bytes) (0x000068 - 0x000080) align 8 pad: 0x0000
class UControlChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0068   (0x0018)  MISSED
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UStreamingSettings : public UDeveloperSettings
{ 
public:
	bool                                               AsyncLoadingThreadEnabled : 1;                              // 0x0038:0 (0x0001)  
	bool                                               WarnIfTimeLimitExceeded : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              TimeLimitExceededMultiplier;                                // 0x003C   (0x0004)  
	float                                              TimeLimitExceededMinTime;                                   // 0x0040   (0x0004)  
	int32_t                                            MinBulkDataSizeForAsyncLoading;                             // 0x0044   (0x0004)  
	bool                                               UseBackgroundLevelStreaming : 1;                            // 0x0048:0 (0x0001)  
	bool                                               AsyncLoadingUseFullTimeLimit : 1;                           // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AsyncLoadingTimeLimit;                                      // 0x004C   (0x0004)  
	float                                              PriorityAsyncLoadingExtraTime;                              // 0x0050   (0x0004)  
	float                                              LevelStreamingActorsUpdateTimeLimit;                        // 0x0054   (0x0004)  
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;                // 0x0058   (0x0004)  
	int32_t                                            LevelStreamingComponentsRegistrationGranularity;            // 0x005C   (0x0004)  
	float                                              LevelStreamingUnregisterComponentsTimeLimit;                // 0x0060   (0x0004)  
	int32_t                                            LevelStreamingComponentsUnregistrationGranularity;          // 0x0064   (0x0004)  
	bool                                               FlushStreamingOnExit : 1;                                   // 0x0068:0 (0x0001)  
	bool                                               EventDrivenLoaderEnabled : 1;                               // 0x0068:1 (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                       // 0x0038   (0x0004)  
	bool                                               FlushStreamingOnGC : 1;                                     // 0x003C:0 (0x0001)  
	bool                                               AllowParallelGC : 1;                                        // 0x003C:1 (0x0001)  
	bool                                               IncrementalBeginDestroyEnabled : 1;                         // 0x003C:2 (0x0001)  
	bool                                               MultithreadedDestructionEnabled : 1;                        // 0x003C:3 (0x0001)  
	bool                                               CreateGCClusters : 1;                                       // 0x003C:4 (0x0001)  
	bool                                               AssetClusteringEnabled : 1;                                 // 0x003C:5 (0x0001)  
	bool                                               ActorClusteringEnabled : 1;                                 // 0x003C:6 (0x0001)  
	bool                                               BlueprintClusteringEnabled : 1;                             // 0x003C:7 (0x0001)  
	bool                                               UseDisregardForGCOnDedicatedServers : 1;                    // 0x003D:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x003E   (0x0002)  MISSED
	int32_t                                            MinGCClusterSize;                                           // 0x0040   (0x0004)  
	int32_t                                            NumRetriesBeforeForcingGC;                                  // 0x0044   (0x0004)  
	int32_t                                            MaxObjectsNotConsideredByGC;                                // 0x0048   (0x0004)  
	int32_t                                            SizeOfPermanentObjectPool;                                  // 0x004C   (0x0004)  
	int32_t                                            MaxObjectsInGame;                                           // 0x0050   (0x0004)  
	int32_t                                            MaxObjectsInEditor;                                         // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCullDistanceSizePair
{ 
	float                                              Size;                                                       // 0x0000   (0x0004)  
	float                                              CullDistance;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0018 (24 bytes) (0x000258 - 0x000270) align 8 pad: 0x0000
class ACullDistanceVolume : public AVolume
{ 
public:
	TArray<FCullDistanceSizePair>                      CullDistances;                                              // 0x0258   (0x0010)  
	bool                                               bEnabled : 1;                                               // 0x0268:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0269   (0x0007)  MISSED
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UCurveBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.CurveBase.GetValueRange
	// void GetValueRange(float& MinValue, float& MaxValue);                                                                    // [0x4037010] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveBase.GetTimeRange
	// void GetTimeRange(float& MinTime, float& MaxTime);                                                                       // [0x4036f30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UCurveEdPresetCurve : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x0088 (136 bytes) (0x000030 - 0x0000B8) align 8 pad: 0x0000
class UCurveFloat : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurve;                                                 // 0x0030   (0x0080)  
	bool                                               bIsEventCurve;                                              // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00B1   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	// float GetFloatValue(float InTime);                                                                                       // [0x403ca80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0220 (544 bytes) (0x000030 - 0x000250) align 8 pad: 0x0000
class UCurveLinearColor : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[4];                                             // 0x0030   (0x0200)  
	float                                              AdjustHue;                                                  // 0x0230   (0x0004)  
	float                                              AdjustSaturation;                                           // 0x0234   (0x0004)  
	float                                              AdjustBrightness;                                           // 0x0238   (0x0004)  
	float                                              AdjustBrightnessCurve;                                      // 0x023C   (0x0004)  
	float                                              AdjustVibrance;                                             // 0x0240   (0x0004)  
	float                                              AdjustMinAlpha;                                             // 0x0244   (0x0004)  
	float                                              AdjustMaxAlpha;                                             // 0x0248   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x024C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetUnadjustedLinearColorValue
	// FLinearColor GetUnadjustedLinearColorValue(float InTime);                                                                // [0x403cbf0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	// FLinearColor GetLinearColorValue(float InTime);                                                                          // [0x403cb20] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.CurveLinearColor.GetClampedLinearColorValue
	// FLinearColor GetClampedLinearColorValue(float InTime);                                                                   // [0x403c1e0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0028 (40 bytes) (0x000178 - 0x0001A0) align 16 pad: 0x0000
class UTexture2D : public UTexture
{ 
public:
	int32_t                                            LevelIndex;                                                 // 0x0178   (0x0004)  
	int32_t                                            FirstResourceMemMip;                                        // 0x017C   (0x0004)  
	bool                                               bTemporarilyDisableStreaming : 1;                           // 0x0180:0 (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0181   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0182   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0183   (0x0001)  MISSED
	FIntPoint                                          ImportedSize;                                               // 0x0184   (0x0008)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x018C   (0x0014)  MISSED


	/// Functions
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	// int32_t Blueprint_GetSizeY();                                                                                            // [0x4161320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	// int32_t Blueprint_GetSizeX();                                                                                            // [0x41612f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0020 (32 bytes) (0x0001A0 - 0x0001C0) align 16 pad: 0x0000
class UCurveLinearColorAtlas : public UTexture2D
{ 
public:
	uint32_t                                           TextureSize;                                                // 0x01A0   (0x0004)  
	bool                                               bSquareResolution : 1;                                      // 0x01A4:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01A5   (0x0003)  MISSED
	uint32_t                                           TextureHeight;                                              // 0x01A8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x01AC   (0x0004)  MISSED
	TArray<class UCurveLinearColor*>                   GradientCurves;                                             // 0x01B0   (0x0010)  


	/// Functions
	// Function /Script/Engine.CurveLinearColorAtlas.GetCurvePosition
	// bool GetCurvePosition(class UCurveLinearColor* InCurve, float& position);                                                // [0x403c280] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UCurveSourceInterface : public UInterface
{ 
public:


	/// Functions
	// Function /Script/Engine.CurveSourceInterface.GetCurveValue
	// float GetCurveValue(FName CurveName);                                                                                    // [0x403c360] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetCurves
	// void GetCurves(TArray<FNamedCurveValue>& OutValues);                                                                     // [0x403c400] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/Engine.CurveSourceInterface.GetBindingName
	// FName GetBindingName();                                                                                                  // [0x403c1a0] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x0180 (384 bytes) (0x000030 - 0x0001B0) align 8 pad: 0x0000
class UCurveVector : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[3];                                             // 0x0030   (0x0180)  


	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	// FVector GetVectorValue(float InTime);                                                                                    // [0x403cc90] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DataDrivenCVarEngineSubsystem
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UDataDrivenCVarEngineSubsystem : public UEngineSubsystem
{ 
public:
	SDK_UNDEFINED(16,136) /* FMulticastInlineDelegate */ __um(OnDataDrivenCVarDelegate);                           // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.DataDrivenConsoleVariable
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FDataDrivenConsoleVariable
{ 
	FDataDrivenCVarType                                Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Name;                                                       // 0x0008   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0018   (0x0010)  
	float                                              DefaultValueFloat;                                          // 0x0028   (0x0004)  
	int32_t                                            DefaultValueInt;                                            // 0x002C   (0x0004)  
	bool                                               DefaultValueBool;                                           // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1F];                                      // 0x0031   (0x001F)  MISSED
};

/// Class /Script/Engine.DataDrivenConsoleVariableSettings
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UDataDrivenConsoleVariableSettings : public UDeveloperSettings
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x0038   (0x0018)  MISSED
	TArray<FDataDrivenConsoleVariable>                 CVarsArray;                                                 // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames
	// void GetDataTableRowNames(class UDataTable* Table, TArray<FName>& OutRowNames);                                          // [0x403c9a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	// bool GetDataTableRowFromName(class UDataTable* Table, FName RowName, FTableRowBase& OutRow);                             // [0x403c610] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	// TArray<FString> GetDataTableColumnAsString(class UDataTable* DataTable, FName PropertyName);                             // [0x403c4b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	// void EvaluateCurveTableRow(class UCurveTable* CurveTable, FName RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>& OutResult, float& OutXY, FString ContextString); // [0x403bfa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.DataTableFunctionLibrary.DoesDataTableRowExist
	// bool DoesDataTableRowExist(class UDataTable* Table, FName RowName);                                                      // [0x403bed0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0100 (256 bytes) (0x000580 - 0x000680) align 8 pad: 0x0000
class ADebugCameraController : public APlayerController
{ 
public:
	bool                                               bShowSelectedInfo : 1;                                      // 0x0580:0 (0x0001)  
	bool                                               bIsFrozenRendering : 1;                                     // 0x0580:1 (0x0001)  
	bool                                               bIsOrbitingSelectedActor : 1;                               // 0x0580:2 (0x0001)  
	bool                                               bOrbitPivotUseCenter : 1;                                   // 0x0580:3 (0x0001)  
	bool                                               bEnableBufferVisualization : 1;                             // 0x0580:4 (0x0001)  
	bool                                               bEnableBufferVisualizationFullMode : 1;                     // 0x0580:5 (0x0001)  
	bool                                               bIsBufferVisualizationInputSetup : 1;                       // 0x0580:6 (0x0001)  
	bool                                               bLastDisplayEnabled : 1;                                    // 0x0580:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0581   (0x0007)  MISSED
	class UDrawFrustumComponent*                       DrawFrustum;                                                // 0x0588   (0x0008)  
	class AActor*                                      SelectedActor;                                              // 0x0590   (0x0008)  
	class UPrimitiveComponent*                         SelectedComponent;                                          // 0x0598   (0x0008)  
	FHitResult                                         SelectedHitPoint;                                           // 0x05A0   (0x0088)  
	class APlayerController*                           OriginalControllerRef;                                      // 0x0628   (0x0008)  
	class UPlayer*                                     OriginalPlayer;                                             // 0x0630   (0x0008)  
	float                                              SpeedScale;                                                 // 0x0638   (0x0004)  
	float                                              InitialMaxSpeed;                                            // 0x063C   (0x0004)  
	float                                              InitialAccel;                                               // 0x0640   (0x0004)  
	float                                              InitialDecel;                                               // 0x0644   (0x0004)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x0648   (0x0038)  MISSED


	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	// void ToggleDisplay();                                                                                                    // [0x403cdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	// void ShowDebugSelectedInfo();                                                                                            // [0x20b6c70] Exec|Native|Public   
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	// void SetPawnMovementSpeedScale(float NewSpeedScale);                                                                     // [0x403cd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	// void ReceiveOnDeactivate(class APlayerController* RestoredPC);                                                           // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	// void ReceiveOnActorSelected(class AActor* NewSelectedActor, FVector& SelectHitLocation, FVector& SelectHitNormal, FHitResult& Hit); // [0x24710f0] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	// void ReceiveOnActivate(class APlayerController* OriginalPC);                                                             // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	// class AActor* GetSelectedActor();                                                                                        // [0x403cbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDebugCameraControllerSettingsViewModeIndex
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<EViewModeIndex>                        ViewModeIndex;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
public:
	TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x0000 (0 bytes) (0x000310 - 0x000310) align 8 pad: 0x0000
class ADebugCameraHUD : public AHUD
{ 
public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ADecalActor : public AActor
{ 
public:
	class UDecalComponent*                             Decal;                                                      // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x40401f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x403fc70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0x403fc10] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x0048 (72 bytes) (0x0001F8 - 0x000240) align 16 pad: 0x0000
class UDecalComponent : public USceneComponent
{ 
public:
	class UMaterialInterface*                          DecalMaterial;                                              // 0x01F8   (0x0008)  
	int32_t                                            SortOrder;                                                  // 0x0200   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x0204   (0x0004)  
	float                                              FadeStartDelay;                                             // 0x0208   (0x0004)  
	float                                              FadeDuration;                                               // 0x020C   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0210   (0x0004)  
	float                                              FadeInStartDelay;                                           // 0x0214   (0x0004)  
	bool                                               bDestroyOwnerAfterFade : 1;                                 // 0x0218:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0219   (0x0003)  MISSED
	FVector                                            DecalSize;                                                  // 0x021C   (0x000C)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0228   (0x0018)  MISSED


	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	// void SetSortOrder(int32_t Value);                                                                                        // [0x40409b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	// void SetFadeScreenSize(float NewFadeScreenSize);                                                                         // [0x4040720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	// void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);                                           // [0x4040600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetFadeIn
	// void SetFadeIn(float StartDelay, float Duaration);                                                                       // [0x4040530] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	// void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);                                                       // [0x4040280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	// float GetFadeStartDelay();                                                                                               // [0x403fd60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInStartDelay
	// float GetFadeInStartDelay();                                                                                             // [0x403fd30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeInDuration
	// float GetFadeInDuration();                                                                                               // [0x403fd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	// float GetFadeDuration();                                                                                                 // [0x403fcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	// class UMaterialInterface* GetDecalMaterial();                                                                            // [0x403fca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();                                                         // [0x403fc40] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0010 (16 bytes) (0x000258 - 0x000268) align 8 pad: 0x0000
class APhysicsVolume : public AVolume
{ 
public:
	float                                              TerminalVelocity;                                           // 0x0258   (0x0004)  
	int32_t                                            Priority;                                                   // 0x025C   (0x0004)  
	float                                              FluidFriction;                                              // 0x0260   (0x0004)  
	bool                                               bWaterVolume : 1;                                           // 0x0264:0 (0x0001)  
	bool                                               bPhysicsOnContact : 1;                                      // 0x0264:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0265   (0x0003)  MISSED
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0000 (0 bytes) (0x000268 - 0x000268) align 8 pad: 0x0000
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x0070 (112 bytes) (0x001BA8 - 0x001C18) align 8 pad: 0x0000
class UDemoNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData00_1[0x70];                                      // 0x1BA8   (0x0070)  MISSED
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMulticastRecordOptions
{ 
	FString                                            FuncPathName;                                               // 0x0000   (0x0010)  
	bool                                               bServerSkip;                                                // 0x0010   (0x0001)  
	bool                                               bClientSkip;                                                // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x0B78 (2936 bytes) (0x000760 - 0x0012D8) align 8 pad: 0x0000
class UDemoNetDriver : public UNetDriver
{ 
public:
	unsigned char                                      UnknownData00_3[0xF8];                                      // 0x0760   (0x00F8)  MISSED
	SDK_UNDEFINED(80,137) /* TMap<FString, FRollbackNetStartupActorInfo> */ __um(RollbackNetStartupActors);        // 0x0858   (0x0050)  
	unsigned char                                      UnknownData01_6[0x15C];                                     // 0x08A8   (0x015C)  MISSED
	float                                              CheckpointSaveMaxMSPerFrame;                                // 0x0A04   (0x0004)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0A08   (0x0020)  MISSED
	TArray<FMulticastRecordOptions>                    MulticastRecordOptions;                                     // 0x0A28   (0x0010)  
	bool                                               bIsLocalReplay;                                             // 0x0A38   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0A39   (0x0007)  MISSED
	TArray<class APlayerController*>                   SpectatorControllers;                                       // 0x0A40   (0x0010)  
	unsigned char                                      UnknownData04_7[0x888];                                     // 0x0A50   (0x0888)  MISSED
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x0098 (152 bytes) (0x000028 - 0x0000C0) align 8 pad: 0x0000
class UPendingNetGame : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UNetDriver*                                  NetDriver;                                                  // 0x0030   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x0040   (0x0080)  MISSED
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UDemoPendingNetGame : public UPendingNetGame
{ 
public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UDestructibleInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 4 pad: 0x0000
struct FTextureLODGroup
{ 
	TEnumAsByte<TextureGroup>                          Group;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0xB];                                       // 0x0001   (0x000B)  MISSED
	int32_t                                            LODBias;                                                    // 0x000C   (0x0004)  
	int32_t                                            LODBias_Smaller;                                            // 0x0010   (0x0004)  
	int32_t                                            LODBias_Smallest;                                           // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0018   (0x0004)  MISSED
	int32_t                                            NumStreamedMips;                                            // 0x001C   (0x0004)  
	TEnumAsByte<TextureMipGenSettings>                 MipGenSettings;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            MinLODSize;                                                 // 0x0024   (0x0004)  
	int32_t                                            MaxLODSize;                                                 // 0x0028   (0x0004)  
	int32_t                                            MaxLODSize_Smaller;                                         // 0x002C   (0x0004)  
	int32_t                                            MaxLODSize_Smallest;                                        // 0x0030   (0x0004)  
	int32_t                                            OptionalLODBias;                                            // 0x0034   (0x0004)  
	int32_t                                            OptionalMaxLODSize;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FName                                              MinMagFilter;                                               // 0x0040   (0x0008)  
	FName                                              MipFilter;                                                  // 0x0048   (0x0008)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0050   (0x0001)  
	bool                                               HighPriorityLoad;                                           // 0x0051   (0x0001)  
	bool                                               DuplicateNonOptionalMips;                                   // 0x0052   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0053   (0x0001)  MISSED
	float                                              Downscale;                                                  // 0x0054   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x0058   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            VirtualTextureTileCountBias;                                // 0x005C   (0x0004)  
	int32_t                                            VirtualTextureTileSizeBias;                                 // 0x0060   (0x0004)  
	TEnumAsByte<ETextureLossyCompressionAmount>        LossyCompressionAmount;                                     // 0x0064   (0x0001)  
	unsigned char                                      UnknownData06_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UTextureLODSettings : public UObject
{ 
public:
	TArray<FTextureLODGroup>                           TextureLODGroups;                                           // 0x0028   (0x0010)  
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x0070 (112 bytes) (0x000038 - 0x0000A8) align 8 pad: 0x0000
class UDeviceProfile : public UTextureLODSettings
{ 
public:
	FString                                            DeviceType;                                                 // 0x0038   (0x0010)  
	FString                                            BaseProfileName;                                            // 0x0048   (0x0010)  
	class UObject*                                     Parent;                                                     // 0x0058   (0x0008)  
	unsigned char                                      UnknownData00_6[0x28];                                      // 0x0060   (0x0028)  MISSED
	TArray<FString>                                    CVars;                                                      // 0x0088   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0098   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileFragment
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UDeviceProfileFragment : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000C8) align 8 pad: 0x0000
class UDeviceProfileManager : public UObject
{ 
public:
	TArray<class UObject*>                             Profiles;                                                   // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x90];                                      // 0x0038   (0x0090)  MISSED
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x0018 (24 bytes) (0x000170 - 0x000188) align 8 pad: 0x0000
class UDialogueSoundWaveProxy : public USoundBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0170   (0x0018)  MISSED
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UDialogueVoice : public UObject
{ 
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                     // 0x0028   (0x0001)  
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                  // 0x0029   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FGuid                                              LocalizationGUID;                                           // 0x002C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FDialogueContext
{ 
	class UDialogueVoice*                              Speaker;                                                    // 0x0000   (0x0008)  
	TArray<class UDialogueVoice*>                      Targets;                                                    // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FDialogueContextMapping
{ 
	FDialogueContext                                   Context;                                                    // 0x0000   (0x0018)  
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
	FString                                            LocalizationKeyFormat;                                      // 0x0020   (0x0010)  
	class UDialogueSoundWaveProxy*                     Proxy;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UDialogueWave : public UObject
{ 
public:
	bool                                               bMature : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               bOverride_SubtitleOverride : 1;                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	FString                                            SpokenText;                                                 // 0x0030   (0x0010)  
	FString                                            SubtitleOverride;                                           // 0x0040   (0x0010)  
	TArray<FDialogueContextMapping>                    ContextMappings;                                            // 0x0050   (0x0010)  
	FGuid                                              LocalizationGUID;                                           // 0x0060   (0x0010)  
};

/// Class /Script/Engine.Light
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class ALight : public AActor
{ 
public:
	class ULightComponent*                             LightComponent;                                             // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	// void ToggleEnabled();                                                                                                    // [0x40d6b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x40d6330] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x40d6210] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x40d6110] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x40d5f20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Light.SetEnabled
	// void SetEnabled(bool bSetEnabled);                                                                                       // [0x40d5ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x40d56b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetBrightness
	// void SetBrightness(float NewBrightness);                                                                                 // [0x40d5510] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x40d51f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Light.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x1781660] Native|Public        
	// Function /Script/Engine.Light.IsEnabled
	// bool IsEnabled();                                                                                                        // [0x40d4a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x40d4940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Light.GetBrightness
	// float GetBrightness();                                                                                                   // [0x40d48b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x0000 (0 bytes) (0x000230 - 0x000230) align 8 pad: 0x0000
class ADirectionalLight : public ALight
{ 
public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x0038 (56 bytes) (0x0001F8 - 0x000230) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULightComponentBase : public USceneComponent
{ 
public:
	FGuid                                              LightGuid;                                                  // 0x01F8   (0x0010)  
	float                                              Brightness;                                                 // 0x0208   (0x0004)  
	float                                              Intensity;                                                  // 0x020C   (0x0004)  
	FColor                                             LightColor;                                                 // 0x0210   (0x0004)  
	bool                                               bAffectsWorld : 1;                                          // 0x0214:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x0214:1 (0x0001)  
	bool                                               CastStaticShadows : 1;                                      // 0x0214:2 (0x0001)  
	bool                                               CastDynamicShadows : 1;                                     // 0x0214:3 (0x0001)  
	bool                                               bAffectTranslucentLighting : 1;                             // 0x0214:4 (0x0001)  
	bool                                               bTransmission : 1;                                          // 0x0214:5 (0x0001)  
	bool                                               bCastVolumetricShadow : 1;                                  // 0x0214:6 (0x0001)  
	bool                                               bCastDeepShadow : 1;                                        // 0x0214:7 (0x0001)  
	bool                                               bCastRaytracedShadow : 1;                                   // 0x0215:0 (0x0001)  
	bool                                               bAffectReflection : 1;                                      // 0x0215:1 (0x0001)  
	bool                                               bAffectGlobalIllumination : 1;                              // 0x0215:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0216   (0x0002)  MISSED
	float                                              DeepShadowLayerDistribution;                                // 0x0218   (0x0004)  
	float                                              IndirectLightingIntensity;                                  // 0x021C   (0x0004)  
	float                                              VolumetricScatteringIntensity;                              // 0x0220   (0x0004)  
	int32_t                                            SamplesPerPixel;                                            // 0x0224   (0x0004)  


	/// Functions
	// Function /Script/Engine.LightComponentBase.SetSamplesPerPixel
	// void SetSamplesPerPixel(int32_t NewValue);                                                                               // [0x40d6610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	// void SetCastVolumetricShadow(bool bNewValue);                                                                            // [0x40d57d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	// void SetCastShadows(bool bNewValue);                                                                                     // [0x40d5740] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadow
	// void SetCastRaytracedShadow(bool bNewValue);                                                                             // [0x40d5620] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetCastDeepShadow
	// void SetCastDeepShadow(bool bNewValue);                                                                                  // [0x40d5590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectReflection
	// void SetAffectReflection(bool bNewValue);                                                                                // [0x40d5160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.SetAffectGlobalIllumination
	// void SetAffectGlobalIllumination(bool bNewValue);                                                                        // [0x40d50d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	// FLinearColor GetLightColor();                                                                                            // [0x40d4980] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};
#pragma pack(pop)

/// Class /Script/Engine.LightComponent
/// Size: 0x0108 (264 bytes) (0x000228 - 0x000330) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULightComponent : public ULightComponentBase
{ 
public:
	float                                              Temperature;                                                // 0x0228   (0x0004)  
	float                                              MaxDrawDistance;                                            // 0x022C   (0x0004)  
	float                                              MaxDistanceFadeRange;                                       // 0x0230   (0x0004)  
	bool                                               bUseTemperature : 1;                                        // 0x0234:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0235   (0x0003)  MISSED
	int32_t                                            ShadowMapChannel;                                           // 0x0238   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x023C   (0x0004)  MISSED
	float                                              MinRoughness;                                               // 0x0240   (0x0004)  
	float                                              SpecularScale;                                              // 0x0244   (0x0004)  
	float                                              ShadowResolutionScale;                                      // 0x0248   (0x0004)  
	float                                              ShadowBias;                                                 // 0x024C   (0x0004)  
	float                                              ShadowSlopeBias;                                            // 0x0250   (0x0004)  
	float                                              ShadowSharpen;                                              // 0x0254   (0x0004)  
	float                                              ContactShadowLength;                                        // 0x0258   (0x0004)  
	bool                                               ContactShadowLengthInWS : 1;                                // 0x025C:0 (0x0001)  
	bool                                               InverseSquaredFalloff : 1;                                  // 0x025C:1 (0x0001)  
	bool                                               CastTranslucentShadows : 1;                                 // 0x025C:2 (0x0001)  
	bool                                               bCastShadowsFromCinematicObjectsOnly : 1;                   // 0x025C:3 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x025C:4 (0x0001)  
	bool                                               bForceCachedShadowsForMovablePrimitives : 1;                // 0x025C:5 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x025D   (0x0003)  MISSED
	FLightingChannels                                  LightingChannels;                                           // 0x0260   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0261   (0x0007)  MISSED
	class UMaterialInterface*                          LightFunctionMaterial;                                      // 0x0268   (0x0008)  
	FVector                                            LightFunctionScale;                                         // 0x0270   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x027C   (0x0004)  MISSED
	class UTextureLightProfile*                        IESTexture;                                                 // 0x0280   (0x0008)  
	bool                                               bUseIESBrightness : 1;                                      // 0x0288:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0289   (0x0003)  MISSED
	float                                              IESBrightnessScale;                                         // 0x028C   (0x0004)  
	float                                              LightFunctionFadeDistance;                                  // 0x0290   (0x0004)  
	float                                              DisabledBrightness;                                         // 0x0294   (0x0004)  
	bool                                               bEnableLightShaftBloom : 1;                                 // 0x0298:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0299   (0x0003)  MISSED
	float                                              BloomScale;                                                 // 0x029C   (0x0004)  
	float                                              BloomThreshold;                                             // 0x02A0   (0x0004)  
	float                                              BloomMaxBrightness;                                         // 0x02A4   (0x0004)  
	FColor                                             BloomTint;                                                  // 0x02A8   (0x0004)  
	bool                                               bUseRayTracedDistanceFieldShadows;                          // 0x02AC   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x02AD   (0x0003)  MISSED
	float                                              RayStartOffsetDepthScale;                                   // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData08_7[0x74];                                      // 0x02B4   (0x0074)  MISSED


	/// Functions
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x40d6ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseTemperature
	// void SetUseTemperature(bool bNewValue);                                                                                  // [0x40d6a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetUseIESBrightness
	// void SetUseIESBrightness(bool bNewValue);                                                                                // [0x40d69c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTransmission
	// void SetTransmission(bool bNewValue);                                                                                    // [0x40d6930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetTemperature
	// void SetTemperature(float NewTemperature);                                                                               // [0x40d68b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetSpecularScale
	// void SetSpecularScale(float NewValue);                                                                                   // [0x40d6830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowSlopeBias
	// void SetShadowSlopeBias(float NewValue);                                                                                 // [0x40d6720] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetShadowBias
	// void SetShadowBias(float NewValue);                                                                                      // [0x40d66a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightingChannels
	// void SetLightingChannels(bool bChannel0, bool bChannel1, bool bChannel2);                                                // [0x40d6450] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	// void SetLightFunctionScale(FVector NewLightFunctionScale);                                                               // [0x40d63c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	// void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);                                       // [0x40d62a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	// void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);                                                   // [0x40d6190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	// void SetLightFunctionDisabledBrightness(float NewValue);                                                                 // [0x40d6090] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor, bool bSRGB);                                                              // [0x40d5fb0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x40d5d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x40d5d00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESTexture
	// void SetIESTexture(class UTextureLightProfile* NewValue);                                                                // [0x40d5c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetIESBrightnessScale
	// void SetIESBrightnessScale(float NewValue);                                                                              // [0x40d5bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	// void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);                                                          // [0x40d5b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	// void SetEnableLightShaftBloom(bool bNewValue);                                                                           // [0x40d5a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomTint
	// void SetBloomTint(FColor NewValue);                                                                                      // [0x40d5490] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	// void SetBloomThreshold(float NewValue);                                                                                  // [0x40d5410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomScale
	// void SetBloomScale(float NewValue);                                                                                      // [0x40d5390] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetBloomMaxBrightness
	// void SetBloomMaxBrightness(float NewValue);                                                                              // [0x40d5310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	// void SetAffectTranslucentLighting(bool bNewValue);                                                                       // [0x40d5280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LightComponent.SetAffectDynamicIndirectLighting
	// void SetAffectDynamicIndirectLighting(bool bNewValue);                                                                   // [0x40d5040] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FLightmassLightSettings
{ 
	float                                              IndirectLightingSaturation;                                 // 0x0000   (0x0004)  
	float                                              ShadowExponent;                                             // 0x0004   (0x0004)  
	bool                                               bUseAreaShadowsForStationaryLight;                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0004 (4 bytes) (0x00000C - 0x000010) align 4 pad: 0x0000
struct FLightmassDirectionalLightSettings : FLightmassLightSettings
{ 
	float                                              LightSourceAngle;                                           // 0x000C   (0x0004)  
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x00C8 (200 bytes) (0x000328 - 0x0003F0) align 16 pad: 0x0000
class UDirectionalLightComponent : public ULightComponent
{ 
public:
	float                                              ShadowCascadeBiasDistribution;                              // 0x0328   (0x0004)  
	bool                                               bEnableLightShaftOcclusion : 1;                             // 0x032C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x032D   (0x0003)  MISSED
	float                                              OcclusionMaskDarkness;                                      // 0x0330   (0x0004)  
	float                                              OcclusionDepthRange;                                        // 0x0334   (0x0004)  
	FVector                                            LightShaftOverrideDirection;                                // 0x0338   (0x000C)  
	float                                              WholeSceneDynamicShadowRadius;                              // 0x0344   (0x0004)  
	float                                              DynamicShadowDistanceMovableLight;                          // 0x0348   (0x0004)  
	float                                              DynamicShadowDistanceStationaryLight;                       // 0x034C   (0x0004)  
	int32_t                                            DynamicShadowCascades;                                      // 0x0350   (0x0004)  
	float                                              CascadeDistributionExponent;                                // 0x0354   (0x0004)  
	float                                              CascadeTransitionFraction;                                  // 0x0358   (0x0004)  
	float                                              ShadowDistanceFadeoutFraction;                              // 0x035C   (0x0004)  
	bool                                               bUseInsetShadowsForMovableObjects : 1;                      // 0x0360:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0361   (0x0003)  MISSED
	int32_t                                            FarShadowCascadeCount;                                      // 0x0364   (0x0004)  
	float                                              FarShadowDistance;                                          // 0x0368   (0x0004)  
	float                                              DistanceFieldShadowDistance;                                // 0x036C   (0x0004)  
	float                                              LightSourceAngle;                                           // 0x0370   (0x0004)  
	float                                              LightSourceSoftAngle;                                       // 0x0374   (0x0004)  
	float                                              ShadowSourceAngleFactor;                                    // 0x0378   (0x0004)  
	float                                              TraceDistance;                                              // 0x037C   (0x0004)  
	bool                                               bUsedAsAtmosphereSunLight : 1;                              // 0x0380:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0381   (0x0003)  MISSED
	int32_t                                            AtmosphereSunLightIndex;                                    // 0x0384   (0x0004)  
	FLinearColor                                       AtmosphereSunDiskColorScale;                                // 0x0388   (0x0010)  
	bool                                               bPerPixelAtmosphereTransmittance : 1;                       // 0x0398:0 (0x0001)  
	bool                                               bCastShadowsOnClouds : 1;                                   // 0x0398:1 (0x0001)  
	bool                                               bCastShadowsOnAtmosphere : 1;                               // 0x0398:2 (0x0001)  
	bool                                               bCastCloudShadows : 1;                                      // 0x0398:3 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0399   (0x0003)  MISSED
	float                                              CloudShadowStrength;                                        // 0x039C   (0x0004)  
	float                                              CloudShadowOnAtmosphereStrength;                            // 0x03A0   (0x0004)  
	float                                              CloudShadowOnSurfaceStrength;                               // 0x03A4   (0x0004)  
	float                                              CloudShadowDepthBias;                                       // 0x03A8   (0x0004)  
	float                                              CloudShadowExtent;                                          // 0x03AC   (0x0004)  
	float                                              CloudShadowMapResolutionScale;                              // 0x03B0   (0x0004)  
	float                                              CloudShadowRaySampleCountScale;                             // 0x03B4   (0x0004)  
	FLinearColor                                       CloudScatteredLuminanceScale;                               // 0x03B8   (0x0010)  
	FLightmassDirectionalLightSettings                 LightmassSettings;                                          // 0x03C8   (0x0010)  
	bool                                               bCastModulatedShadows : 1;                                  // 0x03D8:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x03D9   (0x0003)  MISSED
	FColor                                             ModulatedShadowColor;                                       // 0x03DC   (0x0004)  
	float                                              ShadowAmount;                                               // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x03E4   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	// void SetShadowDistanceFadeoutFraction(float NewValue);                                                                   // [0x4040930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowAmount
	// void SetShadowAmount(float NewValue);                                                                                    // [0x40408b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	// void SetOcclusionMaskDarkness(float NewValue);                                                                           // [0x4040830] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	// void SetLightShaftOverrideDirection(FVector NewValue);                                                                   // [0x40407a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	// void SetEnableLightShaftOcclusion(bool bNewValue);                                                                       // [0x40404a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	// void SetDynamicShadowDistanceStationaryLight(float NewValue);                                                            // [0x4040420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	// void SetDynamicShadowDistanceMovableLight(float NewValue);                                                               // [0x40403a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	// void SetDynamicShadowCascades(int32_t NewValue);                                                                         // [0x4040310] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	// void SetCascadeTransitionFraction(float NewValue);                                                                       // [0x4040170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	// void SetCascadeDistributionExponent(float NewValue);                                                                     // [0x40400f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
	// void SetAtmosphereSunLightIndex(int32_t NewValue);                                                                       // [0x4040060] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLight
	// void SetAtmosphereSunLight(bool bNewValue);                                                                              // [0x403ffd0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UDistribution : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UDistributionFloat : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x0030:1 (0x0001)  MISSED
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UDistributionFloatConstant : public UDistributionFloat
{ 
public:
	float                                              Constant;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
public:
	FInterpCurveFloat                                  ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	float                                              MinInput;                                                   // 0x0048   (0x0004)  
	float                                              MaxInput;                                                   // 0x004C   (0x0004)  
	float                                              MinOutput;                                                  // 0x0050   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0054   (0x0004)  
	TEnumAsByte<DistributionParamMode>                 ParamMode;                                                  // 0x0058   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UDistributionFloatUniform : public UDistributionFloat
{ 
public:
	float                                              Min;                                                        // 0x0038   (0x0004)  
	float                                              Max;                                                        // 0x003C   (0x0004)  
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
public:
	FInterpCurveVector2D                               ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UDistributionVector : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	bool                                               bIsDirty : 1;                                               // 0x0030:1 (0x0001)  
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UDistributionVectorConstant : public UDistributionVector
{ 
public:
	FVector                                            Constant;                                                   // 0x0038   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
public:
	FInterpCurveVector                                 ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0040 (64 bytes) (0x000050 - 0x000090) align 8 pad: 0x0000
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FVector                                            MinInput;                                                   // 0x0058   (0x000C)  
	FVector                                            MaxInput;                                                   // 0x0064   (0x000C)  
	FVector                                            MinOutput;                                                  // 0x0070   (0x000C)  
	FVector                                            MaxOutput;                                                  // 0x007C   (0x000C)  
	TEnumAsByte<DistributionParamMode>                 ParamModes[3];                                              // 0x0088   (0x0003)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x008B   (0x0005)  MISSED
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UDistributionVectorUniform : public UDistributionVector
{ 
public:
	FVector                                            Max;                                                        // 0x0038   (0x000C)  
	FVector                                            Min;                                                        // 0x0044   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0054   (0x0001)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x0055   (0x0003)  
	bool                                               bUseExtremes : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
public:
	FInterpCurveTwoVectors                             ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes1 : 1;                                             // 0x0050:0 (0x0001)  
	bool                                               bLockAxes2 : 1;                                             // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[2];                                              // 0x0054   (0x0002)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x0056   (0x0003)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	bool                                               bUseExtremes : 1;                                           // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ADocumentationActor : public AActor
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0220   (0x0008)  MISSED
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UDPICustomScalingRule : public UObject
{ 
public:
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0020 (32 bytes) (0x000450 - 0x000470) align 16 pad: 0x0000
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             FrustumColor;                                               // 0x0450   (0x0004)  
	float                                              FrustumAngle;                                               // 0x0454   (0x0004)  
	float                                              FrustumAspectRatio;                                         // 0x0458   (0x0004)  
	float                                              FrustumStartDist;                                           // 0x045C   (0x0004)  
	float                                              FrustumEndDist;                                             // 0x0460   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0464   (0x0004)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0468   (0x0008)  
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0008 (8 bytes) (0x000468 - 0x000470) align 16 pad: 0x0000
class USphereComponent : public UShapeComponent
{ 
public:
	float                                              SphereRadius;                                               // 0x0468   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x046C   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	// void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);                                                        // [0x41567b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	// float GetUnscaledSphereRadius();                                                                                         // [0x402cd80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	// float GetShapeScale();                                                                                                   // [0x4154910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	// float GetScaledSphereRadius();                                                                                           // [0x41548c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0000 (0 bytes) (0x000470 - 0x000470) align 16 pad: 0x0000
class UDrawSphereComponent : public USphereComponent
{ 
public:
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UEdGraph : public UObject
{ 
public:
	class UClass*                                      Schema;                                                     // 0x0028   (0x0008)  
	TArray<class UEdGraphNode*>                        Nodes;                                                      // 0x0030   (0x0010)  
	bool                                               bEditable : 1;                                              // 0x0040:0 (0x0001)  
	bool                                               bAllowDeletion : 1;                                         // 0x0040:1 (0x0001)  
	bool                                               bAllowRenaming : 1;                                         // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x1F];                                      // 0x0041   (0x001F)  MISSED
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UGraphNodeContextMenuContext : public UObject
{ 
public:
	class UBlueprint*                                  Blueprint;                                                  // 0x0028   (0x0008)  
	class UEdGraph*                                    Graph;                                                      // 0x0030   (0x0008)  
	class UEdGraphNode*                                Node;                                                       // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0040   (0x0008)  MISSED
	bool                                               bIsDebugging;                                               // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000098) align 8 pad: 0x0000
class UEdGraphNode : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                             // 0x0038   (0x0010)  
	int32_t                                            NodePosX;                                                   // 0x0048   (0x0004)  
	int32_t                                            NodePosY;                                                   // 0x004C   (0x0004)  
	int32_t                                            NodeWidth;                                                  // 0x0050   (0x0004)  
	int32_t                                            NodeHeight;                                                 // 0x0054   (0x0004)  
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                         // 0x0058   (0x0001)  
	ENodeEnabledState                                  EnabledState;                                               // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x005A   (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x005B:0 (0x0001)  MISSED
	bool                                               bDisplayAsDisabled : 1;                                     // 0x005B:1 (0x0001)  
	bool                                               bUserSetEnabledState : 1;                                   // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	bool                                               bIsNodeEnabled : 1;                                         // 0x005B:4 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x005B:5 (0x0001)  MISSED
	bool                                               bHasCompilerMessage : 1;                                    // 0x005B:6 (0x0001)  
	unsigned char                                      UnknownData05_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            NodeComment;                                                // 0x0060   (0x0010)  
	int32_t                                            ErrorType;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	FString                                            ErrorMsg;                                                   // 0x0078   (0x0010)  
	FGuid                                              NodeGuid;                                                   // 0x0088   (0x0010)  
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x0020 (32 bytes) (0x000098 - 0x0000B8) align 8 pad: 0x0000
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
public:
	FString                                            Link;                                                       // 0x0098   (0x0010)  
	FString                                            Excerpt;                                                    // 0x00A8   (0x0010)  
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FEdGraphTerminalType
{ 
	FName                                              TerminalCategory;                                           // 0x0000   (0x0008)  
	FName                                              TerminalSubCategory;                                        // 0x0008   (0x0008)  
	SDK_UNDEFINED(8,138) /* TWeakObjectPtr<UObject*> */ __um(TerminalSubCategoryObject);                           // 0x0010   (0x0008)  
	bool                                               bTerminalIsConst;                                           // 0x0018   (0x0001)  
	bool                                               bTerminalIsWeakPointer;                                     // 0x0019   (0x0001)  
	bool                                               bTerminalIsUObjectWrapper;                                  // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FEdGraphPinType
{ 
	FName                                              PinCategory;                                                // 0x0000   (0x0008)  
	FName                                              PinSubCategory;                                             // 0x0008   (0x0008)  
	SDK_UNDEFINED(8,139) /* TWeakObjectPtr<UObject*> */ __um(PinSubCategoryObject);                                // 0x0010   (0x0008)  
	FSimpleMemberReference                             PinSubCategoryMemberReference;                              // 0x0018   (0x0020)  
	FEdGraphTerminalType                               PinValueType;                                               // 0x0038   (0x001C)  
	EPinContainerType                                  ContainerType;                                              // 0x0054   (0x0001)  
	bool                                               bIsArray : 1;                                               // 0x0055:0 (0x0001)  
	bool                                               bIsReference : 1;                                           // 0x0055:1 (0x0001)  
	bool                                               bIsConst : 1;                                               // 0x0055:2 (0x0001)  
	bool                                               bIsWeakPointer : 1;                                         // 0x0055:3 (0x0001)  
	bool                                               bIsUObjectWrapper : 1;                                      // 0x0055:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x00F0 (240 bytes) (0x000028 - 0x000118) align 8 pad: 0x0000
class UEdGraphPin_Deprecated : public UObject
{ 
public:
	FString                                            PinName;                                                    // 0x0028   (0x0010)  
	FString                                            PinToolTip;                                                 // 0x0038   (0x0010)  
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	FEdGraphPinType                                    PinType;                                                    // 0x0050   (0x0058)  
	FString                                            DefaultValue;                                               // 0x00A8   (0x0010)  
	FString                                            AutogeneratedDefaultValue;                                  // 0x00B8   (0x0010)  
	class UObject*                                     DefaultObject;                                              // 0x00C8   (0x0008)  
	FText                                              DefaultTextValue;                                           // 0x00D0   (0x0018)  
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                   // 0x00E8   (0x0010)  
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                    // 0x00F8   (0x0010)  
	class UEdGraphPin_Deprecated*                      ParentPin;                                                  // 0x0108   (0x0008)  
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                             // 0x0110   (0x0008)  
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UEdGraphSchema : public UObject
{ 
public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0050 (80 bytes) (0x000220 - 0x000270) align 8 pad: 0x0000
class AEmitter : public AActor
{ 
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                    // 0x0220   (0x0008)  
	bool                                               bDestroyOnSystemFinish : 1;                                 // 0x0228:0 (0x0001)  
	bool                                               bPostUpdateTickGroup : 1;                                   // 0x0228:1 (0x0001)  
	bool                                               bCurrentlyActive : 1;                                       // 0x0228:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0229   (0x0007)  MISSED
	SDK_UNDEFINED(16,140) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x0230   (0x0010)  
	SDK_UNDEFINED(16,141) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x0240   (0x0010)  
	SDK_UNDEFINED(16,142) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x0250   (0x0010)  
	SDK_UNDEFINED(16,143) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x0260   (0x0010)  


	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	// void ToggleActive();                                                                                                     // [0x4044970] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetVectorParameter
	// void SetVectorParameter(FName ParameterName, FVector Param);                                                             // [0x4044890] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x2021160] Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x40447c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetFloatParameter
	// void SetFloatParameter(FName ParameterName, float Param);                                                                // [0x40446f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetColorParameter
	// void SetColorParameter(FName ParameterName, FLinearColor Param);                                                         // [0x4044620] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.Emitter.SetActorParameter
	// void SetActorParameter(FName ParameterName, class AActor* Param);                                                        // [0x4044550] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	// void OnRep_bCurrentlyActive();                                                                                           // [0x1781680] Native|Public        
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	// void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);                                        // [0x2081c50] Native|Public        
	// Function /Script/Engine.Emitter.IsActive
	// bool IsActive();                                                                                                         // [0x4044520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.Emitter.Deactivate
	// void Deactivate();                                                                                                       // [0x4044500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.Emitter.Activate
	// void Activate();                                                                                                         // [0x40444e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0070 (112 bytes) (0x000270 - 0x0002E0) align 16 pad: 0x0000
class AEmitterCameraLensEffectBase : public AEmitter
{ 
public:
	class UParticleSystem*                             PS_CameraEffect;                                            // 0x0270   (0x0008)  
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                           // 0x0278   (0x0008)  
	class APlayerCameraManager*                        BaseCamera;                                                 // 0x0280   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0288   (0x0008)  MISSED
	FTransform                                         RelativeTransform;                                          // 0x0290   (0x0030)  
	float                                              BaseFOV;                                                    // 0x02C0   (0x0004)  
	bool                                               bAllowMultipleInstances : 1;                                // 0x02C4:0 (0x0001)  
	bool                                               bResetWhenRetriggered : 1;                                  // 0x02C4:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x02C5   (0x0003)  MISSED
	TArray<class UClass*>                              EmittersToTreatAsSame;                                      // 0x02C8   (0x0010)  
	float                                              DistFromCamera;                                             // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x02DC   (0x0004)  MISSED
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UViewModeUtils : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UEngineBaseTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class ULocalMessage : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x0080 (128 bytes) (0x000028 - 0x0000A8) align 8 pad: 0x0000
class UEngineMessage : public ULocalMessage
{ 
public:
	FString                                            FailedPlaceMessage;                                         // 0x0028   (0x0010)  
	FString                                            MaxedOutMessage;                                            // 0x0038   (0x0010)  
	FString                                            EnteredMessage;                                             // 0x0048   (0x0010)  
	FString                                            LeftMessage;                                                // 0x0058   (0x0010)  
	FString                                            GlobalNameChange;                                           // 0x0068   (0x0010)  
	FString                                            SpecEnteredMessage;                                         // 0x0078   (0x0010)  
	FString                                            NewPlayerMessage;                                           // 0x0088   (0x0010)  
	FString                                            NewSpecMessage;                                             // 0x0098   (0x0010)  
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UEngineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class AExponentialHeightFog : public AInfo
{ 
public:
	class UExponentialHeightFogComponent*              Component;                                                  // 0x0220   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x0228:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0229   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	// void OnRep_bEnabled();                                                                                                   // [0x1781660] Native|Public        
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FExponentialHeightFogData
{ 
	float                                              FogDensity;                                                 // 0x0000   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x0004   (0x0004)  
	float                                              FogHeightOffset;                                            // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x00A8 (168 bytes) (0x0001F8 - 0x0002A0) align 16 pad: 0x0000
class UExponentialHeightFogComponent : public USceneComponent
{ 
public:
	float                                              FogDensity;                                                 // 0x01F8   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x01FC   (0x0004)  
	FExponentialHeightFogData                          SecondFogData;                                              // 0x0200   (0x000C)  
	FLinearColor                                       FogInscatteringColor;                                       // 0x020C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x021C   (0x0004)  MISSED
	class UTextureCube*                                InscatteringColorCubemap;                                   // 0x0220   (0x0008)  
	float                                              InscatteringColorCubemapAngle;                              // 0x0228   (0x0004)  
	FLinearColor                                       InscatteringTextureTint;                                    // 0x022C   (0x0010)  
	float                                              FullyDirectionalInscatteringColorDistance;                  // 0x023C   (0x0004)  
	float                                              NonDirectionalInscatteringColorDistance;                    // 0x0240   (0x0004)  
	float                                              DirectionalInscatteringExponent;                            // 0x0244   (0x0004)  
	float                                              DirectionalInscatteringStartDistance;                       // 0x0248   (0x0004)  
	FLinearColor                                       DirectionalInscatteringColor;                               // 0x024C   (0x0010)  
	float                                              FogMaxOpacity;                                              // 0x025C   (0x0004)  
	float                                              StartDistance;                                              // 0x0260   (0x0004)  
	float                                              FogCutoffDistance;                                          // 0x0264   (0x0004)  
	bool                                               bEnableVolumetricFog;                                       // 0x0268   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0269   (0x0003)  MISSED
	float                                              VolumetricFogScatteringDistribution;                        // 0x026C   (0x0004)  
	FColor                                             VolumetricFogAlbedo;                                        // 0x0270   (0x0004)  
	FLinearColor                                       VolumetricFogEmissive;                                      // 0x0274   (0x0010)  
	float                                              VolumetricFogExtinctionScale;                               // 0x0284   (0x0004)  
	float                                              VolumetricFogDistance;                                      // 0x0288   (0x0004)  
	float                                              VolumetricFogStaticLightingScatteringIntensity;             // 0x028C   (0x0004)  
	bool                                               bOverrideLightColorsWithFogInscatteringColors;              // 0x0290   (0x0001)  
	unsigned char                                      UnknownData02_7[0xF];                                       // 0x0291   (0x000F)  MISSED


	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	// void SetVolumetricFogScatteringDistribution(float NewValue);                                                             // [0x4050e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	// void SetVolumetricFogExtinctionScale(float NewValue);                                                                    // [0x4050de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	// void SetVolumetricFogEmissive(FLinearColor NewValue);                                                                    // [0x4050d50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	// void SetVolumetricFogDistance(float NewValue);                                                                           // [0x4050cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	// void SetVolumetricFogAlbedo(FColor NewValue);                                                                            // [0x4050c50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	// void SetVolumetricFog(bool bNewValue);                                                                                   // [0x4050bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	// void SetStartDistance(float Value);                                                                                      // [0x4050b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	// void SetNonDirectionalInscatteringColorDistance(float Value);                                                            // [0x4050ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	// void SetInscatteringTextureTint(FLinearColor Value);                                                                     // [0x40509b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	// void SetInscatteringColorCubemapAngle(float Value);                                                                      // [0x4050930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	// void SetInscatteringColorCubemap(class UTextureCube* Value);                                                             // [0x40508a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	// void SetFullyDirectionalInscatteringColorDistance(float Value);                                                          // [0x4050820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	// void SetFogMaxOpacity(float Value);                                                                                      // [0x4050710] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	// void SetFogInscatteringColor(FLinearColor Value);                                                                        // [0x4050680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	// void SetFogHeightFalloff(float Value);                                                                                   // [0x4011a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	// void SetFogDensity(float Value);                                                                                         // [0x40122c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	// void SetFogCutoffDistance(float Value);                                                                                  // [0x4050600] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	// void SetDirectionalInscatteringStartDistance(float Value);                                                               // [0x4050580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	// void SetDirectionalInscatteringExponent(float Value);                                                                    // [0x4050500] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	// void SetDirectionalInscatteringColor(FLinearColor Value);                                                                // [0x4050470] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000078) align 8 pad: 0x0000
class UExporter : public UObject
{ 
public:
	class UClass*                                      SupportedClass;                                             // 0x0028   (0x0008)  
	class UObject*                                     ExportRootScope;                                            // 0x0030   (0x0008)  
	TArray<FString>                                    FormatExtension;                                            // 0x0038   (0x0010)  
	TArray<FString>                                    FormatDescription;                                          // 0x0048   (0x0010)  
	int32_t                                            PreferredFormatIndex;                                       // 0x0058   (0x0004)  
	int32_t                                            TextIndent;                                                 // 0x005C   (0x0004)  
	bool                                               bText : 1;                                                  // 0x0060:0 (0x0001)  
	bool                                               bSelectedOnly : 1;                                          // 0x0060:1 (0x0001)  
	bool                                               bForceFileOperations : 1;                                   // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	class UAssetExportTask*                            ExportTask;                                                 // 0x0068   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0070   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.Exporter.ScriptRunAssetExportTask
	// bool ScriptRunAssetExportTask(class UAssetExportTask* Task);                                                             // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/Engine.Exporter.RunAssetExportTasks
	// bool RunAssetExportTasks(TArray<UAssetExportTask*>& ExportTasks);                                                        // [0x40503c0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.Exporter.RunAssetExportTask
	// bool RunAssetExportTask(class UAssetExportTask* Task);                                                                   // [0x11eee50] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0018 (24 bytes) (0x000138 - 0x000150) align 8 pad: 0x0000
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
public:
	float                                              MaxSpeed;                                                   // 0x0138   (0x0004)  
	float                                              Acceleration;                                               // 0x013C   (0x0004)  
	float                                              Deceleration;                                               // 0x0140   (0x0004)  
	float                                              TurningBoost;                                               // 0x0144   (0x0004)  
	bool                                               bPositionCorrected : 1;                                     // 0x0148:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FFontCharacter
{ 
	int32_t                                            StartU;                                                     // 0x0000   (0x0004)  
	int32_t                                            StartV;                                                     // 0x0004   (0x0004)  
	int32_t                                            USize;                                                      // 0x0008   (0x0004)  
	int32_t                                            VSize;                                                      // 0x000C   (0x0004)  
	char                                               TextureIndex;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            VerticalOffset;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FFontImportOptionsData
{ 
	FString                                            FontName;                                                   // 0x0000   (0x0010)  
	float                                              Height;                                                     // 0x0010   (0x0004)  
	bool                                               bEnableAntialiasing : 1;                                    // 0x0014:0 (0x0001)  
	bool                                               bEnableBold : 1;                                            // 0x0014:1 (0x0001)  
	bool                                               bEnableItalic : 1;                                          // 0x0014:2 (0x0001)  
	bool                                               bEnableUnderline : 1;                                       // 0x0014:3 (0x0001)  
	bool                                               bAlphaOnly : 1;                                             // 0x0014:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	TEnumAsByte<EFontImportCharacterSet>               CharacterSet;                                               // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	FString                                            Chars;                                                      // 0x0020   (0x0010)  
	FString                                            UnicodeRange;                                               // 0x0030   (0x0010)  
	FString                                            CharsFilePath;                                              // 0x0040   (0x0010)  
	FString                                            CharsFileWildcard;                                          // 0x0050   (0x0010)  
	bool                                               bCreatePrintableOnly : 1;                                   // 0x0060:0 (0x0001)  
	bool                                               bIncludeASCIIRange : 1;                                     // 0x0060:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	FLinearColor                                       ForegroundColor;                                            // 0x0064   (0x0010)  
	bool                                               bEnableDropShadow : 1;                                      // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            TexturePageWidth;                                           // 0x0078   (0x0004)  
	int32_t                                            TexturePageMaxHeight;                                       // 0x007C   (0x0004)  
	int32_t                                            XPadding;                                                   // 0x0080   (0x0004)  
	int32_t                                            YPadding;                                                   // 0x0084   (0x0004)  
	int32_t                                            ExtendBoxTop;                                               // 0x0088   (0x0004)  
	int32_t                                            ExtendBoxBottom;                                            // 0x008C   (0x0004)  
	int32_t                                            ExtendBoxRight;                                             // 0x0090   (0x0004)  
	int32_t                                            ExtendBoxLeft;                                              // 0x0094   (0x0004)  
	bool                                               bEnableLegacyMode : 1;                                      // 0x0098:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            Kerning;                                                    // 0x009C   (0x0004)  
	bool                                               bUseDistanceFieldAlpha : 1;                                 // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            DistanceFieldScaleFactor;                                   // 0x00A4   (0x0004)  
	float                                              DistanceFieldScanRadiusScale;                               // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData06_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.Font
/// Size: 0x01A8 (424 bytes) (0x000028 - 0x0001D0) align 8 pad: 0x0000
class UFont : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	EFontCacheType                                     FontCacheType;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FFontCharacter>                             Characters;                                                 // 0x0038   (0x0010)  
	TArray<class UTexture2D*>                          Textures;                                                   // 0x0048   (0x0010)  
	int32_t                                            IsRemapped;                                                 // 0x0058   (0x0004)  
	float                                              EmScale;                                                    // 0x005C   (0x0004)  
	float                                              Ascent;                                                     // 0x0060   (0x0004)  
	float                                              Descent;                                                    // 0x0064   (0x0004)  
	float                                              Leading;                                                    // 0x0068   (0x0004)  
	int32_t                                            Kerning;                                                    // 0x006C   (0x0004)  
	FFontImportOptionsData                             ImportOptions;                                              // 0x0070   (0x00B0)  
	int32_t                                            NumCharacters;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<int32_t>                                    MaxCharHeight;                                              // 0x0128   (0x0010)  
	float                                              ScalingFactor;                                              // 0x0138   (0x0004)  
	int32_t                                            LegacyFontSize;                                             // 0x013C   (0x0004)  
	FName                                              LegacyFontName;                                             // 0x0140   (0x0008)  
	FCompositeFont                                     CompositeFont;                                              // 0x0148   (0x0038)  
	unsigned char                                      UnknownData03_7[0x50];                                      // 0x0180   (0x0050)  MISSED
};

/// Class /Script/Engine.FontFace
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000058) align 8 pad: 0x0000
class UFontFace : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	FString                                            SourceFilename;                                             // 0x0030   (0x0010)  
	EFontHinting                                       Hinting;                                                    // 0x0040   (0x0001)  
	EFontLoadingPolicy                                 LoadingPolicy;                                              // 0x0041   (0x0001)  
	EFontLayoutMethod                                  LayoutMethod;                                               // 0x0042   (0x0001)  
	unsigned char                                      UnknownData01_7[0x15];                                      // 0x0043   (0x0015)  MISSED
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000D8) align 8 pad: 0x0000
class UFontImportOptions : public UObject
{ 
public:
	FFontImportOptionsData                             Data;                                                       // 0x0028   (0x00B0)  
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x0000 (0 bytes) (0x0000B0 - 0x0000B0) align 8 pad: 0x0000
struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{ 
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000D8) align 8 pad: 0x0000
class UForceFeedbackAttenuation : public UObject
{ 
public:
	FForceFeedbackAttenuationSettings                  Attenuation;                                                // 0x0028   (0x00B0)  
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x00E8 (232 bytes) (0x0001F8 - 0x0002E0) align 16 pad: 0x0000
class UForceFeedbackComponent : public USceneComponent
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x01F8   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0200:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0200:1 (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0200:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0200:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0200:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0201   (0x0003)  MISSED
	float                                              IntensityMultiplier;                                        // 0x0204   (0x0004)  
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                        // 0x0208   (0x0008)  
	FForceFeedbackAttenuationSettings                  AttenuationOverrides;                                       // 0x0210   (0x00B0)  
	SDK_UNDEFINED(16,144) /* FMulticastInlineDelegate */ __um(OnForceFeedbackFinished);                            // 0x02C0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x02D0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	// void Stop();                                                                                                             // [0x4050ee0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	// void SetIntensityMultiplier(float NewIntensityMultiplier);                                                               // [0x4050a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	// void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);                                         // [0x4050790] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	// void Play(float StartTime);                                                                                              // [0x37b12b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	// bool BP_GetAttenuationSettingsToApply(FForceFeedbackAttenuationSettings& OutAttenuationSettings);                        // [0x4050170] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	// void AdjustAttenuation(FForceFeedbackAttenuationSettings& InAttenuationSettings);                                        // [0x4050040] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FForceFeedbackChannelDetails
{ 
	bool                                               bAffectsLeftLarge : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bAffectsLeftSmall : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bAffectsRightLarge : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bAffectsRightSmall : 1;                                     // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UForceFeedbackEffect : public UObject
{ 
public:
	TArray<FForceFeedbackChannelDetails>               ChannelDetails;                                             // 0x0028   (0x0010)  
	float                                              Duration;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0050 (80 bytes) (0x000D20 - 0x000D70) align 8 pad: 0x0000
class UGameEngine : public UEngine
{ 
public:
	float                                              MaxDeltaTime;                                               // 0x0D20   (0x0004)  
	float                                              ServerFlushLogInterval;                                     // 0x0D24   (0x0004)  
	class UGameInstance*                               GameInstance;                                               // 0x0D28   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0D30   (0x0040)  MISSED
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x00B0 (176 bytes) (0x000220 - 0x0002D0) align 8 pad: 0x0000
class AGameNetworkManager : public AInfo
{ 
public:
	float                                              BadPacketLossThreshold;                                     // 0x0220   (0x0004)  
	float                                              SeverePacketLossThreshold;                                  // 0x0224   (0x0004)  
	int32_t                                            BadPingThreshold;                                           // 0x0228   (0x0004)  
	int32_t                                            SeverePingThreshold;                                        // 0x022C   (0x0004)  
	int32_t                                            AdjustedNetSpeed;                                           // 0x0230   (0x0004)  
	float                                              LastNetSpeedUpdateTime;                                     // 0x0234   (0x0004)  
	int32_t                                            TotalNetBandwidth;                                          // 0x0238   (0x0004)  
	int32_t                                            MinDynamicBandwidth;                                        // 0x023C   (0x0004)  
	int32_t                                            MaxDynamicBandwidth;                                        // 0x0240   (0x0004)  
	bool                                               bIsStandbyCheckingEnabled : 1;                              // 0x0244:0 (0x0001)  
	bool                                               bHasStandbyCheatTriggered : 1;                              // 0x0244:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	float                                              StandbyRxCheatTime;                                         // 0x0248   (0x0004)  
	float                                              StandbyTxCheatTime;                                         // 0x024C   (0x0004)  
	float                                              PercentMissingForRxStandby;                                 // 0x0250   (0x0004)  
	float                                              PercentMissingForTxStandby;                                 // 0x0254   (0x0004)  
	float                                              PercentForBadPing;                                          // 0x0258   (0x0004)  
	float                                              JoinInProgressStandbyWaitTime;                              // 0x025C   (0x0004)  
	float                                              MoveRepSize;                                                // 0x0260   (0x0004)  
	float                                              MAXPOSITIONERRORSQUARED;                                    // 0x0264   (0x0004)  
	float                                              MAXNEARZEROVELOCITYSQUARED;                                 // 0x0268   (0x0004)  
	float                                              CLIENTADJUSTUPDATECOST;                                     // 0x026C   (0x0004)  
	float                                              MAXCLIENTUPDATEINTERVAL;                                    // 0x0270   (0x0004)  
	float                                              MaxClientForcedUpdateDuration;                              // 0x0274   (0x0004)  
	float                                              ServerForcedUpdateHitchThreshold;                           // 0x0278   (0x0004)  
	float                                              ServerForcedUpdateHitchCooldown;                            // 0x027C   (0x0004)  
	float                                              MaxMoveDeltaTime;                                           // 0x0280   (0x0004)  
	float                                              MaxClientSmoothingDeltaTime;                                // 0x0284   (0x0004)  
	float                                              ClientNetSendMoveDeltaTime;                                 // 0x0288   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeThrottled;                        // 0x028C   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeStationary;                       // 0x0290   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleAtNetSpeed;                        // 0x0294   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleOverPlayerCount;                   // 0x0298   (0x0004)  
	bool                                               ClientAuthorativePosition;                                  // 0x029C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x029D   (0x0003)  MISSED
	float                                              ClientErrorUpdateRateLimit;                                 // 0x02A0   (0x0004)  
	float                                              ClientNetCamUpdateDeltaTime;                                // 0x02A4   (0x0004)  
	float                                              ClientNetCamUpdatePositionLimit;                            // 0x02A8   (0x0004)  
	bool                                               bMovementTimeDiscrepancyDetection;                          // 0x02AC   (0x0001)  
	bool                                               bMovementTimeDiscrepancyResolution;                         // 0x02AD   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x02AE   (0x0002)  MISSED
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                       // 0x02B0   (0x0004)  
	float                                              MovementTimeDiscrepancyMinTimeMargin;                       // 0x02B4   (0x0004)  
	float                                              MovementTimeDiscrepancyResolutionRate;                      // 0x02B8   (0x0004)  
	float                                              MovementTimeDiscrepancyDriftAllowance;                      // 0x02BC   (0x0004)  
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;   // 0x02C0   (0x0001)  
	bool                                               bUseDistanceBasedRelevancy;                                 // 0x02C1   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE];                                       // 0x02C2   (0x000E)  MISSED
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.GameplayStatics.UnRetainAllSoundsInSoundClass
	// void UnRetainAllSoundsInSoundClass(class USoundClass* InSoundClass);                                                     // [0x4060010] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
	// void UnloadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x4060200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevel
	// void UnloadStreamLevel(class UObject* WorldContextObject, FName LevelName, FLatentActionInfo LatentInfo, bool bShouldBlockOnUnload); // [0x4060090] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	// bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, FVector& OutLaunchVelocity, FVector StartPos, FVector EndPos, float OverrideGravityZ, float ArcParam); // [0x405fe20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAttached
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x405fa50] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAtLocation
	// class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy); // [0x405f740] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnSound2D
	// class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x405f4e0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnObject
	// class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);                                             // [0x405f410] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAttached
	// class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x405f070] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	// class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, FVector Location, FRotator Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x405edb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAttached
	// class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate); // [0x405eaa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAtLocation
	// class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, FVector Location, FRotator Rotation, FVector Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem); // [0x405e820] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAttached
	// class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, FDialogueContext& Context, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x405e420] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAtLocation
	// class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy); // [0x405e100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDialogue2D
	// class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy); // [0x405ded0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAttached
	// class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, FVector DecalSize, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan); // [0x405da50] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAtLocation
	// class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, FVector DecalSize, FVector Location, FRotator Rotation, float LifeSpan); // [0x405d850] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetWorldOriginLocation
	// void SetWorldOriginLocation(class UObject* WorldContextObject, FIntVector NewLocation);                                  // [0x405d6e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetViewportMouseCaptureMode
	// void SetViewportMouseCaptureMode(class UObject* WorldContextObject, EMouseCaptureMode MouseCaptureMode);                 // [0x405d620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSubtitlesEnabled
	// void SetSubtitlesEnabled(bool bEnabled);                                                                                 // [0x405d5a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundMixClassOverride
	// void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // [0x405d380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetSoundClassDistanceScale
	// void SetSoundClassDistanceScale(class UObject* WorldContextObject, class USoundClass* SoundClass, float DistanceAttenuationScale, float TimeSec); // [0x405d230] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetPlayerControllerID
	// void SetPlayerControllerID(class APlayerController* Player, int32_t ControllerId);                                       // [0x405d170] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetMaxAudioChannelsScaled
	// void SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);                           // [0x405d0b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalTimeDilation
	// void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);                                       // [0x405cff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalPitchModulation
	// void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);                  // [0x405cef0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters
	// void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale); // [0x405cc50] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetGamePaused
	// bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);                                                     // [0x405cb80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetForceDisableSplitscreen
	// void SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);                                       // [0x405cac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetEnableWorldRendering
	// void SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);                                           // [0x405ca00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SetBaseSoundMix
	// void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);                                    // [0x405c940] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.SaveGameToSlot
	// bool SaveGameToSlot(class USaveGame* SaveGameObject, FString SlotName, int32_t UserIndex);                               // [0x405c6f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RemovePlayer
	// void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);                                                   // [0x405c350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	// FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x405c260] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero
	// FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, FVector WorldLocation);                             // [0x405c170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PushSoundMixModifier
	// void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                       // [0x405c0b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ProjectWorldToScreen
	// bool ProjectWorldToScreen(class APlayerController* Player, FVector& WorldPosition, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x405bf50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.PrimeSound
	// void PrimeSound(class USoundBase* InSound);                                                                              // [0x405bed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PrimeAllSoundsInSoundClass
	// void PrimeAllSoundsInSoundClass(class USoundClass* InSoundClass);                                                        // [0x405be50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PopSoundMixModifier
	// void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);                        // [0x405bd90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayWorldCameraShake
	// void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter); // [0x405bb60] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySoundAtLocation
	// void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor); // [0x405b850] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlaySound2D
	// void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor, bool bIsUISound); // [0x405b5f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogueAtLocation
	// void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings); // [0x405b310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.PlayDialogue2D
	// void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime); // [0x405b120] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ParseOption
	// FString ParseOption(FString Options, FString Key);                                                                       // [0x405afa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.OpenLevelBySoftObjectPtr
	// void OpenLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bAbsolute, FString Options); // [0x405ad80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.OpenLevel
	// void OpenLevel(class UObject* WorldContextObject, FName LevelName, bool bAbsolute, FString Options);                     // [0x405abe0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.MakeHitResult
	// FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, FVector Location, FVector ImpactPoint, FVector Normal, FVector ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, FName HitBoneName, int32_t HitItem, int32_t ElementIndex, int32_t FaceIndex, FVector TraceStart, FVector TraceEnd); // [0x405a5a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
	// void LoadStreamLevelBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x405a360] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevel
	// void LoadStreamLevel(class UObject* WorldContextObject, FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, FLatentActionInfo LatentInfo); // [0x405a1a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.LoadGameFromSlot
	// class USaveGame* LoadGameFromSlot(FString SlotName, int32_t UserIndex);                                                  // [0x405a0c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.IsSplitscreenForceDisabled
	// bool IsSplitscreenForceDisabled(class UObject* WorldContextObject);                                                      // [0x4059f40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.IsGamePaused
	// bool IsGamePaused(class UObject* WorldContextObject);                                                                    // [0x4059e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasOption
	// bool HasOption(FString Options, FString InKey);                                                                          // [0x4059d40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.HasLaunchOption
	// bool HasLaunchOption(FString OptionToCheck);                                                                             // [0x4059c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GrassOverlappingSphereCount
	// int32_t GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, FVector CenterPosition, float Radius); // [0x4059b10] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetWorldOriginLocation
	// FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);                                                    // [0x4059a70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetWorldDeltaSeconds
	// float GetWorldDeltaSeconds(class UObject* WorldContextObject);                                                           // [0x40599e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewProjectionMatrix
	// void GetViewProjectionMatrix(FMinimalViewInfo DesiredView, FMatrix& ViewMatrix, FMatrix& ProjectionMatrix, FMatrix& ViewProjectionMatrix); // [0x4059640] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetViewportMouseCaptureMode
	// EMouseCaptureMode GetViewportMouseCaptureMode(class UObject* WorldContextObject);                                        // [0x4059950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetUnpausedTimeSeconds
	// float GetUnpausedTimeSeconds(class UObject* WorldContextObject);                                                         // [0x40595b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetTimeSeconds
	// float GetTimeSeconds(class UObject* WorldContextObject);                                                                 // [0x4059520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetSurfaceType
	// TEnumAsByte<EPhysicalSurface> GetSurfaceType(FHitResult& Hit);                                                           // [0x4059440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetStreamingLevel
	// class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, FName PackageName);                          // [0x4059370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetRealTimeSeconds
	// float GetRealTimeSeconds(class UObject* WorldContextObject);                                                             // [0x40592e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerPawn
	// class APawn* GetPlayerPawn(class UObject* WorldContextObject, int32_t PlayerIndex);                                      // [0x4059210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerID
	// int32_t GetPlayerControllerID(class APlayerController* Player);                                                          // [0x4059180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerFromID
	// class APlayerController* GetPlayerControllerFromID(class UObject* WorldContextObject, int32_t ControllerId);             // [0x40590b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerController
	// class APlayerController* GetPlayerController(class UObject* WorldContextObject, int32_t PlayerIndex);                    // [0x4058fe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCharacter
	// class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int32_t PlayerIndex);                            // [0x4058f10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlayerCameraManager
	// class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int32_t PlayerIndex);              // [0x4058e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetPlatformName
	// FString GetPlatformName();                                                                                               // [0x4058dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetObjectClass
	// class UClass* GetObjectClass(class UObject* Object);                                                                     // [0x4058d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetMaxAudioChannelCount
	// int32_t GetMaxAudioChannelCount(class UObject* WorldContextObject);                                                      // [0x4058c40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetKeyValue
	// void GetKeyValue(FString Pair, FString& Key, FString& Value);                                                            // [0x4058ac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetIntOption
	// int32_t GetIntOption(FString Options, FString Key, int32_t DefaultValue);                                                // [0x4058980] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGlobalTimeDilation
	// float GetGlobalTimeDilation(class UObject* WorldContextObject);                                                          // [0x40588f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameState
	// class AGameStateBase* GetGameState(class UObject* WorldContextObject);                                                   // [0x4058860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameMode
	// class AGameModeBase* GetGameMode(class UObject* WorldContextObject);                                                     // [0x40587d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetGameInstance
	// class UGameInstance* GetGameInstance(class UObject* WorldContextObject);                                                 // [0x4058740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetEnableWorldRendering
	// bool GetEnableWorldRendering(class UObject* WorldContextObject);                                                         // [0x40586b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentReverbEffect
	// class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);                                          // [0x4058580] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetCurrentLevelName
	// FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);                                // [0x4058470] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetClosestListenerLocation
	// bool GetClosestListenerLocation(class UObject* WorldContextObject, FVector& Location, float MaximumRange, bool bAllowAttenuationOverride, FVector& ListenerPosition); // [0x40582a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAudioTimeSeconds
	// float GetAudioTimeSeconds(class UObject* WorldContextObject);                                                            // [0x4058210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTag
	// void GetAllActorsWithTag(class UObject* WorldContextObject, FName Tag, TArray<AActor*>& OutActors);                      // [0x40580f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithInterface
	// void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<AActor*>& OutActors);  // [0x4057fd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClassWithTag
	// void GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, FName Tag, TArray<AActor*>& OutActors); // [0x4057e70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClass
	// void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<AActor*>& OutActors);       // [0x4057d50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorOfClass
	// class AActor* GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);                              // [0x4057c80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayBounds
	// void GetActorArrayBounds(TArray<AActor*>& Actors, bool bOnlyCollidingComponents, FVector& Center, FVector& BoxExtent);   // [0x4057af0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetActorArrayAverageLocation
	// FVector GetActorArrayAverageLocation(TArray<AActor*>& Actors);                                                           // [0x4057a30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.GetAccurateRealTime
	// void GetAccurateRealTime(int32_t& Seconds, float& PartialSeconds);                                                       // [0x4057950] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.FlushLevelStreaming
	// void FlushLevelStreaming(class UObject* WorldContextObject);                                                             // [0x40578d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FinishSpawningActor
	// class AActor* FinishSpawningActor(class AActor* Actor, FTransform& SpawnTransform);                                      // [0x40577b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.FindNearestActor
	// class AActor* FindNearestActor(FVector Origin, TArray<AActor*>& ActorsToCheck, float& Distance);                         // [0x4057550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.FindCollisionUV
	// bool FindCollisionUV(FHitResult& Hit, int32_t UVChannel, FVector2D& UV);                                                 // [0x40573d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.EnableLiveStreaming
	// void EnableLiveStreaming(bool Enable);                                                                                   // [0x4057350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DoesSaveGameExist
	// bool DoesSaveGameExist(FString SlotName, int32_t UserIndex);                                                             // [0x4057270] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeprojectScreenToWorld
	// bool DeprojectScreenToWorld(class APlayerController* Player, FVector2D& ScreenPosition, FVector& WorldPosition, FVector& WorldDirection); // [0x4057100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.DeleteGameInSlot
	// bool DeleteGameInSlot(FString SlotName, int32_t UserIndex);                                                              // [0x4057020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.DeactivateReverbEffect
	// void DeactivateReverbEffect(class UObject* WorldContextObject, FName TagName);                                           // [0x4056f60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSound2D
	// class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy); // [0x4056d00] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObject
	// class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);                                                      // [0x4056c70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CreatePlayer
	// class APlayerController* CreatePlayer(class UObject* WorldContextObject, int32_t ControllerId, bool bSpawnPlayerController); // [0x4056b70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixModifiers
	// void ClearSoundMixModifiers(class UObject* WorldContextObject);                                                          // [0x4056af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixClassOverride
	// void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime); // [0x40569a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.CancelAsyncLoading
	// void CancelAsyncLoading();                                                                                               // [0x40567b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BreakHitResult
	// void BreakHitResult(FHitResult& Hit, bool& bBlockingHit, bool& bInitialOverlap, float& Time, float& Distance, FVector& Location, FVector& ImpactPoint, FVector& Normal, FVector& ImpactNormal, class UPhysicalMaterial*& PhysMat, class AActor*& HitActor, class UPrimitiveComponent*& HitComponent, FName& HitBoneName, int32_t& HitItem, int32_t& ElementIndex, int32_t& FaceIndex, FVector& TraceStart, FVector& TraceEnd); // [0x4056050] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	// bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, FVector& TossVelocity, FVector StartLocation, FVector EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug); // [0x4055000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	// bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x4055ae0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	// bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, FHitResult& OutHit, TArray<FVector>& OutPathPositions, FVector& OutLastTraceDestination, FVector StartPos, FVector LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ); // [0x4055550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	// bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, FPredictProjectilePathParams& PredictParams, FPredictProjectilePathResult& PredictResult); // [0x4055320] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromClass
	// class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner); // [0x4054df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	// class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, FTransform& SpawnTransform, bool bNoCollisionFail); // [0x4054c40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	// class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner); // [0x4054a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AreSubtitlesEnabled
	// bool AreSubtitlesEnabled();                                                                                              // [0x4054a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.GameplayStatics.AreAnyListenersWithinRange
	// bool AreAnyListenersWithinRange(class UObject* WorldContextObject, FVector& Location, float MaximumRange);               // [0x40548f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	// bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x4054550] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamage
	// bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel); // [0x4054240] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyPointDamage
	// float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, FVector& HitFromDirection, FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x4053fd0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ApplyDamage
	// float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass); // [0x4053e30] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.AnnounceAccessibleString
	// void AnnounceAccessibleString(FString AnnouncementString);                                                               // [0x4053da0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.GameplayStatics.ActivateReverbEffect
	// void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, FName TagName, float Priority, float Volume, float FadeTime); // [0x4053bd0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.SpotLight
/// Size: 0x0008 (8 bytes) (0x000230 - 0x000238) align 8 pad: 0x0000
class ASpotLight : public ALight
{ 
public:
	class USpotLightComponent*                         SpotLightComponent;                                         // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x415a5f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x415a4f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x0000 (0 bytes) (0x000238 - 0x000238) align 8 pad: 0x0000
class AGeneratedMeshAreaLight : public ASpotLight
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UHapticFeedbackEffect_Base : public UObject
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
public:
	TArray<char>                                       Amplitudes;                                                 // 0x0028   (0x0010)  
	int32_t                                            SampleRate;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (272 bytes) (0x000000 - 0x000110) align 8 pad: 0x0000
struct FHapticFeedbackDetails_Curve
{ 
	FRuntimeFloatCurve                                 Frequency;                                                  // 0x0000   (0x0088)  
	FRuntimeFloatCurve                                 Amplitude;                                                  // 0x0088   (0x0088)  
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0110 (272 bytes) (0x000028 - 0x000138) align 8 pad: 0x0000
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
public:
	FHapticFeedbackDetails_Curve                       HapticDetails;                                              // 0x0028   (0x0110)  
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
public:
	class USoundWave*                                  SoundWave;                                                  // 0x0028   (0x0008)  
	bool                                               bUseStereo;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x0031   (0x0017)  MISSED
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
	// void StopPerformanceSnapshots();                                                                                         // [0x40694f0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
	// void StartPerformanceSnapshots();                                                                                        // [0x40694d0] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
	// void LogPerformanceSnapshot(FString SnapshotTitle, bool bResetStats);                                                    // [0x40685d0] Final|Exec|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.HLODEngineSubsystem
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UHLODEngineSubsystem : public UEngineSubsystem
{ 
public:
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FHLODProxyMesh
{ 
	SDK_UNDEFINED(28,145) /* TLazyObjectPtr<ALODActor*> */ __um(LODActor);                                         // 0x0000   (0x001C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0020   (0x0008)  
	FName                                              Key;                                                        // 0x0028   (0x0008)  
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000088) align 8 pad: 0x0000
class UHLODProxy : public UObject
{ 
public:
	TArray<FHLODProxyMesh>                             ProxyMeshes;                                                // 0x0028   (0x0010)  
	SDK_UNDEFINED(80,146) /* TMap<UHLODProxyDesc*, FHLODProxyMesh> */ __um(HLODActors);                            // 0x0038   (0x0050)  
};

/// Class /Script/Engine.HLODProxyDesc
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UHLODProxyDesc : public UObject
{ 
public:
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat
	// float RandomSobolFloat(int32_t Index, int32_t Dimension, float Seed);                                                    // [0x4068fe0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	// FVector RandomSobolCell3D(int32_t Index, int32_t NumCells, FVector Cell, FVector Seed);                                  // [0x4068e30] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	// FVector2D RandomSobolCell2D(int32_t Index, int32_t NumCells, FVector2D Cell, FVector2D Seed);                            // [0x4068ce0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolFloat
	// float NextSobolFloat(int32_t Index, int32_t Dimension, float PreviousValue);                                             // [0x4068b10] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D
	// FVector NextSobolCell3D(int32_t Index, int32_t NumCells, FVector PreviousValue);                                         // [0x40689e0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D
	// FVector2D NextSobolCell2D(int32_t Index, int32_t NumCells, FVector2D PreviousValue);                                     // [0x40688e0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	// FImportanceTexture MakeImportanceTexture(class UTexture2D* Texture, TEnumAsByte<EImportanceWeight> WeightingFunc);       // [0x4068700] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.ImportanceSample
	// void ImportanceSample(FImportanceTexture& Texture, FVector2D& Rand, int32_t Samples, float Intensity, FVector2D& SamplePosition, FLinearColor& SampleColor, float& SampleIntensity, float& SampleSize); // [0x40682e0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture
	// void BreakImportanceTexture(FImportanceTexture& ImportanceTexture, class UTexture2D*& Texture, TEnumAsByte<EImportanceWeight>& WeightingFunc); // [0x40666b0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UImportantToggleSettingInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UInGameAdManager : public UPlatformInterfaceBase
{ 
public:
	bool                                               bShouldPauseWhileAdOpen : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	SDK_UNDEFINED(16,147) /* TArray<FDelegateProperty> */ __um(ClickedBannerDelegates);                            // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,148) /* TArray<FDelegateProperty> */ __um(ClosedAdDelegates);                                 // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FComponentKey
{ 
	class UClass*                                      OwnerClass;                                                 // 0x0000   (0x0008)  
	FName                                              SCSVariableName;                                            // 0x0008   (0x0008)  
	FGuid                                              AssociatedGuid;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBlueprintComponentChangedPropertyInfo
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	int32_t                                            ArrayIndex;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UStruct*                                     PropertyScope;                                              // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FBlueprintCookedComponentInstancingData
{ 
	TArray<FBlueprintComponentChangedPropertyInfo>     ChangedPropertyList;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_6[0x11];                                      // 0x0010   (0x0011)  MISSED
	bool                                               bHasValidCookedData;                                        // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_7[0x26];                                      // 0x0022   (0x0026)  MISSED
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FComponentOverrideRecord
{ 
	class UClass*                                      ComponentClass;                                             // 0x0000   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0008   (0x0008)  
	FComponentKey                                      ComponentKey;                                               // 0x0010   (0x0020)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0030   (0x0048)  
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UInheritableComponentHandler : public UObject
{ 
public:
	TArray<FComponentOverrideRecord>                   Records;                                                    // 0x0028   (0x0010)  
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                      // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FBlueprintInputDelegateBinding
{ 
	bool                                               bConsumeInput : 1;                                          // 0x0000:0 (0x0001)  
	bool                                               bExecuteWhenPaused : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bOverrideParentBinding : 1;                                 // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x0014 (20 bytes) (0x000004 - 0x000018) align 4 pad: 0x0000
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputActionName;                                            // 0x0004   (0x0008)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings;                                // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000004 - 0x000014) align 4 pad: 0x0000
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputAxisName;                                              // 0x0004   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x000C   (0x0008)  
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0024 (36 bytes) (0x000004 - 0x000028) align 8 pad: 0x0000
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FKey                                               AxisKey;                                                    // 0x0008   (0x0018)  
	FName                                              FunctionNameToBind;                                         // 0x0020   (0x0008)  
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings;                               // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FCachedKeyToActionInfo
{ 
	class UPlayerInput*                                PlayerInput;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x68];                                      // 0x0008   (0x0068)  MISSED
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0088 (136 bytes) (0x0000B0 - 0x000138) align 8 pad: 0x0000
class UInputComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x70];                                      // 0x00B0   (0x0070)  MISSED
	TArray<FCachedKeyToActionInfo>                     CachedKeyToActionInfo;                                      // 0x0120   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0130   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	// bool WasControllerKeyJustReleased(FKey Key);                                                                             // [0x406e540] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	// bool WasControllerKeyJustPressed(FKey Key);                                                                              // [0x406e540] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	// bool IsControllerKeyDown(FKey Key);                                                                                      // [0x406e540] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetTouchState
	// void GetTouchState(int32_t FingerIndex, float& LocationX, float& LocationY, bool& bIsCurrentlyPressed);                  // [0x406e3c0] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	// FVector GetControllerVectorKeyState(FKey Key);                                                                           // [0x406de40] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	// void GetControllerMouseDelta(float& DeltaX, float& DeltaY);                                                              // [0x406dd60] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	// float GetControllerKeyTimeDown(FKey Key);                                                                                // [0x406db30] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	// void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float& StickX, float& StickY);        // [0x406dc30] Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	// float GetControllerAnalogKeyState(FKey Key);                                                                             // [0x406db30] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x0034 (52 bytes) (0x000004 - 0x000038) align 8 pad: 0x0000
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData00_3[0x4];                                       // 0x0004   (0x0004)  MISSED
	FInputChord                                        InputChord;                                                 // 0x0008   (0x0020)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x002C   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings;                                   // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FInputAxisProperties
{ 
	float                                              DeadZone;                                                   // 0x0000   (0x0004)  
	float                                              Sensitivity;                                                // 0x0004   (0x0004)  
	float                                              Exponent;                                                   // 0x0008   (0x0004)  
	bool                                               bInvert : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FInputAxisConfigEntry
{ 
	FName                                              AxisKeyName;                                                // 0x0000   (0x0008)  
	FInputAxisProperties                               AxisProperties;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FInputActionKeyMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	bool                                               bShift : 1;                                                 // 0x0008:0 (0x0001)  
	bool                                               bCtrl : 1;                                                  // 0x0008:1 (0x0001)  
	bool                                               bAlt : 1;                                                   // 0x0008:2 (0x0001)  
	bool                                               bCmd : 1;                                                   // 0x0008:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0018)  
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FInputAxisKeyMapping
{ 
	FName                                              AxisName;                                                   // 0x0000   (0x0008)  
	float                                              Scale;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0018)  
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FInputActionSpeechMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FName                                              SpeechKeyword;                                              // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputSettings
/// Size: 0x0118 (280 bytes) (0x000028 - 0x000140) align 8 pad: 0x0000
class UInputSettings : public UObject
{ 
public:
	TArray<FInputAxisConfigEntry>                      AxisConfig;                                                 // 0x0028   (0x0010)  
	bool                                               bAltEnterTogglesFullscreen : 1;                             // 0x0038:0 (0x0001)  
	bool                                               bF11TogglesFullscreen : 1;                                  // 0x0038:1 (0x0001)  
	bool                                               bUseMouseForTouch : 1;                                      // 0x0038:2 (0x0001)  
	bool                                               bEnableMouseSmoothing : 1;                                  // 0x0038:3 (0x0001)  
	bool                                               bEnableFOVScaling : 1;                                      // 0x0038:4 (0x0001)  
	bool                                               bCaptureMouseOnLaunch : 1;                                  // 0x0038:5 (0x0001)  
	bool                                               bDefaultViewportMouseLock : 1;                              // 0x0038:6 (0x0001)  
	bool                                               bAlwaysShowTouchInterface : 1;                              // 0x0038:7 (0x0001)  
	bool                                               bShowConsoleOnFourFingerTap : 1;                            // 0x0039:0 (0x0001)  
	bool                                               bEnableGestureRecognizer : 1;                               // 0x0039:1 (0x0001)  
	bool                                               bUseAutocorrect;                                            // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x003B   (0x0005)  MISSED
	TArray<FString>                                    ExcludedAutocorrectOS;                                      // 0x0040   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectCultures;                                // 0x0050   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectDeviceModels;                            // 0x0060   (0x0010)  
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                            // 0x0070   (0x0001)  
	EMouseLockMode                                     DefaultViewportMouseLockMode;                               // 0x0071   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	float                                              FOVScale;                                                   // 0x0074   (0x0004)  
	float                                              DoubleClickTime;                                            // 0x0078   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FInputActionKeyMapping>                     ActionMappings;                                             // 0x0080   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                               // 0x0090   (0x0010)  
	TArray<FInputActionSpeechMapping>                  SpeechMappings;                                             // 0x00A0   (0x0010)  
	SDK_UNDEFINED(40,149) /* TWeakObjectPtr<UClass*> */ __um(DefaultPlayerInputClass);                             // 0x00B0   (0x0028)  
	SDK_UNDEFINED(40,150) /* TWeakObjectPtr<UClass*> */ __um(DefaultInputComponentClass);                          // 0x00D8   (0x0028)  
	FSoftObjectPath                                    DefaultTouchInterface;                                      // 0x0100   (0x0018)  
	FKey                                               ConsoleKey;                                                 // 0x0118   (0x0018)  
	TArray<FKey>                                       ConsoleKeys;                                                // 0x0130   (0x0010)  


	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	// void SaveKeyMappings();                                                                                                  // [0x406e9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	// void RemoveAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                     // [0x406e7a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	// void RemoveActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                 // [0x406e630] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.GetInputSettings
	// class UInputSettings* GetInputSettings();                                                                                // [0x406df50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.InputSettings.GetAxisNames
	// void GetAxisNames(TArray<FName>& AxisNames);                                                                             // [0x406da80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	// void GetAxisMappingByName(FName InAxisName, TArray<FInputAxisKeyMapping>& OutMappings);                                  // [0x406d940] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionNames
	// void GetActionNames(TArray<FName>& ActionNames);                                                                         // [0x406d890] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	// void GetActionMappingByName(FName InActionName, TArray<FInputActionKeyMapping>& OutMappings);                            // [0x406d750] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	// void ForceRebuildKeymaps();                                                                                              // [0x406d730] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	// void AddAxisMapping(FInputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                        // [0x406ce50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InputSettings.AddActionMapping
	// void AddActionMapping(FInputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);                                    // [0x406cce0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x000C (12 bytes) (0x000004 - 0x000010) align 4 pad: 0x0000
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{ 
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings;                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
public:
};

/// Class /Script/Engine.Interface_ActorSubobject
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterface_ActorSubobject : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterface_AssetUserData : public UInterface
{ 
public:
};

/// Class /Script/Engine.BoneReferenceSkeletonProvider
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UBoneReferenceSkeletonProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterface_CollisionDataProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterface_PostProcessVolume : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterface_PreviewMeshProvider : public UInterface
{ 
public:
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FCurveEdEntry
{ 
	class UObject*                                     CurveObject;                                                // 0x0000   (0x0008)  
	FColor                                             CurveColor;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            CurveName;                                                  // 0x0010   (0x0010)  
	int32_t                                            bHideCurve;                                                 // 0x0020   (0x0004)  
	int32_t                                            bColorCurve;                                                // 0x0024   (0x0004)  
	int32_t                                            bFloatingPointColorCurve;                                   // 0x0028   (0x0004)  
	int32_t                                            bClamp;                                                     // 0x002C   (0x0004)  
	float                                              ClampLow;                                                   // 0x0030   (0x0004)  
	float                                              ClampHigh;                                                  // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCurveEdTab
{ 
	FString                                            TabName;                                                    // 0x0000   (0x0010)  
	TArray<FCurveEdEntry>                              Curves;                                                     // 0x0010   (0x0010)  
	float                                              ViewStartInput;                                             // 0x0020   (0x0004)  
	float                                              ViewEndInput;                                               // 0x0024   (0x0004)  
	float                                              ViewStartOutput;                                            // 0x0028   (0x0004)  
	float                                              ViewEndOutput;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UInterpCurveEdSetup : public UObject
{ 
public:
	TArray<FCurveEdTab>                                Tabs;                                                       // 0x0028   (0x0010)  
	int32_t                                            ActiveTab;                                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpData
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UInterpData : public UObject
{ 
public:
	float                                              InterpLength;                                               // 0x0028   (0x0004)  
	float                                              PathBuildTime;                                              // 0x002C   (0x0004)  
	TArray<class UInterpGroup*>                        InterpGroups;                                               // 0x0030   (0x0010)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0040   (0x0008)  
	float                                              EdSectionStart;                                             // 0x0048   (0x0004)  
	float                                              EdSectionEnd;                                               // 0x004C   (0x0004)  
	bool                                               bShouldBakeAndPrune : 1;                                    // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	class UInterpGroupDirector*                        CachedDirectorGroup;                                        // 0x0058   (0x0008)  
	TArray<FName>                                      AllEventNames;                                              // 0x0060   (0x0010)  
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInterpFilter : public UObject
{ 
public:
	FString                                            Caption;                                                    // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UInterpFilter_Classes : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UInterpFilter_Custom : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UInterpGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<class UInterpTrack*>                        InterpTracks;                                               // 0x0030   (0x0010)  
	FName                                              GroupName;                                                  // 0x0040   (0x0008)  
	FColor                                             GroupColor;                                                 // 0x0048   (0x0004)  
	bool                                               bCollapsed : 1;                                             // 0x004C:0 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x004C:1 (0x0001)  
	bool                                               bIsFolder : 1;                                              // 0x004C:2 (0x0001)  
	bool                                               bIsParented : 1;                                            // 0x004C:3 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x004C:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class UInterpGroupCamera : public UInterpGroup
{ 
public:
	class UCameraAnim*                                 CameraAnimInst;                                             // 0x0050   (0x0008)  
	float                                              CompressTolerance;                                          // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class UInterpGroupDirector : public UInterpGroup
{ 
public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UInterpGroupInst : public UObject
{ 
public:
	class UInterpGroup*                                Group;                                                      // 0x0028   (0x0008)  
	class AActor*                                      GroupActor;                                                 // 0x0030   (0x0008)  
	TArray<class UInterpTrackInst*>                    TrackInst;                                                  // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FInterpControlPoint
{ 
	FVector                                            PositionControlPoint;                                       // 0x0000   (0x000C)  
	bool                                               bPositionIsRelative;                                        // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x000D   (0x000F)  MISSED
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x00A0 (160 bytes) (0x0000F0 - 0x000190) align 8 pad: 0x0000
class UInterpToMovementComponent : public UMovementComponent
{ 
public:
	float                                              Duration;                                                   // 0x00F0   (0x0004)  
	bool                                               bPauseOnImpact : 1;                                         // 0x00F4:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00F5   (0x0003)  MISSED
	bool                                               bSweep;                                                     // 0x00F8   (0x0001)  
	ETeleportType                                      TeleportType;                                               // 0x00F9   (0x0001)  
	EInterpToBehaviourType                             BehaviourType;                                              // 0x00FA   (0x0001)  
	bool                                               bCheckIfStillInWorld;                                       // 0x00FB   (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x00FC:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00FD   (0x0003)  MISSED
	SDK_UNDEFINED(16,151) /* FMulticastInlineDelegate */ __um(OnInterpToReverse);                                  // 0x0100   (0x0010)  
	SDK_UNDEFINED(16,152) /* FMulticastInlineDelegate */ __um(OnInterpToStop);                                     // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,153) /* FMulticastInlineDelegate */ __um(OnWaitBeginDelegate);                                // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,154) /* FMulticastInlineDelegate */ __um(OnWaitEndDelegate);                                  // 0x0130   (0x0010)  
	SDK_UNDEFINED(16,155) /* FMulticastInlineDelegate */ __um(OnResetDelegate);                                    // 0x0140   (0x0010)  
	float                                              MaxSimulationTimeStep;                                      // 0x0150   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0154   (0x0004)  
	TArray<FInterpControlPoint>                        ControlPoints;                                              // 0x0158   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0168   (0x0028)  MISSED


	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	// void StopSimulating(FHitResult& HitResult);                                                                              // [0x4072210] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	// void RestartMovement(float InitialDirection);                                                                            // [0x4072190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.ResetControlPoints
	// void ResetControlPoints();                                                                                               // [0x4072170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	// void OnInterpToWaitEndDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	// void OnInterpToWaitBeginDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                               // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	// void OnInterpToStopDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                    // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	// void OnInterpToReverseDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                 // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	// void OnInterpToResetDelegate__DelegateSignature(FHitResult& ImpactResult, float Time);                                   // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	// void FinaliseControlPoints();                                                                                            // [0x4072150] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.InterpToMovementComponent.AddControlPointPosition
	// void AddControlPointPosition(FVector Pos, bool bPositionIsRelative);                                                     // [0x4072070] Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UInterpTrack : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class UInterpTrack*>                        SubTracks;                                                  // 0x0038   (0x0010)  
	class UClass*                                      TrackInstClass;                                             // 0x0048   (0x0008)  
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FString                                            TrackTitle;                                                 // 0x0058   (0x0010)  
	bool                                               bOnePerGroup : 1;                                           // 0x0068:0 (0x0001)  
	bool                                               bDirGroupOnly : 1;                                          // 0x0068:1 (0x0001)  
	bool                                               bDisableTrack : 1;                                          // 0x0068:2 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0068:3 (0x0001)  
	bool                                               bIsAnimControlTrack : 1;                                    // 0x0068:4 (0x0001)  
	bool                                               bSubTrackOnly : 1;                                          // 0x0068:5 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0068:6 (0x0001)  
	bool                                               bIsRecording : 1;                                           // 0x0068:7 (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0020 (32 bytes) (0x000070 - 0x000090) align 8 pad: 0x0000
class UInterpTrackFloatBase : public UInterpTrack
{ 
public:
	FInterpCurveFloat                                  FloatTrack;                                                 // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimControlTrackKey
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	float                                              AnimStartOffset;                                            // 0x0010   (0x0004)  
	float                                              AnimEndOffset;                                              // 0x0014   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0018   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x001C:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x001C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x0020 (32 bytes) (0x000090 - 0x0000B0) align 8 pad: 0x0000
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
public:
	FName                                              SlotName;                                                   // 0x0090   (0x0008)  
	TArray<FAnimControlTrackKey>                       AnimSeqs;                                                   // 0x0098   (0x0010)  
	bool                                               bSkipAnimNotifiers : 1;                                     // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0020 (32 bytes) (0x000070 - 0x000090) align 8 pad: 0x0000
class UInterpTrackVectorBase : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 VectorTrack;                                                // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FBoolTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	bool                                               Value : 1;                                                  // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
class UInterpTrackBoolProp : public UInterpTrack
{ 
public:
	TArray<FBoolTrackKey>                              BoolTrack;                                                  // 0x0070   (0x0010)  
	FName                                              PropertyName;                                               // 0x0080   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FDirectorTrackCut
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              TransitionTime;                                             // 0x0004   (0x0004)  
	FName                                              TargetCamGroup;                                             // 0x0008   (0x0008)  
	int32_t                                            ShotNumber;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
class UInterpTrackDirector : public UInterpTrack
{ 
public:
	TArray<FDirectorTrackCut>                          CutTrack;                                                   // 0x0070   (0x0010)  
	bool                                               bSimulateCameraCutsOnClients : 1;                           // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FEventTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              EventName;                                                  // 0x0004   (0x0008)  
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
class UInterpTrackEvent : public UInterpTrack
{ 
public:
	TArray<FEventTrackKey>                             EventTrack;                                                 // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	bool                                               bUseCustomEventName : 1;                                    // 0x0080:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
public:
	bool                                               bPersistFade : 1;                                           // 0x0090:0 (0x0001)  
	bool                                               bFadeAudio : 1;                                             // 0x0090:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	FLinearColor                                       FadeColor;                                                  // 0x0094   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x0020 (32 bytes) (0x000090 - 0x0000B0) align 8 pad: 0x0000
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                         // 0x0090   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x0098   (0x0008)  
	FName                                              paramName;                                                  // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              paramName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
public:
	FName                                              paramName;                                                  // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterpTrackInst : public UObject
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0028   (0x0020)  MISSED
	class UObject*                                     PropertyOuterObjectInst;                                    // 0x0048   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0018 (24 bytes) (0x000050 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0050   (0x0010)  MISSED
	bool                                               ResetBool;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FColor                                             ResetColor;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
public:
	class AActor*                                      OldViewTarget;                                              // 0x0028   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UInterpTrackInstFade : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
public:
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0028   (0x0008)  
	float                                              ResetFloat;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0034   (0x000C)  MISSED
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FPrimitiveMaterialRef
{ 
	class UPrimitiveComponent*                         Primitive;                                                  // 0x0000   (0x0008)  
	class UDecalComponent*                             Decal;                                                      // 0x0008   (0x0008)  
	int32_t                                            ElementIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<float>                                      ResetFloats;                                                // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
public:
	float                                              ResetFloat;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	float                                              ResetFloat;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0018 (24 bytes) (0x000050 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FLinearColor                                       ResetColor;                                                 // 0x0058   (0x0010)  
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UInterpTrackInstMove : public UInterpTrackInst
{ 
public:
	FVector                                            ResetLocation;                                              // 0x0028   (0x000C)  
	FRotator                                           ResetRotation;                                              // 0x0034   (0x000C)  
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
public:
	float                                              OldTimeDilation;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstSound : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UAudioComponent*                             PlayAudioComp;                                              // 0x0030   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
	bool                                               bSavedActiveState : 1;                                      // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<FVector>                                    ResetVectors;                                               // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0018 (24 bytes) (0x000050 - 0x000068) align 8 pad: 0x0000
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0050   (0x0008)  MISSED
	FVector                                            ResetVector;                                                // 0x0058   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0020 (32 bytes) (0x000070 - 0x000090) align 8 pad: 0x0000
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
public:
	FInterpCurveLinearColor                            LinearColorTrack;                                           // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FInterpLookupPoint
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FInterpLookupTrack
{ 
	TArray<FInterpLookupPoint>                         Points;                                                     // 0x0000   (0x0010)  
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0058 (88 bytes) (0x000070 - 0x0000C8) align 8 pad: 0x0000
class UInterpTrackMove : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 PosTrack;                                                   // 0x0070   (0x0018)  
	FInterpCurveVector                                 EulerTrack;                                                 // 0x0088   (0x0018)  
	FInterpLookupTrack                                 LookupTrack;                                                // 0x00A0   (0x0010)  
	FName                                              LookAtGroupName;                                            // 0x00B0   (0x0008)  
	float                                              LinCurveTension;                                            // 0x00B8   (0x0004)  
	float                                              AngCurveTension;                                            // 0x00BC   (0x0004)  
	bool                                               bUseQuatInterpolation : 1;                                  // 0x00C0:0 (0x0001)  
	bool                                               bShowArrowAtKeys : 1;                                       // 0x00C0:1 (0x0001)  
	bool                                               bDisableMovement : 1;                                       // 0x00C0:2 (0x0001)  
	bool                                               bShowTranslationOnCurveEd : 1;                              // 0x00C0:3 (0x0001)  
	bool                                               bShowRotationOnCurveEd : 1;                                 // 0x00C0:4 (0x0001)  
	bool                                               bHide3DTrack : 1;                                           // 0x00C0:5 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                    // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x00C5   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FInterpLookupTrack                                 LookupTrack;                                                // 0x0098   (0x0010)  
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FParticleReplayTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
	int32_t                                            ClipIDNumber;                                               // 0x0008   (0x0004)  
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0010 (16 bytes) (0x000070 - 0x000080) align 8 pad: 0x0000
class UInterpTrackParticleReplay : public UInterpTrack
{ 
public:
	TArray<FParticleReplayTrackKey>                    TrackKeys;                                                  // 0x0070   (0x0010)  
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
public:
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FSoundTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Volume;                                                     // 0x0004   (0x0004)  
	float                                              Pitch;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class USoundBase*                                  Sound;                                                      // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
public:
	TArray<FSoundTrackKey>                             Sounds;                                                     // 0x0090   (0x0010)  
	bool                                               bPlayOnReverse : 1;                                         // 0x00A0:0 (0x0001)  
	bool                                               bContinueSoundOnMatineeEnd : 1;                             // 0x00A0:1 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x00A0:2 (0x0001)  
	bool                                               bTreatAsDialogue : 1;                                       // 0x00A0:3 (0x0001)  
	bool                                               bAttach : 1;                                                // 0x00A0:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FToggleTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<ETrackToggleAction>                    ToggleAction;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
class UInterpTrackToggle : public UInterpTrack
{ 
public:
	TArray<FToggleTrackKey>                            ToggleTrack;                                                // 0x0070   (0x0010)  
	bool                                               bActivateSystemEachUpdate : 1;                              // 0x0080:0 (0x0001)  
	bool                                               bActivateWithJustAttachedFlag : 1;                          // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:2 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:3 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              paramName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0008 (8 bytes) (0x000090 - 0x000098) align 8 pad: 0x0000
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FVisibilityTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<EVisibilityTrackCondition>             ActiveCondition;                                            // 0x0005   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0018 (24 bytes) (0x000070 - 0x000088) align 8 pad: 0x0000
class UInterpTrackVisibility : public UInterpTrack
{ 
public:
	TArray<FVisibilityTrackKey>                        VisibilityTrack;                                            // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UIntSerialization : public UObject
{ 
public:
	uint16_t                                           UnsignedInt16Variable;                                      // 0x0028   (0x0002)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	uint32_t                                           UnsignedInt32Variable;                                      // 0x002C   (0x0004)  
	uint64_t                                           UnsignedInt64Variable;                                      // 0x0030   (0x0008)  
	int8_t                                             SignedInt8Variable;                                         // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0039   (0x0001)  MISSED
	int16_t                                            SignedInt16Variable;                                        // 0x003A   (0x0002)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	int64_t                                            SignedInt64Variable;                                        // 0x0040   (0x0008)  
	char                                               UnsignedInt8Variable;                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            SignedInt32Variable;                                        // 0x004C   (0x0004)  
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0000 (0 bytes) (0x000268 - 0x000268) align 8 pad: 0x0000
class AKillZVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetArrayLibrary.SetArrayPropertyByName
	// void SetArrayPropertyByName(class UObject* Object, FName PropertyName, TArray<int32_t>& Value);                          // [0x4077d80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.FilterArray
	// void FilterArray(TArray<AActor*>& TargetArray, class UClass* FilterClass, TArray<AActor*>& FilteredArray);               // [0x4077c30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Swap
	// void Array_Swap(TArray<int32_t>& TargetArray, int32_t FirstIndex, int32_t SecondIndex);                                  // [0x4077af0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Shuffle
	// void Array_Shuffle(TArray<int32_t>& TargetArray);                                                                        // [0x4077a50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Set
	// void Array_Set(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item, bool bSizeToFit);                             // [0x4077820] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Reverse
	// void Array_Reverse(TArray<int32_t>& TargetArray);                                                                        // [0x4077780] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Resize
	// void Array_Resize(TArray<int32_t>& TargetArray, int32_t Size);                                                           // [0x4077690] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RemoveItem
	// bool Array_RemoveItem(TArray<int32_t>& TargetArray, int32_t& Item);                                                      // [0x40774d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Remove
	// void Array_Remove(TArray<int32_t>& TargetArray, int32_t IndexToRemove);                                                  // [0x40773e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_RandomFromStream
	// void Array_RandomFromStream(TArray<int32_t>& TargetArray, FRandomStream& RandomStream, int32_t& OutItem, int32_t& OutIndex); // [0x4077250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Random
	// void Array_Random(TArray<int32_t>& TargetArray, int32_t& OutItem, int32_t& OutIndex);                                    // [0x4077110] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Length
	// int32_t Array_Length(TArray<int32_t>& TargetArray);                                                                      // [0x4077060] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_LastIndex
	// int32_t Array_LastIndex(TArray<int32_t>& TargetArray);                                                                   // [0x4076fb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_IsValidIndex
	// bool Array_IsValidIndex(TArray<int32_t>& TargetArray, int32_t IndexToTest);                                              // [0x932250] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Insert
	// void Array_Insert(TArray<int32_t>& TargetArray, int32_t& NewItem, int32_t Index);                                        // [0x4076dc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Identical
	// bool Array_Identical(TArray<int32_t>& ArrayA, TArray<int32_t>& ArrayB);                                                  // [0x4076ca0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Get
	// void Array_Get(TArray<int32_t>& TargetArray, int32_t Index, int32_t& Item);                                              // [0x4076aa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Find
	// int32_t Array_Find(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                   // [0x40768e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Contains
	// bool Array_Contains(TArray<int32_t>& TargetArray, int32_t& ItemToFind);                                                  // [0x4076720] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetArrayLibrary.Array_Clear
	// void Array_Clear(TArray<int32_t>& TargetArray);                                                                          // [0x4076680] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Append
	// void Array_Append(TArray<int32_t>& TargetArray, TArray<int32_t>& SourceArray);                                           // [0x4076570] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_AddUnique
	// int32_t Array_AddUnique(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                 // [0x40763c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetArrayLibrary.Array_Add
	// int32_t Array_Add(TArray<int32_t>& TargetArray, int32_t& NewItem);                                                       // [0x4076210] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetGuidLibrary.Parse_StringToGuid
	// void Parse_StringToGuid(FString GuidString, FGuid& OutGuid, bool& Success);                                              // [0x407c220] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid
	// bool NotEqual_GuidGuid(FGuid& A, FGuid& B);                                                                              // [0x407c120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.NewGuid
	// FGuid NewGuid();                                                                                                         // [0x407c0e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.IsValid_Guid
	// bool IsValid_Guid(FGuid& InGuid);                                                                                        // [0x407b180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Invalidate_Guid
	// void Invalidate_Guid(FGuid& InGuid);                                                                                     // [0x407b0f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	// bool EqualEqual_GuidGuid(FGuid& A, FGuid& B);                                                                            // [0x4079540] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetGuidLibrary.Conv_GuidToString
	// FString Conv_GuidToString(FGuid& InGuid);                                                                                // [0x4079310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	// bool PointerEvent_IsTouchEvent(FPointerEvent& Input);                                                                    // [0x407d190] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	// bool PointerEvent_IsMouseButtonDown(FPointerEvent& Input, FKey MouseButton);                                             // [0x407cfc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	// float PointerEvent_GetWheelDelta(FPointerEvent& Input);                                                                  // [0x407ce90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	// int32_t PointerEvent_GetUserIndex(FPointerEvent& Input);                                                                 // [0x407cd60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	// int32_t PointerEvent_GetTouchpadIndex(FPointerEvent& Input);                                                             // [0x407cc30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	// FVector2D PointerEvent_GetScreenSpacePosition(FPointerEvent& Input);                                                     // [0x407caf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	// int32_t PointerEvent_GetPointerIndex(FPointerEvent& Input);                                                              // [0x407c9c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	// FVector2D PointerEvent_GetLastScreenSpacePosition(FPointerEvent& Input);                                                 // [0x407c880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType
	// ESlateGesture PointerEvent_GetGestureType(FPointerEvent& Input);                                                         // [0x407c750] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	// FVector2D PointerEvent_GetGestureDelta(FPointerEvent& Input);                                                            // [0x407c610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	// FKey PointerEvent_GetEffectingButton(FPointerEvent& Input);                                                              // [0x407c4a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	// FVector2D PointerEvent_GetCursorDelta(FPointerEvent& Input);                                                             // [0x407c360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsVectorAxis
	// bool Key_IsVectorAxis(FKey& Key);                                                                                        // [0x407c010] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsValid
	// bool Key_IsValid(FKey& Key);                                                                                             // [0x407bf40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsMouseButton
	// bool Key_IsMouseButton(FKey& Key);                                                                                       // [0x407be70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsModifierKey
	// bool Key_IsModifierKey(FKey& Key);                                                                                       // [0x407bda0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsKeyboardKey
	// bool Key_IsKeyboardKey(FKey& Key);                                                                                       // [0x407bcd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsGamepadKey
	// bool Key_IsGamepadKey(FKey& Key);                                                                                        // [0x407bc00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsDigital
	// bool Key_IsDigital(FKey& Key);                                                                                           // [0x407bb30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsButtonAxis
	// bool Key_IsButtonAxis(FKey& Key);                                                                                        // [0x407ba60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis3D
	// bool Key_IsAxis3D(FKey& Key);                                                                                            // [0x407b990] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis2D
	// bool Key_IsAxis2D(FKey& Key);                                                                                            // [0x407b8c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis1D
	// bool Key_IsAxis1D(FKey& Key);                                                                                            // [0x407b7f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAnalog
	// bool Key_IsAnalog(FKey& Key);                                                                                            // [0x407b720] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
	// EUINavigation Key_GetNavigationDirectionFromKey(FKeyEvent& InKeyEvent);                                                  // [0x407b620] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
	// EUINavigation Key_GetNavigationDirectionFromAnalog(FAnalogInputEvent& InAnalogEvent);                                    // [0x407b510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
	// EUINavigationAction Key_GetNavigationActionFromKey(FKeyEvent& InKeyEvent);                                               // [0x407b410] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationAction
	// EUINavigationAction Key_GetNavigationAction(FKey& InKey);                                                                // [0x407b340] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.Key_GetDisplayName
	// FText Key_GetDisplayName(FKey& Key);                                                                                     // [0x407b220] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown
	// bool InputEvent_IsShiftDown(FInputEvent& Input);                                                                         // [0x407b040] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	// bool InputEvent_IsRightShiftDown(FInputEvent& Input);                                                                    // [0x407af90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	// bool InputEvent_IsRightControlDown(FInputEvent& Input);                                                                  // [0x407aee0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	// bool InputEvent_IsRightCommandDown(FInputEvent& Input);                                                                  // [0x407ae30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	// bool InputEvent_IsRightAltDown(FInputEvent& Input);                                                                      // [0x407ad80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRepeat
	// bool InputEvent_IsRepeat(FInputEvent& Input);                                                                            // [0x407acd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	// bool InputEvent_IsLeftShiftDown(FInputEvent& Input);                                                                     // [0x407ac20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	// bool InputEvent_IsLeftControlDown(FInputEvent& Input);                                                                   // [0x407ab70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	// bool InputEvent_IsLeftCommandDown(FInputEvent& Input);                                                                   // [0x407aac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	// bool InputEvent_IsLeftAltDown(FInputEvent& Input);                                                                       // [0x407aa10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsControlDown
	// bool InputEvent_IsControlDown(FInputEvent& Input);                                                                       // [0x407a960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown
	// bool InputEvent_IsCommandDown(FInputEvent& Input);                                                                       // [0x407a8b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsAltDown
	// bool InputEvent_IsAltDown(FInputEvent& Input);                                                                           // [0x407a800] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.InputChord_GetDisplayName
	// FText InputChord_GetDisplayName(FInputChord& Key);                                                                       // [0x407a6b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetUserIndex
	// int32_t GetUserIndex(FKeyEvent& Input);                                                                                  // [0x407a4a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetKey
	// FKey GetKey(FKeyEvent& Input);                                                                                           // [0x4079da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.GetAnalogValue
	// float GetAnalogValue(FAnalogInputEvent& Input);                                                                          // [0x40799a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_KeyKey
	// bool EqualEqual_KeyKey(FKey A, FKey B);                                                                                  // [0x4079820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	// bool EqualEqual_InputChordInputChord(FInputChord A, FInputChord B);                                                      // [0x4079640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInputLibrary.CalibrateTilt
	// void CalibrateTilt();                                                                                                    // [0x4079230] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale
	// bool SetCurrentLocale(FString Culture, bool SaveToConfig);                                                               // [0x407d690] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	// bool SetCurrentLanguageAndLocale(FString Culture, bool SaveToConfig);                                                    // [0x407d5b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	// bool SetCurrentLanguage(FString Culture, bool SaveToConfig);                                                             // [0x407d4d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture
	// bool SetCurrentCulture(FString Culture, bool SaveToConfig);                                                              // [0x407d3f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	// bool SetCurrentAssetGroupCulture(FName AssetGroup, FString Culture, bool SaveToConfig);                                  // [0x407d2c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetSuitableCulture
	// FString GetSuitableCulture(TArray<FString>& AvailableCultures, FString CultureToMatch, FString FallbackCulture);         // [0x407a2d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetNativeCulture
	// FString GetNativeCulture(ELocalizedTextSourceCategory TextCategory);                                                     // [0x407a100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetLocalizedCultures
	// TArray<FString> GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);  // [0x4079ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale
	// FString GetCurrentLocale();                                                                                              // [0x4079d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	// FString GetCurrentLanguage();                                                                                            // [0x4079ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture
	// FString GetCurrentCulture();                                                                                             // [0x4079ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	// FString GetCurrentAssetGroupCulture(FName AssetGroup);                                                                   // [0x4079bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCultureDisplayName
	// FString GetCultureDisplayName(FString Culture, bool Localized);                                                          // [0x4079ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
	// void ClearCurrentAssetGroupCulture(FName AssetGroup, bool SaveToConfig);                                                 // [0x4079250] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetMaterialLibrary.SetVectorParameterValue
	// void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, FLinearColor& ParameterValue); // [0x407d8c0] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.SetScalarParameterValue
	// void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName, float ParameterValue); // [0x407d770] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetVectorParameterValue
	// FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x407a5a0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.GetScalarParameterValue
	// float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, FName ParameterName); // [0x407a1d0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent, FName OptionalName, EMIDCreationFlags CreationFlags); // [0x40793f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetMathLibrary.Xor_IntInt
	// int32_t Xor_IntInt(int32_t A, int32_t B);                                                                                // [0x40ad4b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Xor_Int64Int64
	// int64_t Xor_Int64Int64(int64_t A, int64_t B);                                                                            // [0x40ad3e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Wrap
	// int32_t Wrap(int32_t Value, int32_t Min, int32_t Max);                                                                   // [0x40ad2d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FVector
	// FVector WeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float Weight);                      // [0x40ad060] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
	// FRotator WeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float Weight);                  // [0x40acf10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_Float
	// float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);                              // [0x40ad1b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXYSquared
	// float VSizeXYSquared(FVector A);                                                                                         // [0x40a88d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeXY
	// float VSizeXY(FVector A);                                                                                                // [0x40a8840] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSizeSquared
	// float VSizeSquared(FVector A);                                                                                           // [0x40a87a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2DSquared
	// float VSize2DSquared(FVector2D A);                                                                                       // [0x40a8670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize2D
	// float VSize2D(FVector2D A);                                                                                              // [0x40a85e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VSize
	// float VSize(FVector A);                                                                                                  // [0x40a8700] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VLerp
	// FVector VLerp(FVector A, FVector B, float Alpha);                                                                        // [0x40a84a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo_Constant
	// FVector VInterpTo_Constant(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                         // [0x40a8310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo
	// FVector VInterpTo(FVector Current, FVector Target, float DeltaTime, float InterpSpeed);                                  // [0x40a8180] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VectorSpringInterp
	// FVector VectorSpringInterp(FVector Current, FVector Target, FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x40aa230] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Zero
	// FVector Vector_Zero();                                                                                                   // [0x40acee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Up
	// FVector Vector_Up();                                                                                                     // [0x40aceb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnwindEuler
	// void Vector_UnwindEuler(FVector& A);                                                                                     // [0x40ace30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
	// FVector2D Vector_UnitCartesianToSpherical(FVector A);                                                                    // [0x40acd40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToRadians
	// FVector Vector_ToRadians(FVector A);                                                                                     // [0x40acca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToDegrees
	// FVector Vector_ToDegrees(FVector A);                                                                                     // [0x40acc00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_SnappedToGrid
	// FVector Vector_SnappedToGrid(FVector InVect, float InGridSize);                                                          // [0x40aca40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Set
	// void Vector_Set(FVector& A, float X, float Y, float Z);                                                                  // [0x40ac8e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Right
	// FVector Vector_Right();                                                                                                  // [0x40ac8b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Reciprocal
	// FVector Vector_Reciprocal(FVector& A);                                                                                   // [0x40ac7c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ProjectOnToNormal
	// FVector Vector_ProjectOnToNormal(FVector V, FVector InNormal);                                                           // [0x40ac6c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_One
	// FVector Vector_One();                                                                                                    // [0x40ac690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_NormalUnsafe
	// FVector Vector_NormalUnsafe(FVector& A);                                                                                 // [0x40ac3c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normalize
	// void Vector_Normalize(FVector& A, float Tolerance);                                                                      // [0x40ac500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normal2D
	// FVector Vector_Normal2D(FVector A, float Tolerance);                                                                     // [0x40ac1f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_MirrorByPlane
	// FVector Vector_MirrorByPlane(FVector A, FPlane& InPlane);                                                                // [0x40ac0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Left
	// FVector Vector_Left();                                                                                                   // [0x40ac070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsZero
	// bool Vector_IsZero(FVector& A);                                                                                          // [0x40abfc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUnit
	// bool Vector_IsUnit(FVector& A, float SquaredLenthTolerance);                                                             // [0x40abea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUniform
	// bool Vector_IsUniform(FVector& A, float Tolerance);                                                                      // [0x40abd80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNormal
	// bool Vector_IsNormal(FVector& A);                                                                                        // [0x40abcb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNearlyZero
	// bool Vector_IsNearlyZero(FVector& A, float Tolerance);                                                                   // [0x40abba0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNAN
	// bool Vector_IsNAN(FVector& A);                                                                                           // [0x40abad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_HeadingAngle
	// float Vector_HeadingAngle(FVector A);                                                                                    // [0x40ab980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetSignVector
	// FVector Vector_GetSignVector(FVector A);                                                                                 // [0x40ab8c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetProjection
	// FVector Vector_GetProjection(FVector A);                                                                                 // [0x40ab820] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMin
	// float Vector_GetAbsMin(FVector A);                                                                                       // [0x40ab780] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMax
	// float Vector_GetAbsMax(FVector A);                                                                                       // [0x40ab6e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbs
	// FVector Vector_GetAbs(FVector A);                                                                                        // [0x40ab640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Forward
	// FVector Vector_Forward();                                                                                                // [0x40ab610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Down
	// FVector Vector_Down();                                                                                                   // [0x40ab5e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_DistanceSquared
	// float Vector_DistanceSquared(FVector v1, FVector v2);                                                                    // [0x40ab500] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2DSquared
	// float Vector_Distance2DSquared(FVector v1, FVector v2);                                                                  // [0x40ab340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2D
	// float Vector_Distance2D(FVector v1, FVector v2);                                                                         // [0x40ab270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance
	// float Vector_Distance(FVector v1, FVector v2);                                                                           // [0x40ab410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_CosineAngle2D
	// float Vector_CosineAngle2D(FVector A, FVector B);                                                                        // [0x40ab070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMin
	// FVector Vector_ComponentMin(FVector A, FVector B);                                                                       // [0x40aaf90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMax
	// FVector Vector_ComponentMax(FVector A, FVector B);                                                                       // [0x40aaeb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax2D
	// FVector Vector_ClampSizeMax2D(FVector A, float Max);                                                                     // [0x40aab20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax
	// FVector Vector_ClampSizeMax(FVector A, float Max);                                                                       // [0x40aacb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSize2D
	// FVector Vector_ClampSize2D(FVector A, float Min, float Max);                                                             // [0x40aa970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToCube
	// FVector Vector_BoundedToCube(FVector InVect, float InRadius);                                                            // [0x40aa860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToBox
	// FVector Vector_BoundedToBox(FVector InVect, FVector InBoxMin, FVector InBoxMax);                                         // [0x40aa720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Backward
	// FVector Vector_Backward();                                                                                               // [0x40aa6f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector_Assign
	// void Vector_Assign(FVector& A, FVector& InVector);                                                                       // [0x40aa610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector_AddBounded
	// void Vector_AddBounded(FVector& A, FVector InAddVect, float InRadius);                                                   // [0x40aa4a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Zero
	// FVector4 Vector4_Zero();                                                                                                 // [0x40aa210] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared3
	// float Vector4_SizeSquared3(FVector4& A);                                                                                 // [0x40aa080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared
	// float Vector4_SizeSquared(FVector4& A);                                                                                  // [0x40aa140] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size3
	// float Vector4_Size3(FVector4& A);                                                                                        // [0x40a9ef0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size
	// float Vector4_Size(FVector4& A);                                                                                         // [0x40a9fb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Set
	// void Vector4_Set(FVector4& A, float X, float Y, float Z, float W);                                                       // [0x40a9d40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_NormalUnsafe3
	// FVector4 Vector4_NormalUnsafe3(FVector4& A);                                                                             // [0x40a9a40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normalize3
	// void Vector4_Normalize3(FVector4& A, float Tolerance);                                                                   // [0x40a9b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normal3
	// FVector4 Vector4_Normal3(FVector4& A, float Tolerance);                                                                  // [0x40a9890] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Negated
	// FVector4 Vector4_Negated(FVector4& A);                                                                                   // [0x40a97f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_MirrorByVector3
	// FVector4 Vector4_MirrorByVector3(FVector4& Direction, FVector4& SurfaceNormal);                                          // [0x40a9660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsZero
	// bool Vector4_IsZero(FVector4& A);                                                                                        // [0x40a95a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsUnit3
	// bool Vector4_IsUnit3(FVector4& A, float SquaredLenthTolerance);                                                          // [0x40a9470] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNormal3
	// bool Vector4_IsNormal3(FVector4& A);                                                                                     // [0x40a93a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNearlyZero3
	// bool Vector4_IsNearlyZero3(FVector4& A, float Tolerance);                                                                // [0x40a9280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNAN
	// bool Vector4_IsNAN(FVector4& A);                                                                                         // [0x40a9190] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct3
	// float Vector4_DotProduct3(FVector4& A, FVector4& B);                                                                     // [0x40a8f40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct
	// float Vector4_DotProduct(FVector4& A, FVector4& B);                                                                      // [0x40a9060] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_CrossProduct3
	// FVector4 Vector4_CrossProduct3(FVector4& A, FVector4& B);                                                                // [0x40a8de0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Assign
	// void Vector4_Assign(FVector4& A, FVector4& InVector);                                                                    // [0x40a8cf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	// FVector2D Vector2DInterpTo_Constant(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);            // [0x40a8ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo
	// FVector2D Vector2DInterpTo(FVector2D Current, FVector2D Target, float DeltaTime, float InterpSpeed);                     // [0x40a8960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Zero
	// FVector2D Vector2D_Zero();                                                                                               // [0x40a8cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Unit45Deg
	// FVector2D Vector2D_Unit45Deg();                                                                                          // [0x40a8c90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_One
	// FVector2D Vector2D_One();                                                                                                // [0x40a8c60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.VEase
	// FVector VEase(FVector A, FVector B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);    // [0x40a7f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.UtcNow
	// FDateTime UtcNow();                                                                                                      // [0x40a7f30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformVector4
	// FVector4 TransformVector4(FMatrix& Matrix, FVector4& Vec4);                                                              // [0x40a7d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformRotation
	// FRotator TransformRotation(FTransform& T, FRotator Rotation);                                                            // [0x40a7be0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformLocation
	// FVector TransformLocation(FTransform& T, FVector Location);                                                              // [0x40a7a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TransformDirection
	// FVector TransformDirection(FTransform& T, FVector Direction);                                                            // [0x40a78d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Transform_Determinant
	// float Transform_Determinant(FTransform& Transform);                                                                      // [0x40a7e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToSign2D
	// FVector2D ToSign2D(FVector2D A);                                                                                         // [0x40a77d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToRounded2D
	// FVector2D ToRounded2D(FVector2D A);                                                                                      // [0x40a76c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ToDirectionAndLength2D
	// void ToDirectionAndLength2D(FVector2D A, FVector2D& OutDir, float& OutLength);                                           // [0x40a7530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Today
	// FDateTime Today();                                                                                                       // [0x40a7880] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TLerp
	// FTransform TLerp(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<ELerpInterpolationMode> InterpMode);             // [0x40a6ff0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TInterpTo
	// FTransform TInterpTo(FTransform& Current, FTransform& Target, float DeltaTime, float InterpSpeed);                       // [0x40a6dd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanZeroValue
	// FTimespan TimespanZeroValue();                                                                                           // [0x408be30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanRatio
	// float TimespanRatio(FTimespan A, FTimespan B);                                                                           // [0x40a7450] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMinValue
	// FTimespan TimespanMinValue();                                                                                            // [0x40a7420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanMaxValue
	// FTimespan TimespanMaxValue();                                                                                            // [0x40a73f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TimespanFromString
	// bool TimespanFromString(FString TimespanString, FTimespan& Result);                                                      // [0x40a72b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.TEase
	// FTransform TEase(FTransform& A, FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x40a6b40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Tan
	// float Tan(float A);                                                                                                      // [0x40a7220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorVector
	// FVector Subtract_VectorVector(FVector A, FVector B);                                                                     // [0x40a6a60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorInt
	// FVector Subtract_VectorInt(FVector A, int32_t B);                                                                        // [0x40a6970] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorFloat
	// FVector Subtract_VectorFloat(FVector A, float B);                                                                        // [0x40a6890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector4Vector4
	// FVector4 Subtract_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x40a6760] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	// FVector2D Subtract_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x40a6690] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat
	// FVector2D Subtract_Vector2DFloat(FVector2D A, float B);                                                                  // [0x40a65c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan
	// FTimespan Subtract_TimespanTimespan(FTimespan A, FTimespan B);                                                           // [0x40a5f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_QuatQuat
	// FQuat Subtract_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x40a64e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
	// FLinearColor Subtract_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x40a63f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointIntPoint
	// FIntPoint Subtract_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x40a6320] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointInt
	// FIntPoint Subtract_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x40a6240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntInt
	// int32_t Subtract_IntInt(int32_t A, int32_t B);                                                                           // [0x40a6180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Int64Int64
	// int64_t Subtract_Int64Int64(int64_t A, int64_t B);                                                                       // [0x40a60b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_FloatFloat
	// float Subtract_FloatFloat(float A, float B);                                                                             // [0x40a5fe0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	// FDateTime Subtract_DateTimeTimespan(FDateTime A, FTimespan B);                                                           // [0x40a5f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	// FTimespan Subtract_DateTimeDateTime(FDateTime A, FDateTime B);                                                           // [0x40a5f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Subtract_ByteByte
	// char Subtract_ByteByte(char A, char B);                                                                                  // [0x40a5e60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Square
	// float Square(float A);                                                                                                   // [0x40a5de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sqrt
	// float Sqrt(float A);                                                                                                     // [0x40a5d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Spherical2DToUnitCartesian
	// FVector Spherical2DToUnitCartesian(FVector2D A);                                                                         // [0x40a5c50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Sin
	// float Sin(float A);                                                                                                      // [0x40a5bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger64
	// int64_t SignOfInteger64(int64_t A);                                                                                      // [0x40a5a70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger
	// int32_t SignOfInteger(int32_t A);                                                                                        // [0x40a5b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SignOfFloat
	// float SignOfFloat(float A);                                                                                              // [0x40a59a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SetRandomStreamSeed
	// void SetRandomStreamSeed(FRandomStream& Stream, int32_t NewSeed);                                                        // [0x40a58d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Set2D
	// void Set2D(FVector2D& A, float X, float Y);                                                                              // [0x40a57c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SelectVector
	// FVector SelectVector(FVector A, FVector B, bool bPickA);                                                                 // [0x40a5310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectTransform
	// FTransform SelectTransform(FTransform& A, FTransform& B, bool bPickA);                                                   // [0x40a55f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectString
	// FString SelectString(FString A, FString B, bool bPickA);                                                                 // [0x40a5450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectRotator
	// FRotator SelectRotator(FRotator A, FRotator B, bool bPickA);                                                             // [0x40a5310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectObject
	// class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);                                          // [0x40a4ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectInt
	// int32_t SelectInt(int32_t A, int32_t B, bool bPickA);                                                                    // [0x40a5210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectFloat
	// float SelectFloat(float A, float B, bool bPickA);                                                                        // [0x40a50f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectColor
	// FLinearColor SelectColor(FLinearColor A, FLinearColor B, bool bPickA);                                                   // [0x40a4fd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SelectClass
	// class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);                                              // [0x40a4ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.SeedRandomStream
	// void SeedRandomStream(FRandomStream& Stream);                                                                            // [0x40a4e50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.SafeDivide
	// float SafeDivide(float A, float B);                                                                                      // [0x40a4d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round64
	// int64_t Round64(float A);                                                                                                // [0x40a4c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Round
	// int32_t Round(float A);                                                                                                  // [0x40a4cf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	// FRotator RotatorFromAxisAndAngle(FVector Axis, float Angle);                                                             // [0x40a4b30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RotateAngleAxis
	// FVector RotateAngleAxis(FVector InVect, float AngleDeg, FVector Axis);                                                   // [0x40a49e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RLerp
	// FRotator RLerp(FRotator A, FRotator B, float Alpha, bool bShortestPath);                                                 // [0x40a2d70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo_Constant
	// FRotator RInterpTo_Constant(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                      // [0x40a2be0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo
	// FRotator RInterpTo(FRotator Current, FRotator Target, float DeltaTime, float InterpSpeed);                               // [0x40a2a50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV_Vector
	// void RGBToHSV_Vector(FLinearColor RGB, FLinearColor& HSV);                                                               // [0x40a2970] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV
	// void RGBToHSV(FLinearColor InColor, float& H, float& S, float& V, float& A);                                             // [0x40a2780] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RGBLinearToHSV
	// FLinearColor RGBLinearToHSV(FLinearColor RGB);                                                                           // [0x40a26f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ResetVectorSpringState
	// void ResetVectorSpringState(FVectorSpringState& SpringState);                                                            // [0x40a4940] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetRandomStream
	// void ResetRandomStream(FRandomStream& Stream);                                                                           // [0x40a48c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.ResetFloatSpringState
	// void ResetFloatSpringState(FFloatSpringState& SpringState);                                                              // [0x40a4830] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.REase
	// FRotator REase(FRotator A, FRotator B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps); // [0x40a24a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	// FVector RandomUnitVectorInEllipticalConeInRadiansFromStream(FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, FRandomStream& Stream); // [0x40a46a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	// FVector RandomUnitVectorInEllipticalConeInRadians(FVector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);      // [0x40a4570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	// FVector RandomUnitVectorInEllipticalConeInDegreesFromStream(FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, FRandomStream& Stream); // [0x40a43d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	// FVector RandomUnitVectorInEllipticalConeInDegrees(FVector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);      // [0x40a4290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	// FVector RandomUnitVectorInConeInRadiansFromStream(FVector& ConeDir, float ConeHalfAngleInRadians, FRandomStream& Stream); // [0x40a4160] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	// FVector RandomUnitVectorInConeInRadians(FVector ConeDir, float ConeHalfAngleInRadians);                                  // [0x40a4070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	// FVector RandomUnitVectorInConeInDegreesFromStream(FVector& ConeDir, float ConeHalfAngleInDegrees, FRandomStream& Stream); // [0x40a3f30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	// FVector RandomUnitVectorInConeInDegrees(FVector ConeDir, float ConeHalfAngleInDegrees);                                  // [0x40a3e40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream
	// FVector RandomUnitVectorFromStream(FRandomStream& Stream);                                                               // [0x40a3da0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVector
	// FVector RandomUnitVector();                                                                                              // [0x40a3d60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotatorFromStream
	// FRotator RandomRotatorFromStream(bool bRoll, FRandomStream& Stream);                                                     // [0x40a3c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomRotator
	// FRotator RandomRotator(bool bRoll);                                                                                      // [0x40a3bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomPointInBoundingBox
	// FVector RandomPointInBoundingBox(FVector Origin, FVector BoxExtent);                                                     // [0x40a3a90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	// int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, FRandomStream& Stream);                                 // [0x40a3980] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRange
	// int32_t RandomIntegerInRange(int32_t Min, int32_t Max);                                                                  // [0x40a3870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerFromStream
	// int32_t RandomIntegerFromStream(int32_t Max, FRandomStream& Stream);                                                     // [0x40a37a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64InRange
	// int64_t RandomInteger64InRange(int64_t Min, int64_t Max);                                                                // [0x40a35c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64
	// int64_t RandomInteger64(int64_t Max);                                                                                    // [0x40a34f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger
	// int32_t RandomInteger(int32_t Max);                                                                                      // [0x40a36e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	// float RandomFloatInRangeFromStream(float Min, float Max, FRandomStream& Stream);                                         // [0x40a33d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRange
	// float RandomFloatInRange(float Min, float Max);                                                                          // [0x40a32d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatFromStream
	// float RandomFloatFromStream(FRandomStream& Stream);                                                                      // [0x40a3240] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomFloat
	// float RandomFloat();                                                                                                     // [0x40a3200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	// bool RandomBoolWithWeightFromStream(float Weight, FRandomStream& RandomStream);                                          // [0x40a3120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeight
	// bool RandomBoolWithWeight(float Weight);                                                                                 // [0x40a30a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolFromStream
	// bool RandomBoolFromStream(FRandomStream& Stream);                                                                        // [0x40a3010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RandomBool
	// bool RandomBool();                                                                                                       // [0x40a2fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.RadiansToDegrees
	// float RadiansToDegrees(float A);                                                                                         // [0x40a2f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorUp
	// FVector Quat_VectorUp(FQuat& Q);                                                                                         // [0x40a1140] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorRight
	// FVector Quat_VectorRight(FQuat& Q);                                                                                      // [0x40a1050] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorForward
	// FVector Quat_VectorForward(FQuat& Q);                                                                                    // [0x40a0f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_UnrotateVector
	// FVector Quat_UnrotateVector(FQuat& Q, FVector& V);                                                                       // [0x40a2280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SizeSquared
	// float Quat_SizeSquared(FQuat& Q);                                                                                        // [0x40a21c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Size
	// float Quat_Size(FQuat& Q);                                                                                               // [0x40a2100] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetFromEuler
	// void Quat_SetFromEuler(FQuat& Q, FVector& Euler);                                                                        // [0x40a2020] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetComponents
	// void Quat_SetComponents(FQuat& Q, float X, float Y, float Z, float W);                                                   // [0x40a1e70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_Rotator
	// FRotator Quat_Rotator(FQuat& Q);                                                                                         // [0x40a1dd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_RotateVector
	// FVector Quat_RotateVector(FQuat& Q, FVector& V);                                                                         // [0x40a1bd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalized
	// FQuat Quat_Normalized(FQuat& Q, float Tolerance);                                                                        // [0x40a1a70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalize
	// void Quat_Normalize(FQuat& Q, float Tolerance);                                                                          // [0x40a1920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_MakeFromEuler
	// FQuat Quat_MakeFromEuler(FVector& Euler);                                                                                // [0x40a1880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Log
	// FQuat Quat_Log(FQuat& Q);                                                                                                // [0x40a17e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNormalized
	// bool Quat_IsNormalized(FQuat& Q);                                                                                        // [0x40a1710] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNonFinite
	// bool Quat_IsNonFinite(FQuat& Q);                                                                                         // [0x40a1630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsIdentity
	// bool Quat_IsIdentity(FQuat& Q, float Tolerance);                                                                         // [0x40a1510] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsFinite
	// bool Quat_IsFinite(FQuat& Q);                                                                                            // [0x40a1430] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Inversed
	// FQuat Quat_Inversed(FQuat& Q);                                                                                           // [0x40a13a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Identity
	// FQuat Quat_Identity();                                                                                                   // [0x40a1380] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetRotationAxis
	// FVector Quat_GetRotationAxis(FQuat& Q);                                                                                  // [0x40a1250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisZ
	// FVector Quat_GetAxisZ(FQuat& Q);                                                                                         // [0x40a1140] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisY
	// FVector Quat_GetAxisY(FQuat& Q);                                                                                         // [0x40a1050] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisX
	// FVector Quat_GetAxisX(FQuat& Q);                                                                                         // [0x40a0f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAngle
	// float Quat_GetAngle(FQuat& Q);                                                                                           // [0x40a0ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Exp
	// FQuat Quat_Exp(FQuat& Q);                                                                                                // [0x40a0e00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_Euler
	// FVector Quat_Euler(FQuat& Q);                                                                                            // [0x40a0d60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
	// void Quat_EnforceShortestArcWith(FQuat& A, FQuat& B);                                                                    // [0x40a0c30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Quat_AngularDistance
	// float Quat_AngularDistance(FQuat& A, FQuat& B);                                                                          // [0x40a0af0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToVector
	// FVector ProjectVectorOnToVector(FVector V, FVector Target);                                                              // [0x40a0980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane
	// FVector ProjectVectorOnToPlane(FVector V, FVector PlaneNormal);                                                          // [0x40a0860] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ProjectPointOnToPlane
	// FVector ProjectPointOnToPlane(FVector Point, FVector PlaneBase, FVector PlaneNormal);                                    // [0x40a06f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PointsAreCoplanar
	// bool PointsAreCoplanar(TArray<FVector>& Points, float Tolerance);                                                        // [0x40a05f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.PerlinNoise1D
	// float PerlinNoise1D(float Value);                                                                                        // [0x40a0560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_IntInt
	// int32_t Percent_IntInt(int32_t A, int32_t B);                                                                            // [0x40a0480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_FloatFloat
	// float Percent_FloatFloat(float A, float B);                                                                              // [0x40a0300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Percent_ByteByte
	// char Percent_ByteByte(char A, char B);                                                                                   // [0x40a0220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_IntInt
	// int32_t Or_IntInt(int32_t A, int32_t B);                                                                                 // [0x40a0160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Or_Int64Int64
	// int64_t Or_Int64Int64(int64_t A, int64_t B);                                                                             // [0x40a0090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Now
	// FDateTime Now();                                                                                                         // [0x40a0050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_VectorVector
	// bool NotEqualExactly_VectorVector(FVector A, FVector B);                                                                 // [0x409edd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
	// bool NotEqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                           // [0x409eca0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
	// bool NotEqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                         // [0x409ebd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_VectorVector
	// bool NotEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                  // [0x409fd60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector4Vector4
	// bool NotEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                            // [0x409fbd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	// bool NotEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                          // [0x93acc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	// bool NotEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x409f120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator
	// bool NotEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                              // [0x409f9e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_QuatQuat
	// bool NotEqual_QuatQuat(FQuat& A, FQuat& B, float ErrorTolerance);                                                        // [0x409f880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ObjectObject
	// bool NotEqual_ObjectObject(class UObject* A, class UObject* B);                                                          // [0x409f050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_NameName
	// bool NotEqual_NameName(FName A, FName B);                                                                                // [0x409f7b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_MatrixMatrix
	// bool NotEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                     // [0x409f620] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
	// bool NotEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                    // [0x409f530] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
	// bool NotEqual_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x409f460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntInt
	// bool NotEqual_IntInt(int32_t A, int32_t B);                                                                              // [0x409f390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Int64Int64
	// bool NotEqual_Int64Int64(int64_t A, int64_t B);                                                                          // [0x409f2c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_FloatFloat
	// bool NotEqual_FloatFloat(float A, float B);                                                                              // [0x409f1e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	// bool NotEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x409f120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ClassClass
	// bool NotEqual_ClassClass(class UClass* A, class UClass* B);                                                              // [0x409f050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ByteByte
	// bool NotEqual_ByteByte(char A, char B);                                                                                  // [0x409ef90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_BoolBool
	// bool NotEqual_BoolBool(bool A, bool B);                                                                                  // [0x409eeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_PreBool
	// bool Not_PreBool(bool A);                                                                                                // [0x409ffc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int64
	// int64_t Not_Int64(int64_t A);                                                                                            // [0x409feb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Not_Int
	// int32_t Not_Int(int32_t A);                                                                                              // [0x409ff40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalSafe2D
	// FVector2D NormalSafe2D(FVector2D A, float Tolerance);                                                                    // [0x409e630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeToRange
	// float NormalizeToRange(float Value, float RangeMin, float RangeMax);                                                     // [0x409e9b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizedDeltaRotator
	// FRotator NormalizedDeltaRotator(FRotator A, FRotator B);                                                                 // [0x409ead0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NormalizeAxis
	// float NormalizeAxis(float Angle);                                                                                        // [0x409e920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normalize2D
	// void Normalize2D(FVector2D& A, float Tolerance);                                                                         // [0x409e7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Normal2D
	// FVector2D Normal2D(FVector2D A);                                                                                         // [0x409e350] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Normal
	// FVector Normal(FVector A, float Tolerance);                                                                              // [0x409e470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateVector
	// FVector NegateVector(FVector A);                                                                                         // [0x409e210] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NegateRotator
	// FRotator NegateRotator(FRotator A);                                                                                      // [0x409e170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Negated2D
	// FVector2D Negated2D(FVector2D& A);                                                                                       // [0x409e2b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	// bool NearlyEqual_TransformTransform(FTransform& A, FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance); // [0x409df40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	// bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);                                                     // [0x409de20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	// float MultiplyMultiply_FloatFloat(float Base, float Exp);                                                                // [0x409cad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MultiplyByPi
	// float MultiplyByPi(float Value);                                                                                         // [0x409ca40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorVector
	// FVector Multiply_VectorVector(FVector A, FVector B);                                                                     // [0x409dd40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorInt
	// FVector Multiply_VectorInt(FVector A, int32_t B);                                                                        // [0x409d8b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorFloat
	// FVector Multiply_VectorFloat(FVector A, float B);                                                                        // [0x409d7d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector4Vector4
	// FVector4 Multiply_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x409dc10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	// FVector2D Multiply_Vector2DVector2D(FVector2D A, FVector2D B);                                                           // [0x409db40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat
	// FVector2D Multiply_Vector2DFloat(FVector2D A, float B);                                                                  // [0x409da70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_TimespanFloat
	// FTimespan Multiply_TimespanFloat(FTimespan A, float Scalar);                                                             // [0x409d9a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorInt
	// FRotator Multiply_RotatorInt(FRotator A, int32_t B);                                                                     // [0x409d8b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorFloat
	// FRotator Multiply_RotatorFloat(FRotator A, float B);                                                                     // [0x409d7d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_QuatQuat
	// FQuat Multiply_QuatQuat(FQuat& A, FQuat& B);                                                                             // [0x409d690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixMatrix
	// FMatrix Multiply_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                   // [0x409d480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixFloat
	// FMatrix Multiply_MatrixFloat(FMatrix& A, float B);                                                                       // [0x409d310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	// FLinearColor Multiply_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                            // [0x409d220] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat
	// FLinearColor Multiply_LinearColorFloat(FLinearColor A, float B);                                                         // [0x409d150] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointIntPoint
	// FIntPoint Multiply_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                           // [0x409d070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointInt
	// FIntPoint Multiply_IntPointInt(FIntPoint A, int32_t B);                                                                  // [0x409cf90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntInt
	// int32_t Multiply_IntInt(int32_t A, int32_t B);                                                                           // [0x409ced0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntFloat
	// float Multiply_IntFloat(int32_t A, float B);                                                                             // [0x409ce00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Int64Int64
	// int64_t Multiply_Int64Int64(int64_t A, int64_t B);                                                                       // [0x409cd30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_FloatFloat
	// float Multiply_FloatFloat(float A, float B);                                                                             // [0x409cc60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Multiply_ByteByte
	// char Multiply_ByteByte(char A, char B);                                                                                  // [0x409cba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MirrorVectorByNormal
	// FVector MirrorVectorByNormal(FVector InVect, FVector InNormal);                                                          // [0x4091f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfIntArray
	// void MinOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);                              // [0x409c640] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfFloatArray
	// void MinOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMinValue, float& MinValue);                              // [0x409c500] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinOfByteArray
	// void MinOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMinValue, char& MinValue);                                  // [0x409c3c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinInt64
	// int64_t MinInt64(int64_t A, int64_t B);                                                                                  // [0x409c2f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MinimumAreaRectangle
	// void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<FVector>& InVerts, FVector& SampleSurfaceNormal, FVector& OutRectCenter, FRotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw); // [0x409c780] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Min
	// int32_t Min(int32_t A, int32_t B);                                                                                       // [0x409c220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfIntArray
	// void MaxOfIntArray(TArray<int32_t>& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);                              // [0x409c0e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfFloatArray
	// void MaxOfFloatArray(TArray<float>& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);                              // [0x409bfa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxOfByteArray
	// void MaxOfByteArray(TArray<char>& ByteArray, int32_t& IndexOfMaxValue, char& MaxValue);                                  // [0x409be60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MaxInt64
	// int64_t MaxInt64(int64_t A, int64_t B);                                                                                  // [0x409bd90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Max
	// int32_t Max(int32_t A, int32_t B);                                                                                       // [0x409bcc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector4
	// FVector4 Matrix_TransformVector4(FMatrix& M, FVector4 V);                                                                // [0x409ba60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector
	// FVector4 Matrix_TransformVector(FMatrix& M, FVector V);                                                                  // [0x409bb80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformPosition
	// FVector4 Matrix_TransformPosition(FMatrix& M, FVector V);                                                                // [0x409b920] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ToQuat
	// FQuat Matrix_ToQuat(FMatrix& M);                                                                                         // [0x409b880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetOrigin
	// void Matrix_SetOrigin(FMatrix& M, FVector NewOrigin);                                                                    // [0x409b7a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetColumn
	// void Matrix_SetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column, FVector Value);                                    // [0x409b670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetAxis
	// void Matrix_SetAxis(FMatrix& M, TEnumAsByte<EAxis> Axis, FVector AxisVector);                                            // [0x409b530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ScaleTranslation
	// FMatrix Matrix_ScaleTranslation(FMatrix& M, FVector Scale3D);                                                            // [0x409b3f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveTranslation
	// FMatrix Matrix_RemoveTranslation(FMatrix& M);                                                                            // [0x409b330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveScaling
	// void Matrix_RemoveScaling(FMatrix& M, float Tolerance);                                                                  // [0x409b250] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Mirror
	// FMatrix Matrix_Mirror(FMatrix& M, TEnumAsByte<EAxis> MirrorAxis, TEnumAsByte<EAxis> FlipAxis);                           // [0x409b0d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformVector
	// FVector Matrix_InverseTransformVector(FMatrix& M, FVector V);                                                            // [0x409af60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformPosition
	// FVector Matrix_InverseTransformPosition(FMatrix& M, FVector V);                                                          // [0x409ade0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Identity
	// FMatrix Matrix_Identity();                                                                                               // [0x409ad90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxis
	// FVector Matrix_GetUnitAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                         // [0x409ac90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxes
	// void Matrix_GetUnitAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                                 // [0x409ab00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposed
	// FMatrix Matrix_GetTransposed(FMatrix& M);                                                                                // [0x409a910] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
	// FMatrix Matrix_GetTransposeAdjoint(FMatrix& M);                                                                          // [0x409a850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaleVector
	// FVector Matrix_GetScaleVector(FMatrix& M, float Tolerance);                                                              // [0x409a420] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxis
	// FVector Matrix_GetScaledAxis(FMatrix& M, TEnumAsByte<EAxis> Axis);                                                       // [0x409a6e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxes
	// void Matrix_GetScaledAxes(FMatrix& M, FVector& X, FVector& Y, FVector& Z);                                               // [0x409a530] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotDeterminant
	// float Matrix_GetRotDeterminant(FMatrix& M);                                                                              // [0x409a310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotator
	// FRotator Matrix_GetRotator(FMatrix& M);                                                                                  // [0x408abf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetOrigin
	// FVector Matrix_GetOrigin(FMatrix& InMatrix);                                                                             // [0x409a270] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
	// float Matrix_GetMaximumAxisScale(FMatrix& M);                                                                            // [0x409a1e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
	// FMatrix Matrix_GetMatrixWithoutScale(FMatrix& M, float Tolerance);                                                       // [0x409a0a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetInverse
	// FMatrix Matrix_GetInverse(FMatrix& M);                                                                                   // [0x4099fe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
	// bool Matrix_GetFrustumTopPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x4099df0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
	// bool Matrix_GetFrustumRightPlane(FMatrix& M, FPlane& OutPlane);                                                          // [0x4099c00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
	// bool Matrix_GetFrustumNearPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x4099a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
	// bool Matrix_GetFrustumLeftPlane(FMatrix& M, FPlane& OutPlane);                                                           // [0x4099860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
	// bool Matrix_GetFrustumFarPlane(FMatrix& M, FPlane& OutPlane);                                                            // [0x4099670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
	// bool Matrix_GetFrustumBottomPlane(FMatrix& M, FPlane& OutPlane);                                                         // [0x4099480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetDeterminant
	// float Matrix_GetDeterminant(FMatrix& M);                                                                                 // [0x40993f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetColumn
	// FVector Matrix_GetColumn(FMatrix& M, TEnumAsByte<EMatrixColumns> Column);                                                // [0x40992f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ContainsNaN
	// bool Matrix_ContainsNaN(FMatrix& M);                                                                                     // [0x4099260] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
	// FMatrix Matrix_ConcatenateTranslation(FMatrix& M, FVector Translation);                                                  // [0x40990f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ApplyScale
	// FMatrix Matrix_ApplyScale(FMatrix& M, float Scale);                                                                      // [0x4098e80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeUnclamped
	// float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                  // [0x4098cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MapRangeClamped
	// float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);                    // [0x93a3a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector4
	// FVector4 MakeVector4(float X, float Y, float Z, float W);                                                                // [0x4098a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector2D
	// FVector2D MakeVector2D(float X, float Y);                                                                                // [0x4098960] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeVector
	// FVector MakeVector(float X, float Y, float Z);                                                                           // [0x4098bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTransform
	// FTransform MakeTransform(FVector Location, FRotator Rotation, FVector Scale);                                            // [0x40987c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan2
	// FTimespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);            // [0x40984a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan
	// FTimespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t MilliSeconds);             // [0x4098630] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZY
	// FRotator MakeRotFromZY(FVector& Z, FVector& Y);                                                                          // [0x4098120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZX
	// FRotator MakeRotFromZX(FVector& Z, FVector& X);                                                                          // [0x4098010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZ
	// FRotator MakeRotFromZ(FVector& Z);                                                                                       // [0x4097f50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYZ
	// FRotator MakeRotFromYZ(FVector& Y, FVector& Z);                                                                          // [0x4097e40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYX
	// FRotator MakeRotFromYX(FVector& Y, FVector& X);                                                                          // [0x4097d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromY
	// FRotator MakeRotFromY(FVector& Y);                                                                                       // [0x4097c70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXZ
	// FRotator MakeRotFromXZ(FVector& X, FVector& Z);                                                                          // [0x4097b60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXY
	// FRotator MakeRotFromXY(FVector& X, FVector& Y);                                                                          // [0x4097a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromX
	// FRotator MakeRotFromX(FVector& X);                                                                                       // [0x4097990] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotator
	// FRotator MakeRotator(float Roll, float Pitch, float Yaw);                                                                // [0x4098380] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRotationFromAxes
	// FRotator MakeRotationFromAxes(FVector Forward, FVector Right, FVector Up);                                               // [0x4098230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRelativeTransform
	// FTransform MakeRelativeTransform(FTransform& A, FTransform& RelativeTo);                                                 // [0x4097800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeRandomStream
	// FRandomStream MakeRandomStream(int32_t InitialSeed);                                                                     // [0x4097770] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeQualifiedFrameTime
	// FQualifiedFrameTime MakeQualifiedFrameTime(FFrameNumber Frame, FFrameRate FrameRate, float SubFrame);                    // [0x4097650] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePulsatingValue
	// float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);                                   // [0x4097530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	// FPlane MakePlaneFromPointAndNormal(FVector Point, FVector Normal);                                                       // [0x4097440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeFrameRate
	// FFrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);                                                        // [0x4097380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeDateTime
	// FDateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond); // [0x4097170] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeColor
	// FLinearColor MakeColor(float R, float G, float B, float A);                                                              // [0x4096ff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox2D
	// FBox2D MakeBox2D(FVector2D Min, FVector2D Max);                                                                          // [0x4096e20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.MakeBox
	// FBox MakeBox(FVector Min, FVector Max);                                                                                  // [0x4096f00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Loge
	// float Loge(float A);                                                                                                     // [0x4096d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Log
	// float Log(float A, float Base);                                                                                          // [0x4096cc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	// bool LinePlaneIntersection_OriginNormal(FVector& LineStart, FVector& LineEnd, FVector PlaneOrigin, FVector PlaneNormal, float& T, FVector& Intersection); // [0x4095800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection
	// bool LinePlaneIntersection(FVector& LineStart, FVector& LineEnd, FPlane& APlane, float& T, FVector& Intersection);       // [0x4095610] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	// FLinearColor LinearColorLerpUsingHSV(FLinearColor A, FLinearColor B, float Alpha);                                       // [0x4095b90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerp
	// FLinearColor LinearColorLerp(FLinearColor A, FLinearColor B, float Alpha);                                               // [0x4095a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Yellow
	// FLinearColor LinearColor_Yellow();                                                                                       // [0x4096ca0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_White
	// FLinearColor LinearColor_White();                                                                                        // [0x4096c80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Transparent
	// FLinearColor LinearColor_Transparent();                                                                                  // [0x4096c60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToRGBE
	// FColor LinearColor_ToRGBE(FLinearColor InLinearColor);                                                                   // [0x4096bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToNewOpacity
	// FLinearColor LinearColor_ToNewOpacity(FLinearColor InColor, float InOpacity);                                            // [0x4096ae0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetTemperature
	// void LinearColor_SetTemperature(FLinearColor& InOutColor, float InTemperature);                                          // [0x4096a00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRGBA
	// void LinearColor_SetRGBA(FLinearColor& InOutColor, float R, float G, float B, float A);                                  // [0x40967c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRandomHue
	// void LinearColor_SetRandomHue(FLinearColor& InOutColor);                                                                 // [0x4096970] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromSRGB
	// void LinearColor_SetFromSRGB(FLinearColor& InOutColor, FColor& InSRGB);                                                  // [0x40966e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromPow22
	// void LinearColor_SetFromPow22(FLinearColor& InOutColor, FColor& InColor);                                                // [0x4096600] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromHSV
	// void LinearColor_SetFromHSV(FLinearColor& InOutColor, float H, float S, float V, float A);                               // [0x4096450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Set
	// void LinearColor_Set(FLinearColor& InOutColor, FLinearColor InColor);                                                    // [0x4096380] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Red
	// FLinearColor LinearColor_Red();                                                                                          // [0x4096360] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_QuantizeRound
	// FColor LinearColor_QuantizeRound(FLinearColor InColor);                                                                  // [0x40962d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Quantize
	// FColor LinearColor_Quantize(FLinearColor InColor);                                                                       // [0x4096240] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_IsNearEqual
	// bool LinearColor_IsNearEqual(FLinearColor A, FLinearColor B, float Tolerance);                                           // [0x40960e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Green
	// FLinearColor LinearColor_Green();                                                                                        // [0x40960c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Gray
	// FLinearColor LinearColor_Gray();                                                                                         // [0x40960a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMin
	// float LinearColor_GetMin(FLinearColor InColor);                                                                          // [0x4096010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMax
	// float LinearColor_GetMax(FLinearColor InColor);                                                                          // [0x4095f80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetLuminance
	// float LinearColor_GetLuminance(FLinearColor InColor);                                                                    // [0x4095ee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Distance
	// float LinearColor_Distance(FLinearColor C1, FLinearColor C2);                                                            // [0x4095de0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Desaturated
	// FLinearColor LinearColor_Desaturated(FLinearColor InColor, float InDesaturation);                                        // [0x4095d00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Blue
	// FLinearColor LinearColor_Blue();                                                                                         // [0x4095ce0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Black
	// FLinearColor LinearColor_Black();                                                                                        // [0x4095cc0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessLess_VectorRotator
	// FVector LessLess_VectorRotator(FVector A, FRotator B);                                                                   // [0x4095120] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	// bool LessEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                               // [0x4094df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_IntInt
	// bool LessEqual_IntInt(int32_t A, int32_t B);                                                                             // [0x4095050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_Int64Int64
	// bool LessEqual_Int64Int64(int64_t A, int64_t B);                                                                         // [0x4094f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_FloatFloat
	// bool LessEqual_FloatFloat(float A, float B);                                                                             // [0x4094eb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	// bool LessEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                               // [0x4094df0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_ByteByte
	// bool LessEqual_ByteByte(char A, char B);                                                                                 // [0x4094d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_TimespanTimespan
	// bool Less_TimespanTimespan(FTimespan A, FTimespan B);                                                                    // [0x40952e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_IntInt
	// bool Less_IntInt(int32_t A, int32_t B);                                                                                  // [0x4095540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_Int64Int64
	// bool Less_Int64Int64(int64_t A, int64_t B);                                                                              // [0x4095470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_FloatFloat
	// bool Less_FloatFloat(float A, float B);                                                                                  // [0x40953a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_DateTimeDateTime
	// bool Less_DateTimeDateTime(FDateTime A, FDateTime B);                                                                    // [0x40952e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Less_ByteByte
	// bool Less_ByteByte(char A, char B);                                                                                      // [0x4095220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Lerp
	// float Lerp(float A, float B, float Alpha);                                                                               // [0x4094c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsZero2D
	// bool IsZero2D(FVector2D& A);                                                                                             // [0x4094b60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform
	// bool IsPointInBoxWithTransform(FVector Point, FTransform& BoxWorldTransform, FVector BoxExtent);                         // [0x40949d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBox
	// bool IsPointInBox(FVector Point, FVector BoxOrigin, FVector BoxExtent);                                                  // [0x9389d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsNearlyZero2D
	// bool IsNearlyZero2D(FVector2D& A, float Tolerance);                                                                      // [0x40948d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsMorning
	// bool IsMorning(FDateTime A);                                                                                             // [0x4094820] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsLeapYear
	// bool IsLeapYear(int32_t Year);                                                                                           // [0x4094790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IsAfternoon
	// bool IsAfternoon(FDateTime A);                                                                                           // [0x40946e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InvertTransform
	// FTransform InvertTransform(FTransform& T);                                                                               // [0x40944f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformRotation
	// FRotator InverseTransformRotation(FTransform& T, FRotator Rotation);                                                     // [0x40943a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformLocation
	// FVector InverseTransformLocation(FTransform& T, FVector Location);                                                       // [0x40941c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformDirection
	// FVector InverseTransformDirection(FTransform& T, FVector Direction);                                                     // [0x4094030] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Zero
	// FIntPoint IntPoint_Zero();                                                                                               // [0x4094000] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Up
	// FIntPoint IntPoint_Up();                                                                                                 // [0x4093fd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Right
	// FIntPoint IntPoint_Right();                                                                                              // [0x4093fb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_One
	// FIntPoint IntPoint_One();                                                                                                // [0x4093f80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Left
	// FIntPoint IntPoint_Left();                                                                                               // [0x4093f50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Down
	// FIntPoint IntPoint_Down();                                                                                               // [0x4093f20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_IntInt
	// bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);                      // [0x4093d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_Int64Int64
	// bool InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);                  // [0x4093be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.InRange_FloatFloat
	// bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);                        // [0x4093a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Hypotenuse
	// float Hypotenuse(float Width, float Height);                                                                             // [0x4093960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGBLinear
	// FLinearColor HSVToRGBLinear(FLinearColor HSV);                                                                           // [0x40937f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB_Vector
	// void HSVToRGB_Vector(FLinearColor HSV, FLinearColor& RGB);                                                               // [0x4093880] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB
	// FLinearColor HSVToRGB(float H, float S, float V, float A);                                                               // [0x4093660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GridSnap_Float
	// float GridSnap_Float(float Location, float GridSize);                                                                    // [0x4093530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	// FVector GreaterGreater_VectorRotator(FVector A, FRotator B);                                                             // [0x4093040] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	// bool GreaterEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                            // [0x4092d10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_IntInt
	// bool GreaterEqual_IntInt(int32_t A, int32_t B);                                                                          // [0x4092f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_Int64Int64
	// bool GreaterEqual_Int64Int64(int64_t A, int64_t B);                                                                      // [0x4092ea0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	// bool GreaterEqual_FloatFloat(float A, float B);                                                                          // [0x4092dd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	// bool GreaterEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                            // [0x4092d10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte
	// bool GreaterEqual_ByteByte(char A, char B);                                                                              // [0x4092c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_TimespanTimespan
	// bool Greater_TimespanTimespan(FTimespan A, FTimespan B);                                                                 // [0x4093200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_IntInt
	// bool Greater_IntInt(int32_t A, int32_t B);                                                                               // [0x4093460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_Int64Int64
	// bool Greater_Int64Int64(int64_t A, int64_t B);                                                                           // [0x4093390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_FloatFloat
	// bool Greater_FloatFloat(float A, float B);                                                                               // [0x40932c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime
	// bool Greater_DateTimeDateTime(FDateTime A, FDateTime B);                                                                 // [0x4093200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Greater_ByteByte
	// bool Greater_ByteByte(char A, char B);                                                                                   // [0x4093140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYear
	// int32_t GetYear(FDateTime A);                                                                                            // [0x4092bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetYawPitchFromVector
	// void GetYawPitchFromVector(FVector InVec, float& Yaw, float& Pitch);                                                     // [0x4092aa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetVectorArrayAverage
	// FVector GetVectorArrayAverage(TArray<FVector>& Vectors);                                                                 // [0x40929e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetUpVector
	// FVector GetUpVector(FRotator InRot);                                                                                     // [0x4092940] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalSeconds
	// float GetTotalSeconds(FTimespan A);                                                                                      // [0x40928b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMinutes
	// float GetTotalMinutes(FTimespan A);                                                                                      // [0x4092820] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMilliseconds
	// float GetTotalMilliseconds(FTimespan A);                                                                                 // [0x4092790] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalHours
	// float GetTotalHours(FTimespan A);                                                                                        // [0x4092700] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTotalDays
	// float GetTotalDays(FTimespan A);                                                                                         // [0x4092670] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTimeOfDay
	// FTimespan GetTimeOfDay(FDateTime A);                                                                                     // [0x40925f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetTAU
	// float GetTAU();                                                                                                          // [0x40925d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles
	// void GetSlopeDegreeAngles(FVector& MyRightYAxis, FVector& FloorNormal, FVector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle); // [0x40923f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSeconds
	// int32_t GetSeconds(FTimespan A);                                                                                         // [0x4092330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetSecond
	// int32_t GetSecond(FDateTime A);                                                                                          // [0x4092330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRotated2D
	// FVector2D GetRotated2D(FVector2D A, float AngleDeg);                                                                     // [0x4092110] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetRightVector
	// FVector GetRightVector(FRotator InRot);                                                                                  // [0x4092070] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetReflectionVector
	// FVector GetReflectionVector(FVector Direction, FVector SurfaceNormal);                                                   // [0x4091f70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToSegment
	// float GetPointDistanceToSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                                // [0x4091e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToLine
	// float GetPointDistanceToLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                  // [0x4091cf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetPI
	// float GetPI();                                                                                                           // [0x4091cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMonth
	// int32_t GetMonth(FDateTime A);                                                                                           // [0x4091c50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinutes
	// int32_t GetMinutes(FTimespan A);                                                                                         // [0x4091ba0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinute
	// int32_t GetMinute(FDateTime A);                                                                                          // [0x4091ba0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMinElement
	// float GetMinElement(FVector A);                                                                                          // [0x4091b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMin2D
	// float GetMin2D(FVector2D A);                                                                                             // [0x4091aa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMilliseconds
	// int32_t GetMilliseconds(FTimespan A);                                                                                    // [0x40919e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMillisecond
	// int32_t GetMillisecond(FDateTime A);                                                                                     // [0x4091930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMaxElement
	// float GetMaxElement(FVector A);                                                                                          // [0x40918b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetMax2D
	// float GetMax2D(FVector2D A);                                                                                             // [0x4091830] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHours
	// int32_t GetHours(FTimespan A);                                                                                           // [0x4091780] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour12
	// int32_t GetHour12(FDateTime A);                                                                                          // [0x4091700] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetHour
	// int32_t GetHour(FDateTime A);                                                                                            // [0x4091780] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetForwardVector
	// FVector GetForwardVector(FRotator InRot);                                                                                // [0x4091660] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDuration
	// FTimespan GetDuration(FTimespan A);                                                                                      // [0x40915e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDirectionUnitVector
	// FVector GetDirectionUnitVector(FVector From, FVector To);                                                                // [0x4091410] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDays
	// int32_t GetDays(FTimespan A);                                                                                            // [0x4091390] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDayOfYear
	// int32_t GetDayOfYear(FDateTime A);                                                                                       // [0x4091310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDay
	// int32_t GetDay(FDateTime A);                                                                                             // [0x4091290] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetDate
	// FDateTime GetDate(FDateTime A);                                                                                          // [0x4091200] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAzimuthAndElevation
	// void GetAzimuthAndElevation(FVector InDirection, FTransform& ReferenceFrame, float& Azimuth, float& Elevation);          // [0x4091020] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAxes
	// void GetAxes(FRotator A, FVector& X, FVector& Y, FVector& Z);                                                            // [0x4090ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbsMax2D
	// float GetAbsMax2D(FVector2D A);                                                                                          // [0x4090e10] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.GetAbs2D
	// FVector2D GetAbs2D(FVector2D A);                                                                                         // [0x4090d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FWrap
	// float FWrap(float Value, float Min, float Max);                                                                          // [0x408ff80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTruncVector
	// FIntVector FTruncVector(FVector& InVector);                                                                              // [0x408fee0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc64
	// int64_t FTrunc64(float A);                                                                                               // [0x408fde0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FTrunc
	// int32_t FTrunc(float A);                                                                                                 // [0x408fe60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromSeconds
	// FTimespan FromSeconds(float Seconds);                                                                                    // [0x4090cf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMinutes
	// FTimespan FromMinutes(float Minutes);                                                                                    // [0x4090c60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromMilliseconds
	// FTimespan FromMilliseconds(float MilliSeconds);                                                                          // [0x4090bd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromHours
	// FTimespan FromHours(float Hours);                                                                                        // [0x4090b40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FromDays
	// FTimespan FromDays(float Days);                                                                                          // [0x4090ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Fraction
	// float Fraction(float A);                                                                                                 // [0x4090a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMod
	// int32_t FMod(float Dividend, float Divisor, float& Remainder);                                                           // [0x408fcc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMin
	// float FMin(float A, float B);                                                                                            // [0x408fbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FMax
	// float FMax(float A, float B);                                                                                            // [0x408fb20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FloatSpringInterp
	// float FloatSpringInterp(float Current, float Target, FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass); // [0x40907e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetMathLibrary.FixedTurn
	// float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);                                                    // [0x40906c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo_Constant
	// float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);                               // [0x408f9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo
	// float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);                                        // [0x408f860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FInterpEaseInOut
	// float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);                                                   // [0x408f700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	// void FindNearestPointsOnLineSegments(FVector Segment1Start, FVector Segment1End, FVector Segment2Start, FVector Segment2End, FVector& Segment1Point, FVector& Segment2Point); // [0x40904a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindLookAtRotation
	// FRotator FindLookAtRotation(FVector& Start, FVector& Target);                                                            // [0x4090360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnSegment
	// FVector FindClosestPointOnSegment(FVector Point, FVector SegmentStart, FVector SegmentEnd);                              // [0x4090210] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnLine
	// FVector FindClosestPointOnLine(FVector Point, FVector LineOrigin, FVector LineDirection);                                // [0x40900c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor64
	// int64_t FFloor64(float A);                                                                                               // [0x408f5b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FFloor
	// int32_t FFloor(float A);                                                                                                 // [0x408f670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FClamp
	// float FClamp(float Value, float Min, float Max);                                                                         // [0x408f490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil64
	// int64_t FCeil64(float A);                                                                                                // [0x408f320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.FCeil
	// int32_t FCeil(float A);                                                                                                  // [0x408f3f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Exp
	// float Exp(float A);                                                                                                      // [0x408f290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_VectorVector
	// bool EqualExactly_VectorVector(FVector A, FVector B);                                                                    // [0x408f0e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
	// bool EqualExactly_Vector4Vector4(FVector4& A, FVector4& B);                                                              // [0x408efb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
	// bool EqualExactly_Vector2DVector2D(FVector2D A, FVector2D B);                                                            // [0x408eee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_VectorVector
	// bool EqualEqual_VectorVector(FVector A, FVector B, float ErrorTolerance);                                                // [0x408ed90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
	// bool EqualEqual_Vector4Vector4(FVector4& A, FVector4& B, float ErrorTolerance);                                          // [0x408ec00] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	// bool EqualEqual_Vector2DVector2D(FVector2D A, FVector2D B, float ErrorTolerance);                                        // [0x935580] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform
	// bool EqualEqual_TransformTransform(FTransform& A, FTransform& B);                                                        // [0x408ea80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	// bool EqualEqual_TimespanTimespan(FTimespan A, FTimespan B);                                                              // [0x408e0a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	// bool EqualEqual_RotatorRotator(FRotator A, FRotator B, float ErrorTolerance);                                            // [0x408e890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_QuatQuat
	// bool EqualEqual_QuatQuat(FQuat& A, FQuat& B, float Tolerance);                                                           // [0x408e730] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject
	// bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);                                                        // [0x408dfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_NameName
	// bool EqualEqual_NameName(FName A, FName B);                                                                              // [0x408e660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
	// bool EqualEqual_MatrixMatrix(FMatrix& A, FMatrix& B, float Tolerance);                                                   // [0x408e4d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
	// bool EqualEqual_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                  // [0x408e3e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_IntInt
	// bool EqualEqual_IntInt(int32_t A, int32_t B);                                                                            // [0x408e310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Int64Int64
	// bool EqualEqual_Int64Int64(int64_t A, int64_t B);                                                                        // [0x408e240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat
	// bool EqualEqual_FloatFloat(float A, float B);                                                                            // [0x408e160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	// bool EqualEqual_DateTimeDateTime(FDateTime A, FDateTime B);                                                              // [0x408e0a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ClassClass
	// bool EqualEqual_ClassClass(class UClass* A, class UClass* B);                                                            // [0x408dfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ByteByte
	// bool EqualEqual_ByteByte(char A, char B);                                                                                // [0x408df10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_BoolBool
	// bool EqualEqual_BoolBool(bool A, bool B);                                                                                // [0x408de30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Equal_IntPointIntPoint
	// bool Equal_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                   // [0x408f1c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Ease
	// float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int32_t Steps);           // [0x408dc50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
	// FVector DynamicWeightedMovingAverage_FVector(FVector CurrentSample, FVector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x408d8e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
	// FRotator DynamicWeightedMovingAverage_FRotator(FRotator CurrentSample, FRotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x408d720] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
	// float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight); // [0x408daa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DotProduct2D
	// float DotProduct2D(FVector2D A, FVector2D B);                                                                            // [0x408d570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Dot_VectorVector
	// float Dot_VectorVector(FVector A, FVector B);                                                                            // [0x408d640] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorVector
	// FVector Divide_VectorVector(FVector A, FVector B);                                                                       // [0x408d440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorInt
	// FVector Divide_VectorInt(FVector A, int32_t B);                                                                          // [0x408d300] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorFloat
	// FVector Divide_VectorFloat(FVector A, float B);                                                                          // [0x408d1c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector4Vector4
	// FVector4 Divide_Vector4Vector4(FVector4& A, FVector4& B);                                                                // [0x408d090] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DVector2D
	// FVector2D Divide_Vector2DVector2D(FVector2D A, FVector2D B);                                                             // [0x408cf90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DFloat
	// FVector2D Divide_Vector2DFloat(FVector2D A, float B);                                                                    // [0x408ce70] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_TimespanFloat
	// FTimespan Divide_TimespanFloat(FTimespan A, float Scalar);                                                               // [0x408cda0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_LinearColorLinearColor
	// FLinearColor Divide_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                              // [0x408ccb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointIntPoint
	// FIntPoint Divide_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                             // [0x408cbb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointInt
	// FIntPoint Divide_IntPointInt(FIntPoint A, int32_t B);                                                                    // [0x408cab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntInt
	// int32_t Divide_IntInt(int32_t A, int32_t B);                                                                             // [0x408c9d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_Int64Int64
	// int64_t Divide_Int64Int64(int64_t A, int64_t B);                                                                         // [0x408c8e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_FloatFloat
	// float Divide_FloatFloat(float A, float B);                                                                               // [0x408c760] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Divide_ByteByte
	// char Divide_ByteByte(char A, char B);                                                                                    // [0x408c680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DistanceSquared2D
	// float DistanceSquared2D(FVector2D v1, FVector2D v2);                                                                     // [0x408c5b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Distance2D
	// float Distance2D(FVector2D v1, FVector2D v2);                                                                            // [0x408c4e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegTan
	// float DegTan(float A);                                                                                                   // [0x408c3c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegSin
	// float DegSin(float A);                                                                                                   // [0x408c330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegreesToRadians
	// float DegreesToRadians(float A);                                                                                         // [0x408c450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegCos
	// float DegCos(float A);                                                                                                   // [0x408c2a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan2
	// float DegAtan2(float Y, float X);                                                                                        // [0x408c130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAtan
	// float DegAtan(float A);                                                                                                  // [0x408c210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAsin
	// float DegAsin(float A);                                                                                                  // [0x408c080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DegAcos
	// float DegAcos(float A);                                                                                                  // [0x408bfd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInYear
	// int32_t DaysInYear(int32_t Year);                                                                                        // [0x408bf40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DaysInMonth
	// int32_t DaysInMonth(int32_t Year, int32_t Month);                                                                        // [0x408be50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMinValue
	// FDateTime DateTimeMinValue();                                                                                            // [0x408be30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMaxValue
	// FDateTime DateTimeMaxValue();                                                                                            // [0x408be00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromString
	// bool DateTimeFromString(FString DateTimeString, FDateTime& Result);                                                      // [0x408bcc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromIsoString
	// bool DateTimeFromIsoString(FString IsoString, FDateTime& Result);                                                        // [0x408bb70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CrossProduct2D
	// float CrossProduct2D(FVector2D A, FVector2D B);                                                                          // [0x408b980] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cross_VectorVector
	// FVector Cross_VectorVector(FVector A, FVector B);                                                                        // [0x408ba50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch
	// FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);                                                  // [0x408b850] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Cos
	// float Cos(float A);                                                                                                      // [0x408b7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ConvertTransformToRelative
	// FTransform ConvertTransformToRelative(FTransform& Transform, FTransform& ParentTransform);                               // [0x408b630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToVector2D
	// FVector2D Conv_VectorToVector2D(FVector InVector);                                                                       // [0x408b5b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToTransform
	// FTransform Conv_VectorToTransform(FVector InLocation);                                                                   // [0x408b510] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToRotator
	// FRotator Conv_VectorToRotator(FVector InVec);                                                                            // [0x408b470] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToQuaternion
	// FQuat Conv_VectorToQuaternion(FVector InVec);                                                                            // [0x408b3d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor
	// FLinearColor Conv_VectorToLinearColor(FVector InVec);                                                                    // [0x408b330] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToVector
	// FVector Conv_Vector4ToVector(FVector4& InVector4);                                                                       // [0x408b280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToRotator
	// FRotator Conv_Vector4ToRotator(FVector4& InVec);                                                                         // [0x408b1d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
	// FQuat Conv_Vector4ToQuaternion(FVector4& InVec);                                                                         // [0x408b130] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToVector
	// FVector Conv_Vector2DToVector(FVector2D InVector2D, float Z);                                                            // [0x408b050] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
	// FIntPoint Conv_Vector2DToIntPoint(FVector2D InVector2D);                                                                 // [0x408afa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_TransformToMatrix
	// FMatrix Conv_TransformToMatrix(FTransform& Transform);                                                                   // [0x408ae90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToVector
	// FVector Conv_RotatorToVector(FRotator InRot);                                                                            // [0x408adf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToTransform
	// FTransform Conv_RotatorToTransform(FRotator& InRotator);                                                                 // [0x408ad40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToTransform
	// FTransform Conv_MatrixToTransform(FMatrix& InMatrix);                                                                    // [0x408ac90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToRotator
	// FRotator Conv_MatrixToRotator(FMatrix& InMatrix);                                                                        // [0x408abf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToVector
	// FVector Conv_LinearColorToVector(FLinearColor InLinearColor);                                                            // [0x408ab60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToColor
	// FColor Conv_LinearColorToColor(FLinearColor InLinearColor, bool InUseSRGB);                                              // [0x408aa80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntVectorToVector
	// FVector Conv_IntVectorToVector(FIntVector& InIntVector);                                                                 // [0x408a9c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToIntVector
	// FIntVector Conv_IntToIntVector(int32_t inInt);                                                                           // [0x408a930] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToInt64
	// int64_t Conv_IntToInt64(int32_t inInt);                                                                                  // [0x408a8b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToFloat
	// float Conv_IntToFloat(int32_t inInt);                                                                                    // [0x408a820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToByte
	// char Conv_IntToByte(int32_t inInt);                                                                                      // [0x408a7a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToBool
	// bool Conv_IntToBool(int32_t inInt);                                                                                      // [0x408a710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntPointToVector2D
	// FVector2D Conv_IntPointToVector2D(FIntPoint InIntPoint);                                                                 // [0x408a680] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToInt
	// int32_t Conv_Int64ToInt(int64_t inInt);                                                                                  // [0x408a600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToByte
	// char Conv_Int64ToByte(int64_t inInt);                                                                                    // [0x408a580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToVector
	// FVector Conv_FloatToVector(float InFloat);                                                                               // [0x408a4f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor
	// FLinearColor Conv_FloatToLinearColor(float InFloat);                                                                     // [0x408a460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor
	// FLinearColor Conv_ColorToLinearColor(FColor InColor);                                                                    // [0x408a3d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToInt
	// int32_t Conv_ByteToInt(char InByte);                                                                                     // [0x408a350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToFloat
	// float Conv_ByteToFloat(char InByte);                                                                                     // [0x408a2d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToInt
	// int32_t Conv_BoolToInt(bool InBool);                                                                                     // [0x408a240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToFloat
	// float Conv_BoolToFloat(bool InBool);                                                                                     // [0x408a1b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToByte
	// char Conv_BoolToByte(bool InBool);                                                                                       // [0x408a120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeTransforms
	// FTransform ComposeTransforms(FTransform& A, FTransform& B);                                                              // [0x4089f90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ComposeRotators
	// FRotator ComposeRotators(FRotator A, FRotator B);                                                                        // [0x4089e90] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClassIsChildOf
	// bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);                                                 // [0x4089dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampVectorSize
	// FVector ClampVectorSize(FVector A, float Min, float Max);                                                                // [0x4089bf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampInt64
	// int64_t ClampInt64(int64_t Value, int64_t Min, int64_t Max);                                                             // [0x4089ae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxis
	// float ClampAxis(float Angle);                                                                                            // [0x4089a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAxes2D
	// FVector2D ClampAxes2D(FVector2D A, float MinAxisVal, float MaxAxisVal);                                                  // [0x4089920] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.ClampAngle
	// float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);                                      // [0x4089800] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Clamp
	// int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);                                                                  // [0x4089700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.CInterpTo
	// FLinearColor CInterpTo(FLinearColor Current, FLinearColor Target, float DeltaTime, float InterpSpeed);                   // [0x4089570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector4
	// void BreakVector4(FVector4& InVec, float& X, float& Y, float& Z, float& W);                                              // [0x4089200] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector2D
	// void BreakVector2D(FVector2D InVec, float& X, float& Y);                                                                 // [0x40890d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakVector
	// void BreakVector(FVector InVec, float& X, float& Y, float& Z);                                                           // [0x40893f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTransform
	// void BreakTransform(FTransform& InTransform, FVector& Location, FRotator& Rotation, FVector& Scale);                     // [0x4088eb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan2
	// void BreakTimespan2(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano); // [0x4088a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan
	// void BreakTimespan(FTimespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& MilliSeconds); // [0x4088c80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotIntoAxes
	// void BreakRotIntoAxes(FRotator& InRot, FVector& X, FVector& Y, FVector& Z);                                              // [0x4088750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRotator
	// void BreakRotator(FRotator InRot, float& Roll, float& Pitch, float& Yaw);                                                // [0x40888d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakRandomStream
	// void BreakRandomStream(FRandomStream& InRandomStream, int32_t& InitialSeed);                                             // [0x4088670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakQualifiedFrameTime
	// void BreakQualifiedFrameTime(FQualifiedFrameTime& InFrameTime, FFrameNumber& Frame, FFrameRate& FrameRate, float& SubFrame); // [0x40884d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakFrameRate
	// void BreakFrameRate(FFrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);                                  // [0x40883a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakDateTime
	// void BreakDateTime(FDateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond); // [0x40880f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BreakColor
	// void BreakColor(FLinearColor InColor, float& R, float& G, float& B, float& A);                                           // [0x4087f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanXOR
	// bool BooleanXOR(bool A, bool B);                                                                                         // [0x4087e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanOR
	// bool BooleanOR(bool A, bool B);                                                                                          // [0x4087d60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNOR
	// bool BooleanNOR(bool A, bool B);                                                                                         // [0x4087c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanNAND
	// bool BooleanNAND(bool A, bool B);                                                                                        // [0x4087ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BooleanAND
	// bool BooleanAND(bool A, bool B);                                                                                         // [0x4087ac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMin
	// char BMin(char A, char B);                                                                                               // [0x40879f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.BMax
	// char BMax(char A, char B);                                                                                               // [0x4087920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan2
	// float Atan2(float Y, float X);                                                                                           // [0x40877c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Atan
	// float Atan(float A);                                                                                                     // [0x4087890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Asin
	// float Asin(float A);                                                                                                     // [0x4087720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_IntInt
	// int32_t And_IntInt(int32_t A, int32_t B);                                                                                // [0x4087660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.And_Int64Int64
	// int64_t And_Int64Int64(int64_t A, int64_t B);                                                                            // [0x4087590] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorVector
	// FVector Add_VectorVector(FVector A, FVector B);                                                                          // [0x40874b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorInt
	// FVector Add_VectorInt(FVector A, int32_t B);                                                                             // [0x40873c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorFloat
	// FVector Add_VectorFloat(FVector A, float B);                                                                             // [0x40872e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector4Vector4
	// FVector4 Add_Vector4Vector4(FVector4& A, FVector4& B);                                                                   // [0x40871b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DVector2D
	// FVector2D Add_Vector2DVector2D(FVector2D A, FVector2D B);                                                                // [0x40870e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DFloat
	// FVector2D Add_Vector2DFloat(FVector2D A, float B);                                                                       // [0x4087010] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_TimespanTimespan
	// FTimespan Add_TimespanTimespan(FTimespan A, FTimespan B);                                                                // [0x40867e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_QuatQuat
	// FQuat Add_QuatQuat(FQuat& A, FQuat& B);                                                                                  // [0x4086f30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_MatrixMatrix
	// FMatrix Add_MatrixMatrix(FMatrix& A, FMatrix& B);                                                                        // [0x4086da0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_LinearColorLinearColor
	// FLinearColor Add_LinearColorLinearColor(FLinearColor A, FLinearColor B);                                                 // [0x4086cb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointIntPoint
	// FIntPoint Add_IntPointIntPoint(FIntPoint A, FIntPoint B);                                                                // [0x4086be0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointInt
	// FIntPoint Add_IntPointInt(FIntPoint A, int32_t B);                                                                       // [0x4086b00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_IntInt
	// int32_t Add_IntInt(int32_t A, int32_t B);                                                                                // [0x4086a40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_Int64Int64
	// int64_t Add_Int64Int64(int64_t A, int64_t B);                                                                            // [0x4086970] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_FloatFloat
	// float Add_FloatFloat(float A, float B);                                                                                  // [0x40868a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeTimespan
	// FDateTime Add_DateTimeTimespan(FDateTime A, FTimespan B);                                                                // [0x40867e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeDateTime
	// FDateTime Add_DateTimeDateTime(FDateTime A, FDateTime B);                                                                // [0x40867e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Add_ByteByte
	// char Add_ByteByte(char A, char B);                                                                                       // [0x4086720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Acos
	// float Acos(float A);                                                                                                     // [0x4086680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int64
	// int64_t Abs_Int64(int64_t A);                                                                                            // [0x4086560] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int
	// int32_t Abs_Int(int32_t A);                                                                                              // [0x40865f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetMathLibrary.Abs
	// float Abs(float A);                                                                                                      // [0x40864d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetNodeHelperLibrary.MarkBit
	// void MarkBit(int32_t& Data, int32_t Index);                                                                              // [0x40b4080] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	// bool HasUnmarkedBit(int32_t Data, int32_t NumBits);                                                                      // [0x40b3550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasMarkedBit
	// bool HasMarkedBit(int32_t Data, int32_t NumBits);                                                                        // [0x40b3480] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetValidValue
	// char GetValidValue(class UEnum* Enum, char EnumeratorValue);                                                             // [0x40b33b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	// int32_t GetUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits, bool bRandom);                                   // [0x40b3270] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	// int32_t GetRandomUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                           // [0x40b3010] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	// int32_t GetFirstUnmarkedBit(int32_t Data, int32_t StartIdx, int32_t NumBits);                                            // [0x40b2f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	// char GetEnumeratorValueFromIndex(class UEnum* Enum, char EnumeratorIndex);                                               // [0x40b2e40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	// FString GetEnumeratorUserFriendlyName(class UEnum* Enum, char EnumeratorValue);                                          // [0x40b2d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName
	// FName GetEnumeratorName(class UEnum* Enum, char EnumeratorValue);                                                        // [0x40b2c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearBit
	// void ClearBit(int32_t& Data, int32_t Index);                                                                             // [0x40b0570] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearAllBits
	// void ClearAllBits(int32_t& Data);                                                                                        // [0x40b04f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetNodeHelperLibrary.BitIsMarked
	// bool BitIsMarked(int32_t Data, int32_t Index);                                                                           // [0x40aee20] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
	// void SetCastInsetShadowForAllAttachments(class UPrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup); // [0x40b5530] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	// class UTexture2D* RenderTargetCreateStaticTexture2DEditorOnly(class UTextureRenderTarget2D* RenderTarget, FString Name, TEnumAsByte<TextureCompressionSettings> CompressionSettings, TEnumAsByte<TextureMipGenSettings> MipSettings); // [0x40b4bf0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	// void ReleaseRenderTarget2D(class UTextureRenderTarget2D* TextureRenderTarget);                                           // [0x40b4b70] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetUV
	// FColor ReadRenderTargetUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x40b4a20] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
	// FLinearColor ReadRenderTargetRawUV(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, float U, float V); // [0x40b48b0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
	// FLinearColor ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x40b4740] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetPixel
	// FColor ReadRenderTargetPixel(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, int32_t X, int32_t Y); // [0x40b45f0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	// FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32_t Bone0, char Weight0, int32_t Bone1, char Weight1, int32_t Bone2, char Weight2, int32_t Bone3, char Weight3); // [0x40b3e00] Final|RequiredAPI|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.ImportFileAsTexture2D
	// class UTexture2D* ImportFileAsTexture2D(class UObject* WorldContextObject, FString Filename);                            // [0x40b3710] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
	// class UTexture2D* ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<char>& Buffer);                      // [0x40b3620] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportTexture2D
	// void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, FString FilePath, FString Filename);  // [0x40b2770] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ExportRenderTarget
	// void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FString FilePath, FString Filename); // [0x40b2600] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	// void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, FDrawToRenderTargetContext& Context);                // [0x40b2210] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	// void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material); // [0x40b2110] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTargetVolume
	// class UTextureRenderTargetVolume* CreateRenderTargetVolume(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Depth, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x40b1dd0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
	// class UTextureRenderTarget2DArray* CreateRenderTarget2DArray(class UObject* WorldContextObject, int32_t Width, int32_t Height, int32_t Slices, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x40b1bc0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D
	// class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32_t Width, int32_t Height, TEnumAsByte<ETextureRenderTargetFormat> Format, FLinearColor ClearColor, bool bAutoGenerateMipMaps); // [0x40b19f0] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	// void ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget, class UTexture2D* Texture); // [0x40b18f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D
	// void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, FLinearColor ClearColor); // [0x40b0640] Final|RequiredAPI|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	// void BreakSkinWeightInfo(FSkelMeshSkinWeightInfo InWeight, int32_t& Bone0, char& Weight0, int32_t& Bone1, char& Weight1, int32_t& Bone2, char& Weight2, int32_t& Bone3, char& Weight3); // [0x40aeef0] Final|RequiredAPI|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
	// void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas*& Canvas, FVector2D& Size, FDrawToRenderTargetContext& Context); // [0x40aec60] Final|RequiredAPI|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetStringLibrary.TrimTrailing
	// FString TrimTrailing(FString SourceString);                                                                              // [0x40b5d30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Trim
	// FString Trim(FString SourceString);                                                                                      // [0x40b5c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToUpper
	// FString ToUpper(FString SourceString);                                                                                   // [0x40b5b70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ToLower
	// FString ToLower(FString SourceString);                                                                                   // [0x40b5a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.TimeSecondsToString
	// FString TimeSecondsToString(float InSeconds);                                                                            // [0x40b59c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.StartsWith
	// bool StartsWith(FString SourceString, FString InPrefix, TEnumAsByte<ESearchCase> SearchCase);                            // [0x40b5880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Split
	// bool Split(FString SourceString, FString InStr, FString& LeftS, FString& RightS, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir); // [0x40b5640] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightPad
	// FString RightPad(FString SourceString, int32_t ChCount);                                                                 // [0x40b5410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.RightChop
	// FString RightChop(FString SourceString, int32_t Count);                                                                  // [0x40b52f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Right
	// FString Right(FString SourceString, int32_t Count);                                                                      // [0x40b51d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Reverse
	// FString Reverse(FString SourceString);                                                                                   // [0x40b50f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ReplaceInline
	// int32_t ReplaceInline(FString& SourceString, FString SearchText, FString ReplacementText, TEnumAsByte<ESearchCase> SearchCase); // [0x40b4f50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetStringLibrary.Replace
	// FString Replace(FString SourceString, FString From, FString To, TEnumAsByte<ESearchCase> SearchCase);                    // [0x40b4d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.ParseIntoArray
	// TArray<FString> ParseIntoArray(FString SourceString, FString Delimiter, bool CullEmptyStrings);                          // [0x40b4470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StrStr
	// bool NotEqual_StrStr(FString A, FString B);                                                                              // [0x40b4290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StriStri
	// bool NotEqual_StriStri(FString A, FString B);                                                                            // [0x40b4380] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Mid
	// FString Mid(FString SourceString, int32_t Start, int32_t Count);                                                         // [0x40b3110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.MatchesWildcard
	// bool MatchesWildcard(FString SourceString, FString Wildcard, TEnumAsByte<ESearchCase> SearchCase);                       // [0x40b4150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Len
	// int32_t Len(FString S);                                                                                                  // [0x40b3d60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftPad
	// FString LeftPad(FString SourceString, int32_t ChCount);                                                                  // [0x40b3c40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.LeftChop
	// FString LeftChop(FString SourceString, int32_t Count);                                                                   // [0x40b3b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Left
	// FString Left(FString SourceString, int32_t Count);                                                                       // [0x40b3a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.JoinStringArray
	// FString JoinStringArray(TArray<FString>& SourceArray, FString Separator);                                                // [0x40b3890] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsNumeric
	// bool IsNumeric(FString SourceString);                                                                                    // [0x40b37f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.IsEmpty
	// bool IsEmpty(FString inString);                                                                                          // [0x93e1b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetSubstring
	// FString GetSubstring(FString SourceString, int32_t StartIndex, int32_t Length);                                          // [0x40b3110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterAsNumber
	// int32_t GetCharacterAsNumber(FString SourceString, int32_t Index);                                                       // [0x40b2b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterArrayFromString
	// TArray<FString> GetCharacterArrayFromString(FString SourceString);                                                       // [0x40b2aa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.FindSubstring
	// int32_t FindSubstring(FString SearchIn, FString SubString, bool bUseCase, bool bSearchFromEnd, int32_t StartPosition);   // [0x40b28e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StrStr
	// bool EqualEqual_StrStr(FString A, FString B);                                                                            // [0x40b2420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StriStri
	// bool EqualEqual_StriStri(FString A, FString B);                                                                          // [0x40b2510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.EndsWith
	// bool EndsWith(FString SourceString, FString InSuffix, TEnumAsByte<ESearchCase> SearchCase);                              // [0x40b22e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.CullArray
	// int32_t CullArray(FString SourceString, TArray<FString>& inArray);                                                       // [0x40b1fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_VectorToString
	// FString Conv_VectorToString(FVector InVec);                                                                              // [0x40b1810] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_Vector2dToString
	// FString Conv_Vector2dToString(FVector2D InVec);                                                                          // [0x40b1750] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_TransformToString
	// FString Conv_TransformToString(FTransform& InTrans);                                                                     // [0x40b1630] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector2D
	// void Conv_StringToVector2D(FString inString, FVector2D& OutConvertedVector2D, bool& OutIsValid);                         // [0x40b1500] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector
	// void Conv_StringToVector(FString inString, FVector& OutConvertedVector, bool& OutIsValid);                               // [0x933cf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToRotator
	// void Conv_StringToRotator(FString inString, FRotator& OutConvertedRotator, bool& OutIsValid);                            // [0x933bc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToName
	// FName Conv_StringToName(FString inString);                                                                               // [0x40b1450] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToInt
	// int32_t Conv_StringToInt(FString inString);                                                                              // [0x40b13b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToFloat
	// float Conv_StringToFloat(FString inString);                                                                              // [0x40b1310] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToColor
	// void Conv_StringToColor(FString inString, FLinearColor& OutConvertedColor, bool& OutIsValid);                            // [0x933a90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_RotatorToString
	// FString Conv_RotatorToString(FRotator InRot);                                                                            // [0x40b1230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ObjectToString
	// FString Conv_ObjectToString(class UObject* InObj);                                                                       // [0x40b1160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_NameToString
	// FString Conv_NameToString(FName InName);                                                                                 // [0x40b1090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_MatrixToString
	// FString Conv_MatrixToString(FMatrix& InMatrix);                                                                          // [0x40b0fc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntVectorToString
	// FString Conv_IntVectorToString(FIntVector InIntVec);                                                                     // [0x40b0ee0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntToString
	// FString Conv_IntToString(int32_t inInt);                                                                                 // [0x40b0e10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntPointToString
	// FString Conv_IntPointToString(FIntPoint InIntPoint);                                                                     // [0x40b0d50] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_FloatToString
	// FString Conv_FloatToString(float InFloat);                                                                               // [0x40b0c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ColorToString
	// FString Conv_ColorToString(FLinearColor InColor);                                                                        // [0x40b0bb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_ByteToString
	// FString Conv_ByteToString(char InByte);                                                                                  // [0x40b0ae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Conv_BoolToString
	// FString Conv_BoolToString(bool InBool);                                                                                  // [0x40b0a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Contains
	// bool Contains(FString SearchIn, FString SubString, bool bUseCase, bool bSearchFromEnd);                                  // [0x40b0890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.Concat_StrStr
	// FString Concat_StrStr(FString A, FString B);                                                                             // [0x40b0750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector2d
	// FString BuildString_Vector2d(FString AppendTo, FString Prefix, FVector2D InVector2D, FString Suffix);                    // [0x40b0140] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector
	// FString BuildString_Vector(FString AppendTo, FString Prefix, FVector InVector, FString Suffix);                          // [0x40b0310] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Rotator
	// FString BuildString_Rotator(FString AppendTo, FString Prefix, FRotator InRot, FString Suffix);                           // [0x40aff60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Object
	// FString BuildString_Object(FString AppendTo, FString Prefix, class UObject* InObj, FString Suffix);                      // [0x40afd90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Name
	// FString BuildString_Name(FString AppendTo, FString Prefix, FName InName, FString Suffix);                                // [0x40afbc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_IntVector
	// FString BuildString_IntVector(FString AppendTo, FString Prefix, FIntVector InIntVector, FString Suffix);                 // [0x40af9e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Int
	// FString BuildString_Int(FString AppendTo, FString Prefix, int32_t inInt, FString Suffix);                                // [0x40af810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Float
	// FString BuildString_Float(FString AppendTo, FString Prefix, float InFloat, FString Suffix);                              // [0x40af640] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Color
	// FString BuildString_Color(FString AppendTo, FString Prefix, FLinearColor InColor, FString Suffix);                       // [0x40af460] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Bool
	// FString BuildString_Bool(FString AppendTo, FString Prefix, bool InBool, FString Suffix);                                 // [0x40af290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableId
	// bool IsRegisteredTableId(FName TableId);                                                                                 // [0x40c3b70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	// bool IsRegisteredTableEntry(FName TableId, FString Key);                                                                 // [0x40c3a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableNamespace
	// FString GetTableNamespace(FName TableId);                                                                                // [0x40c3790] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString
	// FString GetTableEntrySourceString(FName TableId, FString Key);                                                           // [0x40c3670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData
	// FString GetTableEntryMetaData(FName TableId, FString Key, FName MetadataId);                                             // [0x40c3500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetRegisteredStringTables
	// TArray<FName> GetRegisteredStringTables();                                                                               // [0x40c3100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	// TArray<FName> GetMetaDataIdsFromStringTableEntry(FName TableId, FString Key);                                            // [0x40c2430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetStringTableLibrary.GetKeysFromStringTable
	// TArray<FString> GetKeysFromStringTable(FName TableId);                                                                   // [0x40c2360] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	// void UnregisterForRemoteNotifications();                                                                                 // [0x93a380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	// void UnloadPrimaryAssetList(TArray<FPrimaryAssetId>& PrimaryAssetIdList);                                                // [0x40ccd10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset
	// void UnloadPrimaryAsset(FPrimaryAssetId PrimaryAssetId);                                                                 // [0x40ccc80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.TransactObject
	// void TransactObject(class UObject* Object);                                                                              // [0x40beb20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.StackTrace
	// void StackTrace();                                                                                                       // [0x40ccc60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	// bool SphereTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cc7c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	// bool SphereTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cc330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingle
	// bool SphereTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cbeb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	// bool SphereTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cba40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	// bool SphereTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cb5f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMulti
	// bool SphereTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40cb1a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapComponents
	// bool SphereOverlapComponents(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x40caf10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapActors
	// bool SphereOverlapActors(class UObject* WorldContextObject, FVector SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x40cac80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SnapshotObject
	// void SnapshotObject(class UObject* Object);                                                                              // [0x40beb20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	// void ShowPlatformSpecificLeaderboardScreen(FString CategoryName);                                                        // [0x40cabf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	// void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);                                    // [0x40cab70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowInterstitialAd
	// void ShowInterstitialAd();                                                                                               // [0x40cab50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ShowAdBanner
	// void ShowAdBanner(int32_t AdIdIndex, bool bShowOnBottomOfScreen);                                                        // [0x40caa90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetWindowTitle
	// void SetWindowTitle(FText& Title);                                                                                       // [0x40ca9d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	// void SetVolumeButtonsHandledBySystem(bool bEnabled);                                                                     // [0x946dc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetVectorPropertyByName
	// void SetVectorPropertyByName(class UObject* Object, FName PropertyName, FVector& Value);                                 // [0x40ca8c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetUserActivity
	// void SetUserActivity(FUserActivity& UserActivity);                                                                       // [0x40ca820] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTransformPropertyByName
	// void SetTransformPropertyByName(class UObject* Object, FName PropertyName, FTransform& Value);                           // [0x40ca6d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetTextPropertyByName
	// void SetTextPropertyByName(class UObject* Object, FName PropertyName, FText& Value);                                     // [0x40ca580] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	// void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);                               // [0x40ca4c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStructurePropertyByName
	// void SetStructurePropertyByName(class UObject* Object, FName PropertyName, FGenericStruct& Value);                       // [0x40c9590] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetStringPropertyByName
	// void SetStringPropertyByName(class UObject* Object, FName PropertyName, FString Value);                                  // [0x40ca3a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	// void SetSoftObjectPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UObject*>& Value);            // [0x40ca260] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	// void SetSoftClassPropertyByName(class UObject* Object, FName PropertyName, TWeakObjectPtr<UClass*>& Value);              // [0x40ca120] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName
	// void SetRotatorPropertyByName(class UObject* Object, FName PropertyName, FRotator& Value);                               // [0x40ca010] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetObjectPropertyByName
	// void SetObjectPropertyByName(class UObject* Object, FName PropertyName, class UObject* Value);                           // [0x40c9f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetNamePropertyByName
	// void SetNamePropertyByName(class UObject* Object, FName PropertyName, FName& Value);                                     // [0x40c9e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	// void SetLinearColorPropertyByName(class UObject* Object, FName PropertyName, FLinearColor& Value);                       // [0x40c9cf0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetIntPropertyByName
	// void SetIntPropertyByName(class UObject* Object, FName PropertyName, int32_t Value);                                     // [0x40c9ae0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName
	// void SetInterfacePropertyByName(class UObject* Object, FName PropertyName, TScriptInterface<Class>& Value);              // [0x40c9be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetInt64PropertyByName
	// void SetInt64PropertyByName(class UObject* Object, FName PropertyName, int64_t Value);                                   // [0x40c99e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
	// void SetGamepadsBlockDeviceFeedback(bool bBlock);                                                                        // [0x946dc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFloatPropertyByName
	// void SetFloatPropertyByName(class UObject* Object, FName PropertyName, float Value);                                     // [0x40c98d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetFieldPathPropertyByName
	// void SetFieldPathPropertyByName(class UObject* Object, FName PropertyName, Value& Value);                                // [0x40c97a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetColorPropertyByName
	// void SetColorPropertyByName(class UObject* Object, FName PropertyName, FColor& Value);                                   // [0x40c9690] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	// void SetCollisionProfileNameProperty(class UObject* Object, FName PropertyName, FCollisionProfileName& Value);           // [0x40c9590] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetClassPropertyByName
	// void SetClassPropertyByName(class UObject* Object, FName PropertyName, class UClass* Value);                             // [0x40c9490] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBytePropertyByName
	// void SetBytePropertyByName(class UObject* Object, FName PropertyName, char Value);                                       // [0x40c9390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.SetBoolPropertyByName
	// void SetBoolPropertyByName(class UObject* Object, FName PropertyName, bool Value);                                       // [0x40c9290] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RetriggerableDelay
	// void RetriggerableDelay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                // [0x40c9150] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	// void ResetGamepadAssignmentToController(int32_t ControllerId);                                                           // [0x40bba50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignments
	// void ResetGamepadAssignments();                                                                                          // [0x1a24ca0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	// void RegisterForRemoteNotifications();                                                                                   // [0x93a380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.QuitGame
	// void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions); // [0x40c9000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintWarning
	// void PrintWarning(FString inString);                                                                                     // [0x40c8f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintText
	// void PrintText(class UObject* WorldContextObject, FText InText, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x40c8d20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.PrintString
	// void PrintString(class UObject* WorldContextObject, FString inString, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x40c8b20] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ParseParamValue
	// bool ParseParamValue(FString inString, FString InParam, FString& OutValue);                                              // [0x40c89c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ParseParam
	// bool ParseParam(FString inString, FString InParam);                                                                      // [0x40c88d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ParseCommandLine
	// void ParseCommandLine(FString InCmdLine, TArray<FString>& OutTokens, TArray<FString>& OutSwitches, TMap<FString, FString>& OutParams); // [0x40c8660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	// void OnAssetLoaded__DelegateSignature(class UObject* Loaded);                                                            // [0x24710f0] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	// void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);                                                        // [0x24710f0] Public|Delegate      
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	// bool NotEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                             // [0x40c8510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	// bool NotEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                                // [0x40c8510] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	// bool NotEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                                // [0x3816550] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	// bool NotEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                      // [0x40c8420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.NormalizeFilename
	// FString NormalizeFilename(FString InFilename);                                                                           // [0x40c8340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MoveComponentTo
	// void MoveComponentTo(class USceneComponent* Component, FVector TargetRelativeLocation, FRotator TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<EMoveComponentAction> MoveAction, FLatentActionInfo LatentInfo); // [0x40c8050] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftObjectPath
	// FSoftObjectPath MakeSoftObjectPath(FString PathString);                                                                  // [0x40c7f60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftClassPath
	// FSoftClassPath MakeSoftClassPath(FString PathString);                                                                    // [0x40c7ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralText
	// FText MakeLiteralText(FText Value);                                                                                      // [0x40c7d40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralString
	// FString MakeLiteralString(FString Value);                                                                                // [0x40c7c30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralName
	// FName MakeLiteralName(FName Value);                                                                                      // [0x40c7bb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralInt
	// int32_t MakeLiteralInt(int32_t Value);                                                                                   // [0xbbc3d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralFloat
	// float MakeLiteralFloat(float Value);                                                                                     // [0x40c7b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralByte
	// char MakeLiteralByte(char Value);                                                                                        // [0x40c7ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralBool
	// bool MakeLiteralBool(bool Value);                                                                                        // [0x408a120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.LoadInterstitialAd
	// void LoadInterstitialAd(int32_t AdIdIndex);                                                                              // [0x40c7a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadClassAsset_Blocking
	// class UClass* LoadClassAsset_Blocking(TWeakObjectPtr<UClass*> AssetClass);                                               // [0x40c7920] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAssetClass
	// void LoadAssetClass(class UObject* WorldContextObject, TWeakObjectPtr<UClass*> AssetClass, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x40c7620] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset_Blocking
	// class UObject* LoadAsset_Blocking(TWeakObjectPtr<UObject*> Asset);                                                       // [0x40c7810] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset
	// void LoadAsset(class UObject* WorldContextObject, TWeakObjectPtr<UObject*> Asset, FDelegateProperty OnLoaded, FLatentActionInfo LatentInfo); // [0x40c7430] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects
	// bool LineTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c6fd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile
	// bool LineTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c6b80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingle
	// bool LineTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c6730] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects
	// bool LineTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c6310] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile
	// bool LineTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c5f10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMulti
	// bool LineTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40c5b10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.LaunchURL
	// void LaunchURL(FString URL);                                                                                             // [0x40c5a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	// void K2_UnPauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                      // [0x40c59c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	// void K2_UnPauseTimerDelegate(FDelegateProperty Delegate);                                                                // [0x40c5930] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimer
	// void K2_UnPauseTimer(class UObject* Object, FString FunctionName);                                                       // [0x40c5810] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle
	// bool K2_TimerExistsHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                       // [0x40c5740] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	// bool K2_TimerExistsDelegate(FDelegateProperty Delegate);                                                                 // [0x40c56a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExists
	// bool K2_TimerExists(class UObject* Object, FString FunctionName);                                                        // [0x40c5570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate
	// FTimerHandle K2_SetTimerDelegate(FDelegateProperty Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x40c53c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimer
	// FTimerHandle K2_SetTimer(class UObject* Object, FString FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance); // [0x40c5180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle
	// void K2_PauseTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x40c50c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	// void K2_PauseTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x40c5030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimer
	// void K2_PauseTimer(class UObject* Object, FString FunctionName);                                                         // [0x40c4f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	// bool K2_IsValidTimerHandle(FTimerHandle Handle);                                                                         // [0x40c4e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	// bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x40c4db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	// bool K2_IsTimerPausedDelegate(FDelegateProperty Delegate);                                                               // [0x40c4d10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPaused
	// bool K2_IsTimerPaused(class UObject* Object, FString FunctionName);                                                      // [0x40c4be0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	// bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                     // [0x40c4b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	// bool K2_IsTimerActiveDelegate(FDelegateProperty Delegate);                                                               // [0x40c4a70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActive
	// bool K2_IsTimerActive(class UObject* Object, FString FunctionName);                                                      // [0x40c4940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	// FTimerHandle K2_InvalidateTimerHandle(FTimerHandle& Handle);                                                             // [0x40c48a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	// float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                            // [0x40c47d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	// float K2_GetTimerRemainingTimeDelegate(FDelegateProperty Delegate);                                                      // [0x40c4730] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	// float K2_GetTimerRemainingTime(class UObject* Object, FString FunctionName);                                             // [0x40c4600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	// float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, FTimerHandle Handle);                              // [0x40c4530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	// float K2_GetTimerElapsedTimeDelegate(FDelegateProperty Delegate);                                                        // [0x40c4490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	// float K2_GetTimerElapsedTime(class UObject* Object, FString FunctionName);                                               // [0x40c4360] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle
	// void K2_ClearTimerHandle(class UObject* WorldContextObject, FTimerHandle Handle);                                        // [0x40c42a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	// void K2_ClearTimerDelegate(FDelegateProperty Delegate);                                                                  // [0x40c4210] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimer
	// void K2_ClearTimer(class UObject* Object, FString FunctionName);                                                         // [0x40c40f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	// void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, FTimerHandle& Handle);                          // [0x40c4020] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference
	// bool IsValidSoftObjectReference(TWeakObjectPtr<UObject*>& SoftObjectReference);                                          // [0x40c3f60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftClassReference
	// bool IsValidSoftClassReference(TWeakObjectPtr<UClass*>& SoftClassReference);                                             // [0x40c3f60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	// bool IsValidPrimaryAssetType(FPrimaryAssetType PrimaryAssetType);                                                        // [0x3815d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	// bool IsValidPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                              // [0x40c3ec0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValidClass
	// bool IsValidClass(class UClass* Class);                                                                                  // [0x40c3de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsValid
	// bool IsValid(class UObject* Object);                                                                                     // [0x40c3de0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsUnattended
	// bool IsUnattended();                                                                                                     // [0x40c3db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsStandAlone
	// bool IsStandAlone(class UObject* WorldContextObject);                                                                    // [0x40c3d20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsSplitScreen
	// bool IsSplitScreen(class UObject* WorldContextObject);                                                                   // [0x40c3c90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsServer
	// bool IsServer(class UObject* WorldContextObject);                                                                        // [0x40c3c00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsScreensaverEnabled
	// bool IsScreensaverEnabled();                                                                                             // [0x946d90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsPackagedForDistribution
	// bool IsPackagedForDistribution();                                                                                        // [0x1a18010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsLoggedIn
	// bool IsLoggedIn(class APlayerController* SpecificPlayer);                                                                // [0x40c3a00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested
	// bool IsInterstitialAdRequested();                                                                                        // [0x40c39d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	// bool IsInterstitialAdAvailable();                                                                                        // [0x40c39a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.IsDedicatedServer
	// bool IsDedicatedServer(class UObject* WorldContextObject);                                                               // [0x40c3910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	// bool IsControllerAssignedToGamepad(int32_t ControllerId);                                                                // [0x40c3880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.HideAdBanner
	// void HideAdBanner();                                                                                                     // [0x40c3860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	// bool GetVolumeButtonsHandledBySystem();                                                                                  // [0x1a18010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetUniqueDeviceId
	// FString GetUniqueDeviceId();                                                                                             // [0x1a17890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSystemPath
	// FString GetSystemPath(class UObject* Object);                                                                            // [0x40c3430] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	// bool GetSupportedFullscreenResolutions(TArray<FIntPoint>& Resolutions);                                                  // [0x40c3380] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	// TWeakObjectPtr<UObject*> GetSoftObjectReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                       // [0x40c32b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	// TWeakObjectPtr<UClass*> GetSoftClassReferenceFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                         // [0x40c31e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	// int32_t GetRenderingMaterialQualityLevel();                                                                              // [0x40c31b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingDetailMode
	// int32_t GetRenderingDetailMode();                                                                                        // [0x40c3180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectSavedDirectory
	// FString GetProjectSavedDirectory();                                                                                      // [0x942ba0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectDirectory
	// FString GetProjectDirectory();                                                                                           // [0x942aa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectContentDirectory
	// FString GetProjectContentDirectory();                                                                                    // [0x40c3080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	// void GetPrimaryAssetsWithBundleState(TArray<FName>& RequiredBundles, TArray<FName>& ExcludedBundles, TArray<FPrimaryAssetType>& ValidTypes, bool bForceCurrentState, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList); // [0x40c2e60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	// void GetPrimaryAssetIdList(FPrimaryAssetType PrimaryAssetType, TArray<FPrimaryAssetId>& OutPrimaryAssetIdList);          // [0x40c2d80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftObjectReference(TWeakObjectPtr<UObject*> SoftObjectReference);                  // [0x40c2c60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	// FPrimaryAssetId GetPrimaryAssetIdFromSoftClassReference(TWeakObjectPtr<UClass*> SoftClassReference);                     // [0x40c2b40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	// FPrimaryAssetId GetPrimaryAssetIdFromObject(class UObject* Object);                                                      // [0x40c2aa0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	// FPrimaryAssetId GetPrimaryAssetIdFromClass(class UClass* Class);                                                         // [0x40c2a00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPreferredLanguages
	// TArray<FString> GetPreferredLanguages();                                                                                 // [0x40c2980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserName
	// FString GetPlatformUserName();                                                                                           // [0x40c2900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserDir
	// FString GetPlatformUserDir();                                                                                            // [0x40c2880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetPathName
	// FString GetPathName(class UObject* Object);                                                                              // [0x40c27b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetOuterObject
	// class UObject* GetOuterObject(class UObject* Object);                                                                    // [0x40c2720] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectName
	// FString GetObjectName(class UObject* Object);                                                                            // [0x40c2650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	// class UObject* GetObjectFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                              // [0x40c25b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI
	// int32_t GetMinYResolutionForUI();                                                                                        // [0x40c2580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	// int32_t GetMinYResolutionFor3DView();                                                                                    // [0x40c2550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	// FString GetLocalCurrencySymbol();                                                                                        // [0x40c1f30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode
	// FString GetLocalCurrencyCode();                                                                                          // [0x40c1f30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds
	// float GetGameTimeInSeconds(class UObject* WorldContextObject);                                                           // [0x4059520] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadControllerName
	// FString GetGamepadControllerName(int32_t ControllerId);                                                                  // [0x40c2290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadButtonGlyph
	// class UTexture2D* GetGamepadButtonGlyph(FString ButtonKey, int32_t ControllerIndex);                                     // [0x40c21b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameName
	// FString GetGameName();                                                                                                   // [0x40c2130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetGameBundleId
	// FString GetGameBundleId();                                                                                               // [0x40c1f30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetFrameCount
	// int64_t GetFrameCount();                                                                                                 // [0x40c2100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetEngineVersion
	// FString GetEngineVersion();                                                                                              // [0x40c2080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDisplayName
	// FString GetDisplayName(class UObject* Object);                                                                           // [0x40c1fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDeviceId
	// FString GetDeviceId();                                                                                                   // [0x40c1f30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLocale
	// FString GetDefaultLocale();                                                                                              // [0x40c1eb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLanguage
	// FString GetDefaultLanguage();                                                                                            // [0x40c1e30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCurrentBundleState
	// bool GetCurrentBundleState(FPrimaryAssetId PrimaryAssetId, bool bForceCurrentState, TArray<FName>& OutBundles);          // [0x40c1ce0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	// bool GetConvenientWindowedResolutions(TArray<FIntPoint>& Resolutions);                                                   // [0x40c1c30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	// int32_t GetConsoleVariableIntValue(FString VariableName);                                                                // [0x40c1b90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	// float GetConsoleVariableFloatValue(FString VariableName);                                                                // [0x40c1af0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
	// bool GetConsoleVariableBoolValue(FString VariableName);                                                                  // [0x40c1a50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetComponentBounds
	// void GetComponentBounds(class USceneComponent* Component, FVector& Origin, FVector& BoxExtent, float& SphereRadius);     // [0x40c18e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetCommandLine
	// FString GetCommandLine();                                                                                                // [0x40c1860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	// class UClass* GetClassFromPrimaryAssetId(FPrimaryAssetId PrimaryAssetId);                                                // [0x40c17c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetClassDisplayName
	// FString GetClassDisplayName(class UClass* Class);                                                                        // [0x40c16f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetAdIDCount
	// int32_t GetAdIDCount();                                                                                                  // [0x40c16c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.GetActorListFromComponentList
	// void GetActorListFromComponentList(TArray<UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<AActor*>& OutActorList); // [0x40c1570] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.GetActorBounds
	// void GetActorBounds(class AActor* Actor, FVector& Origin, FVector& BoxExtent);                                           // [0x40c1450] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ForceCloseAdBanner
	// void ForceCloseAdBanner();                                                                                               // [0x40c1430] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines
	// void FlushPersistentDebugLines(class UObject* WorldContextObject);                                                       // [0x40beb20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.FlushDebugStrings
	// void FlushDebugStrings(class UObject* WorldContextObject);                                                               // [0x40beb20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand
	// void ExecuteConsoleCommand(class UObject* WorldContextObject, FString Command, class APlayerController* SpecificPlayer); // [0x40c1310] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	// bool EqualEqual_SoftObjectReference(TWeakObjectPtr<UObject*>& A, TWeakObjectPtr<UObject*>& B);                           // [0x40c11c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	// bool EqualEqual_SoftClassReference(TWeakObjectPtr<UClass*>& A, TWeakObjectPtr<UClass*>& B);                              // [0x40c11c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	// bool EqualEqual_PrimaryAssetType(FPrimaryAssetType A, FPrimaryAssetType B);                                              // [0x3814d80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	// bool EqualEqual_PrimaryAssetId(FPrimaryAssetId A, FPrimaryAssetId B);                                                    // [0x40c10d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.EndTransaction
	// int32_t EndTransaction();                                                                                                // [0x40c10a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugString
	// void DrawDebugString(class UObject* WorldContextObject, FVector TextLocation, FString Text, class AActor* TestBaseActor, FLinearColor TextColor, float Duration); // [0x40c0ea0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugSphere
	// void DrawDebugSphere(class UObject* WorldContextObject, FVector Center, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x40c0c70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPoint
	// void DrawDebugPoint(class UObject* WorldContextObject, FVector position, float Size, FLinearColor PointColor, float Duration); // [0x40c0ad0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPlane
	// void DrawDebugPlane(class UObject* WorldContextObject, FPlane& PlaneCoordinates, FVector Location, float Size, FLinearColor PlaneColor, float Duration); // [0x40c08e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugLine
	// void DrawDebugLine(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, FLinearColor LineColor, float Duration, float Thickness); // [0x40c06e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFrustum
	// void DrawDebugFrustum(class UObject* WorldContextObject, FTransform& FrustumTransform, FLinearColor FrustumColor, float Duration, float Thickness); // [0x40c04e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	// void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FTransform& DrawTransform, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x40c0280] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	// void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, FDebugFloatHistory& FloatHistory, FVector DrawLocation, FVector2D DrawSize, FLinearColor DrawColor, float Duration); // [0x40c0070] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCylinder
	// void DrawDebugCylinder(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, int32_t Segments, FLinearColor LineColor, float Duration, float Thickness); // [0x40bfdf0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	// void DrawDebugCoordinateSystem(class UObject* WorldContextObject, FVector AxisLoc, FRotator AxisRot, float Scale, float Duration, float Thickness); // [0x40bfc00] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	// void DrawDebugConeInDegrees(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x40bf8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCone
	// void DrawDebugCone(class UObject* WorldContextObject, FVector Origin, FVector Direction, float Length, float AngleWidth, float AngleHeight, int32_t NumSides, FLinearColor LineColor, float Duration, float Thickness); // [0x40bf8f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCircle
	// void DrawDebugCircle(class UObject* WorldContextObject, FVector Center, float Radius, int32_t NumSegments, FLinearColor LineColor, float Duration, float Thickness, FVector YAxis, FVector ZAxis, bool bDrawAxis); // [0x40bf5d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCapsule
	// void DrawDebugCapsule(class UObject* WorldContextObject, FVector Center, float HalfHeight, float Radius, FRotator Rotation, FLinearColor LineColor, float Duration, float Thickness); // [0x40bf350] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCamera
	// void DrawDebugCamera(class ACameraActor* CameraActor, FLinearColor CameraColor, float Duration);                         // [0x40bf240] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugBox
	// void DrawDebugBox(class UObject* WorldContextObject, FVector Center, FVector Extent, FLinearColor LineColor, FRotator Rotation, float Duration, float Thickness); // [0x40beff0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugArrow
	// void DrawDebugArrow(class UObject* WorldContextObject, FVector LineStart, FVector LineEnd, float ArrowSize, FLinearColor LineColor, float Duration, float Thickness); // [0x40bedb0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.DoesImplementInterface
	// bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);                                         // [0x40bece0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Delay
	// void Delay(class UObject* WorldContextObject, float Duration, FLatentActionInfo LatentInfo);                             // [0x40beba0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	// void CreateCopyForUndoBuffer(class UObject* ObjectToModify);                                                             // [0x40beb20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToRelativePath
	// FString ConvertToRelativePath(FString Filename);                                                                         // [0x40bea40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToAbsolutePath
	// FString ConvertToAbsolutePath(FString Filename);                                                                         // [0x40be960] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
	// TWeakObjectPtr<UObject*> Conv_SoftObjPathToSoftObjRef(FSoftObjectPath& SoftObjectPath);                                  // [0x40be7c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	// FString Conv_SoftObjectReferenceToString(TWeakObjectPtr<UObject*>& SoftObjectReference);                                 // [0x40be6c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	// class UObject* Conv_SoftObjectReferenceToObject(TWeakObjectPtr<UObject*>& SoftObject);                                   // [0x40be8a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	// FString Conv_SoftClassReferenceToString(TWeakObjectPtr<UClass*>& SoftClassReference);                                    // [0x40be6c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	// class UClass* Conv_SoftClassReferenceToClass(TWeakObjectPtr<UClass*>& SoftClass);                                        // [0x40be600] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
	// TWeakObjectPtr<UClass*> Conv_SoftClassPathToSoftClassRef(FSoftClassPath& SoftClassPath);                                 // [0x40be520] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	// FString Conv_PrimaryAssetTypeToString(FPrimaryAssetType PrimaryAssetType);                                               // [0x3815180] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	// FString Conv_PrimaryAssetIdToString(FPrimaryAssetId PrimaryAssetId);                                                     // [0x40be440] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	// TWeakObjectPtr<UObject*> Conv_ObjectToSoftObjectReference(class UObject* Object);                                        // [0x40be390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject
	// class UObject* Conv_InterfaceToObject(TScriptInterface<Class>& Interface);                                               // [0x40be2f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	// TWeakObjectPtr<UClass*> Conv_ClassToSoftClassReference(class UClass*& Class);                                            // [0x40be230] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.ControlScreensaver
	// void ControlScreensaver(bool bAllowScreenSaver);                                                                         // [0x946dc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapComponents
	// bool ComponentOverlapComponents(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x40bdfa0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapActors
	// bool ComponentOverlapActors(class UPrimitiveComponent* Component, FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x40bdd10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CollectGarbage
	// void CollectGarbage();                                                                                                   // [0x40bdcf0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	// bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bd800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	// bool CapsuleTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bd330] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingle
	// bool CapsuleTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bce60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	// bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bc9a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	// bool CapsuleTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bc510] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMulti
	// bool CapsuleTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bc070] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents
	// bool CapsuleOverlapComponents(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x40bbda0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapActors
	// bool CapsuleOverlapActors(class UObject* WorldContextObject, FVector CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x40bbad0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CanLaunchURL
	// bool CanLaunchURL(FString URL);                                                                                          // [0x40bb9b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.CancelTransaction
	// void CancelTransaction(int32_t Index);                                                                                   // [0x40bba50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftObjectPath
	// void BreakSoftObjectPath(FSoftObjectPath InSoftObjectPath, FString& PathString);                                         // [0x40bb860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftClassPath
	// void BreakSoftClassPath(FSoftClassPath InSoftClassPath, FString& PathString);                                            // [0x40bb860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	// bool BoxTraceSingleForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bb350] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	// bool BoxTraceSingleByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40bae60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingle
	// bool BoxTraceSingle(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, FHitResult& OutHit, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40ba970] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	// bool BoxTraceMultiForObjects(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40ba4a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	// bool BoxTraceMultiByProfile(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, FName ProfileName, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40b9fe0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMulti
	// bool BoxTraceMulti(class UObject* WorldContextObject, FVector Start, FVector End, FVector HalfSize, FRotator Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<AActor*>& ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, TArray<FHitResult>& OutHits, bool bIgnoreSelf, FLinearColor TraceColor, FLinearColor TraceHitColor, float DrawTime); // [0x40b9b20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapComponents
	// bool BoxOverlapComponents(class UObject* WorldContextObject, FVector BoxPos, FVector Extent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ComponentClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<UPrimitiveComponent*>& OutComponents); // [0x40b9890] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapActors
	// bool BoxOverlapActors(class UObject* WorldContextObject, FVector BoxPos, FVector BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>>& ObjectTypes, class UClass* ActorClassFilter, TArray<AActor*>& ActorsToIgnore, TArray<AActor*>& OutActors); // [0x40b9600] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.BeginTransaction
	// int32_t BeginTransaction(FString Context, FText Description, class UObject* PrimaryObject);                              // [0x40b9470] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.KismetSystemLibrary.AddFloatHistorySample
	// FDebugFloatHistory AddFloatHistorySample(float Value, FDebugFloatHistory& FloatHistory);                                 // [0x40b9300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.KismetTextLibrary.TextTrimTrailing
	// FText TextTrimTrailing(FText& InText);                                                                                   // [0x40d2460] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	// FText TextTrimPrecedingAndTrailing(FText& InText);                                                                       // [0x40d2330] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPreceding
	// FText TextTrimPreceding(FText& InText);                                                                                  // [0x40d2200] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToUpper
	// FText TextToUpper(FText& InText);                                                                                        // [0x40d20d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextToLower
	// FText TextToLower(FText& InText);                                                                                        // [0x40d1fa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsTransient
	// bool TextIsTransient(FText& InText);                                                                                     // [0x40d1ed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsFromStringTable
	// bool TextIsFromStringTable(FText& Text);                                                                                 // [0x40d1e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsEmpty
	// bool TextIsEmpty(FText& InText);                                                                                         // [0x40d1d30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextIsCultureInvariant
	// bool TextIsCultureInvariant(FText& InText);                                                                              // [0x40d1c60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.TextFromStringTable
	// FText TextFromStringTable(FName TableId, FString Key);                                                                   // [0x40d1b20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	// bool StringTableIdAndKeyFromText(FText Text, FName& OutTableId, FString& OutKey);                                        // [0x40d1970] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.PolyglotDataToText
	// FText PolyglotDataToText(FPolyglotTextData& PolyglotData);                                                               // [0x40d1760] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_TextText
	// bool NotEqual_TextText(FText& A, FText& B);                                                                              // [0x40d15f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	// bool NotEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                   // [0x40d1480] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.IsPolyglotDataValid
	// void IsPolyglotDataValid(FPolyglotTextData& PolyglotData, bool& IsValid, FText& ErrorMessage);                           // [0x40d11e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.GetEmptyText
	// FText GetEmptyText();                                                                                                    // [0x40d1150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Format
	// FText Format(FText InPattern, TArray<FFormatArgumentData> InArgs);                                                       // [0x40d0f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.FindTextInLocalizationTable
	// bool FindTextInLocalizationTable(FString Namespace, FString Key, FText& OutText);                                        // [0x40d0da0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_TextText
	// bool EqualEqual_TextText(FText& A, FText& B);                                                                            // [0x40d0c30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	// bool EqualEqual_IgnoreCase_TextText(FText& A, FText& B);                                                                 // [0x40d0ac0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_VectorToText
	// FText Conv_VectorToText(FVector InVec);                                                                                  // [0x40d09d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Vector2dToText
	// FText Conv_Vector2dToText(FVector2D InVec);                                                                              // [0x40d08f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TransformToText
	// FText Conv_TransformToText(FTransform& InTrans);                                                                         // [0x40d07b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_TextToString
	// FString Conv_TextToString(FText& InText);                                                                                // [0x40d06a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_StringToText
	// FText Conv_StringToText(FString inString);                                                                               // [0x40d05a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_RotatorToText
	// FText Conv_RotatorToText(FRotator InRot);                                                                                // [0x40d04b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ObjectToText
	// FText Conv_ObjectToText(class UObject* InObj);                                                                           // [0x40d03c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_NameToText
	// FText Conv_NameToText(FName InName);                                                                                     // [0x40d02d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_IntToText
	// FText Conv_IntToText(int32_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x40d00b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_Int64ToText
	// FText Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits); // [0x15ebe80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_FloatToText
	// FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x40cfde0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ColorToText
	// FText Conv_ColorToText(FLinearColor InColor);                                                                            // [0x40cfd00] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_ByteToText
	// FText Conv_ByteToText(char Value);                                                                                       // [0x40cfc20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.Conv_BoolToText
	// FText Conv_BoolToText(bool InBool);                                                                                      // [0x40cfb30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	// FText AsTimeZoneTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x40cf800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	// FText AsTimeZoneDateTime_DateTime(FDateTime& InDateTime, FString InTimeZone);                                            // [0x40cf560] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	// FText AsTimeZoneDate_DateTime(FDateTime& InDateTime, FString InTimeZone);                                                // [0x40cf6b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTimespan_Timespan
	// FText AsTimespan_Timespan(FTimespan& InTimespan);                                                                        // [0x40cfa40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsTime_DateTime
	// FText AsTime_DateTime(FDateTime& In);                                                                                    // [0x40cf950] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsPercent_Float
	// FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits); // [0x40cf290] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDateTime_DateTime
	// FText AsDateTime_DateTime(FDateTime& In);                                                                                // [0x40cf0b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsDate_DateTime
	// FText AsDate_DateTime(FDateTime& InDateTime);                                                                            // [0x40cf1a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrencyBase
	// FText AsCurrencyBase(int32_t BaseValue, FString CurrencyCode);                                                           // [0x40ce930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Integer
	// FText AsCurrency_Integer(int32_t Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x40ced90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Float
	// FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int32_t MinimumIntegralDigits, int32_t MaximumIntegralDigits, int32_t MinimumFractionalDigits, int32_t MaximumFractionalDigits, FString CurrencyCode); // [0x40cea70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLayerActorStats
{ 
	class UClass*                                      Type;                                                       // 0x0000   (0x0008)  
	int32_t                                            Total;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Engine.Layer
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class ULayer : public UObject
{ 
public:
	FName                                              LayerName;                                                  // 0x0028   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FLayerActorStats>                           ActorStats;                                                 // 0x0038   (0x0010)  
};

/// Class /Script/Engine.LevelPartitionInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class ULevelPartitionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FReplicatedStaticActorDestructionInfo
{ 
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0000   (0x0030)  MISSED
	class UClass*                                      ObjClass;                                                   // 0x0030   (0x0008)  
};

/// Class /Script/Engine.Level
/// Size: 0x0270 (624 bytes) (0x000028 - 0x000298) align 8 pad: 0x0000
class ULevel : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x70];                                      // 0x0028   (0x0070)  MISSED
	TArray<class AActor*>                              Actors;                                                     // 0x0098   (0x0010)
	unsigned char                                      UnknownData00_4[0x10];                                      // 0x00A8   (0x0010)  MISSED
	class UWorld*                                      OwningWorld;                                                // 0x00B8   (0x0008)  
	class UModel*                                      Model;                                                      // 0x00C0   (0x0008)  
	TArray<class UModelComponent*>                     ModelComponents;                                            // 0x00C8   (0x0010)  
	class ULevelActorContainer*                        ActorCluster;                                               // 0x00D8   (0x0008)  
	int32_t                                            NumTextureStreamingUnbuiltComponents;                       // 0x00E0   (0x0004)  
	int32_t                                            NumTextureStreamingDirtyResources;                          // 0x00E4   (0x0004)  
	class ALevelScriptActor*                           LevelScriptActor;                                           // 0x00E8   (0x0008)  
	class ANavigationObjectBase*                       NavListStart;                                               // 0x00F0   (0x0008)  
	class ANavigationObjectBase*                       NavListEnd;                                                 // 0x00F8   (0x0008)  
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                              // 0x0100   (0x0010)  
	float                                              LightmapTotalSize;                                          // 0x0110   (0x0004)  
	float                                              ShadowmapTotalSize;                                         // 0x0114   (0x0004)  
	TArray<FVector>                                    StaticNavigableGeometry;                                    // 0x0118   (0x0010)  
	TArray<FGuid>                                      StreamingTextureGuids;                                      // 0x0128   (0x0010)  
	unsigned char                                      UnknownData01_6[0x98];                                      // 0x0138   (0x0098)  MISSED
	FGuid                                              LevelBuildDataId;                                           // 0x01D0   (0x0010)  
	class UMapBuildDataRegistry*                       MapBuildData;                                               // 0x01E0   (0x0008)  
	FIntVector                                         LightBuildLevelOffset;                                      // 0x01E8   (0x000C)  
	bool                                               bIsLightingScenario : 1;                                    // 0x01F4:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x01F4:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x01F4:2 (0x0001)  MISSED
	bool                                               bTextureStreamingRotationChanged : 1;                       // 0x01F4:3 (0x0001)  
	bool                                               bStaticComponentsRegisteredInStreamingManager : 1;          // 0x01F4:4 (0x0001)  
	bool                                               bIsVisible : 1;                                             // 0x01F4:5 (0x0001)  
	unsigned char                                      UnknownData04_5[0x63];                                      // 0x01F5   (0x0063)  MISSED
	class AWorldSettings*                              WorldSettings;                                              // 0x0258   (0x0008)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0260   (0x0008)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0268   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0278   (0x0010)  MISSED
	TArray<FReplicatedStaticActorDestructionInfo>      DestroyedReplicatedStaticActors;                            // 0x0288   (0x0010)  
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class ULevelActorContainer : public UObject
{ 
public:
	TArray<class AActor*>                              Actors;                                                     // 0x0028   (0x0010)  
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class ALevelBounds : public AActor
{ 
public:
	class UBoxComponent*                               BoxComponent;                                               // 0x0220   (0x0008)  
	bool                                               bAutoUpdateBounds;                                          // 0x0228   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0229   (0x0007)  MISSED
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x0000 (0 bytes) (0x0000A0 - 0x0000A0) align 8 pad: 0x0000
class ULevelScriptBlueprint : public UBlueprint
{ 
public:
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0128 (296 bytes) (0x000028 - 0x000150) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class ULevelStreaming : public UObject
{ 
public:
	SDK_UNDEFINED(40,156) /* TWeakObjectPtr<UWorld*> */ __um(WorldAsset);                                          // 0x0028   (0x0028)  
	FName                                              PackageNameToLoad;                                          // 0x0050   (0x0008)  
	TArray<FName>                                      LODPackageNames;                                            // 0x0058   (0x0010)  
	unsigned char                                      UnknownData00_6[0x18];                                      // 0x0068   (0x0018)  MISSED
	FTransform                                         LevelTransform;                                             // 0x0080   (0x0030)  
	int32_t                                            LevelLODIndex;                                              // 0x00B0   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x00B4   (0x0004)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00B8   (0x0002)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x00BA:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x00BA:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x00BA:2 (0x0001)  MISSED
	bool                                               bShouldBeVisible : 1;                                       // 0x00BA:3 (0x0001)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x00BA:4 (0x0001)  
	bool                                               Blocked : 1;                                                // 0x00BA:5 (0x0001)  
	bool                                               bIsStatic : 1;                                              // 0x00BA:6 (0x0001)  
	bool                                               bShouldBlockOnLoad : 1;                                     // 0x00BA:7 (0x0001)  
	bool                                               bShouldBlockOnUnload : 1;                                   // 0x00BB:0 (0x0001)  
	bool                                               bDisableDistanceStreaming : 1;                              // 0x00BB:1 (0x0001)  
	bool                                               bDrawOnLevelStatusMap : 1;                                  // 0x00BB:2 (0x0001)  
	FLinearColor                                       LevelColor;                                                 // 0x00BC   (0x0010)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                     // 0x00D0   (0x0010)  
	float                                              MinTimeBetweenVolumeUnloadRequests;                         // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	SDK_UNDEFINED(16,157) /* FMulticastInlineDelegate */ __um(OnLevelLoaded);                                      // 0x00E8   (0x0010)  
	SDK_UNDEFINED(16,158) /* FMulticastInlineDelegate */ __um(OnLevelUnloaded);                                    // 0x00F8   (0x0010)  
	SDK_UNDEFINED(16,159) /* FMulticastInlineDelegate */ __um(OnLevelShown);                                       // 0x0108   (0x0010)  
	SDK_UNDEFINED(16,160) /* FMulticastInlineDelegate */ __um(OnLevelHidden);                                      // 0x0118   (0x0010)  
	class ULevel*                                      LoadedLevel;                                                // 0x0128   (0x0008)  
	class ULevel*                                      PendingUnloadLevel;                                         // 0x0130   (0x0008)  
	unsigned char                                      UnknownData07_7[0x10];                                      // 0x0138   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.LevelStreaming.ShouldBeLoaded
	// bool ShouldBeLoaded();                                                                                                   // [0x3891510] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	// void SetShouldBeVisible(bool bInShouldBeVisible);                                                                        // [0x40d67a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetShouldBeLoaded
	// void SetShouldBeLoaded(bool bInShouldBeLoaded);                                                                          // [0x40622b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetPriority
	// void SetPriority(int32_t NewPriority);                                                                                   // [0x40d6580] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	// void SetLevelLODIndex(int32_t LODIndex);                                                                                 // [0x40d5e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
	// void SetIsRequestingUnloadAndRemoval(bool bInIsRequestingUnloadAndRemoval);                                              // [0x40d5e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	// bool IsStreamingStatePending();                                                                                          // [0x40d4a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	// bool IsLevelVisible();                                                                                                   // [0x40d4a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	// bool IsLevelLoaded();                                                                                                    // [0x40d4a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	// FName GetWorldAssetPackageFName();                                                                                       // [0x40d49c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLoadedLevel
	// class ULevel* GetLoadedLevel();                                                                                          // [0x31fa260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	// class ALevelScriptActor* GetLevelScriptActor();                                                                          // [0x40d4910] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
	// bool GetIsRequestingUnloadAndRemoval();                                                                                  // [0x40d48e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	// class ULevelStreaming* CreateInstance(FString UniqueInstanceName);                                                       // [0x40d4800] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 16 pad: 0x0000
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 16 pad: 0x0000
class ULevelStreamingDynamic : public ULevelStreaming
{ 
public:
	bool                                               bInitiallyLoaded : 1;                                       // 0x0148:0 (0x0001)  
	bool                                               bInitiallyVisible : 1;                                      // 0x0148:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0149   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	// class ULevelStreamingDynamic* LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, TWeakObjectPtr<UWorld*> Level, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride); // [0x40d4d20] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstance
	// class ULevelStreamingDynamic* LoadLevelInstance(class UObject* WorldContextObject, FString LevelName, FVector Location, FRotator Rotation, bool& bOutSuccess, FString OptionalLevelNameOverride); // [0x40d4ac0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0008 (8 bytes) (0x000148 - 0x000150) align 16 pad: 0x0000
class ULevelStreamingPersistent : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0018 (24 bytes) (0x000258 - 0x000270) align 8 pad: 0x0000
class ALevelStreamingVolume : public AVolume
{ 
public:
	TArray<FName>                                      StreamingLevelNames;                                        // 0x0258   (0x0010)  
	bool                                               bEditorPreVisOnly : 1;                                      // 0x0268:0 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0268:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0269   (0x0003)  MISSED
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                             // 0x026C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x026D   (0x0003)  MISSED
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class ULightmappedSurfaceCollection : public UObject
{ 
public:
	class UModel*                                      SourceModel;                                                // 0x0028   (0x0008)  
	TArray<int32_t>                                    Surfaces;                                                   // 0x0030   (0x0010)  
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0010 (16 bytes) (0x0001A0 - 0x0001B0) align 16 pad: 0x0000
class ULightMapTexture2D : public UTexture2D
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x01A0   (0x0010)  MISSED
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0020 (32 bytes) (0x0001A0 - 0x0001C0) align 16 pad: 0x0000
class ULightMapVirtualTexture2D : public UTexture2D
{ 
public:
	TArray<int8_t>                                     TypeToLayer;                                                // 0x01A0   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x01B0   (0x0010)  MISSED
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ALightmassImportanceVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ALightmassPortal : public AActor
{ 
public:
	class ULightmassPortalComponent*                   PortalComponent;                                            // 0x0220   (0x0008)  
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0008 (8 bytes) (0x0001F8 - 0x000200) align 16 pad: 0x0000
class ULightmassPortalComponent : public USceneComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x01F8   (0x0008)  
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class ULightmassPrimitiveSettingsObject : public UObject
{ 
public:
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0028   (0x0018)  
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0040 (64 bytes) (0x000450 - 0x000490) align 16 pad: 0x0000
class ULineBatchComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0450   (0x0040)  MISSED
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x0000 (0 bytes) (0x00000C - 0x00000C) align 4 pad: 0x0000
struct FLightmassPointLightSettings : FLightmassLightSettings
{ 
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x0018 (24 bytes) (0x000328 - 0x000340) align 16 pad: 0x0000
class ULocalLightComponent : public ULightComponent
{ 
public:
	ELightUnits                                        IntensityUnits;                                             // 0x0328   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0329   (0x0003)  MISSED
	float                                              Radius;                                                     // 0x032C   (0x0004)  
	float                                              AttenuationRadius;                                          // 0x0330   (0x0004)  
	FLightmassPointLightSettings                       LightmassSettings;                                          // 0x0334   (0x000C)  


	/// Functions
	// Function /Script/Engine.LocalLightComponent.SetIntensityUnits
	// void SetIntensityUnits(ELightUnits NewIntensityUnits);                                                                   // [0x40d8fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.SetAttenuationRadius
	// void SetAttenuationRadius(float NewRadius);                                                                              // [0x40d8f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.LocalLightComponent.GetUnitsConversionFactor
	// float GetUnitsConversionFactor(ELightUnits SrcUnits, ELightUnits TargetUnits, float CosHalfConeAngle);                   // [0x40d8e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.LODActor
/// Size: 0x0088 (136 bytes) (0x000220 - 0x0002A8) align 8 pad: 0x0000
class ALODActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x0220   (0x0008)  
	SDK_UNDEFINED(80,161) /* TMap<FHLODInstancingKey, UInstancedStaticMeshComponent*> */ __um(InstancedStaticMeshComponents); // 0x0228   (0x0050)  
	class UHLODProxy*                                  Proxy;                                                      // 0x0278   (0x0008)  
	FName                                              Key;                                                        // 0x0280   (0x0008)  
	float                                              LODDrawDistance;                                            // 0x0288   (0x0004)  
	int32_t                                            LODLevel;                                                   // 0x028C   (0x0004)  
	TArray<class AActor*>                              SubActors;                                                  // 0x0290   (0x0010)  
	char                                               CachedNumHLODLevels;                                        // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02A1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ComponentSync
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FComponentSync
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	ESyncOption                                        SyncOption;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Class /Script/Engine.LODSyncComponent
/// Size: 0x0090 (144 bytes) (0x0000B0 - 0x000140) align 8 pad: 0x0000
class ULODSyncComponent : public UActorComponent
{ 
public:
	int32_t                                            NumLODs;                                                    // 0x00B0   (0x0004)  
	int32_t                                            ForcedLOD;                                                  // 0x00B4   (0x0004)  
	TArray<FComponentSync>                             ComponentsToSync;                                           // 0x00B8   (0x0010)  
	SDK_UNDEFINED(80,162) /* TMap<FName, FLODMappingData> */ __um(CustomLODMapping);                               // 0x00C8   (0x0050)  
	int32_t                                            CurrentLOD;                                                 // 0x0118   (0x0004)  
	int32_t                                            CurrentNumLODs;                                             // 0x011C   (0x0004)  
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                            // 0x0120   (0x0010)  
	TArray<class UPrimitiveComponent*>                 SubComponents;                                              // 0x0130   (0x0010)  


	/// Functions
	// Function /Script/Engine.LODSyncComponent.GetLODSyncDebugText
	// FString GetLODSyncDebugText();                                                                                           // [0x40d8da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.LODSyncInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class ULODSyncInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0210 (528 bytes) (0x000028 - 0x000238) align 8 pad: 0x0000
class UMapBuildDataRegistry : public UObject
{ 
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x20F];                                     // 0x0029   (0x020F)  MISSED
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMaterialInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              InputName;                                                  // 0x0004   (0x0008)  
	FName                                              ExpressionName;                                             // 0x000C   (0x0008)  
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x0000 (0 bytes) (0x000014 - 0x000014) align 4 pad: 0x0000
struct FScalarMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x0000 (0 bytes) (0x000014 - 0x000014) align 4 pad: 0x0000
struct FVectorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x0000 (0 bytes) (0x000014 - 0x000014) align 4 pad: 0x0000
struct FColorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 2 pad: 0x0000
struct FMaterialShadingModelField
{ 
	uint16_t                                           ShadingModelField;                                          // 0x0000   (0x0002)  
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0004 (4 bytes) (0x000014 - 0x000018) align 4 pad: 0x0000
struct FMaterialAttributesInput : FExpressionInput
{ 
	int32_t                                            PropertyConnectedBitmask;                                   // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x0000 (0 bytes) (0x000014 - 0x000014) align 4 pad: 0x0000
struct FShadingModelMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialFunctionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialFunctionInterface*                  Function;                                                   // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialParameterCollectionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialParameterCollection*                ParameterCollection;                                        // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x01D8 (472 bytes) (0x000000 - 0x0001D8) align 8 pad: 0x0000
struct FMaterialCachedExpressionData
{ 
	FMaterialCachedParameters                          Parameters;                                                 // 0x0000   (0x0150)  
	TArray<class UObject*>                             ReferencedTextures;                                         // 0x0150   (0x0010)  
	TArray<FMaterialFunctionInfo>                      FunctionInfos;                                              // 0x0160   (0x0010)  
	TArray<FMaterialParameterCollectionInfo>           ParameterCollectionInfos;                                   // 0x0170   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayers;                                              // 0x0180   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayerBlends;                                         // 0x0190   (0x0010)  
	TArray<class ULandscapeGrassType*>                 GrassTypes;                                                 // 0x01A0   (0x0010)  
	TArray<FName>                                      DynamicParameterNames;                                      // 0x01B0   (0x0010)  
	TArray<bool>                                       QualityLevelsUsed;                                          // 0x01C0   (0x0010)  
	bool                                               bHasRuntimeVirtualTextureOutput : 1;                        // 0x01D0:0 (0x0001)  
	bool                                               bHasSceneColor : 1;                                         // 0x01D0:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x01D1   (0x0007)  MISSED
};

/// Class /Script/Engine.Material
/// Size: 0x03B8 (952 bytes) (0x000088 - 0x000440) align 8 pad: 0x0000
class UMaterial : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0090   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x0098   (0x0040)  
	FScalarMaterialInput                               Metallic;                                                   // 0x00D8   (0x0014)  
	FScalarMaterialInput                               Specular;                                                   // 0x00EC   (0x0014)  
	FScalarMaterialInput                               Anisotropy;                                                 // 0x0100   (0x0014)  
	FVectorMaterialInput                               Normal;                                                     // 0x0114   (0x0014)  
	FVectorMaterialInput                               Tangent;                                                    // 0x0128   (0x0014)  
	FColorMaterialInput                                EmissiveColor;                                              // 0x013C   (0x0014)  
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                             // 0x0150   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0151   (0x0001)  
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                             // 0x0152   (0x0001)  
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                      // 0x0153   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0154   (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0155:0 (0x0001)  
	FMaterialShadingModelField                         ShadingModels;                                              // 0x0156   (0x0002)  
	float                                              OpacityMaskClipValue;                                       // 0x0158   (0x0004)  
	FVectorMaterialInput                               WorldPositionOffset;                                        // 0x015C   (0x0014)  
	FScalarMaterialInput                               Refraction;                                                 // 0x0170   (0x0014)  
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0184   (0x0018)  
	FScalarMaterialInput                               PixelDepthOffset;                                           // 0x019C   (0x0014)  
	FShadingModelMaterialInput                         ShadingModelFromMaterialExpression;                         // 0x01B0   (0x0014)  
	bool                                               bEnableSeparateTranslucency : 1;                            // 0x01C4:0 (0x0001)  
	bool                                               bEnableResponsiveAA : 1;                                    // 0x01C4:1 (0x0001)  
	bool                                               bScreenSpaceReflections : 1;                                // 0x01C4:2 (0x0001)  
	bool                                               bContactShadows : 1;                                        // 0x01C4:3 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x01C4:4 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x01C4:5 (0x0001)  
	bool                                               DitherOpacityMask : 1;                                      // 0x01C4:6 (0x0001)  
	bool                                               bAllowNegativeEmissiveColor : 1;                            // 0x01C4:7 (0x0001)  
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                   // 0x01C5   (0x0001)  
	bool                                               bEnableMobileSeparateTranslucency : 1;                      // 0x01C6:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x01C7   (0x0001)  MISSED
	int32_t                                            NumCustomizedUVs;                                           // 0x01C8   (0x0004)  
	float                                              TranslucencyDirectionalLightingIntensity;                   // 0x01CC   (0x0004)  
	float                                              TranslucentShadowDensityScale;                              // 0x01D0   (0x0004)  
	float                                              TranslucentSelfShadowDensityScale;                          // 0x01D4   (0x0004)  
	float                                              TranslucentSelfShadowSecondDensityScale;                    // 0x01D8   (0x0004)  
	float                                              TranslucentSelfShadowSecondOpacity;                         // 0x01DC   (0x0004)  
	float                                              TranslucentBackscatteringExponent;                          // 0x01E0   (0x0004)  
	FLinearColor                                       TranslucentMultipleScatteringExtinction;                    // 0x01E4   (0x0010)  
	float                                              TranslucentShadowStartOffset;                               // 0x01F4   (0x0004)  
	bool                                               bDisableDepthTest : 1;                                      // 0x01F8:0 (0x0001)  
	bool                                               bWriteOnlyAlpha : 1;                                        // 0x01F8:1 (0x0001)  
	bool                                               bGenerateSphericalParticleNormals : 1;                      // 0x01F8:2 (0x0001)  
	bool                                               bTangentSpaceNormal : 1;                                    // 0x01F8:3 (0x0001)  
	bool                                               bUseEmissiveForDynamicAreaLighting : 1;                     // 0x01F8:4 (0x0001)  
	bool                                               bBlockGI : 1;                                               // 0x01F8:5 (0x0001)  
	bool                                               bUsedAsSpecialEngineMaterial : 1;                           // 0x01F8:6 (0x0001)  
	bool                                               bUsedWithSkeletalMesh : 1;                                  // 0x01F8:7 (0x0001)  
	bool                                               bUsedWithEditorCompositing : 1;                             // 0x01F9:0 (0x0001)  
	bool                                               bUsedWithParticleSprites : 1;                               // 0x01F9:1 (0x0001)  
	bool                                               bUsedWithBeamTrails : 1;                                    // 0x01F9:2 (0x0001)  
	bool                                               bUsedWithMeshParticles : 1;                                 // 0x01F9:3 (0x0001)  
	bool                                               bUsedWithNiagaraSprites : 1;                                // 0x01F9:4 (0x0001)  
	bool                                               bUsedWithNiagaraRibbons : 1;                                // 0x01F9:5 (0x0001)  
	bool                                               bUsedWithNiagaraMeshParticles : 1;                          // 0x01F9:6 (0x0001)  
	bool                                               bUsedWithGeometryCache : 1;                                 // 0x01F9:7 (0x0001)  
	bool                                               bUsedWithStaticLighting : 1;                                // 0x01FA:0 (0x0001)  
	bool                                               bUsedWithMorphTargets : 1;                                  // 0x01FA:1 (0x0001)  
	bool                                               bUsedWithSplineMeshes : 1;                                  // 0x01FA:2 (0x0001)  
	bool                                               bUsedWithInstancedStaticMeshes : 1;                         // 0x01FA:3 (0x0001)  
	bool                                               bUsedWithGeometryCollections : 1;                           // 0x01FA:4 (0x0001)  
	bool                                               bUsesDistortion : 1;                                        // 0x01FA:5 (0x0001)  
	bool                                               bUsedWithClothing : 1;                                      // 0x01FA:6 (0x0001)  
	unsigned char                                      UnknownData01_3[0x1];                                       // 0x01FB   (0x0001)  MISSED
	bool                                               bUsedWithWater : 1;                                         // 0x01FC:0 (0x0001)  
	bool                                               bUsedWithHairStrands : 1;                                   // 0x01FC:1 (0x0001)  
	bool                                               bUsedWithLidarPointCloud : 1;                               // 0x01FC:2 (0x0001)  
	bool                                               bUsedWithVirtualHeightfieldMesh : 1;                        // 0x01FC:3 (0x0001)  
	unsigned char                                      UnknownData02_3[0x3];                                       // 0x01FD   (0x0003)  MISSED
	bool                                               bUsedWithUI : 1;                                            // 0x0200:0 (0x0001)  
	bool                                               bAutomaticallySetUsageInEditor : 1;                         // 0x0200:1 (0x0001)  
	bool                                               bFullyRough : 1;                                            // 0x0200:2 (0x0001)  
	bool                                               bUseFullPrecision : 1;                                      // 0x0200:3 (0x0001)  
	bool                                               bUseLightmapDirectionality : 1;                             // 0x0200:4 (0x0001)  
	bool                                               bUseAlphaToCoverage : 1;                                    // 0x0200:5 (0x0001)  
	unsigned char                                      UnknownData03_3[0x3];                                       // 0x0201   (0x0003)  MISSED
	bool                                               bForwardRenderUsePreintegratedGFForSimpleIBL : 1;           // 0x0204:0 (0x0001)  
	unsigned char                                      UnknownData04_3[0x3];                                       // 0x0205   (0x0003)  MISSED
	bool                                               bUseHQForwardReflections : 1;                               // 0x0208:0 (0x0001)  
	bool                                               bForwardBlendsSkyLightCubemaps : 1;                         // 0x0208:1 (0x0001)  
	bool                                               bUsePlanarForwardReflections : 1;                           // 0x0208:2 (0x0001)  
	bool                                               bNormalCurvatureToRoughness : 1;                            // 0x0208:3 (0x0001)  
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                      // 0x0209   (0x0001)  
	bool                                               bEnableCrackFreeDisplacement : 1;                           // 0x020A:0 (0x0001)  
	bool                                               bEnableAdaptiveTessellation : 1;                            // 0x020A:1 (0x0001)  
	bool                                               AllowTranslucentCustomDepthWrites : 1;                      // 0x020A:2 (0x0001)  
	bool                                               Wireframe : 1;                                              // 0x020A:3 (0x0001)  
	bool                                               WriteDepthToTranslucentMaterial : 1;                        // 0x020A:4 (0x0001)  
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                                // 0x020B   (0x0001)  
	bool                                               bCanMaskedBeAssumedOpaque : 1;                              // 0x020C:0 (0x0001)  
	bool                                               bIsMasked : 1;                                              // 0x020C:1 (0x0001)  
	bool                                               bIsPreviewMaterial : 1;                                     // 0x020C:2 (0x0001)  
	bool                                               bIsFunctionPreviewMaterial : 1;                             // 0x020C:3 (0x0001)  
	bool                                               bUseMaterialAttributes : 1;                                 // 0x020C:4 (0x0001)  
	bool                                               bCastRayTracedShadows : 1;                                  // 0x020C:5 (0x0001)  
	bool                                               bUseTranslucencyVertexFog : 1;                              // 0x020C:6 (0x0001)  
	bool                                               bApplyCloudFogging : 1;                                     // 0x020C:7 (0x0001)  
	bool                                               bIsSky : 1;                                                 // 0x020D:0 (0x0001)  
	bool                                               bComputeFogPerPixel : 1;                                    // 0x020D:1 (0x0001)  
	bool                                               bOutputTranslucentVelocity : 1;                             // 0x020D:2 (0x0001)  
	bool                                               bAllowDevelopmentShaderCompile : 1;                         // 0x020D:3 (0x0001)  
	bool                                               bIsMaterialEditorStatsMaterial : 1;                         // 0x020D:4 (0x0001)  
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                          // 0x020E   (0x0001)  
	bool                                               BlendableOutputAlpha : 1;                                   // 0x020F:0 (0x0001)  
	bool                                               bEnableStencilTest : 1;                                     // 0x020F:1 (0x0001)  
	TEnumAsByte<EMaterialStencilCompare>               StencilCompare;                                             // 0x0210   (0x0001)  
	char                                               StencilRefValue;                                            // 0x0211   (0x0001)  
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                             // 0x0212   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x0213   (0x0001)  MISSED
	int32_t                                            BlendablePriority;                                          // 0x0214   (0x0004)  
	bool                                               bIsBlendable : 1;                                           // 0x0218:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0219   (0x0003)  MISSED
	uint32_t                                           UsageFlagWarnings;                                          // 0x021C   (0x0004)  
	float                                              RefractionDepthBias;                                        // 0x0220   (0x0004)  
	FGuid                                              StateId;                                                    // 0x0224   (0x0010)  
	float                                              MaxDisplacement;                                            // 0x0234   (0x0004)  
	unsigned char                                      UnknownData07_6[0x30];                                      // 0x0238   (0x0030)  MISSED
	FMaterialCachedExpressionData                      CachedExpressionData;                                       // 0x0268   (0x01D8)  
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMaterialSpriteElement
{ 
	class UMaterialInterface*                          Material;                                                   // 0x0000   (0x0008)  
	class UCurveFloat*                                 DistanceToOpacityCurve;                                     // 0x0008   (0x0008)  
	bool                                               bSizeIsInScreenSpace : 1;                                   // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BaseSizeX;                                                  // 0x0014   (0x0004)  
	float                                              BaseSizeY;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UCurveFloat*                                 DistanceToSizeCurve;                                        // 0x0020   (0x0008)  
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0010 (16 bytes) (0x000450 - 0x000460) align 16 pad: 0x0000
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
public:
	TArray<FMaterialSpriteElement>                     Elements;                                                   // 0x0450   (0x0010)  


	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	// void SetElements(TArray<FMaterialSpriteElement>& NewElements);                                                           // [0x40dce80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	// void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve); // [0x40dcc90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionAbs : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionAdd : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	float                                              Threshold;                                                  // 0x0080   (0x0004)  
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                    // 0x0084   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   X;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   X;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Temp;                                                       // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           A;                                                          // 0x0040   (0x0018)  
	FMaterialAttributesInput                           B;                                                          // 0x0058   (0x0018)  
	FExpressionInput                                   Alpha;                                                      // 0x0070   (0x0014)  
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                    // 0x0084   (0x0001)  
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                   // 0x0085   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0086   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0018)  
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x0014)  
	FExpressionInput                                   Height;                                                     // 0x0054   (0x0014)  
	FExpressionInput                                   HeightRatioInput;                                           // 0x0068   (0x0014)  
	float                                              HeightRatio;                                                // 0x007C   (0x0004)  
	float                                              ReferencePlane;                                             // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionCeil : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionParameter : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0018 (24 bytes) (0x000058 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
public:
	FLinearColor                                       DefaultValue;                                               // 0x0058   (0x0010)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x0068   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x0069   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0008 (8 bytes) (0x000070 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
public:
	TEnumAsByte<EChannelMaskParameterColor>            MaskChannel;                                                // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionClamp : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	FExpressionInput                                   Min;                                                        // 0x0054   (0x0014)  
	FExpressionInput                                   Max;                                                        // 0x0068   (0x0014)  
	TEnumAsByte<EClampMode>                            ClampMode;                                                  // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              MinDefault;                                                 // 0x0080   (0x0004)  
	float                                              MaxDefault;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCloudSampleAttribute
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
public:
	class UMaterialParameterCollection*                Collection;                                                 // 0x0040   (0x0008)  
	FName                                              ParameterName;                                              // 0x0048   (0x0008)  
	FGuid                                              ParameterId;                                                // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionComment : public UMaterialExpression
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	FString                                            Text;                                                       // 0x0048   (0x0010)  
	FLinearColor                                       CommentColor;                                               // 0x0058   (0x0010)  
	int32_t                                            FontSize;                                                   // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	bool                                               R : 1;                                                      // 0x0054:0 (0x0001)  
	bool                                               G : 1;                                                      // 0x0054:1 (0x0001)  
	bool                                               B : 1;                                                      // 0x0054:2 (0x0001)  
	bool                                               A : 1;                                                      // 0x0054:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionConstant : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	float                                              G;                                                          // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	float                                              Bias;                                                       // 0x0054   (0x0004)  
	float                                              Scale;                                                      // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionCosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0008 (8 bytes) (0x000058 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
public:
	float                                              DefaultValue;                                               // 0x0058   (0x0004)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x005C   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x005D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x005E   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0028 (40 bytes) (0x000060 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
public:
	class UCurveLinearColor*                           Curve;                                                      // 0x0060   (0x0008)  
	class UCurveLinearColorAtlas*                      Atlas;                                                      // 0x0068   (0x0008)  
	FExpressionInput                                   InputTime;                                                  // 0x0070   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FCustomInput
{ 
	FName                                              InputName;                                                  // 0x0000   (0x0008)  
	FExpressionInput                                   Input;                                                      // 0x0008   (0x0014)  
};

/// Struct /Script/Engine.CustomOutput
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FCustomOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x0008)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FCustomDefine
{ 
	FString                                            DefineName;                                                 // 0x0000   (0x0010)  
	FString                                            DefineValue;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x0068 (104 bytes) (0x000040 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionCustom : public UMaterialExpression
{ 
public:
	FString                                            Code;                                                       // 0x0040   (0x0010)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0058   (0x0010)  
	TArray<FCustomInput>                               Inputs;                                                     // 0x0068   (0x0010)  
	TArray<FCustomOutput>                              AdditionalOutputs;                                          // 0x0078   (0x0010)  
	TArray<FCustomDefine>                              AdditionalDefines;                                          // 0x0088   (0x0010)  
	TArray<FString>                                    IncludeFilePaths;                                           // 0x0098   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDDX : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDDY : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureSize;                                                // 0x0040   (0x0014)  
	float                                              ConstWidth;                                                 // 0x0054   (0x0004)  
	float                                              ConstHeight;                                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InOpacity;                                                  // 0x0040   (0x0014)  
	FExpressionInput                                   FadeDistance;                                               // 0x0054   (0x0014)  
	float                                              OpacityDefault;                                             // 0x0068   (0x0004)  
	float                                              FadeDistanceDefault;                                        // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                              // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Depth;                                                      // 0x0044   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InXY;                                                       // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	FExpressionInput                                   Fraction;                                                   // 0x0054   (0x0014)  
	FLinearColor                                       LuminanceFactors;                                           // 0x0068   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDistance : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldsRenderingSwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDistanceFieldsRenderingSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   No;                                                         // 0x0040   (0x0014)  
	FExpressionInput                                   Yes;                                                        // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionDivide : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
public:
	TArray<FString>                                    ParamNames;                                                 // 0x0040   (0x0010)  
	FLinearColor                                       DefaultValue;                                               // 0x0050   (0x0010)  
	uint32_t                                           ParameterIndex;                                             // 0x0060   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionFloor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionFmod : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
public:
	class UFont*                                       Font;                                                       // 0x0040   (0x0008)  
	int32_t                                            FontTexturePage;                                            // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0020 (32 bytes) (0x000050 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0058   (0x0010)  
	FName                                              Group;                                                      // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionFrac : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   ExponentIn;                                                 // 0x0040   (0x0014)  
	float                                              Exponent;                                                   // 0x0054   (0x0004)  
	FExpressionInput                                   BaseReflectFractionIn;                                      // 0x0058   (0x0014)  
	float                                              BaseReflectFraction;                                        // 0x006C   (0x0004)  
	FExpressionInput                                   Normal;                                                     // 0x0070   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x0080 (128 bytes) (0x000040 - 0x0000C0) align 16 pad: 0x0000
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Preview;                                                    // 0x0040   (0x0014)  
	FName                                              InputName;                                                  // 0x0054   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0060   (0x0010)  
	FGuid                                              ID;                                                         // 0x0070   (0x0010)  
	TEnumAsByte<EFunctionInputType>                    InputType;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0081   (0x000F)  MISSED
	FVector4                                           PreviewValue;                                               // 0x0090   (0x0010)  
	bool                                               bUsePreviewValueAsDefault : 1;                              // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            SortPriority;                                               // 0x00A4   (0x0004)  
	bool                                               bCompilingFunctionPreview : 1;                              // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x17];                                      // 0x00A9   (0x0017)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
public:
	FName                                              OutputName;                                                 // 0x0040   (0x0008)  
	FString                                            Description;                                                // 0x0048   (0x0010)  
	int32_t                                            SortPriority;                                               // 0x0058   (0x0004)  
	FExpressionInput                                   A;                                                          // 0x005C   (0x0014)  
	bool                                               bLastPreviewed : 1;                                         // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	FGuid                                              ID;                                                         // 0x0074   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0018)  
	TArray<FGuid>                                      AttributeGetTypes;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   StaticIndirect;                                             // 0x0054   (0x0014)  
	FExpressionInput                                   DynamicIndirect;                                            // 0x0068   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
public:
	bool                                               bUseTangentSpace : 1;                                       // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairColor
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionHairColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Melanin;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   Redness;                                                    // 0x0054   (0x0014)  
	FExpressionInput                                   DyeColor;                                                   // 0x0068   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x0070 (112 bytes) (0x000040 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionIf : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	FExpressionInput                                   AGreaterThanB;                                              // 0x0068   (0x0014)  
	FExpressionInput                                   AEqualsB;                                                   // 0x007C   (0x0014)  
	FExpressionInput                                   ALessThanB;                                                 // 0x0090   (0x0014)  
	float                                              EqualsThreshold;                                            // 0x00A4   (0x0004)  
	float                                              ConstB;                                                     // 0x00A8   (0x0004)  
	float                                              ConstAEqualsB;                                              // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionInverseLinearInterpolate
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	FExpressionInput                                   Value;                                                      // 0x0068   (0x0014)  
	float                                              ConstA;                                                     // 0x007C   (0x0004)  
	float                                              ConstB;                                                     // 0x0080   (0x0004)  
	float                                              ConstValue;                                                 // 0x0084   (0x0004)  
	bool                                               bClampResult;                                               // 0x0088   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x0014)  
	FExpressionInput                                   Lightmass;                                                  // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	FExpressionInput                                   Alpha;                                                      // 0x0068   (0x0014)  
	float                                              ConstA;                                                     // 0x007C   (0x0004)  
	float                                              ConstB;                                                     // 0x0080   (0x0004)  
	float                                              ConstAlpha;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0230 (560 bytes) (0x000040 - 0x000270) align 8 pad: 0x0000
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x0014)  
	FExpressionInput                                   Metallic;                                                   // 0x0054   (0x0014)  
	FExpressionInput                                   Specular;                                                   // 0x0068   (0x0014)  
	FExpressionInput                                   Roughness;                                                  // 0x007C   (0x0014)  
	FExpressionInput                                   Anisotropy;                                                 // 0x0090   (0x0014)  
	FExpressionInput                                   EmissiveColor;                                              // 0x00A4   (0x0014)  
	FExpressionInput                                   Opacity;                                                    // 0x00B8   (0x0014)  
	FExpressionInput                                   OpacityMask;                                                // 0x00CC   (0x0014)  
	FExpressionInput                                   Normal;                                                     // 0x00E0   (0x0014)  
	FExpressionInput                                   Tangent;                                                    // 0x00F4   (0x0014)  
	FExpressionInput                                   WorldPositionOffset;                                        // 0x0108   (0x0014)  
	FExpressionInput                                   WorldDisplacement;                                          // 0x011C   (0x0014)  
	FExpressionInput                                   TessellationMultiplier;                                     // 0x0130   (0x0014)  
	FExpressionInput                                   SubsurfaceColor;                                            // 0x0144   (0x0014)  
	FExpressionInput                                   ClearCoat;                                                  // 0x0158   (0x0014)  
	FExpressionInput                                   ClearCoatRoughness;                                         // 0x016C   (0x0014)  
	FExpressionInput                                   AmbientOcclusion;                                           // 0x0180   (0x0014)  
	FExpressionInput                                   Refraction;                                                 // 0x0194   (0x0014)  
	FExpressionInput                                   CustomizedUVs[8];                                           // 0x01A8   (0x00A0)  
	FExpressionInput                                   PixelDepthOffset;                                           // 0x0248   (0x0014)  
	FExpressionInput                                   ShadingModel;                                               // 0x025C   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00A8 (168 bytes) (0x000040 - 0x0000E8) align 8 pad: 0x0000
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
	FMaterialAttributesInput                           Input;                                                      // 0x0058   (0x0018)  
	FMaterialLayersFunctions                           DefaultLayers;                                              // 0x0070   (0x0040)  
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                           // 0x00B0   (0x0010)  
	int32_t                                            NumActiveLayerCallers;                                      // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                           // 0x00C8   (0x0010)  
	int32_t                                            NumActiveBlendCallers;                                      // 0x00D8   (0x0004)  
	bool                                               bIsLayerGraphBuilt;                                         // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x00DD   (0x000B)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                           // 0x0040   (0x0008)  
	FMaterialParameterInfo                             FunctionParameterInfo;                                      // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0000 (0 bytes) (0x000088 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x0014)  
	FExpressionInput                                   MaterialProxy;                                              // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionMax : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionMin : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRerouteBase
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionRerouteBase : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteBase
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteBase : public UMaterialExpressionRerouteBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteDeclaration
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteDeclaration : public UMaterialExpressionNamedRerouteBase
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	FName                                              Name;                                                       // 0x0054   (0x0008)  
	FGuid                                              VariableGuid;                                               // 0x005C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionNamedRerouteUsage
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionNamedRerouteUsage : public UMaterialExpressionNamedRerouteBase
{ 
public:
	class UMaterialExpressionNamedRerouteDeclaration*  Declaration;                                                // 0x0040   (0x0008)  
	FGuid                                              DeclarationGuid;                                            // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x0014)  
	FExpressionInput                                   FilterWidth;                                                // 0x0054   (0x0014)  
	float                                              Scale;                                                      // 0x0068   (0x0004)  
	int32_t                                            Quality;                                                    // 0x006C   (0x0004)  
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                              // 0x0070   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	bool                                               bTurbulence : 1;                                            // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            Levels;                                                     // 0x0078   (0x0004)  
	float                                              OutputMin;                                                  // 0x007C   (0x0004)  
	float                                              OutputMax;                                                  // 0x0080   (0x0004)  
	float                                              LevelScale;                                                 // 0x0084   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           RepeatSize;                                                 // 0x008C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
public:
	FExpressionInput                                   VectorInput;                                                // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionPanner : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x0014)  
	FExpressionInput                                   Time;                                                       // 0x0054   (0x0014)  
	FExpressionInput                                   Speed;                                                      // 0x0068   (0x0014)  
	float                                              SpeedX;                                                     // 0x007C   (0x0004)  
	float                                              SpeedY;                                                     // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
	bool                                               bFractionalPart;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
public:
	FExpressionInput                                   DefaultValue;                                               // 0x0040   (0x0014)  
	float                                              ConstDefaultValue;                                          // 0x0054   (0x0004)  
	uint32_t                                           DataIndex;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionPower : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Base;                                                       // 0x0040   (0x0014)  
	FExpressionInput                                   Exponent;                                                   // 0x0054   (0x0014)  
	float                                              ConstExponent;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CurrentFrame;                                               // 0x0040   (0x0014)  
	FExpressionInput                                   PreviousFrame;                                              // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x0000A8) align 8 pad: 0x0000
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   Inputs[4];                                                  // 0x0054   (0x0050)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Normal;                                                     // 0x0040   (0x0014)  
	FExpressionInput                                   RayTraced;                                                  // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionReflectionCapturePassSwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   reflection;                                                 // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CustomWorldNormal;                                          // 0x0040   (0x0014)  
	bool                                               bNormalizeCustomWorldNormal : 1;                            // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionReroute : public UMaterialExpressionRerouteBase
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
public:
	FExpressionInput                                   NormalizedRotationAxis;                                     // 0x0040   (0x0014)  
	FExpressionInput                                   RotationAngle;                                              // 0x0054   (0x0014)  
	FExpressionInput                                   PivotPoint;                                                 // 0x0068   (0x0014)  
	FExpressionInput                                   position;                                                   // 0x007C   (0x0014)  
	float                                              Period;                                                     // 0x0090   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionRotator : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x0014)  
	FExpressionInput                                   Time;                                                       // 0x0054   (0x0014)  
	float                                              CenterX;                                                    // 0x0068   (0x0004)  
	float                                              CenterY;                                                    // 0x006C   (0x0004)  
	float                                              Speed;                                                      // 0x0070   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0074   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionRound : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x0090 (144 bytes) (0x000040 - 0x0000D0) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x0014)  
	FExpressionInput                                   Specular;                                                   // 0x0054   (0x0014)  
	FExpressionInput                                   Roughness;                                                  // 0x0068   (0x0014)  
	FExpressionInput                                   Normal;                                                     // 0x007C   (0x0014)  
	FExpressionInput                                   WorldHeight;                                                // 0x0090   (0x0014)  
	FExpressionInput                                   Opacity;                                                    // 0x00A4   (0x0014)  
	FExpressionInput                                   Mask;                                                       // 0x00B8   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   VirtualTextureOutput;                                       // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x0014)  
	FExpressionInput                                   WorldPosition;                                              // 0x0054   (0x0014)  
	FExpressionInput                                   MipValue;                                                   // 0x0068   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0080   (0x0008)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0088   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0089   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x008A   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureMipValueMode>    MipValueMode;                                               // 0x008B   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                      // 0x008C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x0020 (32 bytes) (0x000090 - 0x0000B0) align 8 pad: 0x0000
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0090   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0098   (0x0010)  
	FName                                              Group;                                                      // 0x00A8   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsVectorField
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSamplePhysicsVectorField : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x0014)  
	TEnumAsByte<EFieldVectorType>                      FieldTarget;                                                // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsScalarField
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSamplePhysicsScalarField : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x0014)  
	TEnumAsByte<EFieldScalarType>                      FieldTarget;                                                // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSamplePhysicsIntegerField
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSamplePhysicsIntegerField : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x0014)  
	TEnumAsByte<EFieldIntegerType>                     FieldTarget;                                                // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x0014)  
	FExpressionInput                                   OffsetFraction;                                             // 0x0058   (0x0014)  
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x0014)  
	FExpressionInput                                   Coordinates;                                                // 0x0058   (0x0014)  
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepthWithoutWater
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x0014)  
	FVector2D                                          ConstInput;                                                 // 0x0058   (0x0008)  
	float                                              FallbackDepth;                                              // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x0014)  
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                             // 0x0054   (0x0001)  
	bool                                               bFiltered;                                                  // 0x0055   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
public:
	TArray<FExpressionInput>                           Inputs;                                                     // 0x0040   (0x0010)  
	TArray<FGuid>                                      AttributeSetTypes;                                          // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   PixelShader;                                                // 0x0040   (0x0014)  
	FExpressionInput                                   VertexShader;                                               // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   Inputs[3];                                                  // 0x0054   (0x003C)  
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x0014)  
	FExpressionInput                                   Shadow;                                                     // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSign : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   ScatteringCoefficients;                                     // 0x0040   (0x0014)  
	FExpressionInput                                   AbsorptionCoefficients;                                     // 0x0054   (0x0014)  
	FExpressionInput                                   PhaseG;                                                     // 0x0068   (0x0014)  
	FExpressionInput                                   ColorScaleBehindWater;                                      // 0x007C   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionSkinningVertexOffsets
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	FExpressionInput                                   WorldPosition;                                              // 0x0044   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSmoothStep
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionSmoothStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Min;                                                        // 0x0040   (0x0014)  
	FExpressionInput                                   Max;                                                        // 0x0054   (0x0014)  
	FExpressionInput                                   Value;                                                      // 0x0068   (0x0014)  
	float                                              ConstMin;                                                   // 0x007C   (0x0004)  
	float                                              ConstMax;                                                   // 0x0080   (0x0004)  
	float                                              ConstValue;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Cell;                                                       // 0x0040   (0x0014)  
	FExpressionInput                                   Index;                                                      // 0x0054   (0x0014)  
	FExpressionInput                                   Seed;                                                       // 0x0068   (0x0014)  
	uint32_t                                           ConstIndex;                                                 // 0x007C   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x0080   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x0060 (96 bytes) (0x000040 - 0x0000A0) align 8 pad: 0x0000
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
public:
	FExpressionInput                                   GeometryInput;                                              // 0x0040   (0x0014)  
	FExpressionInput                                   WindInput;                                                  // 0x0054   (0x0014)  
	FExpressionInput                                   LODInput;                                                   // 0x0068   (0x0014)  
	FExpressionInput                                   ExtraBendWS;                                                // 0x007C   (0x0014)  
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                               // 0x0090   (0x0001)  
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                   // 0x0091   (0x0001)  
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                    // 0x0092   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0093   (0x0001)  MISSED
	float                                              BillboardThreshold;                                         // 0x0094   (0x0004)  
	bool                                               bAccurateWindVelocities;                                    // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000098) align 8 pad: 0x0000
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	FExpressionInput                                   Radius;                                                     // 0x0068   (0x0014)  
	FExpressionInput                                   Hardness;                                                   // 0x007C   (0x0014)  
	float                                              AttenuationRadius;                                          // 0x0090   (0x0004)  
	float                                              HardnessPercent;                                            // 0x0094   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Density;                                                    // 0x0040   (0x0014)  
	float                                              ConstantDensity;                                            // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
public:
	bool                                               Value : 1;                                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0008 (8 bytes) (0x000058 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0008 (8 bytes) (0x000058 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultR : 1;                                               // 0x0058:0 (0x0001)  
	bool                                               DefaultG : 1;                                               // 0x0058:1 (0x0001)  
	bool                                               DefaultB : 1;                                               // 0x0058:2 (0x0001)  
	bool                                               DefaultA : 1;                                               // 0x0058:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   A;                                                          // 0x0044   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0058   (0x0014)  
	FExpressionInput                                   Value;                                                      // 0x006C   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionStep
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   X;                                                          // 0x0054   (0x0014)  
	float                                              ConstY;                                                     // 0x0068   (0x0004)  
	float                                              ConstX;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0030 (48 bytes) (0x000040 - 0x000070) align 8 pad: 0x0000
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x0014)  
	FExpressionInput                                   B;                                                          // 0x0054   (0x0014)  
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Index;                                                      // 0x0040   (0x0014)  
	FExpressionInput                                   Seed;                                                       // 0x0054   (0x0014)  
	uint32_t                                           ConstIndex;                                                 // 0x0068   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x006C   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
public:
	int32_t                                            CoordinateIndex;                                            // 0x0040   (0x0004)  
	float                                              UTiling;                                                    // 0x0044   (0x0004)  
	float                                              VTiling;                                                    // 0x0048   (0x0004)  
	bool                                               UnMirrorU : 1;                                              // 0x004C:0 (0x0001)  
	bool                                               UnMirrorV : 1;                                              // 0x004C:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureObject;                                              // 0x0040   (0x0014)  
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                   // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   TransmittanceColor;                                         // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionTime : public UMaterialExpression
{ 
public:
	bool                                               bIgnorePause : 1;                                           // 0x0040:0 (0x0001)  
	bool                                               bOverride_Period : 1;                                       // 0x0040:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Period;                                                     // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTransform : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                        // 0x0054   (0x0001)  
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                              // 0x0055   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                        // 0x0054   (0x0001)  
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                              // 0x0055   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x0014)  
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            Quality;                                                    // 0x0058   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	uint32_t                                           TileSize;                                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x0014)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0054   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   No;                                                         // 0x0040   (0x0014)  
	FExpressionInput                                   Yes;                                                        // 0x0054   (0x0014)  
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
/// Size: 0x00B0 (176 bytes) (0x000040 - 0x0000F0) align 8 pad: 0x0000
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   PhaseG;                                                     // 0x0040   (0x0014)  
	FExpressionInput                                   PhaseG2;                                                    // 0x0054   (0x0014)  
	FExpressionInput                                   PhaseBlend;                                                 // 0x0068   (0x0014)  
	FExpressionInput                                   MultiScatteringContribution;                                // 0x007C   (0x0014)  
	FExpressionInput                                   MultiScatteringOcclusion;                                   // 0x0090   (0x0014)  
	FExpressionInput                                   MultiScatteringEccentricity;                                // 0x00A4   (0x0014)  
	FExpressionInput                                   ConservativeDensity;                                        // 0x00B8   (0x0014)  
	float                                              ConstPhaseG;                                                // 0x00CC   (0x0004)  
	float                                              ConstPhaseG2;                                               // 0x00D0   (0x0004)  
	float                                              ConstPhaseBlend;                                            // 0x00D4   (0x0004)  
	bool                                               PerSamplePhaseEvaluation;                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00D9   (0x0003)  MISSED
	uint32_t                                           MultiScatteringApproximationOctaveCount;                    // 0x00DC   (0x0004)  
	float                                              ConstMultiScatteringContribution;                           // 0x00E0   (0x0004)  
	float                                              ConstMultiScatteringOcclusion;                              // 0x00E4   (0x0004)  
	float                                              ConstMultiScatteringEccentricity;                           // 0x00E8   (0x0004)  
	bool                                               bGroundContribution;                                        // 0x00EC   (0x0001)  
	bool                                               bGrayScaleMaterial;                                         // 0x00ED   (0x0001)  
	bool                                               bRayMarchVolumeShadow;                                      // 0x00EE   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x00EF   (0x0001)  MISSED
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UMaterialFunctionInterface : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	EMaterialFunctionUsage                             MaterialFunctionUsage;                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMaterialFunction : public UMaterialFunctionInterface
{ 
public:
	FString                                            Description;                                                // 0x0040   (0x0010)  
	bool                                               bExposeToLibrary : 1;                                       // 0x0050:0 (0x0001)  
	bool                                               bPrefixParameterNames : 1;                                  // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x0080 (128 bytes) (0x000040 - 0x0000C0) align 8 pad: 0x0000
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
public:
	class UMaterialFunctionInterface*                  Parent;                                                     // 0x0040   (0x0008)  
	class UMaterialFunctionInterface*                  Base;                                                       // 0x0048   (0x0008)  
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x0050   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x0060   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0070   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0080   (0x0010)  
	TArray<FStaticSwitchParameter>                     StaticSwitchParameterValues;                                // 0x0090   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameterValues;                         // 0x00A0   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x00B0   (0x0010)  
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class AMaterialInstanceActor : public AActor
{ 
public:
	TArray<class AActor*>                              TargetActors;                                               // 0x0220   (0x0010)  
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x0050 (80 bytes) (0x000310 - 0x000360) align 8 pad: 0x0000
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0310   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
	// void SetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, FLinearColor Value);                           // [0x40ee940] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue
	// void SetVectorParameterValue(FName ParameterName, FLinearColor Value);                                                   // [0x40ee870] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
	// void SetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, class UTexture* Value);                       // [0x40ee780] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue
	// void SetTextureParameterValue(FName ParameterName, class UTexture* Value);                                               // [0x40ee6b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
	// void SetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo, float Value);                                  // [0x40ee5c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue
	// void SetScalarParameterValue(FName ParameterName, float Value);                                                          // [0x40ee4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	// void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha); // [0x40ee0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
	// FLinearColor K2_GetVectorParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                    // [0x40edff0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	// FLinearColor K2_GetVectorParameterValue(FName ParameterName);                                                            // [0x40edf50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
	// class UTexture* K2_GetTextureParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                // [0x40edea0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	// class UTexture* K2_GetTextureParameterValue(FName ParameterName);                                                        // [0x40ede00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
	// float K2_GetScalarParameterValueByInfo(FMaterialParameterInfo& ParameterInfo);                                           // [0x40edd50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	// float K2_GetScalarParameterValue(FName ParameterName);                                                                   // [0x40edcb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	// void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source, bool bQuickParametersOnly);                     // [0x40edbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides
	// void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);                                                  // [0x40ed800] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyInterpParameters
	// void CopyInterpParameters(class UMaterialInstance* Source);                                                              // [0x40ed770] Final|Native|Public  
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FCollectionParameterBase
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FGuid                                              ID;                                                         // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x0004 (4 bytes) (0x000018 - 0x00001C) align 4 pad: 0x0000
struct FCollectionScalarParameter : FCollectionParameterBase
{ 
	float                                              DefaultValue;                                               // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0010 (16 bytes) (0x000018 - 0x000028) align 4 pad: 0x0000
struct FCollectionVectorParameter : FCollectionParameterBase
{ 
	FLinearColor                                       DefaultValue;                                               // 0x0018   (0x0010)  
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UMaterialParameterCollection : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	TArray<FCollectionScalarParameter>                 ScalarParameters;                                           // 0x0038   (0x0010)  
	TArray<FCollectionVectorParameter>                 VectorParameters;                                           // 0x0048   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0058   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x00F8 (248 bytes) (0x000028 - 0x000120) align 8 pad: 0x0000
class UMaterialParameterCollectionInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UMaterialParameterCollection*                Collection;                                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0xE8];                                      // 0x0038   (0x00E8)  MISSED
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FInterpGroupActorInfo
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	TArray<class AActor*>                              Actors;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCameraCutInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	float                                              Timestamp;                                                  // 0x000C   (0x0004)  
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x00A8 (168 bytes) (0x000220 - 0x0002C8) align 8 pad: 0x0000
class AMatineeActor : public AActor
{ 
public:
	class UInterpData*                                 MatineeData;                                                // 0x0220   (0x0008)  
	FName                                              MatineeControllerName;                                      // 0x0228   (0x0008)  
	float                                              PlayRate;                                                   // 0x0230   (0x0004)  
	bool                                               bPlayOnLevelLoad : 1;                                       // 0x0234:0 (0x0001)  
	bool                                               bForceStartPos : 1;                                         // 0x0234:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0235   (0x0003)  MISSED
	float                                              ForceStartPosition;                                         // 0x0238   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x023C:0 (0x0001)  
	bool                                               bRewindOnPlay : 1;                                          // 0x023C:1 (0x0001)  
	bool                                               bNoResetOnRewind : 1;                                       // 0x023C:2 (0x0001)  
	bool                                               bRewindIfAlreadyPlaying : 1;                                // 0x023C:3 (0x0001)  
	bool                                               bDisableRadioFilter : 1;                                    // 0x023C:4 (0x0001)  
	bool                                               bClientSideOnly : 1;                                        // 0x023C:5 (0x0001)  
	bool                                               bSkipUpdateIfNotVisible : 1;                                // 0x023C:6 (0x0001)  
	bool                                               bIsSkippable : 1;                                           // 0x023C:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x023D   (0x0003)  MISSED
	int32_t                                            PreferredSplitScreenNum;                                    // 0x0240   (0x0004)  
	bool                                               bDisableMovementInput : 1;                                  // 0x0244:0 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x0244:1 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x0244:2 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x0244:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0245   (0x0003)  MISSED
	TArray<FInterpGroupActorInfo>                      GroupActorInfos;                                            // 0x0248   (0x0010)  
	bool                                               bShouldShowGore : 1;                                        // 0x0258:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0259   (0x0007)  MISSED
	TArray<class UInterpGroupInst*>                    GroupInst;                                                  // 0x0260   (0x0010)  
	TArray<FCameraCutInfo>                             CameraCuts;                                                 // 0x0270   (0x0010)  
	bool                                               bIsPlaying : 1;                                             // 0x0280:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0280:1 (0x0001)  
	bool                                               bPaused : 1;                                                // 0x0280:2 (0x0001)  
	bool                                               bPendingStop : 1;                                           // 0x0280:3 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              InterpPosition;                                             // 0x0284   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0288   (0x0004)  MISSED
	char                                               ReplicationForceIsPlaying;                                  // 0x028C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x028D   (0x0003)  MISSED
	SDK_UNDEFINED(16,163) /* FMulticastInlineDelegate */ __um(OnPlay);                                             // 0x0290   (0x0010)  
	SDK_UNDEFINED(16,164) /* FMulticastInlineDelegate */ __um(OnStop);                                             // 0x02A0   (0x0010)  
	SDK_UNDEFINED(16,165) /* FMulticastInlineDelegate */ __um(OnPause);                                            // 0x02B0   (0x0010)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x02C0   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.MatineeActor.Stop
	// void Stop();                                                                                                             // [0x17816a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetPosition
	// void SetPosition(float NewPosition, bool bJump);                                                                         // [0x40ee410] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.SetLoopingState
	// void SetLoopingState(bool bNewLooping);                                                                                  // [0x40ee380] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Reverse
	// void Reverse();                                                                                                          // [0x1fb6340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Play
	// void Play();                                                                                                             // [0x1781680] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.Pause
	// void Pause();                                                                                                            // [0x8ee5a0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.EnableGroupByName
	// void EnableGroupByName(FString GroupName, bool bEnable);                                                                 // [0x40ed890] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.MatineeActor.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                          // [0x20345e0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0008 (8 bytes) (0x0002C8 - 0x0002D0) align 8 pad: 0x0000
class AMatineeActorCameraAnim : public AMatineeActor
{ 
public:
	class UCameraAnim*                                 CameraAnim;                                                 // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMatineeAnimInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMatineeInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class AMeshMergeCullingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              MeshReductionModuleName;                                    // 0x0038   (0x0008)  
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	// void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);                                             // [0x40f1ce0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	// void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& FillColor, bool bConvertToSRGB); // [0x40f1a10] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
	// void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, FLinearColor& StartColor, FLinearColor& EndColor, EVertexPaintAxis Axis, bool bConvertToSRGB); // [0x40f1850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FPurchaseInfo
{ 
	FString                                            Identifier;                                                 // 0x0000   (0x0010)  
	FString                                            DisplayName;                                                // 0x0010   (0x0010)  
	FString                                            DisplayDescription;                                         // 0x0020   (0x0010)  
	FString                                            DisplayPrice;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0030 (48 bytes) (0x000038 - 0x000068) align 8 pad: 0x0000
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FPurchaseInfo>                              AvailableProducts;                                          // 0x0038   (0x0010)  
	FString                                            LastError;                                                  // 0x0048   (0x0010)  
	FString                                            LastErrorSolution;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0040 (64 bytes) (0x000450 - 0x000490) align 16 pad: 0x0000
class UModelComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x18];                                      // 0x0450   (0x0018)  MISSED
	class UBodySetup*                                  ModelBodySetup;                                             // 0x0468   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0470   (0x0020)  MISSED
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UMorphTarget : public UObject
{ 
public:
	class USkeletalMesh*                               BaseSkelMesh;                                               // 0x0028   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UNavCollisionBase : public UObject
{ 
public:
	bool                                               bIsDynamicObstacle : 1;                                     // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x47];                                      // 0x0029   (0x0047)  MISSED
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavEdgeProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UNavigationDataChunk : public UObject
{ 
public:
	FName                                              NavigationDataName;                                         // 0x0028   (0x0008)  
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavigationDataInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FNavAgentSelector
{ 
	bool                                               bSupportsAgent0 : 1;                                        // 0x0000:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0000:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0000:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0000:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0000:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0000:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0000:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0000:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0001:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0001:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0001:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0001:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0001:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0001:7 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x0002   (0x0002)  MISSED
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UNavigationSystemConfig : public UObject
{ 
public:
	FSoftClassPath                                     NavigationSystemClass;                                      // 0x0028   (0x0018)  
	FNavAgentSelector                                  SupportedAgentsMask;                                        // 0x0040   (0x0004)  
	FName                                              DefaultAgentName;                                           // 0x0044   (0x0008)  
	bool                                               bIsOverriden : 1;                                           // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0000 (0 bytes) (0x000050 - 0x000050) align 8 pad: 0x0000
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
public:
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FNavigationLinkBase
{ 
	float                                              LeftProjectHeight;                                          // 0x0000   (0x0004)  
	float                                              MaxFallDownLength;                                          // 0x0004   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0008   (0x0004)  MISSED
	float                                              SnapRadius;                                                 // 0x000C   (0x0004)  
	float                                              SnapHeight;                                                 // 0x0010   (0x0004)  
	FNavAgentSelector                                  SupportedAgents;                                            // 0x0014   (0x0004)  
	bool                                               bSupportsAgent0 : 1;                                        // 0x0018:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0018:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0018:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0018:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0018:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0018:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0018:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0018:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0019:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0019:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0019:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0019:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0019:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0019:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0019:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0019:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	TEnumAsByte<ENavLinkDirection>                     Direction;                                                  // 0x001C   (0x0001)  
	bool                                               bUseSnapHeight : 1;                                         // 0x001D:0 (0x0001)  
	bool                                               bSnapToCheapestArea : 1;                                    // 0x001D:1 (0x0001)  
	bool                                               bCustomFlag0 : 1;                                           // 0x001D:2 (0x0001)  
	bool                                               bCustomFlag1 : 1;                                           // 0x001D:3 (0x0001)  
	bool                                               bCustomFlag2 : 1;                                           // 0x001D:4 (0x0001)  
	bool                                               bCustomFlag3 : 1;                                           // 0x001D:5 (0x0001)  
	bool                                               bCustomFlag4 : 1;                                           // 0x001D:6 (0x0001)  
	bool                                               bCustomFlag5 : 1;                                           // 0x001D:7 (0x0001)  
	bool                                               bCustomFlag6 : 1;                                           // 0x001E:0 (0x0001)  
	bool                                               bCustomFlag7 : 1;                                           // 0x001E:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x1];                                       // 0x001F   (0x0001)  MISSED
	class UClass*                                      AreaClass;                                                  // 0x0020   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
struct FNavigationLink : FNavigationLinkBase
{ 
	FVector                                            Left;                                                       // 0x0030   (0x000C)  
	FVector                                            Right;                                                      // 0x003C   (0x000C)  
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
struct FNavigationSegmentLink : FNavigationLinkBase
{ 
	FVector                                            LeftStart;                                                  // 0x0030   (0x000C)  
	FVector                                            LeftEnd;                                                    // 0x003C   (0x000C)  
	FVector                                            RightStart;                                                 // 0x0048   (0x000C)  
	FVector                                            RightEnd;                                                   // 0x0054   (0x000C)  
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UNavLinkDefinition : public UObject
{ 
public:
	TArray<FNavigationLink>                            Links;                                                      // 0x0028   (0x0010)  
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                               // 0x0038   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavPathObserverInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNavRelevantInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x0000 (0 bytes) (0x001BA8 - 0x001BA8) align 8 pad: 0x0000
class USimulatedClientNetConnection : public UNetConnection
{ 
public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
	// void MarkPropertyDirtyFromRepIndex(class UObject* Object, int32_t RepIndex, FName PropertyName);                         // [0x40f89a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirty
	// void MarkPropertyDirty(class UObject* Object, FName PropertyName);                                                       // [0x40f88e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNetworkPredictionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FNetworkEmulationProfileDescription
{ 
	FString                                            ProfileName;                                                // 0x0000   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UNetworkSettings : public UDeveloperSettings
{ 
public:
	bool                                               bVerifyPeer : 1;                                            // 0x0038:0 (0x0001)  
	bool                                               bEnableMultiplayerWorldOriginRebasing : 1;                  // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxRepArraySize;                                            // 0x003C   (0x0004)  
	int32_t                                            MaxRepArrayMemory;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FNetworkEmulationProfileDescription>        NetworkEmulationProfiles;                                   // 0x0048   (0x0010)  
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0140 (320 bytes) (0x000028 - 0x000168) align 8 pad: 0x0000
class UNodeMappingContainer : public UObject
{ 
public:
	SDK_UNDEFINED(80,166) /* TMap<FName, FNodeItem> */ __um(SourceItems);                                          // 0x0028   (0x0050)  
	SDK_UNDEFINED(80,167) /* TMap<FName, FNodeItem> */ __um(TargetItems);                                          // 0x0078   (0x0050)  
	SDK_UNDEFINED(80,168) /* TMap<FName, FName> */     __um(SourceToTarget);                                       // 0x00C8   (0x0050)  
	SDK_UNDEFINED(40,169) /* TWeakObjectPtr<UObject*> */ __um(SourceAsset);                                        // 0x0118   (0x0028)  
	SDK_UNDEFINED(40,170) /* TWeakObjectPtr<UObject*> */ __um(TargetAsset);                                        // 0x0140   (0x0028)  
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNodeMappingProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Note
/// Size: 0x0000 (0 bytes) (0x000220 - 0x000220) align 8 pad: 0x0000
class ANote : public AActor
{ 
public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x0080 (128 bytes) (0x000028 - 0x0000A8) align 8 pad: 0x0000
class UObjectLibrary : public UObject
{ 
public:
	class UClass*                                      ObjectBaseClass;                                            // 0x0028   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<class UObject*>                             Objects;                                                    // 0x0038   (0x0010)  
	SDK_UNDEFINED(16,171) /* TArray<TWeakObjectPtr<UObject*>> */ __um(WeakObjects);                                // 0x0048   (0x0010)  
	bool                                               bUseWeakReferences;                                         // 0x0058   (0x0001)  
	bool                                               bIsFullyLoaded;                                             // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4E];                                      // 0x005A   (0x004E)  MISSED
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UObjectReferencer : public UObject
{ 
public:
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x0328 (808 bytes) (0x0000E0 - 0x000408) align 8 pad: 0x0000
class UPackageMapClient : public UPackageMap
{ 
public:
	unsigned char                                      UnknownData00_1[0x328];                                     // 0x00E0   (0x0328)  MISSED
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0028 (40 bytes) (0x000268 - 0x000290) align 8 pad: 0x0000
class APainCausingVolume : public APhysicsVolume
{ 
public:
	bool                                               bPainCausing : 1;                                           // 0x0268:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0269   (0x0003)  MISSED
	float                                              DamagePerSec;                                               // 0x026C   (0x0004)  
	class UClass*                                      DamageType;                                                 // 0x0270   (0x0008)  
	float                                              PainInterval;                                               // 0x0278   (0x0004)  
	bool                                               bEntryPain : 1;                                             // 0x027C:0 (0x0001)  
	bool                                               BACKUP_bPainCausing : 1;                                    // 0x027C:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x027D   (0x0003)  MISSED
	class AController*                                 DamageInstigator;                                           // 0x0280   (0x0008)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x0190 (400 bytes) (0x000028 - 0x0001B8) align 8 pad: 0x0000
class UParticleEmitter : public UObject
{ 
public:
	FName                                              EmitterName;                                                // 0x0028   (0x0008)  
	int32_t                                            SubUVDataOffset;                                            // 0x0030   (0x0004)  
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                          // 0x0034   (0x0001)  
	EParticleSignificanceLevel                         SignificanceLevel;                                          // 0x0035   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0036   (0x0001)  MISSED
	bool                                               bUseLegacySpawningBehavior : 1;                             // 0x0037:0 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0037:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0037:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0037:3 (0x0001)  MISSED
	bool                                               ConvertedModules : 1;                                       // 0x0037:4 (0x0001)  
	bool                                               bIsSoloing : 1;                                             // 0x0037:5 (0x0001)  
	bool                                               bCookedOut : 1;                                             // 0x0037:6 (0x0001)  
	bool                                               bDisabledLODsKeepEmitterAlive : 1;                          // 0x0037:7 (0x0001)  
	bool                                               bDisableWhenInsignficant : 1;                               // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<class UParticleLODLevel*>                   LODLevels;                                                  // 0x0040   (0x0010)  
	int32_t                                            PeakActiveParticles;                                        // 0x0050   (0x0004)  
	int32_t                                            InitialAllocationCount;                                     // 0x0054   (0x0004)  
	float                                              QualityLevelSpawnRateScale;                                 // 0x0058   (0x0004)  
	uint32_t                                           DetailModeBitmask;                                          // 0x005C   (0x0004)  
	unsigned char                                      UnknownData05_7[0x158];                                     // 0x0060   (0x0158)  MISSED
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x0000 (0 bytes) (0x000220 - 0x000220) align 8 pad: 0x0000
class AParticleEventManager : public AActor
{ 
public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x0090 (144 bytes) (0x000028 - 0x0000B8) align 8 pad: 0x0000
class UParticleLODLevel : public UObject
{ 
public:
	int32_t                                            Level;                                                      // 0x0028   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0030   (0x0008)  
	TArray<class UParticleModule*>                     Modules;                                                    // 0x0038   (0x0010)  
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                             // 0x0048   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0050   (0x0008)  
	class UParticleModuleEventGenerator*               EventGenerator;                                             // 0x0058   (0x0008)  
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                            // 0x0060   (0x0010)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0070   (0x0010)  
	TArray<class UParticleModule*>                     UpdateModules;                                              // 0x0080   (0x0010)  
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                               // 0x0090   (0x0010)  
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                       // 0x00A0   (0x0010)  
	bool                                               ConvertedModules : 1;                                       // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            PeakActiveParticles;                                        // 0x00B4   (0x0004)  
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FParticleSystemLOD
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FLODSoloTrack
{ 
	TArray<char>                                       SoloEnableSetting;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FNamedEmitterMaterial
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x000110) align 8 pad: 0x0000
class UParticleSystem : public UFXSystemAsset
{ 
public:
	float                                              UpdateTime_FPS;                                             // 0x0030   (0x0004)  
	float                                              UpdateTime_Delta;                                           // 0x0034   (0x0004)  
	float                                              WarmupTime;                                                 // 0x0038   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x003C   (0x0004)  
	TArray<class UParticleEmitter*>                    Emitters;                                                   // 0x0040   (0x0010)  
	class UParticleSystemComponent*                    PreviewComponent;                                           // 0x0050   (0x0008)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0058   (0x0008)  
	float                                              LODDistanceCheckTime;                                       // 0x0060   (0x0004)  
	float                                              MacroUVRadius;                                              // 0x0064   (0x0004)  
	TArray<float>                                      LODDistances;                                               // 0x0068   (0x0010)  
	TArray<FParticleSystemLOD>                         LODSettings;                                                // 0x0078   (0x0010)  
	FBox                                               FixedRelativeBoundingBox;                                   // 0x0088   (0x001C)  
	float                                              SecondsBeforeInactive;                                      // 0x00A4   (0x0004)  
	float                                              Delay;                                                      // 0x00A8   (0x0004)  
	float                                              DelayLow;                                                   // 0x00AC   (0x0004)  
	bool                                               bOrientZAxisTowardCamera : 1;                               // 0x00B0:0 (0x0001)  
	bool                                               bUseFixedRelativeBoundingBox : 1;                           // 0x00B0:1 (0x0001)  
	bool                                               bShouldResetPeakCounts : 1;                                 // 0x00B0:2 (0x0001)  
	bool                                               bHasPhysics : 1;                                            // 0x00B0:3 (0x0001)  
	bool                                               bUseRealtimeThumbnail : 1;                                  // 0x00B0:4 (0x0001)  
	bool                                               ThumbnailImageOutOfDate : 1;                                // 0x00B0:5 (0x0001)  
	unsigned char                                      UnknownBit00 : 1;                                           // 0x00B0:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00B0:7 (0x0001)  MISSED
	bool                                               bUseDelayRange : 1;                                         // 0x00B1:0 (0x0001)  
	bool                                               bAllowManagedTicking : 1;                                   // 0x00B1:1 (0x0001)  
	bool                                               bAutoDeactivate : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bRegenerateLODDuplicate : 1;                                // 0x00B1:3 (0x0001)  
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                           // 0x00B2   (0x0001)  
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x00B3   (0x0001)  
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                      // 0x00B4   (0x0001)  
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                      // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x00B6   (0x0001)  MISSED
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                       // 0x00B7   (0x0001)  
	uint32_t                                           MinTimeBetweenTicks;                                        // 0x00B8   (0x0004)  
	float                                              InsignificanceDelay;                                        // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	FBox                                               CustomOcclusionBounds;                                      // 0x00CC   (0x001C)  
	TArray<FLODSoloTrack>                              SoloTracking;                                               // 0x00E8   (0x0010)  
	TArray<FNamedEmitterMaterial>                      NamedMaterialSlots;                                         // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0108   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	// bool ContainsEmitterType(class UClass* TypeData);                                                                        // [0x4103610] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UParticleModule : public UObject
{ 
public:
	bool                                               bSpawnModule : 1;                                           // 0x0028:0 (0x0001)  
	bool                                               bUpdateModule : 1;                                          // 0x0028:1 (0x0001)  
	bool                                               bFinalUpdateModule : 1;                                     // 0x0028:2 (0x0001)  
	bool                                               bUpdateForGPUEmitter : 1;                                   // 0x0028:3 (0x0001)  
	bool                                               bCurvesAsColor : 1;                                         // 0x0028:4 (0x0001)  
	bool                                               b3DDrawMode : 1;                                            // 0x0028:5 (0x0001)  
	bool                                               bSupported3DDrawMode : 1;                                   // 0x0028:6 (0x0001)  
	bool                                               bEnabled : 1;                                               // 0x0028:7 (0x0001)  
	bool                                               bEditable : 1;                                              // 0x0029:0 (0x0001)  
	bool                                               LODDuplicate : 1;                                           // 0x0029:1 (0x0001)  
	bool                                               bSupportsRandomSeed : 1;                                    // 0x0029:2 (0x0001)  
	bool                                               bRequiresLoopingNotification : 1;                           // 0x0029:3 (0x0001)  
	char                                               LODValidity;                                                // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleAccelerationBase : public UParticleModule
{ 
public:
	bool                                               bAlwaysInWorldSpace : 1;                                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDistributionLookupTable
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	float                                              TimeBias;                                                   // 0x0004   (0x0004)  
	TArray<float>                                      Values;                                                     // 0x0008   (0x0010)  
	char                                               Op;                                                         // 0x0018   (0x0001)  
	char                                               EntryCount;                                                 // 0x0019   (0x0001)  
	char                                               EntryStride;                                                // 0x001A   (0x0001)  
	char                                               SubEntryStride;                                             // 0x001B   (0x0001)  
	char                                               LockFlag;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FRawDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FRawDistributionVector : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	FVector                                            MinValueVec;                                                // 0x0028   (0x000C)  
	FVector                                            MaxValueVec;                                                // 0x0034   (0x000C)  
	class UDistributionVector*                         Distribution;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             Acceleration;                                               // 0x0038   (0x0048)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0010 (16 bytes) (0x000038 - 0x000048) align 8 pad: 0x0000
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
public:
	FVector                                            Acceleration;                                               // 0x0038   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0010 (16 bytes) (0x000020 - 0x000030) align 8 pad: 0x0000
struct FRawDistributionFloat : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	class UDistributionFloat*                          Distribution;                                               // 0x0028   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragCoefficient;                                            // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragCoefficientRaw;                                         // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragScale;                                                  // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragScaleRaw;                                               // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             AccelOverLife;                                              // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleAttractorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            EndPoint0;                                                  // 0x0030   (0x000C)  
	FVector                                            EndPoint1;                                                  // 0x003C   (0x000C)  
	FRawDistributionFloat                              Range;                                                      // 0x0048   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x0078   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	FRawDistributionFloat                              Range;                                                      // 0x0038   (0x0030)  
	bool                                               bStrengthByDistance : 1;                                    // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	FRawDistributionFloat                              Strength;                                                   // 0x0070   (0x0030)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                            // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	bool                                               bRenewSource : 1;                                           // 0x00A8:0 (0x0001)  
	bool                                               bInheritSourceVel : 1;                                      // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            LastSelIndex;                                               // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000E0) align 8 pad: 0x0000
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
public:
	FRawDistributionVector                             position;                                                   // 0x0030   (0x0048)  
	FRawDistributionFloat                              Range;                                                      // 0x0078   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x00A8   (0x0030)  
	bool                                               StrengthByDistance : 1;                                     // 0x00D8:0 (0x0001)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00D8:1 (0x0001)  
	bool                                               bOverrideVelocity : 1;                                      // 0x00D8:2 (0x0001)  
	bool                                               bUseWorldSpacePosition : 1;                                 // 0x00D8:3 (0x0001)  
	bool                                               Positive_X : 1;                                             // 0x00D8:4 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x00D8:5 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x00D8:6 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x00D8:7 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x00D9:0 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x00D9:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x00DA   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            position;                                                   // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
	class UDistributionFloat*                          Strength;                                                   // 0x0040   (0x0008)  
	FRawDistributionFloat                              StrengthRaw;                                                // 0x0048   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleBeamBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FBeamModifierOptions
{ 
	bool                                               bModify : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bScale : 1;                                                 // 0x0000:1 (0x0001)  
	bool                                               bLock : 1;                                                  // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x00D8 (216 bytes) (0x000030 - 0x000108) align 8 pad: 0x0000
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<BeamModifierType>                      ModifierType;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FBeamModifierOptions                               PositionOptions;                                            // 0x0034   (0x0004)  
	FRawDistributionVector                             position;                                                   // 0x0038   (0x0048)  
	FBeamModifierOptions                               TangentOptions;                                             // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FRawDistributionVector                             Tangent;                                                    // 0x0088   (0x0048)  
	bool                                               bAbsoluteTangent : 1;                                       // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FBeamModifierOptions                               StrengthOptions;                                            // 0x00D4   (0x0004)  
	FRawDistributionFloat                              Strength;                                                   // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0160 (352 bytes) (0x000030 - 0x000190) align 8 pad: 0x0000
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
public:
	bool                                               bLowFreq_Enabled : 1;                                       // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0034   (0x0004)  
	int32_t                                            Frequency_LowRange;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             NoiseRange;                                                 // 0x0040   (0x0048)  
	FRawDistributionFloat                              NoiseRangeScale;                                            // 0x0088   (0x0030)  
	bool                                               bNRScaleEmitterTime : 1;                                    // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FRawDistributionVector                             NoiseSpeed;                                                 // 0x00C0   (0x0048)  
	bool                                               bSmooth : 1;                                                // 0x0108:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0109   (0x0003)  MISSED
	float                                              NoiseLockRadius;                                            // 0x010C   (0x0004)  
	bool                                               bNoiseLock : 1;                                             // 0x0110:0 (0x0001)  
	bool                                               bOscillate : 1;                                             // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              NoiseLockTime;                                              // 0x0114   (0x0004)  
	float                                              NoiseTension;                                               // 0x0118   (0x0004)  
	bool                                               bUseNoiseTangents : 1;                                      // 0x011C:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x011D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseTangentStrength;                                       // 0x0120   (0x0030)  
	int32_t                                            NoiseTessellation;                                          // 0x0150   (0x0004)  
	bool                                               bTargetNoise : 1;                                           // 0x0154:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0155   (0x0003)  MISSED
	float                                              FrequencyDistance;                                          // 0x0158   (0x0004)  
	bool                                               bApplyNoiseScale : 1;                                       // 0x015C:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x015D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseScale;                                                 // 0x0160   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x00E8 (232 bytes) (0x000030 - 0x000118) align 8 pad: 0x0000
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               SourceMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	bool                                               bSourceAbsolute : 1;                                        // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FRawDistributionVector                             Source;                                                     // 0x0040   (0x0048)  
	bool                                               bLockSource : 1;                                            // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        SourceTangentMethod;                                        // 0x008C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             SourceTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockSourceTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0111   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x00F0 (240 bytes) (0x000030 - 0x000120) align 8 pad: 0x0000
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               TargetMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              TargetName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             Target;                                                     // 0x0040   (0x0048)  
	bool                                               bTargetAbsolute : 1;                                        // 0x0088:0 (0x0001)  
	bool                                               bLockTarget : 1;                                            // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        TargetTangentMethod;                                        // 0x008C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             TargetTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockTargetTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              TargetStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockTargetStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              LockRadius;                                                 // 0x0114   (0x0004)  
	unsigned char                                      UnknownData06_7[0x8];                                       // 0x0118   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleCameraBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
public:
	FRawDistributionFloat                              CameraOffset;                                               // 0x0030   (0x0030)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                               // 0x0064   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleCollisionBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0160 (352 bytes) (0x000030 - 0x000190) align 8 pad: 0x0000
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionVector                             DampingFactor;                                              // 0x0030   (0x0048)  
	FRawDistributionVector                             DampingFactorRotation;                                      // 0x0078   (0x0048)  
	FRawDistributionFloat                              MaxCollisions;                                              // 0x00C0   (0x0030)  
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                  // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	SDK_UNDEFINED(16,172) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(CollisionTypes);                        // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0108   (0x0008)  MISSED
	bool                                               bApplyPhysics : 1;                                          // 0x0110:0 (0x0001)  
	bool                                               bIgnoreTriggerVolumes : 1;                                  // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0111   (0x0007)  MISSED
	FRawDistributionFloat                              ParticleMass;                                               // 0x0118   (0x0030)  
	float                                              DirScalar;                                                  // 0x0148   (0x0004)  
	bool                                               bPawnsDoNotDecrementCount : 1;                              // 0x014C:0 (0x0001)  
	bool                                               bOnlyVerticalNormalsDecrementCount : 1;                     // 0x014C:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x014D   (0x0003)  MISSED
	float                                              VerticalFudgeFactor;                                        // 0x0150   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FRawDistributionFloat                              DelayAmount;                                                // 0x0158   (0x0030)  
	bool                                               bDropDetail : 1;                                            // 0x0188:0 (0x0001)  
	bool                                               bCollideOnlyIfVisible : 1;                                  // 0x0188:1 (0x0001)  
	bool                                               bIgnoreSourceActor : 1;                                     // 0x0188:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0189   (0x0003)  MISSED
	float                                              MaxCollisionDistance;                                       // 0x018C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionFloat                              Resilience;                                                 // 0x0030   (0x0030)  
	FRawDistributionFloat                              ResilienceScaleOverLife;                                    // 0x0060   (0x0030)  
	float                                              Friction;                                                   // 0x0090   (0x0004)  
	float                                              RandomSpread;                                               // 0x0094   (0x0004)  
	float                                              RandomDistribution;                                         // 0x0098   (0x0004)  
	float                                              RadiusScale;                                                // 0x009C   (0x0004)  
	float                                              RadiusBias;                                                 // 0x00A0   (0x0004)  
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                   // 0x00A4   (0x0001)  
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x00A6   (0x0002)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleColorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleColor : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             StartColor;                                                 // 0x0030   (0x0048)  
	FRawDistributionFloat                              StartAlpha;                                                 // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FParticleRandomSeedInfo
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	bool                                               bGetSeedFromInstance : 1;                                   // 0x0008:0 (0x0001)  
	bool                                               bInstanceSeedIsIndex : 1;                                   // 0x0008:1 (0x0001)  
	bool                                               bResetSeedOnEmitterLooping : 1;                             // 0x0008:2 (0x0001)  
	bool                                               bRandomlySelectSeedArray : 1;                               // 0x0008:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<int32_t>                                    RandomSeeds;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x0020 (32 bytes) (0x0000B0 - 0x0000D0) align 8 pad: 0x0000
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorOverLife;                                              // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaOverLife;                                              // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaScaleOverLife;                                         // 0x0078   (0x0030)  
	bool                                               bEmitterTime : 1;                                           // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleEventBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FParticleEvent_GenerateInfo
{ 
	TEnumAsByte<EParticleEventType>                    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0004   (0x0004)  
	int32_t                                            ParticleFrequency;                                          // 0x0008   (0x0004)  
	bool                                               FirstTimeOnly : 1;                                          // 0x000C:0 (0x0001)  
	bool                                               LastTimeOnly : 1;                                           // 0x000C:1 (0x0001)  
	bool                                               UseReflectedImpactVector : 1;                               // 0x000C:2 (0x0001)  
	bool                                               bUseOrbitOffset : 1;                                        // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              CustomName;                                                 // 0x0010   (0x0008)  
	TArray<class UParticleModuleEventSendToGame*>      ParticleModuleEventsToSendToGame;                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
public:
	TArray<FParticleEvent_GenerateInfo>                Events;                                                     // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                         // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              EventName;                                                  // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
public:
	bool                                               bStopSpawning : 1;                                          // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x0098 (152 bytes) (0x000040 - 0x0000D8) align 8 pad: 0x0000
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
public:
	FRawDistributionFloat                              SpawnCount;                                                 // 0x0040   (0x0030)  
	bool                                               bUseParticleTime : 1;                                       // 0x0070:0 (0x0001)  
	bool                                               bUsePSysLocation : 1;                                       // 0x0070:1 (0x0001)  
	bool                                               bInheritVelocity : 1;                                       // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionVector                             InheritVelocityScale;                                       // 0x0078   (0x0048)  
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                          // 0x00C0   (0x0010)  
	bool                                               bBanPhysicalMaterials : 1;                                  // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UParticleModuleEventSendToGame : public UObject
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleKillBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x0098 (152 bytes) (0x000030 - 0x0000C8) align 8 pad: 0x0000
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
public:
	FRawDistributionVector                             LowerLeftCorner;                                            // 0x0030   (0x0048)  
	FRawDistributionVector                             UpperRightCorner;                                           // 0x0078   (0x0048)  
	bool                                               bAbsolute : 1;                                              // 0x00C0:0 (0x0001)  
	bool                                               bKillInside : 1;                                            // 0x00C0:1 (0x0001)  
	bool                                               bAxisAlignedAndFixedSize : 1;                               // 0x00C0:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
public:
	FRawDistributionFloat                              Height;                                                     // 0x0030   (0x0030)  
	bool                                               bAbsolute : 1;                                              // 0x0060:0 (0x0001)  
	bool                                               bFloor : 1;                                                 // 0x0060:1 (0x0001)  
	bool                                               bApplyPSysScale : 1;                                        // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleLifetimeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
public:
	FRawDistributionFloat                              LifeTime;                                                   // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0020 (32 bytes) (0x000060 - 0x000080) align 8 pad: 0x0000
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleLightBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x00F0 (240 bytes) (0x000030 - 0x000120) align 8 pad: 0x0000
class UParticleModuleLight : public UParticleModuleLightBase
{ 
public:
	bool                                               bUseInverseSquaredFalloff;                                  // 0x0030   (0x0001)  
	bool                                               bAffectsTranslucency;                                       // 0x0031   (0x0001)  
	bool                                               bPreviewLightRadius;                                        // 0x0032   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0033   (0x0001)  MISSED
	float                                              SpawnFraction;                                              // 0x0034   (0x0004)  
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0038   (0x0048)  
	FRawDistributionFloat                              BrightnessOverLife;                                         // 0x0080   (0x0030)  
	FRawDistributionFloat                              RadiusScale;                                                // 0x00B0   (0x0030)  
	FRawDistributionFloat                              LightExponent;                                              // 0x00E0   (0x0030)  
	FLightingChannels                                  LightingChannels;                                           // 0x0110   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity;                              // 0x0114   (0x0004)  
	bool                                               bHighQualityLights;                                         // 0x0118   (0x0001)  
	bool                                               bShadowCastingLights;                                       // 0x0119   (0x0001)  
	unsigned char                                      UnknownData02_7[0x6];                                       // 0x011A   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0020 (32 bytes) (0x000120 - 0x000140) align 8 pad: 0x0000
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleLocationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartLocation;                                              // 0x0030   (0x0048)  
	float                                              DistributeOverNPoints;                                      // 0x0078   (0x0004)  
	float                                              DistributeThreshold;                                        // 0x007C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FLocationBoneSocketInfo
{ 
	FName                                              BoneSocketName;                                             // 0x0000   (0x0008)  
	FVector                                            Offset;                                                     // 0x0008   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	TArray<FLocationBoneSocketInfo>                    SourceLocations;                                            // 0x0040   (0x0010)  
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0054:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0054:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0054:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0058   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x005C   (0x0008)  
	int32_t                                            NumPreSelectedIndices;                                      // 0x0064   (0x0004)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0068   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000150) align 8 pad: 0x0000
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             Location;                                                   // 0x0030   (0x0048)  
	FRawDistributionVector                             LocationOffset;                                             // 0x0078   (0x0048)  
	FRawDistributionVector                             ScaleFactor;                                                // 0x00C0   (0x0048)  
	FRawDistributionVector                             Direction;                                                  // 0x0108   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                            // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	bool                                               InheritSourceVelocity : 1;                                  // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              InheritSourceVelocityScale;                                 // 0x0040   (0x0004)  
	bool                                               bInheritSourceRotation : 1;                                 // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              InheritSourceRotationScale;                                 // 0x0048   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x0080 (128 bytes) (0x000030 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
public:
	bool                                               Positive_X : 1;                                             // 0x0030:0 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x0030:1 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x0030:2 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x0030:3 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x0030:4 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x0030:5 (0x0001)  
	bool                                               SurfaceOnly : 1;                                            // 0x0030:6 (0x0001)  
	bool                                               Velocity : 1;                                               // 0x0030:7 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FRawDistributionFloat                              VelocityScale;                                              // 0x0038   (0x0030)  
	FRawDistributionVector                             StartLocation;                                              // 0x0068   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0070 (112 bytes) (0x0000B0 - 0x000120) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
public:
	bool                                               RadialVelocity : 1;                                         // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FRawDistributionFloat                              StartRadius;                                                // 0x00B8   (0x0030)  
	FRawDistributionFloat                              StartHeight;                                                // 0x00E8   (0x0030)  
	TEnumAsByte<CylinderHeightAxis>                    HeightAxis;                                                 // 0x0118   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0020 (32 bytes) (0x000120 - 0x000140) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x0030 (48 bytes) (0x0000B0 - 0x0000E0) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
public:
	FRawDistributionFloat                              StartRadius;                                                // 0x00B0   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0020 (32 bytes) (0x0000E0 - 0x000100) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00E0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x00D8 (216 bytes) (0x000030 - 0x000108) align 8 pad: 0x0000
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartOffset;                                                // 0x0030   (0x0048)  
	FRawDistributionFloat                              Height;                                                     // 0x0078   (0x0030)  
	FRawDistributionFloat                              Angle;                                                      // 0x00A8   (0x0030)  
	FRawDistributionFloat                              Thickness;                                                  // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0040:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0040:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0044   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x0048   (0x0008)  
	TArray<FName>                                      ValidAssociatedBones;                                       // 0x0050   (0x0010)  
	bool                                               bEnforceNormalCheck : 1;                                    // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	FVector                                            NormalToCompare;                                            // 0x0064   (0x000C)  
	float                                              NormalCheckToleranceDegrees;                                // 0x0070   (0x0004)  
	float                                              NormalCheckTolerance;                                       // 0x0074   (0x0004)  
	TArray<int32_t>                                    ValidMaterialIndices;                                       // 0x0078   (0x0010)  
	bool                                               bInheritVertexColor : 1;                                    // 0x0088:0 (0x0001)  
	bool                                               bInheritUV : 1;                                             // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           InheritUVChannel;                                           // 0x008C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleMaterialBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                              // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleRotationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionVector                             StartRotation;                                              // 0x0030   (0x0048)  
	bool                                               bInheritParent : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleRotationRateBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             StartRotationRate;                                          // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             RotRate;                                                    // 0x0030   (0x0048)  
	bool                                               bScaleRotRate : 1;                                          // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleOrbitBase : public UParticleModule
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FOrbitOptions
{ 
	bool                                               bProcessDuringSpawn : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bProcessDuringUpdate : 1;                                   // 0x0000:1 (0x0001)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x00F8 (248 bytes) (0x000038 - 0x000130) align 8 pad: 0x0000
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	FRawDistributionVector                             OffsetAmount;                                               // 0x0040   (0x0048)  
	FOrbitOptions                                      OffsetOptions;                                              // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FRawDistributionVector                             RotationAmount;                                             // 0x0090   (0x0048)  
	FOrbitOptions                                      RotationOptions;                                            // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FRawDistributionVector                             RotationRateAmount;                                         // 0x00E0   (0x0048)  
	FOrbitOptions                                      RotationRateOptions;                                        // 0x0128   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleOrientationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleParameterBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FEmitterDynamicParameter
{ 
	FName                                              paramName;                                                  // 0x0000   (0x0008)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	TEnumAsByte<EEmitterDynamicParameterValue>         ValueMethod;                                                // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	bool                                               bScaleVelocityByParamValue : 1;                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	FRawDistributionFloat                              ParamValue;                                                 // 0x0018   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
public:
	TArray<FEmitterDynamicParameter>                   DynamicParams;                                              // 0x0030   (0x0010)  
	int32_t                                            UpdateFlags;                                                // 0x0040   (0x0004)  
	bool                                               bUsesVelocity : 1;                                          // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0020 (32 bytes) (0x000048 - 0x000068) align 8 pad: 0x0000
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0048   (0x0020)  
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
public:
	FVector2D                                          PivotOffset;                                                // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FParticleBurst
{ 
	int32_t                                            Count;                                                      // 0x0000   (0x0004)  
	int32_t                                            CountLow;                                                   // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000140) align 8 pad: 0x0000
class UParticleModuleRequired : public UParticleModule
{ 
public:
	class UMaterialInterface*                          Material;                                                   // 0x0030   (0x0008)  
	float                                              MinFacingCameraBlendDistance;                               // 0x0038   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x003C   (0x0004)  
	FVector                                            EmitterOrigin;                                              // 0x0040   (0x000C)  
	FRotator                                           EmitterRotation;                                            // 0x004C   (0x000C)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0058   (0x0001)  
	bool                                               bUseLocalSpace : 1;                                         // 0x0059:0 (0x0001)  
	bool                                               bKillOnDeactivate : 1;                                      // 0x0059:1 (0x0001)  
	bool                                               bKillOnCompleted : 1;                                       // 0x0059:2 (0x0001)  
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                   // 0x005A   (0x0001)  
	bool                                               bUseLegacyEmitterTime : 1;                                  // 0x005B:0 (0x0001)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x005B:1 (0x0001)  
	bool                                               bEmitterDurationUseRange : 1;                               // 0x005B:2 (0x0001)  
	float                                              EmitterDuration;                                            // 0x005C   (0x0004)  
	FRawDistributionFloat                              SpawnRate;                                                  // 0x0060   (0x0030)  
	TArray<FParticleBurst>                             BurstList;                                                  // 0x0090   (0x0010)  
	float                                              EmitterDelay;                                               // 0x00A0   (0x0004)  
	float                                              EmitterDelayLow;                                            // 0x00A4   (0x0004)  
	bool                                               bDelayFirstLoopOnly : 1;                                    // 0x00A8:0 (0x0001)  
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                        // 0x00A9   (0x0001)  
	bool                                               bScaleUV : 1;                                               // 0x00AA:0 (0x0001)  
	bool                                               bEmitterDelayUseRange : 1;                                  // 0x00AA:1 (0x0001)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x00AB   (0x0001)  
	bool                                               bOverrideSystemMacroUV : 1;                                 // 0x00AC:0 (0x0001)  
	bool                                               bUseMaxDrawCount : 1;                                       // 0x00AC:1 (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x00AD   (0x0001)  
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                         // 0x00AE   (0x0001)  
	bool                                               bOrbitModuleAffectsVelocityAlignment : 1;                   // 0x00AF:0 (0x0001)  
	int32_t                                            SubImages_Horizontal;                                       // 0x00B0   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x00B4   (0x0004)  
	float                                              RandomImageTime;                                            // 0x00B8   (0x0004)  
	int32_t                                            RandomImageChanges;                                         // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	float                                              MacroUVRadius;                                              // 0x00CC   (0x0004)  
	EParticleUVFlipMode                                UVFlippingMode;                                             // 0x00D0   (0x0001)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x00D1   (0x0001)  
	bool                                               bDurationRecalcEachLoop : 1;                                // 0x00D2:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x00D3   (0x0001)  MISSED
	FVector                                            NormalsSphereCenter;                                        // 0x00D4   (0x000C)  
	float                                              AlphaThreshold;                                             // 0x00E0   (0x0004)  
	int32_t                                            EmitterLoops;                                               // 0x00E4   (0x0004)  
	class UTexture2D*                                  CutoutTexture;                                              // 0x00E8   (0x0008)  
	int32_t                                            MaxDrawCount;                                               // 0x00F0   (0x0004)  
	float                                              EmitterDurationLow;                                         // 0x00F4   (0x0004)  
	FVector                                            NormalsCylinderDirection;                                   // 0x00F8   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<FName>                                      NamedMaterialOverrides;                                     // 0x0108   (0x0010)  
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0118   (0x0028)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              StartRotation;                                              // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0020 (32 bytes) (0x000060 - 0x000080) align 8 pad: 0x0000
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              RotationOverLife;                                           // 0x0030   (0x0030)  
	bool                                               Scale : 1;                                                  // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              StartRotationRate;                                          // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0020 (32 bytes) (0x000060 - 0x000080) align 8 pad: 0x0000
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              LifeMultiplier;                                             // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleSizeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             StartSize;                                                  // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0020 (32 bytes) (0x000078 - 0x000098) align 8 pad: 0x0000
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
	bool                                               MultiplyX : 1;                                              // 0x0078:0 (0x0001)  
	bool                                               MultiplyY : 1;                                              // 0x0078:1 (0x0001)  
	bool                                               MultiplyZ : 1;                                              // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000080) align 8 pad: 0x0000
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             SizeScale;                                                  // 0x0030   (0x0048)  
	bool                                               EnableX : 1;                                                // 0x0078:0 (0x0001)  
	bool                                               EnableY : 1;                                                // 0x0078:1 (0x0001)  
	bool                                               EnableZ : 1;                                                // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
public:
	FVector2D                                          SpeedScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          MaxScale;                                                   // 0x0038   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             SourceMovementScale;                                        // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleSpawnBase : public UParticleModule
{ 
public:
	bool                                               bProcessSpawnRate : 1;                                      // 0x0030:0 (0x0001)  
	bool                                               bProcessBurstList : 1;                                      // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000E8) align 8 pad: 0x0000
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
public:
	FRawDistributionFloat                              Rate;                                                       // 0x0038   (0x0030)  
	FRawDistributionFloat                              RateScale;                                                  // 0x0068   (0x0030)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<FParticleBurst>                             BurstList;                                                  // 0x00A0   (0x0010)  
	FRawDistributionFloat                              BurstScale;                                                 // 0x00B0   (0x0030)  
	bool                                               bApplyGlobalSpawnRateScale : 1;                             // 0x00E0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000078) align 8 pad: 0x0000
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
public:
	float                                              UnitScalar;                                                 // 0x0038   (0x0004)  
	float                                              MovementTolerance;                                          // 0x003C   (0x0004)  
	FRawDistributionFloat                              SpawnPerUnit;                                               // 0x0040   (0x0030)  
	float                                              MaxFrameDistance;                                           // 0x0070   (0x0004)  
	bool                                               bIgnoreSpawnRateWhenMoving : 1;                             // 0x0074:0 (0x0001)  
	bool                                               bIgnoreMovementAlongX : 1;                                  // 0x0074:1 (0x0001)  
	bool                                               bIgnoreMovementAlongY : 1;                                  // 0x0074:2 (0x0001)  
	bool                                               bIgnoreMovementAlongZ : 1;                                  // 0x0074:3 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleSubUVBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000070) align 8 pad: 0x0000
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
public:
	class USubUVAnimation*                             Animation;                                                  // 0x0030   (0x0008)  
	FRawDistributionFloat                              SubImageIndex;                                              // 0x0038   (0x0030)  
	bool                                               bUseRealTime : 1;                                           // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x0040 (64 bytes) (0x000070 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionFloat                              FrameRate;                                                  // 0x0078   (0x0030)  
	int32_t                                            StartingFrame;                                              // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleTrailBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000090) align 8 pad: 0x0000
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x0040   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	int32_t                                            SourceOffsetCount;                                          // 0x0074   (0x0004)  
	TArray<FVector>                                    SourceOffsetDefaults;                                       // 0x0078   (0x0010)  
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	bool                                               bInheritRotation : 1;                                       // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData04_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleTypeDataBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
public:
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0030:0 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0030:1 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0034   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0038   (0x0004)  
	float                                              TangentTessellationStepSize;                                // 0x003C   (0x0004)  
	float                                              WidthTessellationStepSize;                                  // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000150) align 8 pad: 0x0000
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            TextureTile;                                                // 0x0034   (0x0004)  
	float                                              TextureTileDistance;                                        // 0x0038   (0x0004)  
	int32_t                                            Sheets;                                                     // 0x003C   (0x0004)  
	int32_t                                            MaxBeamCount;                                               // 0x0040   (0x0004)  
	float                                              Speed;                                                      // 0x0044   (0x0004)  
	int32_t                                            InterpolationPoints;                                        // 0x0048   (0x0004)  
	bool                                               bAlwaysOn : 1;                                              // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            UpVectorStepSize;                                           // 0x0050   (0x0004)  
	FName                                              BranchParentName;                                           // 0x0054   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FRawDistributionFloat                              Distance;                                                   // 0x0060   (0x0030)  
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FRawDistributionFloat                              TaperFactor;                                                // 0x0098   (0x0030)  
	FRawDistributionFloat                              TaperScale;                                                 // 0x00C8   (0x0030)  
	bool                                               RenderGeometry : 1;                                         // 0x00F8:0 (0x0001)  
	bool                                               RenderDirectLine : 1;                                       // 0x00F8:1 (0x0001)  
	bool                                               RenderLines : 1;                                            // 0x00F8:2 (0x0001)  
	bool                                               RenderTessellation : 1;                                     // 0x00F8:3 (0x0001)  
	unsigned char                                      UnknownData04_7[0x57];                                      // 0x00F9   (0x0057)  MISSED
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 16 pad: 0x0000
struct FGPUSpriteLocalVectorFieldInfo
{ 
	class UVectorField*                                Field;                                                      // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FRotator                                           MinInitialRotation;                                         // 0x0040   (0x000C)  
	FRotator                                           MaxInitialRotation;                                         // 0x004C   (0x000C)  
	FRotator                                           RotationRate;                                               // 0x0058   (0x000C)  
	float                                              Intensity;                                                  // 0x0064   (0x0004)  
	float                                              Tightness;                                                  // 0x0068   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x006C:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x006C:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x006C:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x006C:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x006C:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FFloatDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0280 (640 bytes) (0x000000 - 0x000280) align 16 pad: 0x0000
struct FGPUSpriteEmitterInfo
{ 
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0000   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0008   (0x0008)  
	class UParticleModuleSpawnPerUnit*                 SpawnPerUnitModule;                                         // 0x0010   (0x0008)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0028   (0x0008)  MISSED
	FGPUSpriteLocalVectorFieldInfo                     LocalVectorField;                                           // 0x0030   (0x0070)  
	FFloatDistribution                                 VectorFieldScale;                                           // 0x00A0   (0x0020)  
	FFloatDistribution                                 DragCoefficient;                                            // 0x00C0   (0x0020)  
	FFloatDistribution                                 PointAttractorStrength;                                     // 0x00E0   (0x0020)  
	FFloatDistribution                                 Resilience;                                                 // 0x0100   (0x0020)  
	FVector                                            ConstantAcceleration;                                       // 0x0120   (0x000C)  
	FVector                                            PointAttractorPosition;                                     // 0x012C   (0x000C)  
	float                                              PointAttractorRadiusSq;                                     // 0x0138   (0x0004)  
	FVector                                            OrbitOffsetBase;                                            // 0x013C   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x0148   (0x000C)  
	FVector2D                                          InvMaxSize;                                                 // 0x0154   (0x0008)  
	float                                              InvRotationRateScale;                                       // 0x015C   (0x0004)  
	float                                              MaxLifetime;                                                // 0x0160   (0x0004)  
	int32_t                                            MaxParticleCount;                                           // 0x0164   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0168   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0169   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x016A   (0x0002)  MISSED
	bool                                               bEnableCollision : 1;                                       // 0x016C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x016D   (0x0003)  MISSED
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x0170   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0171   (0x0003)  MISSED
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0174:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0175   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0178   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x017C   (0x0004)  
	FRawDistributionVector                             DynamicColor;                                               // 0x0180   (0x0048)  
	FRawDistributionFloat                              DynamicAlpha;                                               // 0x01C8   (0x0030)  
	FRawDistributionVector                             DynamicColorScale;                                          // 0x01F8   (0x0048)  
	FRawDistributionFloat                              DynamicAlphaScale;                                          // 0x0240   (0x0030)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0270   (0x0010)  MISSED
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align 16 pad: 0x0000
struct FGPUSpriteResourceData
{ 
	TArray<FColor>                                     QuantizedColorSamples;                                      // 0x0000   (0x0010)  
	TArray<FColor>                                     QuantizedMiscSamples;                                       // 0x0010   (0x0010)  
	TArray<FColor>                                     QuantizedSimulationAttrSamples;                             // 0x0020   (0x0010)  
	FVector4                                           ColorScale;                                                 // 0x0030   (0x0010)  
	FVector4                                           ColorBias;                                                  // 0x0040   (0x0010)  
	FVector4                                           MiscScale;                                                  // 0x0050   (0x0010)  
	FVector4                                           MiscBias;                                                   // 0x0060   (0x0010)  
	FVector4                                           SimulationAttrCurveScale;                                   // 0x0070   (0x0010)  
	FVector4                                           SimulationAttrCurveBias;                                    // 0x0080   (0x0010)  
	FVector4                                           SubImageSize;                                               // 0x0090   (0x0010)  
	FVector4                                           SizeBySpeed;                                                // 0x00A0   (0x0010)  
	FVector                                            ConstantAcceleration;                                       // 0x00B0   (0x000C)  
	FVector                                            OrbitOffsetBase;                                            // 0x00BC   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x00C8   (0x000C)  
	FVector                                            OrbitFrequencyBase;                                         // 0x00D4   (0x000C)  
	FVector                                            OrbitFrequencyRange;                                        // 0x00E0   (0x000C)  
	FVector                                            OrbitPhaseBase;                                             // 0x00EC   (0x000C)  
	FVector                                            OrbitPhaseRange;                                            // 0x00F8   (0x000C)  
	float                                              GlobalVectorFieldScale;                                     // 0x0104   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0108   (0x0004)  
	float                                              PerParticleVectorFieldScale;                                // 0x010C   (0x0004)  
	float                                              PerParticleVectorFieldBias;                                 // 0x0110   (0x0004)  
	float                                              DragCoefficientScale;                                       // 0x0114   (0x0004)  
	float                                              DragCoefficientBias;                                        // 0x0118   (0x0004)  
	float                                              ResilienceScale;                                            // 0x011C   (0x0004)  
	float                                              ResilienceBias;                                             // 0x0120   (0x0004)  
	float                                              CollisionRadiusScale;                                       // 0x0124   (0x0004)  
	float                                              CollisionRadiusBias;                                        // 0x0128   (0x0004)  
	float                                              CollisionTimeBias;                                          // 0x012C   (0x0004)  
	float                                              CollisionRandomSpread;                                      // 0x0130   (0x0004)  
	float                                              CollisionRandomDistribution;                                // 0x0134   (0x0004)  
	float                                              OneMinusFriction;                                           // 0x0138   (0x0004)  
	float                                              RotationRateScale;                                          // 0x013C   (0x0004)  
	float                                              CameraMotionBlurAmount;                                     // 0x0140   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0144   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0145   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0146   (0x0002)  MISSED
	FVector2D                                          PivotOffset;                                                // 0x0148   (0x0008)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0151   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0154   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x0158   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x015C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x03F0 (1008 bytes) (0x000030 - 0x000420) align 16 pad: 0x0000
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
public:
	FGPUSpriteEmitterInfo                              EmitterInfo;                                                // 0x0030   (0x0280)  
	FGPUSpriteResourceData                             ResourceData;                                               // 0x02B0   (0x0160)  
	float                                              CameraMotionBlurAmount;                                     // 0x0410   (0x0004)  
	bool                                               bClearExistingParticlesOnInit : 1;                          // 0x0414:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0xB];                                       // 0x0415   (0x000B)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000098) align 8 pad: 0x0000
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
public:
	class UStaticMesh*                                 Mesh;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0038   (0x0008)  MISSED
	float                                              LODSizeScale;                                               // 0x0040   (0x0004)  
	bool                                               bUseStaticMeshLODs : 1;                                     // 0x0044:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x0044:1 (0x0001)  
	bool                                               DoCollisions : 1;                                           // 0x0044:2 (0x0001)  
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                              // 0x0045   (0x0001)  
	bool                                               bOverrideMaterial : 1;                                      // 0x0046:0 (0x0001)  
	bool                                               bOverrideDefaultMotionBlurSettings : 1;                     // 0x0046:1 (0x0001)  
	bool                                               bEnableMotionBlur : 1;                                      // 0x0046:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0047   (0x0001)  MISSED
	FRawDistributionVector                             RollPitchYawRange;                                          // 0x0048   (0x0048)  
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                             // 0x0090   (0x0001)  
	bool                                               bCameraFacing : 1;                                          // 0x0091:0 (0x0001)  
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                   // 0x0092   (0x0001)  
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                         // 0x0093   (0x0001)  
	bool                                               bApplyParticleRotationAsSpin : 1;                           // 0x0094:0 (0x0001)  
	bool                                               bFaceCameraDirectionRatherThanPosition : 1;                 // 0x0094:1 (0x0001)  
	bool                                               bCollisionsConsiderPartilceSize : 1;                        // 0x0094:2 (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0095   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000060) align 8 pad: 0x0000
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
public:
	int32_t                                            MaxTessellationBetweenParticles;                            // 0x0030   (0x0004)  
	int32_t                                            SheetsPerTrail;                                             // 0x0034   (0x0004)  
	int32_t                                            MaxTrailCount;                                              // 0x0038   (0x0004)  
	int32_t                                            MaxParticleInTrailCount;                                    // 0x003C   (0x0004)  
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0040:0 (0x0001)  
	bool                                               bDeadTrailsOnSourceLoss : 1;                                // 0x0040:1 (0x0001)  
	bool                                               bClipSourceSegement : 1;                                    // 0x0040:2 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0040:3 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0040:4 (0x0001)  
	bool                                               bSpawnInitialParticle : 1;                                  // 0x0040:5 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              TangentSpawningScalar;                                      // 0x0048   (0x0004)  
	bool                                               bRenderGeometry : 1;                                        // 0x004C:0 (0x0001)  
	bool                                               bRenderSpawnPoints : 1;                                     // 0x004C:1 (0x0001)  
	bool                                               bRenderTangents : 1;                                        // 0x004C:2 (0x0001)  
	bool                                               bRenderTessellation : 1;                                    // 0x004C:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0050   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0054   (0x0004)  
	bool                                               bEnableTangentDiffInterpScale : 1;                          // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              TangentTessellationScalar;                                  // 0x005C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0000 (0 bytes) (0x000030 - 0x000030) align 8 pad: 0x0000
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
public:
	bool                                               bOverrideGlobalVectorFieldTightness : 1;                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              GlobalVectorFieldScale;                                     // 0x0034   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0030   (0x0008)  
	FVector                                            RelativeTranslation;                                        // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0050   (0x000C)  
	float                                              Intensity;                                                  // 0x005C   (0x0004)  
	float                                              Tightness;                                                  // 0x0060   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x0064:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x0064:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x0064:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x0064:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x0064:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0018 (24 bytes) (0x000030 - 0x000048) align 8 pad: 0x0000
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            MinInitialRotation;                                         // 0x0030   (0x000C)  
	FVector                                            MaxInitialRotation;                                         // 0x003C   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            RotationRate;                                               // 0x0030   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScale;                                           // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleRaw;                                        // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                   // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleOverLifeRaw;                                // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UParticleModuleVelocityBase : public UParticleModule
{ 
public:
	bool                                               bInWorldSpace : 1;                                          // 0x0030:0 (0x0001)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x0078 (120 bytes) (0x000038 - 0x0000B0) align 8 pad: 0x0000
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             StartVelocity;                                              // 0x0038   (0x0048)  
	FRawDistributionFloat                              StartVelocityRadial;                                        // 0x0080   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x0020 (32 bytes) (0x0000B0 - 0x0000D0) align 8 pad: 0x0000
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x0070 (112 bytes) (0x000038 - 0x0000A8) align 8 pad: 0x0000
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionFloat                              Angle;                                                      // 0x0038   (0x0030)  
	FRawDistributionFloat                              Velocity;                                                   // 0x0068   (0x0030)  
	FVector                                            Direction;                                                  // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             Scale;                                                      // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000088) align 8 pad: 0x0000
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             VelOverLife;                                                // 0x0038   (0x0048)  
	bool                                               Absolute : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x0000 (0 bytes) (0x0001B8 - 0x0001B8) align 8 pad: 0x0000
class UParticleSpriteEmitter : public UParticleEmitter
{ 
public:
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 16 pad: 0x0000
struct FParticleSysParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<EParticleSysParamType>                 ParamType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              Scalar;                                                     // 0x000C   (0x0004)  
	float                                              Scalar_Low;                                                 // 0x0010   (0x0004)  
	FVector                                            Vector;                                                     // 0x0014   (0x000C)  
	FVector                                            Vector_Low;                                                 // 0x0020   (0x000C)  
	FColor                                             Color;                                                      // 0x002C   (0x0004)  
	class AActor*                                      Actor;                                                      // 0x0030   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0040   (0x0040)  MISSED
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x0260 (608 bytes) (0x000450 - 0x0006B0) align 16 pad: 0x0000
class UParticleSystemComponent : public UFXSystemComponent
{ 
public:
	class UParticleSystem*                             Template;                                                   // 0x0450   (0x0008)  
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                           // 0x0458   (0x0010)  
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                         // 0x0468   (0x0010)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0478   (0x0001)  MISSED
	bool                                               bResetOnDetach : 1;                                         // 0x0479:0 (0x0001)  
	bool                                               bUpdateOnDedicatedServer : 1;                               // 0x0479:1 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x0479:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0479:3 (0x0001)  MISSED
	bool                                               bAllowRecycling : 1;                                        // 0x0479:4 (0x0001)  
	bool                                               bAutoManageAttachment : 1;                                  // 0x0479:5 (0x0001)  
	bool                                               bAutoAttachWeldSimulatedBodies : 1;                         // 0x0479:6 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0479:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit04 : 1;                                           // 0x047A:0 (0x0001)  MISSED
	bool                                               bWarmingUp : 1;                                             // 0x047A:1 (0x0001)  
	bool                                               bOverrideLODMethod : 1;                                     // 0x047A:2 (0x0001)  
	bool                                               bSkipUpdateDynamicDataDuringTick : 1;                       // 0x047A:3 (0x0001)  
	unsigned char                                      UnknownData05_5[0xA];                                       // 0x047B   (0x000A)  MISSED
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x0485   (0x0001)  
	EParticleSignificanceLevel                         RequiredSignificance;                                       // 0x0486   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0487   (0x0001)  MISSED
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x0488   (0x0010)  
	SDK_UNDEFINED(16,173) /* FMulticastInlineDelegate */ __um(OnParticleSpawn);                                    // 0x0498   (0x0010)  
	SDK_UNDEFINED(16,174) /* FMulticastInlineDelegate */ __um(OnParticleBurst);                                    // 0x04A8   (0x0010)  
	SDK_UNDEFINED(16,175) /* FMulticastInlineDelegate */ __um(OnParticleDeath);                                    // 0x04B8   (0x0010)  
	SDK_UNDEFINED(16,176) /* FMulticastInlineDelegate */ __um(OnParticleCollide);                                  // 0x04C8   (0x0010)  
	bool                                               bOldPositionValid;                                          // 0x04D8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x04D9   (0x0003)  MISSED
	FVector                                            OldPosition;                                                // 0x04DC   (0x000C)  
	FVector                                            PartSysVelocity;                                            // 0x04E8   (0x000C)  
	float                                              WarmupTime;                                                 // 0x04F4   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x04F8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x04FC   (0x0004)  MISSED
	float                                              SecondsBeforeInactive;                                      // 0x0500   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0504   (0x0004)  MISSED
	float                                              MaxTimeBeforeForceUpdateTransform;                          // 0x0508   (0x0004)  
	unsigned char                                      UnknownData10_6[0x1C];                                      // 0x050C   (0x001C)  MISSED
	TArray<class UParticleSystemReplay*>               ReplayClips;                                                // 0x0528   (0x0010)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0538   (0x0008)  MISSED
	float                                              CustomTimeDilation;                                         // 0x0540   (0x0004)  
	unsigned char                                      UnknownData12_6[0x54];                                      // 0x0544   (0x0054)  MISSED
	SDK_UNDEFINED(8,177) /* TWeakObjectPtr<USceneComponent*> */ __um(AutoAttachParent);                            // 0x0598   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x05A0   (0x0008)  
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x05A8   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x05A9   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x05AA   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2D];                                      // 0x05AB   (0x002D)  MISSED
	SDK_UNDEFINED(16,178) /* FMulticastInlineDelegate */ __um(OnSystemFinished);                                   // 0x05D8   (0x0010)  
	unsigned char                                      UnknownData14_7[0xC8];                                      // 0x05E8   (0x00C8)  MISSED


	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	// void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x41052c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	// void SetTemplate(class UParticleSystem* NewTemplate);                                                                    // [0x4105230] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	// void SetMaterialParameter(FName ParameterName, class UMaterialInterface* Param);                                         // [0x4105160] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	// void SetBeamTargetTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t TargetIndex);                           // [0x4104c10] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	// void SetBeamTargetStrength(int32_t EmitterIndex, float NewTargetStrength, int32_t TargetIndex);                          // [0x4104b00] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	// void SetBeamTargetPoint(int32_t EmitterIndex, FVector NewTargetPoint, int32_t TargetIndex);                              // [0x41049e0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	// void SetBeamSourceTangent(int32_t EmitterIndex, FVector NewTangentPoint, int32_t SourceIndex);                           // [0x41048c0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	// void SetBeamSourceStrength(int32_t EmitterIndex, float NewSourceStrength, int32_t SourceIndex);                          // [0x41047b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	// void SetBeamSourcePoint(int32_t EmitterIndex, FVector NewSourcePoint, int32_t SourceIndex);                              // [0x4104690] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	// void SetBeamEndPoint(int32_t EmitterIndex, FVector NewEndPoint);                                                         // [0x41045b0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	// void SetAutoAttachParams(class USceneComponent* Parent, FName SocketName, TEnumAsByte<EAttachLocation> LocationType);    // [0x41042e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	// int32_t GetNumActiveParticles();                                                                                         // [0x41041e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	// class UMaterialInterface* GetNamedMaterial(FName InName);                                                                // [0x4104140] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	// bool GetBeamTargetTangent(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTangentPoint);                          // [0x4103ff0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	// bool GetBeamTargetStrength(int32_t EmitterIndex, int32_t TargetIndex, float& OutTargetStrength);                         // [0x4103ed0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	// bool GetBeamTargetPoint(int32_t EmitterIndex, int32_t TargetIndex, FVector& OutTargetPoint);                             // [0x4103db0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	// bool GetBeamSourceTangent(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutTangentPoint);                          // [0x4103c90] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	// bool GetBeamSourceStrength(int32_t EmitterIndex, int32_t SourceIndex, float& OutSourceStrength);                         // [0x4103b70] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	// bool GetBeamSourcePoint(int32_t EmitterIndex, int32_t SourceIndex, FVector& OutSourcePoint);                             // [0x4103a50] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	// bool GetBeamEndPoint(int32_t EmitterIndex, FVector& OutEndPoint);                                                        // [0x4103960] Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	// void GenerateParticleEvent(FName InEventName, float InEmitterTime, FVector InLocation, FVector InDirection, FVector InVelocity); // [0x41037a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	// void EndTrails();                                                                                                        // [0x4103780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	// class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, class UMaterialInterface* SourceMaterial); // [0x41036b0] Native|Public|BlueprintCallable 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	// void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth); // [0x41034b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UParticleSystemReplay : public UObject
{ 
public:
	int32_t                                            ClipIDNumber;                                               // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x002C   (0x0014)  MISSED
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UPathFollowingAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x0028 (40 bytes) (0x0000B0 - 0x0000D8) align 8 pad: 0x0000
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
public:
	bool                                               bAIPerceptionSystemCompatibilityMode : 1;                   // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	FVector                                            LastRemoteNoisePosition;                                    // 0x00B4   (0x000C)  
	float                                              NoiseLifetime;                                              // 0x00C0   (0x0004)  
	float                                              LastRemoteNoiseVolume;                                      // 0x00C4   (0x0004)  
	float                                              LastRemoteNoiseTime;                                        // 0x00C8   (0x0004)  
	float                                              LastLocalNoiseVolume;                                       // 0x00CC   (0x0004)  
	float                                              LastLocalNoiseTime;                                         // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00D4   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	// void MakeNoise(class AActor* NoiseMaker, float Loudness, FVector& NoiseLocation);                                        // [0x4109210] BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0040 (64 bytes) (0x0000B0 - 0x0000F0) align 8 pad: 0x0000
class UPhysicalAnimationComponent : public UActorComponent
{ 
public:
	float                                              StrengthMultiplyer;                                         // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x00C0   (0x0030)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	// void SetStrengthMultiplyer(float InStrengthMultiplyer);                                                                  // [0x410af30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	// void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);                                    // [0x410aea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	// FTransform GetBodyTargetTransform(FName BodyName);                                                                       // [0x4108b50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	// void ApplyPhysicalAnimationSettingsBelow(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf); // [0x4108930] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	// void ApplyPhysicalAnimationSettings(FName BodyName, FPhysicalAnimationData& PhysicalAnimationData);                      // [0x4108840] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	// void ApplyPhysicalAnimationProfileBelow(FName BodyName, FName ProfileName, bool bIncludeSelf, bool bClearNotFound);      // [0x41086e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UPhysicalMaterialMask : public UObject
{ 
public:
	int32_t                                            UVChannelIndex;                                             // 0x0028   (0x0004)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x002C   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x002D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FSolverIterations
{ 
	float                                              FixedTimeStep;                                              // 0x0000   (0x0004)  
	int32_t                                            SolverIterations;                                           // 0x0004   (0x0004)  
	int32_t                                            JointIterations;                                            // 0x0008   (0x0004)  
	int32_t                                            CollisionIterations;                                        // 0x000C   (0x0004)  
	int32_t                                            SolverPushOutIterations;                                    // 0x0010   (0x0004)  
	int32_t                                            JointPushOutIterations;                                     // 0x0014   (0x0004)  
	int32_t                                            CollisionPushOutIterations;                                 // 0x0018   (0x0004)  
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0110 (272 bytes) (0x000028 - 0x000138) align 8 pad: 0x0000
class UPhysicsAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<int32_t>                                    BoundsBodies;                                               // 0x0030   (0x0010)  
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                         // 0x0040   (0x0010)  
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                            // 0x0050   (0x0010)  
	FSolverIterations                                  SolverIterations;                                           // 0x0060   (0x001C)  
	EPhysicsAssetSolverType                            SolverType;                                                 // 0x007C   (0x0001)  
	bool                                               bNotForDedicatedServer : 1;                                 // 0x007D:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0xA2];                                      // 0x007E   (0x00A2)  MISSED
	class UThumbnailInfo*                              ThumbnailInfo;                                              // 0x0120   (0x0008)  
	TArray<class UBodySetup*>                          BodySetup;                                                  // 0x0128   (0x0010)  
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FPhysicalAnimationData
{ 
	FName                                              BodyName;                                                   // 0x0000   (0x0008)  
	bool                                               bIsLocalSimulation : 1;                                     // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              OrientationStrength;                                        // 0x000C   (0x0004)  
	float                                              AngularVelocityStrength;                                    // 0x0010   (0x0004)  
	float                                              PositionStrength;                                           // 0x0014   (0x0004)  
	float                                              VelocityStrength;                                           // 0x0018   (0x0004)  
	float                                              MaxLinearForce;                                             // 0x001C   (0x0004)  
	float                                              MaxAngularForce;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align 4 pad: 0x0000
struct FPhysicalAnimationProfile
{ 
	FName                                              ProfileName;                                                // 0x0000   (0x0008)  
	FPhysicalAnimationData                             PhysicalAnimationData;                                      // 0x0008   (0x0024)  
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0018 (24 bytes) (0x0002A0 - 0x0002B8) align 8 pad: 0x0000
class USkeletalBodySetup : public UBodySetup
{ 
public:
	bool                                               bSkipScaleFromAnimation;                                    // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02A1   (0x0007)  MISSED
	TArray<FPhysicalAnimationProfile>                  PhysicalAnimationData;                                      // 0x02A8   (0x0010)  
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UPhysicsCollisionHandler : public UObject
{ 
public:
	float                                              ImpactThreshold;                                            // 0x0028   (0x0004)  
	float                                              ImpactReFireDelay;                                          // 0x002C   (0x0004)  
	class USoundBase*                                  DefaultImpactSound;                                         // 0x0030   (0x0008)  
	float                                              LastImpactSoundTime;                                        // 0x0038   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x0000 (0 bytes) (0x000220 - 0x000220) align 8 pad: 0x0000
class ARigidBodyBase : public AActor
{ 
public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x0020 (32 bytes) (0x000220 - 0x000240) align 8 pad: 0x0000
class APhysicsConstraintActor : public ARigidBodyBase
{ 
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                             // 0x0220   (0x0008)  
	class AActor*                                      ConstraintActor1;                                           // 0x0228   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x0230   (0x0008)  
	bool                                               bDisableCollision : 1;                                      // 0x0238:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0239   (0x0007)  MISSED
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FConstrainComponentPropName
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.ConstraintInstanceBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FConstraintInstanceBase
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FConstraintBaseParams
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              Restitution;                                                // 0x0008   (0x0004)  
	float                                              ContactDistance;                                            // 0x000C   (0x0004)  
	bool                                               bSoftConstraint : 1;                                        // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x0008 (8 bytes) (0x000014 - 0x00001C) align 4 pad: 0x0000
struct FLinearConstraint : FConstraintBaseParams
{ 
	float                                              Limit;                                                      // 0x0014   (0x0004)  
	TEnumAsByte<ELinearConstraintMotion>               XMotion;                                                    // 0x0018   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               YMotion;                                                    // 0x0019   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               ZMotion;                                                    // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x000C (12 bytes) (0x000014 - 0x000020) align 4 pad: 0x0000
struct FConeConstraint : FConstraintBaseParams
{ 
	float                                              Swing1LimitDegrees;                                         // 0x0014   (0x0004)  
	float                                              Swing2LimitDegrees;                                         // 0x0018   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              Swing1Motion;                                               // 0x001C   (0x0001)  
	TEnumAsByte<EAngularConstraintMotion>              Swing2Motion;                                               // 0x001D   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x0008 (8 bytes) (0x000014 - 0x00001C) align 4 pad: 0x0000
struct FTwistConstraint : FConstraintBaseParams
{ 
	float                                              TwistLimitDegrees;                                          // 0x0014   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              TwistMotion;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FConstraintDrive
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              MaxForce;                                                   // 0x0008   (0x0004)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x000C:0 (0x0001)  
	bool                                               bEnableVelocityDrive : 1;                                   // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FLinearDriveConstraint
{ 
	FVector                                            PositionTarget;                                             // 0x0000   (0x000C)  
	FVector                                            VelocityTarget;                                             // 0x000C   (0x000C)  
	FConstraintDrive                                   XDrive;                                                     // 0x0018   (0x0010)  
	FConstraintDrive                                   YDrive;                                                     // 0x0028   (0x0010)  
	FConstraintDrive                                   ZDrive;                                                     // 0x0038   (0x0010)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FAngularDriveConstraint
{ 
	FConstraintDrive                                   TwistDrive;                                                 // 0x0000   (0x0010)  
	FConstraintDrive                                   SwingDrive;                                                 // 0x0010   (0x0010)  
	FConstraintDrive                                   SlerpDrive;                                                 // 0x0020   (0x0010)  
	FRotator                                           OrientationTarget;                                          // 0x0030   (0x000C)  
	FVector                                            AngularVelocityTarget;                                      // 0x003C   (0x000C)  
	TEnumAsByte<EAngularDriveMode>                     AngularDriveMode;                                           // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x0114 (276 bytes) (0x000000 - 0x000114) align 4 pad: 0x0000
struct FConstraintProfileProperties
{ 
	float                                              ProjectionLinearTolerance;                                  // 0x0000   (0x0004)  
	float                                              ProjectionAngularTolerance;                                 // 0x0004   (0x0004)  
	float                                              ProjectionLinearAlpha;                                      // 0x0008   (0x0004)  
	float                                              ProjectionAngularAlpha;                                     // 0x000C   (0x0004)  
	float                                              LinearBreakThreshold;                                       // 0x0010   (0x0004)  
	float                                              LinearPlasticityThreshold;                                  // 0x0014   (0x0004)  
	float                                              AngularBreakThreshold;                                      // 0x0018   (0x0004)  
	float                                              AngularPlasticityThreshold;                                 // 0x001C   (0x0004)  
	FLinearConstraint                                  LinearLimit;                                                // 0x0020   (0x001C)  
	FConeConstraint                                    ConeLimit;                                                  // 0x003C   (0x0020)  
	FTwistConstraint                                   TwistLimit;                                                 // 0x005C   (0x001C)  
	FLinearDriveConstraint                             LinearDrive;                                                // 0x0078   (0x004C)  
	FAngularDriveConstraint                            AngularDrive;                                               // 0x00C4   (0x004C)  
	bool                                               bDisableCollision : 1;                                      // 0x0110:0 (0x0001)  
	bool                                               bParentDominates : 1;                                       // 0x0110:1 (0x0001)  
	bool                                               bEnableProjection : 1;                                      // 0x0110:2 (0x0001)  
	bool                                               bEnableSoftProjection : 1;                                  // 0x0110:3 (0x0001)  
	bool                                               bAngularBreakable : 1;                                      // 0x0110:4 (0x0001)  
	bool                                               bAngularPlasticity : 1;                                     // 0x0110:5 (0x0001)  
	bool                                               bLinearBreakable : 1;                                       // 0x0110:6 (0x0001)  
	bool                                               bLinearPlasticity : 1;                                      // 0x0110:7 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0111   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01B0 (432 bytes) (0x000018 - 0x0001C8) align 8 pad: 0x0000
struct FConstraintInstance : FConstraintInstanceBase
{ 
	FName                                              JointName;                                                  // 0x0018   (0x0008)  
	FName                                              ConstraintBone1;                                            // 0x0020   (0x0008)  
	FName                                              ConstraintBone2;                                            // 0x0028   (0x0008)  
	FVector                                            Pos1;                                                       // 0x0030   (0x000C)  
	FVector                                            PriAxis1;                                                   // 0x003C   (0x000C)  
	FVector                                            SecAxis1;                                                   // 0x0048   (0x000C)  
	FVector                                            Pos2;                                                       // 0x0054   (0x000C)  
	FVector                                            PriAxis2;                                                   // 0x0060   (0x000C)  
	FVector                                            SecAxis2;                                                   // 0x006C   (0x000C)  
	FRotator                                           AngularRotationOffset;                                      // 0x0078   (0x000C)  
	bool                                               bScaleLinearLimits : 1;                                     // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0085   (0x0007)  MISSED
	FConstraintProfileProperties                       ProfileInstance;                                            // 0x008C   (0x0114)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x01A0   (0x0028)  MISSED
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0218 (536 bytes) (0x0001F8 - 0x000410) align 16 pad: 0x0000
class UPhysicsConstraintComponent : public USceneComponent
{ 
public:
	class AActor*                                      ConstraintActor1;                                           // 0x01F8   (0x0008)  
	FConstrainComponentPropName                        ComponentName1;                                             // 0x0200   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x0208   (0x0008)  
	FConstrainComponentPropName                        ComponentName2;                                             // 0x0210   (0x0008)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0218   (0x0010)  MISSED
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                            // 0x0228   (0x0008)  
	SDK_UNDEFINED(16,179) /* FMulticastInlineDelegate */ __um(OnConstraintBroken);                                 // 0x0230   (0x0010)  
	FConstraintInstance                                ConstraintInstance;                                         // 0x0240   (0x01C8)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0408   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	// void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                                   // [0x410add0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	// void SetOrientationDriveSLERP(bool bEnableSLERP);                                                                        // [0x410ad40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	// void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x410ac70] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	// void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x410aba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	// void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);                              // [0x410aad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	// void SetLinearVelocityTarget(FVector& InVelTarget);                                                                      // [0x410aa40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	// void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x410a910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	// void SetLinearPositionTarget(FVector& InPosTarget);                                                                      // [0x410a880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	// void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);                                 // [0x410a750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPlasticity
	// void SetLinearPlasticity(bool bLinearPlasticity, float LinearPlasticityThreshold);                                       // [0x410a680] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	// void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                           // [0x410a560] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	// void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);                                              // [0x410a490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	// void SetDisableCollision(bool bDisableCollision);                                                                        // [0x410a400] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	// void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, FVector& RefPosition);                          // [0x410a330] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	// void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, FVector& PriAxis, FVector& SecAxis);         // [0x410a200] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	// void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, FTransform& RefFrame);                             // [0x410a0e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	// void SetConstrainedComponents(class UPrimitiveComponent* Component1, FName BoneName1, class UPrimitiveComponent* Component2, FName BoneName2); // [0x4109f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	// void SetAngularVelocityTarget(FVector& InVelTarget);                                                                     // [0x4109e20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	// void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);                               // [0x4109d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	// void SetAngularVelocityDriveSLERP(bool bEnableSLERP);                                                                    // [0x4109cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	// void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                            // [0x4109bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	// void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);                  // [0x4109b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	// void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);                    // [0x4109a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	// void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);                    // [0x4109980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularPlasticity
	// void SetAngularPlasticity(bool bAngularPlasticity, float AngularPlasticityThreshold);                                    // [0x41098b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	// void SetAngularOrientationTarget(FRotator& InPosTarget);                                                                 // [0x4109820] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	// void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);                                         // [0x4109750] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	// void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);                          // [0x4109630] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	// void SetAngularDriveMode(TEnumAsByte<EAngularDriveMode> DriveMode);                                                      // [0x41095b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	// void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);                                           // [0x41094e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	// bool IsBroken();                                                                                                         // [0x4108fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	// float GetCurrentTwist();                                                                                                 // [0x4108d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	// float GetCurrentSwing2();                                                                                                // [0x4108d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	// float GetCurrentSwing1();                                                                                                // [0x4108d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	// void GetConstraintForce(FVector& OutLinearForce, FVector& OutAngularForce);                                              // [0x4108c10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	// void BreakConstraint();                                                                                                  // [0x4108a70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x011C (284 bytes) (0x000000 - 0x00011C) align 4 pad: 0x0000
struct FPhysicsConstraintProfileHandle
{ 
	FConstraintProfileProperties                       ProfileProperties;                                          // 0x0000   (0x0114)  
	FName                                              ProfileName;                                                // 0x0114   (0x0008)  
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x02F0 (752 bytes) (0x000028 - 0x000318) align 8 pad: 0x0000
class UPhysicsConstraintTemplate : public UObject
{ 
public:
	FConstraintInstance                                DefaultInstance;                                            // 0x0028   (0x01C8)  
	TArray<FPhysicsConstraintProfileHandle>            ProfileHandles;                                             // 0x01F0   (0x0010)  
	FConstraintProfileProperties                       DefaultProfile;                                             // 0x0200   (0x0114)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0314   (0x0004)  MISSED
};

/// Class /Script/Engine.PhysicsFieldComponent
/// Size: 0x0078 (120 bytes) (0x0001F8 - 0x000270) align 16 pad: 0x0000
class UPhysicsFieldComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x01F8   (0x0078)  MISSED
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x000160) align 16 pad: 0x0000
class UPhysicsHandleComponent : public UActorComponent
{ 
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                           // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x00B8   (0x0008)  MISSED
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00C0:0 (0x0001)  MISSED
	bool                                               bSoftAngularConstraint : 1;                                 // 0x00C0:1 (0x0001)  
	bool                                               bSoftLinearConstraint : 1;                                  // 0x00C0:2 (0x0001)  
	bool                                               bInterpolateTarget : 1;                                     // 0x00C0:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	float                                              LinearDamping;                                              // 0x00C4   (0x0004)  
	float                                              LinearStiffness;                                            // 0x00C8   (0x0004)  
	float                                              AngularDamping;                                             // 0x00CC   (0x0004)  
	float                                              AngularStiffness;                                           // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x6C];                                      // 0x00D4   (0x006C)  MISSED
	float                                              InterpolationSpeed;                                         // 0x0140   (0x0004)  
	unsigned char                                      UnknownData04_7[0x1C];                                      // 0x0144   (0x001C)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	// void SetTargetRotation(FRotator NewRotation);                                                                            // [0x410def0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	// void SetTargetLocationAndRotation(FVector NewLocation, FRotator NewRotation);                                            // [0x410de10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	// void SetTargetLocation(FVector NewLocation);                                                                             // [0x410dd80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	// void SetLinearStiffness(float NewLinearStiffness);                                                                       // [0x410dd00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	// void SetLinearDamping(float NewLinearDamping);                                                                           // [0x410dc80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	// void SetInterpolationSpeed(float NewInterpolationSpeed);                                                                 // [0x410dc00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	// void SetAngularStiffness(float NewAngularStiffness);                                                                     // [0x410db80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	// void SetAngularDamping(float NewAngularDamping);                                                                         // [0x410db00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	// void ReleaseComponent();                                                                                                 // [0x2030270] Native|Public|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	// void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, FName InBoneName, FVector Location, FRotator Rotation); // [0x410d880] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	// void GrabComponentAtLocation(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation);              // [0x410d760] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	// void GrabComponent(class UPrimitiveComponent* Component, FName InBoneName, FVector GrabLocation, bool bConstrainRotation); // [0x410d5f0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	// void GetTargetLocationAndRotation(FVector& TargetLocation, FRotator& TargetRotation);                                    // [0x410d510] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	// class UPrimitiveComponent* GetGrabbedComponent();                                                                        // [0x31fa2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FRigidBodyErrorCorrection
{ 
	float                                              PingExtrapolation;                                          // 0x0000   (0x0004)  
	float                                              PingLimit;                                                  // 0x0004   (0x0004)  
	float                                              ErrorPerLinearDifference;                                   // 0x0008   (0x0004)  
	float                                              ErrorPerAngularDifference;                                  // 0x000C   (0x0004)  
	float                                              MaxRestoredStateError;                                      // 0x0010   (0x0004)  
	float                                              MaxLinearHardSnapDistance;                                  // 0x0014   (0x0004)  
	float                                              PositionLerp;                                               // 0x0018   (0x0004)  
	float                                              AngleLerp;                                                  // 0x001C   (0x0004)  
	float                                              LinearVelocityCoefficient;                                  // 0x0020   (0x0004)  
	float                                              AngularVelocityCoefficient;                                 // 0x0024   (0x0004)  
	float                                              ErrorAccumulationSeconds;                                   // 0x0028   (0x0004)  
	float                                              ErrorAccumulationDistanceSq;                                // 0x002C   (0x0004)  
	float                                              ErrorAccumulationSimilarity;                                // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FPhysicalSurfaceName
{ 
	TEnumAsByte<EPhysicalSurface>                      Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FBroadphaseSettings
{ 
	bool                                               bUseMBPOnClient;                                            // 0x0000   (0x0001)  
	bool                                               bUseMBPOnServer;                                            // 0x0001   (0x0001)  
	bool                                               bUseMBPOuterBounds;                                         // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FBox                                               MBPBounds;                                                  // 0x0004   (0x001C)  
	FBox                                               MBPOuterBounds;                                             // 0x0020   (0x001C)  
	uint32_t                                           MBPNumSubdivs;                                              // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align 1 pad: 0x0000
struct FChaosPhysicsSettings
{ 
	EChaosThreadingMode                                DefaultThreadingModel;                                      // 0x0000   (0x0001)  
	EChaosSolverTickMode                               DedicatedThreadTickMode;                                    // 0x0001   (0x0001)  
	EChaosBufferMode                                   DedicatedThreadBufferMode;                                  // 0x0002   (0x0001)  
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x00C0 (192 bytes) (0x0000E0 - 0x0001A0) align 8 pad: 0x0000
class UPhysicsSettings : public UPhysicsSettingsCore
{ 
public:
	FRigidBodyErrorCorrection                          PhysicErrorCorrection;                                      // 0x00E0   (0x0034)  
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                                 // 0x0114   (0x0001)  
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                    // 0x0115   (0x0001)  
	bool                                               bSuppressFaceRemapTable;                                    // 0x0116   (0x0001)  
	bool                                               bSupportUVFromHitResults;                                   // 0x0117   (0x0001)  
	bool                                               bDisableActiveActors;                                       // 0x0118   (0x0001)  
	bool                                               bDisableKinematicStaticPairs;                               // 0x0119   (0x0001)  
	bool                                               bDisableKinematicKinematicPairs;                            // 0x011A   (0x0001)  
	bool                                               bDisableCCD;                                                // 0x011B   (0x0001)  
	bool                                               bEnableEnhancedDeterminism;                                 // 0x011C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	float                                              AnimPhysicsMinDeltaTime;                                    // 0x0120   (0x0004)  
	bool                                               bSimulateAnimPhysicsAfterReset;                             // 0x0124   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	float                                              MaxPhysicsDeltaTime;                                        // 0x0128   (0x0004)  
	bool                                               bSubstepping;                                               // 0x012C   (0x0001)  
	bool                                               bSubsteppingAsync;                                          // 0x012D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x012E   (0x0002)  MISSED
	float                                              MaxSubstepDeltaTime;                                        // 0x0130   (0x0004)  
	int32_t                                            MaxSubsteps;                                                // 0x0134   (0x0004)  
	float                                              SyncSceneSmoothingFactor;                                   // 0x0138   (0x0004)  
	float                                              InitialAverageFrameRate;                                    // 0x013C   (0x0004)  
	int32_t                                            PhysXTreeRebuildRate;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	TArray<FPhysicalSurfaceName>                       PhysicalSurfaces;                                           // 0x0148   (0x0010)  
	FBroadphaseSettings                                DefaultBroadphaseSettings;                                  // 0x0158   (0x0040)  
	float                                              MinDeltaVelocityForHitEvents;                               // 0x0198   (0x0004)  
	FChaosPhysicsSettings                              ChaosSettings;                                              // 0x019C   (0x0003)  
	unsigned char                                      UnknownData04_7[0x1];                                       // 0x019F   (0x0001)  MISSED
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0028 (40 bytes) (0x0001F8 - 0x000220) align 16 pad: 0x0000
class UPhysicsSpringComponent : public USceneComponent
{ 
public:
	float                                              SpringStiffness;                                            // 0x01F8   (0x0004)  
	float                                              SpringDamping;                                              // 0x01FC   (0x0004)  
	float                                              SpringLengthAtRest;                                         // 0x0200   (0x0004)  
	float                                              SpringRadius;                                               // 0x0204   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                              // 0x0208   (0x0001)  
	bool                                               bIgnoreSelf;                                                // 0x0209   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x020A   (0x0002)  MISSED
	float                                              SpringCompression;                                          // 0x020C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0210   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	// FVector GetSpringRestingPoint();                                                                                         // [0x410d4d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	// FVector GetSpringDirection();                                                                                            // [0x410d490] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	// FVector GetSpringCurrentEndPoint();                                                                                      // [0x410d450] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	// float GetNormalizedCompressionScalar();                                                                                  // [0x410d420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class APhysicsThruster : public ARigidBodyBase
{ 
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                          // 0x0220   (0x0008)  
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0008 (8 bytes) (0x0001F8 - 0x000200) align 16 pad: 0x0000
class UPhysicsThrusterComponent : public USceneComponent
{ 
public:
	float                                              ThrustStrength;                                             // 0x01F8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x01FC   (0x0004)  MISSED
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x0010 (16 bytes) (0x000220 - 0x000230) align 8 pad: 0x0000
class ASceneCapture : public AActor
{ 
public:
	class UStaticMeshComponent*                        MeshComp;                                                   // 0x0220   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x0228   (0x0008)  
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x0010 (16 bytes) (0x000230 - 0x000240) align 8 pad: 0x0000
class APlanarReflection : public ASceneCapture
{ 
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                  // 0x0230   (0x0008)  
	bool                                               bShowPreviewPlane;                                          // 0x0238   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0239   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x410da70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FEngineShowFlagsSetting
{ 
	FString                                            ShowFlagName;                                               // 0x0000   (0x0010)  
	bool                                               Enabled;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x00B8 (184 bytes) (0x0001F8 - 0x0002B0) align 16 pad: 0x0000
class USceneCaptureComponent : public USceneComponent
{ 
public:
	ESceneCapturePrimitiveRenderMode                   PrimitiveRenderMode;                                        // 0x01F8   (0x0001)  
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                              // 0x01F9   (0x0001)  
	bool                                               bCaptureEveryFrame : 1;                                     // 0x01FA:0 (0x0001)  
	bool                                               bCaptureOnMovement : 1;                                     // 0x01FA:1 (0x0001)  
	bool                                               bAlwaysPersistRenderingState;                               // 0x01FB   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x01FC   (0x0004)  MISSED
	SDK_UNDEFINED(16,180) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(HiddenComponents);               // 0x0200   (0x0010)  
	TArray<class AActor*>                              HiddenActors;                                               // 0x0210   (0x0010)  
	SDK_UNDEFINED(16,181) /* TArray<TWeakObjectPtr<UPrimitiveComponent*>> */ __um(ShowOnlyComponents);             // 0x0220   (0x0010)  
	TArray<class AActor*>                              ShowOnlyActors;                                             // 0x0230   (0x0010)  
	float                                              LODDistanceFactor;                                          // 0x0240   (0x0004)  
	float                                              MaxViewDistanceOverride;                                    // 0x0244   (0x0004)  
	int32_t                                            CaptureSortPriority;                                        // 0x0248   (0x0004)  
	bool                                               bUseRayTracingIfEnabled;                                    // 0x024C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x024D   (0x0003)  MISSED
	TArray<FEngineShowFlagsSetting>                    ShowFlagSettings;                                           // 0x0250   (0x0010)  
	unsigned char                                      UnknownData02_6[0x30];                                      // 0x0260   (0x0030)  MISSED
	FString                                            ProfilingEventName;                                         // 0x0290   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x02A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	// void ShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                          // [0x4135950] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	// void ShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                       // [0x4135880] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	// void SetCaptureSortPriority(int32_t NewCaptureSortPriority);                                                             // [0x4135420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	// void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);                                                    // [0x4135240] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	// void RemoveShowOnlyActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                 // [0x4135170] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	// void HideComponent(class UPrimitiveComponent* InComponent);                                                              // [0x4132910] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	// void HideActorComponents(class AActor* InActor, bool bIncludeFromChildActors);                                           // [0x4132840] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	// void ClearShowOnlyComponents();                                                                                          // [0x4131f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	// void ClearHiddenComponents();                                                                                            // [0x4131ef0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x00F0 (240 bytes) (0x0002B0 - 0x0003A0) align 16 pad: 0x0000
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x02B0   (0x0008)  
	float                                              NormalDistortionStrength;                                   // 0x02B8   (0x0004)  
	float                                              PrefilterRoughness;                                         // 0x02BC   (0x0004)  
	float                                              PrefilterRoughnessDistance;                                 // 0x02C0   (0x0004)  
	int32_t                                            ScreenPercentage;                                           // 0x02C4   (0x0004)  
	float                                              ExtraFOV;                                                   // 0x02C8   (0x0004)  
	float                                              DistanceFromPlaneFadeStart;                                 // 0x02CC   (0x0004)  
	float                                              DistanceFromPlaneFadeEnd;                                   // 0x02D0   (0x0004)  
	float                                              DistanceFromPlaneFadeoutStart;                              // 0x02D4   (0x0004)  
	float                                              DistanceFromPlaneFadeoutEnd;                                // 0x02D8   (0x0004)  
	float                                              AngleFromPlaneFadeStart;                                    // 0x02DC   (0x0004)  
	float                                              AngleFromPlaneFadeEnd;                                      // 0x02E0   (0x0004)  
	bool                                               bShowPreviewPlane;                                          // 0x02E4   (0x0001)  
	bool                                               bRenderSceneTwoSided;                                       // 0x02E5   (0x0001)  
	unsigned char                                      UnknownData00_7[0xBA];                                      // 0x02E6   (0x00BA)  MISSED
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x0000 (0 bytes) (0x000228 - 0x000228) align 8 pad: 0x0000
class APlaneReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x0020 (32 bytes) (0x000270 - 0x000290) align 16 pad: 0x0000
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadiusScale;                                       // 0x0270   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x0278   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x0280   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x0020 (32 bytes) (0x0000B0 - 0x0000D0) align 8 pad: 0x0000
class UPlatformEventsComponent : public UActorComponent
{ 
public:
	SDK_UNDEFINED(16,182) /* FMulticastInlineDelegate */ __um(PlatformChangedToLaptopModeDelegate);                // 0x00B0   (0x0010)  
	SDK_UNDEFINED(16,183) /* FMulticastInlineDelegate */ __um(PlatformChangedToTabletModeDelegate);                // 0x00C0   (0x0010)  


	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	// bool SupportsConvertibleLaptops();                                                                                       // [0x410df80] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	// void PlatformEventDelegate__DelegateSignature();                                                                         // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	// bool IsInTabletMode();                                                                                                   // [0x410da40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	// bool IsInLaptopMode();                                                                                                   // [0x410da10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x0088 (136 bytes) (0x000028 - 0x0000B0) align 8 pad: 0x0000
class UPlatformInterfaceWebResponse : public UObject
{ 
public:
	FString                                            OriginalURL;                                                // 0x0028   (0x0010)  
	int32_t                                            ResponseCode;                                               // 0x0038   (0x0004)  
	int32_t                                            Tag;                                                        // 0x003C   (0x0004)  
	FString                                            StringResponse;                                             // 0x0040   (0x0010)  
	TArray<char>                                       BinaryResponse;                                             // 0x0050   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0060   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	// int32_t GetNumHeaders();                                                                                                 // [0x1150030] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	// FString GetHeaderValue(FString HeaderName);                                                                              // [0x410d330] Native|Public        
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	// void GetHeader(int32_t HeaderIndex, FString& Header, FString& Value);                                                    // [0x410d1d0] Native|Public|HasOutParms 
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FKeyBind
{ 
	FKey                                               Key;                                                        // 0x0000   (0x0018)  
	FString                                            Command;                                                    // 0x0018   (0x0010)  
	bool                                               Control : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               Shift : 1;                                                  // 0x0028:1 (0x0001)  
	bool                                               Alt : 1;                                                    // 0x0028:2 (0x0001)  
	bool                                               Cmd : 1;                                                    // 0x0028:3 (0x0001)  
	bool                                               bIgnoreCtrl : 1;                                            // 0x0028:4 (0x0001)  
	bool                                               bIgnoreShift : 1;                                           // 0x0028:5 (0x0001)  
	bool                                               bIgnoreAlt : 1;                                             // 0x0028:6 (0x0001)  
	bool                                               bIgnoreCmd : 1;                                             // 0x0028:7 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0029:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x0380 (896 bytes) (0x000028 - 0x0003A8) align 8 pad: 0x0000
class UPlayerInput : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0xF8];                                      // 0x0028   (0x00F8)  MISSED
	TArray<FKeyBind>                                   DebugExecBindings;                                          // 0x0120   (0x0010)  
	unsigned char                                      UnknownData01_6[0x30];                                      // 0x0130   (0x0030)  MISSED
	TArray<FName>                                      InvertedAxis;                                               // 0x0160   (0x0010)  
	unsigned char                                      UnknownData02_7[0x238];                                     // 0x0170   (0x0238)  MISSED


	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	// void SetMouseSensitivity(float Sensitivity);                                                                             // [0x411eeb0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.SetBind
	// void SetBind(FName BindName, FString Command);                                                                           // [0x411e810] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	// void InvertAxisKey(FKey AxisKey);                                                                                        // [0x411e670] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.InvertAxis
	// void InvertAxis(FName AxisName);                                                                                         // [0x411e5e0] Final|Exec|Native|Public 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	// void ClearSmoothing();                                                                                                   // [0x411e100] Final|Exec|Native|Public 
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x0000 (0 bytes) (0x000250 - 0x000250) align 8 pad: 0x0000
class APlayerStartPIE : public APlayerStart
{ 
public:
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x0020 (32 bytes) (0x000080 - 0x0000A0) align 8 pad: 0x0000
class UPluginCommandlet : public UCommandlet
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0080   (0x0020)  MISSED
};

/// Class /Script/Engine.PointLight
/// Size: 0x0008 (8 bytes) (0x000230 - 0x000238) align 8 pad: 0x0000
class APointLight : public ALight
{ 
public:
	class UPointLightComponent*                        PointLightComponent;                                        // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	// void SetRadius(float NewRadius);                                                                                         // [0x411ef40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x411edb0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0020 (32 bytes) (0x000340 - 0x000360) align 16 pad: 0x0008
#pragma pack(push, 0x1)
class UPointLightComponent : public ULocalLightComponent
{ 
public:
	bool                                               bUseInverseSquaredFalloff : 1;                              // 0x0340:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0341   (0x0003)  MISSED
	float                                              LightFalloffExponent;                                       // 0x0344   (0x0004)  
	float                                              SourceRadius;                                               // 0x0348   (0x0004)  
	float                                              SoftSourceRadius;                                           // 0x034C   (0x0004)  
	float                                              SourceLength;                                               // 0x0350   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0354   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	// void SetSourceRadius(float bNewValue);                                                                                   // [0x411f0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	// void SetSourceLength(float NewValue);                                                                                    // [0x411f040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	// void SetSoftSourceRadius(float bNewValue);                                                                               // [0x411efc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	// void SetLightFalloffExponent(float NewLightFalloffExponent);                                                             // [0x411ee30] Final|Native|Public|BlueprintCallable 
};
#pragma pack(pop)

/// Class /Script/Engine.Polys
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UPolys : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x0160 (352 bytes) (0x0006A0 - 0x000800) align 16 pad: 0x0000
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_1[0x160];                                     // 0x06A0   (0x0160)  MISSED


	/// Functions
	// Function /Script/Engine.PoseableMeshComponent.SetBoneTransformByName
	// void SetBoneTransformByName(FName BoneName, FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);                // [0x411ec50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneScaleByName
	// void SetBoneScaleByName(FName BoneName, FVector InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);                          // [0x411eb30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneRotationByName
	// void SetBoneRotationByName(FName BoneName, FRotator InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);                     // [0x411ea10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneLocationByName
	// void SetBoneLocationByName(FName BoneName, FVector InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);                      // [0x411e8f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.ResetBoneTransformByName
	// void ResetBoneTransformByName(FName BoneName);                                                                           // [0x411e780] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneTransformByName
	// FTransform GetBoneTransformByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                   // [0x411e450] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneScaleByName
	// FVector GetBoneScaleByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                          // [0x411e370] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneRotationByName
	// FRotator GetBoneRotationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                      // [0x411e290] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneLocationByName
	// FVector GetBoneLocationByName(FName BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);                                       // [0x411e1b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
	// void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);                                     // [0x411e120] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FPoseData
{ 
	TArray<FTransform>                                 LocalSpacePose;                                             // 0x0000   (0x0010)  
	SDK_UNDEFINED(80,184) /* TMap<int32_t, int32_t> */ __um(TrackToBufferIndex);                                   // 0x0010   (0x0050)  
	TArray<float>                                      CurveData;                                                  // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 8 pad: 0x0000
struct FPoseDataContainer
{ 
	TArray<FSmartName>                                 PoseNames;                                                  // 0x0000   (0x0010)  
	TArray<FName>                                      Tracks;                                                     // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,185) /* TMap<FName, int32_t> */   __um(TrackMap);                                             // 0x0020   (0x0050)  
	TArray<FPoseData>                                  Poses;                                                      // 0x0070   (0x0010)  
	TArray<FAnimCurveBase>                             Curves;                                                     // 0x0080   (0x0010)  
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x00B0 (176 bytes) (0x000080 - 0x000130) align 8 pad: 0x0000
class UPoseAsset : public UAnimationAsset
{ 
public:
	FPoseDataContainer                                 PoseContainer;                                              // 0x0080   (0x0090)  
	bool                                               bAdditivePose;                                              // 0x0110   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	int32_t                                            BasePoseIndex;                                              // 0x0114   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0118   (0x0008)  
	TArray<FTransform>                                 RetargetSourceAssetReferencePose;                           // 0x0120   (0x0010)  
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UPoseWatch : public UObject
{ 
public:
	class UEdGraphNode*                                Node;                                                       // 0x0028   (0x0008)  
	FColor                                             PoseWatchColour;                                            // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x0578 (1400 bytes) (0x000258 - 0x0007D0) align 16 pad: 0x0000
class APostProcessVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0258   (0x0008)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0260   (0x0560)  
	float                                              Priority;                                                   // 0x07C0   (0x0004)  
	float                                              BlendRadius;                                                // 0x07C4   (0x0004)  
	float                                              BlendWeight;                                                // 0x07C8   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x07CC:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x07CC:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x07CD   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x411de60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0030 (48 bytes) (0x000258 - 0x000288) align 8 pad: 0x0000
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                      // 0x0258   (0x0010)  
	TArray<class AActor*>                              OverrideInvisibleActors;                                    // 0x0268   (0x0010)  
	TArray<FName>                                      OverrideInvisibleLevels;                                    // 0x0278   (0x0010)  
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class APrecomputedVisibilityVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UPreviewCollectionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FPreviewMeshCollectionEntry
{ 
	SDK_UNDEFINED(40,186) /* TWeakObjectPtr<USkeletalMesh*> */ __um(SkeletalMesh);                                 // 0x0000   (0x0028)  
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UPreviewMeshCollection : public UDataAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0030   (0x0008)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	TArray<FPreviewMeshCollectionEntry>                SkeletalMeshes;                                             // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCollectionReference
{ 
	FName                                              CollectionName;                                             // 0x0000   (0x0008)  
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000068) align 8 pad: 0x0000
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
public:
	FPrimaryAssetRules                                 Rules;                                                      // 0x0030   (0x000C)  
	bool                                               bLabelAssetsInMyDirectory : 1;                              // 0x003C:0 (0x0001)  
	bool                                               bIsRuntimeLabel : 1;                                        // 0x003C:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	SDK_UNDEFINED(16,187) /* TArray<TWeakObjectPtr<UObject*>> */ __um(ExplicitAssets);                             // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,188) /* TArray<TWeakObjectPtr<UClass*>> */ __um(ExplicitBlueprints);                          // 0x0050   (0x0010)  
	FCollectionReference                               AssetCollection;                                            // 0x0060   (0x0008)  
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              ProxyLODMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ARadialForceActor : public ARigidBodyBase
{ 
public:
	class URadialForceComponent*                       ForceComponent;                                             // 0x0220   (0x0008)  


	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	// void ToggleForce();                                                                                                      // [0x1fb6340] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	// void FireImpulse();                                                                                                      // [0x1781660] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.EnableForce
	// void EnableForce();                                                                                                      // [0x1781680] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceActor.DisableForce
	// void DisableForce();                                                                                                     // [0x17816a0] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0038 (56 bytes) (0x0001F8 - 0x000230) align 16 pad: 0x0000
class URadialForceComponent : public USceneComponent
{ 
public:
	float                                              Radius;                                                     // 0x01F8   (0x0004)  
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                    // 0x01FC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01FD   (0x0003)  MISSED
	float                                              ImpulseStrength;                                            // 0x0200   (0x0004)  
	bool                                               bImpulseVelChange : 1;                                      // 0x0204:0 (0x0001)  
	bool                                               bIgnoreOwningActor : 1;                                     // 0x0204:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0205   (0x0003)  MISSED
	float                                              ForceStrength;                                              // 0x0208   (0x0004)  
	float                                              DestructibleDamage;                                         // 0x020C   (0x0004)  
	SDK_UNDEFINED(16,189) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(ObjectTypesToAffect);                   // 0x0210   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0220   (0x0010)  MISSED


	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	// void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                 // [0x4129940] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	// void FireImpulse();                                                                                                      // [0x31f2380] Native|Public|BlueprintCallable 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	// void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);                                                    // [0x4129690] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RectLight
/// Size: 0x0008 (8 bytes) (0x000230 - 0x000238) align 8 pad: 0x0000
class ARectLight : public ALight
{ 
public:
	class URectLightComponent*                         RectLightComponent;                                         // 0x0230   (0x0008)  
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0020 (32 bytes) (0x000340 - 0x000360) align 16 pad: 0x0000
class URectLightComponent : public ULocalLightComponent
{ 
public:
	float                                              SourceWidth;                                                // 0x0340   (0x0004)  
	float                                              SourceHeight;                                               // 0x0344   (0x0004)  
	float                                              BarnDoorAngle;                                              // 0x0348   (0x0004)  
	float                                              BarnDoorLength;                                             // 0x034C   (0x0004)  
	class UTexture*                                    SourceTexture;                                              // 0x0350   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0358   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.RectLightComponent.SetSourceWidth
	// void SetSourceWidth(float bNewValue);                                                                                    // [0x4129be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceTexture
	// void SetSourceTexture(class UTexture* bNewValue);                                                                        // [0x4129b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetSourceHeight
	// void SetSourceHeight(float NewValue);                                                                                    // [0x411ee30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorLength
	// void SetBarnDoorLength(float NewValue);                                                                                  // [0x4129a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorAngle
	// void SetBarnDoorAngle(float NewValue);                                                                                   // [0x41299c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x0110 (272 bytes) (0x000038 - 0x000148) align 8 pad: 0x0000
class URendererSettings : public UDeveloperSettings
{ 
public:
	bool                                               bMobileDisableVertexFog : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxMobileCascades;                                          // 0x003C   (0x0004)  
	TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount;                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	bool                                               bMobileAllowDitheredLODTransition : 1;                      // 0x0044:0 (0x0001)  
	bool                                               bMobileAllowSoftwareOcclusionCulling : 1;                   // 0x0044:1 (0x0001)  
	bool                                               bMobileVirtualTextures : 1;                                 // 0x0044:2 (0x0001)  
	bool                                               bDiscardUnusedQualityLevels : 1;                            // 0x0044:3 (0x0001)  
	bool                                               bOcclusionCulling : 1;                                      // 0x0044:4 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              MinScreenRadiusForLights;                                   // 0x0048   (0x0004)  
	float                                              MinScreenRadiusForEarlyZPass;                               // 0x004C   (0x0004)  
	float                                              MinScreenRadiusForCSMdepth;                                 // 0x0050   (0x0004)  
	bool                                               bPrecomputedVisibilityWarning : 1;                          // 0x0054:0 (0x0001)  
	bool                                               bTextureStreaming : 1;                                      // 0x0054:1 (0x0001)  
	bool                                               bUseDXT5NormalMaps : 1;                                     // 0x0054:2 (0x0001)  
	bool                                               bVirtualTextures : 1;                                       // 0x0054:3 (0x0001)  
	bool                                               bVirtualTextureEnableAutoImport : 1;                        // 0x0054:4 (0x0001)  
	bool                                               bVirtualTexturedLightmaps : 1;                              // 0x0054:5 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	uint32_t                                           VirtualTextureTileSize;                                     // 0x0058   (0x0004)  
	uint32_t                                           VirtualTextureTileBorderSize;                               // 0x005C   (0x0004)  
	uint32_t                                           VirtualTextureFeedbackFactor;                               // 0x0060   (0x0004)  
	bool                                               bVirtualTextureEnableCompressZlib : 1;                      // 0x0064:0 (0x0001)  
	bool                                               bVirtualTextureEnableCompressCrunch : 1;                    // 0x0064:1 (0x0001)  
	bool                                               bClearCoatEnableSecondNormal : 1;                           // 0x0064:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            ReflectionCaptureResolution;                                // 0x0068   (0x0004)  
	bool                                               bReflectionCaptureCompression : 1;                          // 0x006C:0 (0x0001)  
	bool                                               ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;       // 0x006C:1 (0x0001)  
	bool                                               bForwardShading : 1;                                        // 0x006C:2 (0x0001)  
	bool                                               bVertexFoggingForOpaque : 1;                                // 0x006C:3 (0x0001)  
	bool                                               bAllowStaticLighting : 1;                                   // 0x006C:4 (0x0001)  
	bool                                               bUseNormalMapsForStaticLighting : 1;                        // 0x006C:5 (0x0001)  
	bool                                               bGenerateMeshDistanceFields : 1;                            // 0x006C:6 (0x0001)  
	bool                                               bEightBitMeshDistanceFields : 1;                            // 0x006C:7 (0x0001)  
	bool                                               bGenerateLandscapeGIData : 1;                               // 0x006D:0 (0x0001)  
	bool                                               bCompressMeshDistanceFields : 1;                            // 0x006D:1 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x006E   (0x0002)  MISSED
	float                                              TessellationAdaptivePixelsPerTriangle;                      // 0x0070   (0x0004)  
	bool                                               bSeparateTranslucency : 1;                                  // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                      // 0x0078   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	FVector                                            TranslucentSortAxis;                                        // 0x007C   (0x000C)  
	TEnumAsByte<EFixedFoveationLevels>                 HMDFixedFoveationLevel;                                     // 0x0088   (0x0001)  
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                         // 0x0089   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x008A   (0x0002)  MISSED
	bool                                               bCustomDepthTaaJitter : 1;                                  // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing;                        // 0x0090   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	bool                                               bDefaultFeatureBloom : 1;                                   // 0x0094:0 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusion : 1;                        // 0x0094:1 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusionStaticFraction : 1;          // 0x0094:2 (0x0001)  
	bool                                               bDefaultFeatureAutoExposure : 1;                            // 0x0094:3 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0095   (0x0003)  MISSED
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                                 // 0x0098   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              DefaultFeatureAutoExposureBias;                             // 0x009C   (0x0004)  
	bool                                               bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;     // 0x00A0:0 (0x0001)  
	bool                                               bUsePreExposure : 1;                                        // 0x00A0:1 (0x0001)  
	bool                                               bEnablePreExposureOnlyInTheEditor : 1;                      // 0x00A0:2 (0x0001)  
	bool                                               bDefaultFeatureMotionBlur : 1;                              // 0x00A0:3 (0x0001)  
	bool                                               bDefaultFeatureLensFlare : 1;                               // 0x00A0:4 (0x0001)  
	bool                                               bTemporalUpsampling : 1;                                    // 0x00A0:5 (0x0001)  
	bool                                               bSSGI : 1;                                                  // 0x00A0:6 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                                 // 0x00A4   (0x0001)  
	ELightUnits                                        DefaultLightUnits;                                          // 0x00A5   (0x0001)  
	TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat;                               // 0x00A6   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x00A7   (0x0001)  MISSED
	bool                                               bRenderUnbuiltPreviewShadowsInGame : 1;                     // 0x00A8:0 (0x0001)  
	bool                                               bStencilForLODDither : 1;                                   // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                                 // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	bool                                               bEarlyZPassOnlyMaterialMasking : 1;                         // 0x00B0:0 (0x0001)  
	bool                                               bDBuffer : 1;                                               // 0x00B0:1 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                           // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	bool                                               bBasePassOutputsVelocity : 1;                               // 0x00B8:0 (0x0001)  
	bool                                               bVertexDeformationOutputsVelocity : 1;                      // 0x00B8:1 (0x0001)  
	bool                                               bSelectiveBasePassOutputs : 1;                              // 0x00B8:2 (0x0001)  
	bool                                               bDefaultParticleCutouts : 1;                                // 0x00B8:3 (0x0001)  
	unsigned char                                      UnknownData19_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            GPUSimulationTextureSizeX;                                  // 0x00BC   (0x0004)  
	int32_t                                            GPUSimulationTextureSizeY;                                  // 0x00C0   (0x0004)  
	bool                                               bGlobalClipPlane : 1;                                       // 0x00C4:0 (0x0001)  
	unsigned char                                      UnknownData20_5[0x3];                                       // 0x00C5   (0x0003)  MISSED
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                              // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData21_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	bool                                               bUseGPUMorphTargets : 1;                                    // 0x00CC:0 (0x0001)  
	bool                                               bNvidiaAftermathEnabled : 1;                                // 0x00CC:1 (0x0001)  
	bool                                               bMultiView : 1;                                             // 0x00CC:2 (0x0001)  
	bool                                               bMobilePostProcessing : 1;                                  // 0x00CC:3 (0x0001)  
	bool                                               bMobileMultiView : 1;                                       // 0x00CC:4 (0x0001)  
	bool                                               bMobileUseHWsRGBEncoding : 1;                               // 0x00CC:5 (0x0001)  
	bool                                               bRoundRobinOcclusion : 1;                                   // 0x00CC:6 (0x0001)  
	bool                                               bODSCapture : 1;                                            // 0x00CC:7 (0x0001)  
	bool                                               bMeshStreaming : 1;                                         // 0x00CD:0 (0x0001)  
	unsigned char                                      UnknownData22_5[0x2];                                       // 0x00CE   (0x0002)  MISSED
	float                                              WireframeCullThreshold;                                     // 0x00D0   (0x0004)  
	bool                                               bEnableRayTracing : 1;                                      // 0x00D4:0 (0x0001)  
	bool                                               bEnableRayTracingTextureLOD : 1;                            // 0x00D4:1 (0x0001)  
	bool                                               bSupportStationarySkylight : 1;                             // 0x00D4:2 (0x0001)  
	bool                                               bSupportLowQualityLightmaps : 1;                            // 0x00D4:3 (0x0001)  
	bool                                               bSupportPointLightWholeSceneShadows : 1;                    // 0x00D4:4 (0x0001)  
	bool                                               bSupportAtmosphericFog : 1;                                 // 0x00D4:5 (0x0001)  
	bool                                               bSupportSkyAtmosphere : 1;                                  // 0x00D4:6 (0x0001)  
	bool                                               bSupportSkyAtmosphereAffectsHeightFog : 1;                  // 0x00D4:7 (0x0001)  
	bool                                               bSupportSkinCacheShaders : 1;                               // 0x00D5:0 (0x0001)  
	unsigned char                                      UnknownData23_5[0x2];                                       // 0x00D6   (0x0002)  MISSED
	ESkinCacheDefaultBehavior                          DefaultSkinCacheBehavior;                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x00D9   (0x0003)  MISSED
	float                                              SkinCacheSceneMemoryLimitInMB;                              // 0x00DC   (0x0004)  
	bool                                               bMobileEnableStaticAndCSMShadowReceivers : 1;               // 0x00E0:0 (0x0001)  
	bool                                               bMobileEnableMovableLightCSMShaderCulling : 1;              // 0x00E0:1 (0x0001)  
	bool                                               bMobileAllowDistanceFieldShadows : 1;                       // 0x00E0:2 (0x0001)  
	bool                                               bMobileAllowMovableDirectionalLights : 1;                   // 0x00E0:3 (0x0001)  
	unsigned char                                      UnknownData25_5[0x3];                                       // 0x00E1   (0x0003)  MISSED
	uint32_t                                           MobileNumDynamicPointLights;                                // 0x00E4   (0x0004)  
	bool                                               bMobileDynamicPointLightsUseStaticBranch : 1;               // 0x00E8:0 (0x0001)  
	bool                                               bMobileAllowMovableSpotlights : 1;                          // 0x00E8:1 (0x0001)  
	bool                                               bMobileAllowMovableSpotlightShadows : 1;                    // 0x00E8:2 (0x0001)  
	bool                                               bSupport16BitBoneIndex : 1;                                 // 0x00E8:3 (0x0001)  
	bool                                               bGPUSkinLimit2BoneInfluences : 1;                           // 0x00E8:4 (0x0001)  
	bool                                               bSupportDepthOnlyIndexBuffers : 1;                          // 0x00E8:5 (0x0001)  
	bool                                               bSupportReversedIndexBuffers : 1;                           // 0x00E8:6 (0x0001)  
	bool                                               bLPV : 1;                                                   // 0x00E8:7 (0x0001)  
	bool                                               bMobileAmbientOcclusion : 1;                                // 0x00E9:0 (0x0001)  
	bool                                               bUseUnlimitedBoneInfluences : 1;                            // 0x00E9:1 (0x0001)  
	unsigned char                                      UnknownData26_5[0x2];                                       // 0x00EA   (0x0002)  MISSED
	int32_t                                            UnlimitedBonInfluencesThreshold;                            // 0x00EC   (0x0004)  
	FPerPlatformInt                                    MaxSkinBones;                                               // 0x00F0   (0x0004)  
	TEnumAsByte<EMobilePlanarReflectionMode>           MobilePlanarReflectionMode;                                 // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x00F5   (0x0003)  MISSED
	bool                                               bMobileSupportsGen4TAA : 1;                                 // 0x00F8:0 (0x0001)  
	unsigned char                                      UnknownData28_5[0x3];                                       // 0x00F9   (0x0003)  MISSED
	FPerPlatformBool                                   bStreamSkeletalMeshLODs;                                    // 0x00FC   (0x0001)  
	FPerPlatformBool                                   bDiscardSkeletalMeshOptionalLODs;                           // 0x00FD   (0x0001)  
	unsigned char                                      UnknownData29_6[0x2];                                       // 0x00FE   (0x0002)  MISSED
	FSoftObjectPath                                    VisualizeCalibrationColorMaterialPath;                      // 0x0100   (0x0018)  
	FSoftObjectPath                                    VisualizeCalibrationCustomMaterialPath;                     // 0x0118   (0x0018)  
	FSoftObjectPath                                    VisualizeCalibrationGrayscaleMaterialPath;                  // 0x0130   (0x0018)  
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class URendererOverrideSettings : public UDeveloperSettings
{ 
public:
	bool                                               bSupportAllShaderPermutations : 1;                          // 0x0038:0 (0x0001)  
	bool                                               bForceRecomputeTangents : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ReplayNetConnection
/// Size: 0x0800 (2048 bytes) (0x001BA8 - 0x0023A8) align 8 pad: 0x0000
class UReplayNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData00_1[0x800];                                     // 0x1BA8   (0x0800)  MISSED
};

/// Class /Script/Engine.ReplaySubsystem
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class UReplaySubsystem : public UGameInstanceSubsystem
{ 
public:
	bool                                               bLoadDefaultMapOnStop;                                      // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0031   (0x000F)  MISSED
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UReplicationDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UReplicationConnectionDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UReporterBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x0078 (120 bytes) (0x000030 - 0x0000A8) align 8 pad: 0x0000
class UReporterGraph : public UReporterBase
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0030   (0x0078)  MISSED
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FRigTransformConstraint
{ 
	TEnumAsByte<EConstraintTransform>                  TranformType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ParentSpace;                                                // 0x0004   (0x0008)  
	float                                              Weight;                                                     // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTransformBaseConstraint
{ 
	TArray<FRigTransformConstraint>                    TransformConstraints;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTransformBase
{ 
	FName                                              Node;                                                       // 0x0000   (0x0008)  
	FTransformBaseConstraint                           Constraints[2];                                             // 0x0008   (0x0020)  
};

/// Struct /Script/Engine.Node
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 16 pad: 0x0000
struct FNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              ParentName;                                                 // 0x0008   (0x0008)  
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FString                                            DisplayName;                                                // 0x0040   (0x0010)  
	bool                                               bAdvanced;                                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x0051   (0x000F)  MISSED
};

/// Class /Script/Engine.Rig
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class URig : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<FTransformBase>                             TransformBases;                                             // 0x0030   (0x0010)  
	TArray<FNode>                                      Nodes;                                                      // 0x0040   (0x0010)  
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0020 (32 bytes) (0x0000F0 - 0x000110) align 8 pad: 0x0000
class URotatingMovementComponent : public UMovementComponent
{ 
public:
	FRotator                                           RotationRate;                                               // 0x00F0   (0x000C)  
	FVector                                            PivotTranslation;                                           // 0x00FC   (0x000C)  
	bool                                               bRotationInLocalSpace : 1;                                  // 0x0108:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class URuntimeOptionsBase : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x0078 (120 bytes) (0x000028 - 0x0000A0) align 16 pad: 0x0000
class URuntimeVirtualTexture : public UObject
{ 
public:
	int32_t                                            TileCount;                                                  // 0x0028   (0x0004)  
	int32_t                                            TileSize;                                                   // 0x002C   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0030   (0x0004)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0034   (0x0001)  
	bool                                               bCompressTextures;                                          // 0x0035   (0x0001)  
	bool                                               bClearTextures;                                             // 0x0036   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0037   (0x0001)  
	bool                                               bPrivateSpace;                                              // 0x0038   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x0039   (0x0001)  
	bool                                               bContinuousUpdate;                                          // 0x003A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	int32_t                                            RemoveLowMips;                                              // 0x003C   (0x0004)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            Size;                                                       // 0x0044   (0x0004)  
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                           // 0x0048   (0x0008)  
	unsigned char                                      UnknownData02_7[0x50];                                      // 0x0050   (0x0050)  MISSED


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileSize
	// int32_t GetTileSize();                                                                                                   // [0x412d5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileCount
	// int32_t GetTileCount();                                                                                                  // [0x412d560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileBorderSize
	// int32_t GetTileBorderSize();                                                                                             // [0x412d520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetSize
	// int32_t GetSize();                                                                                                       // [0x412d490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.RuntimeVirtualTexture.GetPageTableSize
	// int32_t GetPageTableSize();                                                                                              // [0x412d460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x0078 (120 bytes) (0x0001F8 - 0x000270) align 16 pad: 0x0000
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
public:
	SDK_UNDEFINED(40,190) /* TWeakObjectPtr<AActor*> */ __um(BoundsAlignActor);                                    // 0x01F8   (0x0028)  
	bool                                               bSetBoundsButton;                                           // 0x0220   (0x0001)  
	bool                                               bSnapBoundsToLandscape;                                     // 0x0221   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0222   (0x0006)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0228   (0x0008)  
	bool                                               bEnableScalability;                                         // 0x0230   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0231   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x0234   (0x0004)  
	bool                                               bHidePrimitives;                                            // 0x0238   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0239   (0x0007)  MISSED
	class UVirtualTextureBuilder*                      StreamingTexture;                                           // 0x0240   (0x0008)  
	int32_t                                            StreamLowMips;                                              // 0x0248   (0x0004)  
	bool                                               bBuildStreamingMipsButton;                                  // 0x024C   (0x0001)  
	bool                                               bEnableCompressCrunch;                                      // 0x024D   (0x0001)  
	bool                                               bUseStreamingLowMipsInEditor;                               // 0x024E   (0x0001)  
	bool                                               bBuildDebugStreamingMips;                                   // 0x024F   (0x0001)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x0250   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.RuntimeVirtualTextureComponent.Invalidate
	// void Invalidate(FBoxSphereBounds& WorldBounds);                                                                          // [0x412d610] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ARuntimeVirtualTextureVolume : public AActor
{ 
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                    // 0x0220   (0x0008)  
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class URVOAvoidanceInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UScene : public UObject
{ 
public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x0008 (8 bytes) (0x000230 - 0x000238) align 8 pad: 0x0000
class ASceneCapture2D : public ASceneCapture
{ 
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                         // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x410da70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x0610 (1552 bytes) (0x0002B0 - 0x0008C0) align 16 pad: 0x0000
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
public:
	TEnumAsByte<ECameraProjectionMode>                 ProjectionType;                                             // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x02B1   (0x0003)  MISSED
	float                                              FOVAngle;                                                   // 0x02B4   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x02B8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02BC   (0x0004)  MISSED
	class UTextureRenderTarget2D*                      TextureTarget;                                              // 0x02C0   (0x0008)  
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                              // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x02C9   (0x0007)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x02D0   (0x0560)  
	float                                              PostProcessBlendWeight;                                     // 0x0830   (0x0004)  
	bool                                               bOverride_CustomNearClippingPlane : 1;                      // 0x0834:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0835   (0x0003)  MISSED
	float                                              CustomNearClippingPlane;                                    // 0x0838   (0x0004)  
	bool                                               bUseCustomProjectionMatrix;                                 // 0x083C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x083D   (0x0003)  MISSED
	FMatrix                                            CustomProjectionMatrix;                                     // 0x0840   (0x0040)  
	bool                                               bEnableClipPlane;                                           // 0x0880   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0881   (0x0003)  MISSED
	FVector                                            ClipPlaneBase;                                              // 0x0884   (0x000C)  
	FVector                                            ClipPlaneNormal;                                            // 0x0890   (0x000C)  
	bool                                               bCameraCutThisFrame : 1;                                    // 0x089C:0 (0x0001)  
	bool                                               bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;       // 0x089C:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x089D   (0x0003)  MISSED
	bool                                               bDisableFlipCopyGLES;                                       // 0x08A0   (0x0001)  
	unsigned char                                      UnknownData07_7[0x1F];                                      // 0x08A1   (0x001F)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.RemoveBlendable
	// void RemoveBlendable(TScriptInterface<Class> InBlendableObject);                                                         // [0x4135040] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	// void CaptureScene();                                                                                                     // [0x4131ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	// void AddOrUpdateBlendable(TScriptInterface<Class> InBlendableObject, float InWeight);                                    // [0x4131d80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0030 (48 bytes) (0x0002B0 - 0x0002E0) align 16 pad: 0x0000
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                              // 0x02B0   (0x0008)  
	bool                                               bCaptureRotation;                                           // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x02B9   (0x0007)  MISSED
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                          // 0x02C0   (0x0008)  
	class UTextureRenderTargetCube*                    TextureTargetRight;                                         // 0x02C8   (0x0008)  
	class UTextureRenderTarget2D*                      TextureTargetODS;                                           // 0x02D0   (0x0008)  
	float                                              IPD;                                                        // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x02DC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	// void CaptureScene();                                                                                                     // [0x4131ed0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x0008 (8 bytes) (0x000230 - 0x000238) align 8 pad: 0x0000
class ASceneCaptureCube : public ASceneCapture
{ 
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                       // 0x0230   (0x0008)  


	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	// void OnInterpToggle(bool bEnable);                                                                                       // [0x410da70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBPVariableMetaDataEntry
{ 
	FName                                              DataKey;                                                    // 0x0000   (0x0008)  
	FString                                            DataValue;                                                  // 0x0008   (0x0010)  
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000D8) align 8 pad: 0x0000
class USCS_Node : public UObject
{ 
public:
	class UClass*                                      ComponentClass;                                             // 0x0028   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0030   (0x0008)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0038   (0x0048)  
	FName                                              AttachToName;                                               // 0x0080   (0x0008)  
	FName                                              ParentComponentOrVariableName;                              // 0x0088   (0x0008)  
	FName                                              ParentComponentOwnerClassName;                              // 0x0090   (0x0008)  
	bool                                               bIsParentComponentNative;                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<class USCS_Node*>                           ChildNodes;                                                 // 0x00A0   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	FGuid                                              VariableGuid;                                               // 0x00C0   (0x0010)  
	FName                                              InternalVariableName;                                       // 0x00D0   (0x0008)  
};

/// Class /Script/Engine.Selection
/// Size: 0x0078 (120 bytes) (0x000028 - 0x0000A0) align 8 pad: 0x0000
class USelection : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x78];                                      // 0x0028   (0x0078)  MISSED
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x00C8 (200 bytes) (0x000220 - 0x0002E8) align 8 pad: 0x0000
class AServerStatReplicator : public AInfo
{ 
public:
	bool                                               bUpdateStatNet;                                             // 0x0220   (0x0001)  
	bool                                               bOverwriteClientStats;                                      // 0x0221   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0222   (0x0002)  MISSED
	uint32_t                                           Channels;                                                   // 0x0224   (0x0004)  
	uint32_t                                           InRate;                                                     // 0x0228   (0x0004)  
	uint32_t                                           OutRate;                                                    // 0x022C   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0230   (0x0004)  MISSED
	uint32_t                                           MaxPacketOverhead;                                          // 0x0234   (0x0004)  
	uint32_t                                           InRateClientMax;                                            // 0x0238   (0x0004)  
	uint32_t                                           InRateClientMin;                                            // 0x023C   (0x0004)  
	uint32_t                                           InRateClientAvg;                                            // 0x0240   (0x0004)  
	uint32_t                                           InPacketsClientMax;                                         // 0x0244   (0x0004)  
	uint32_t                                           InPacketsClientMin;                                         // 0x0248   (0x0004)  
	uint32_t                                           InPacketsClientAvg;                                         // 0x024C   (0x0004)  
	uint32_t                                           OutRateClientMax;                                           // 0x0250   (0x0004)  
	uint32_t                                           OutRateClientMin;                                           // 0x0254   (0x0004)  
	uint32_t                                           OutRateClientAvg;                                           // 0x0258   (0x0004)  
	uint32_t                                           OutPacketsClientMax;                                        // 0x025C   (0x0004)  
	uint32_t                                           OutPacketsClientMin;                                        // 0x0260   (0x0004)  
	uint32_t                                           OutPacketsClientAvg;                                        // 0x0264   (0x0004)  
	uint32_t                                           NetNumClients;                                              // 0x0268   (0x0004)  
	uint32_t                                           InPackets;                                                  // 0x026C   (0x0004)  
	uint32_t                                           OutPackets;                                                 // 0x0270   (0x0004)  
	uint32_t                                           InBunches;                                                  // 0x0274   (0x0004)  
	uint32_t                                           OutBunches;                                                 // 0x0278   (0x0004)  
	uint32_t                                           OutLoss;                                                    // 0x027C   (0x0004)  
	uint32_t                                           InLoss;                                                     // 0x0280   (0x0004)  
	uint32_t                                           VoiceBytesSent;                                             // 0x0284   (0x0004)  
	uint32_t                                           VoiceBytesRecv;                                             // 0x0288   (0x0004)  
	uint32_t                                           VoicePacketsSent;                                           // 0x028C   (0x0004)  
	uint32_t                                           VoicePacketsRecv;                                           // 0x0290   (0x0004)  
	uint32_t                                           PercentInVoice;                                             // 0x0294   (0x0004)  
	uint32_t                                           PercentOutVoice;                                            // 0x0298   (0x0004)  
	uint32_t                                           NumActorChannels;                                           // 0x029C   (0x0004)  
	uint32_t                                           NumConsideredActors;                                        // 0x02A0   (0x0004)  
	uint32_t                                           PrioritizedActors;                                          // 0x02A4   (0x0004)  
	uint32_t                                           NumRelevantActors;                                          // 0x02A8   (0x0004)  
	uint32_t                                           NumRelevantDeletedActors;                                   // 0x02AC   (0x0004)  
	uint32_t                                           NumReplicatedActorAttempts;                                 // 0x02B0   (0x0004)  
	uint32_t                                           NumReplicatedActors;                                        // 0x02B4   (0x0004)  
	uint32_t                                           NumActors;                                                  // 0x02B8   (0x0004)  
	uint32_t                                           NumNetActors;                                               // 0x02BC   (0x0004)  
	uint32_t                                           NumDormantActors;                                           // 0x02C0   (0x0004)  
	uint32_t                                           NumInitiallyDormantActors;                                  // 0x02C4   (0x0004)  
	uint32_t                                           NumNetGUIDsAckd;                                            // 0x02C8   (0x0004)  
	uint32_t                                           NumNetGUIDsPending;                                         // 0x02CC   (0x0004)  
	uint32_t                                           NumNetGUIDsUnAckd;                                          // 0x02D0   (0x0004)  
	uint32_t                                           ObjPathBytes;                                               // 0x02D4   (0x0004)  
	uint32_t                                           NetGUIDOutRate;                                             // 0x02D8   (0x0004)  
	uint32_t                                           NetGUIDInRate;                                              // 0x02DC   (0x0004)  
	uint32_t                                           NetSaturated;                                               // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x02E4   (0x0004)  MISSED
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0010 (16 bytes) (0x0001A0 - 0x0001B0) align 16 pad: 0x0000
class UShadowMapTexture2D : public UTexture2D
{ 
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                             // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData00_7[0xF];                                       // 0x01A1   (0x000F)  MISSED
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x0078 (120 bytes) (0x000028 - 0x0000A0) align 8 pad: 0x0000
class USimpleConstructionScript : public UObject
{ 
public:
	TArray<class USCS_Node*>                           RootNodes;                                                  // 0x0028   (0x0010)  
	TArray<class USCS_Node*>                           AllNodes;                                                   // 0x0038   (0x0010)  
	class USCS_Node*                                   DefaultSceneRootNode;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0050   (0x0050)  MISSED
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USkeletalMeshEditorData : public UObject
{ 
public:
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FBoneFilter
{ 
	bool                                               bExcludeSelf;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              BoneName;                                                   // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FSkeletalMeshLODGroupSettings
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	EBoneFilterActionOption                            BoneFilterActionOption;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FBoneFilter>                                BoneList;                                                   // 0x0010   (0x0010)  
	TArray<FName>                                      BonesToPrioritize;                                          // 0x0020   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0038   (0x0008)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x0040   (0x003C)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class USkeletalMeshLODSettings : public UDataAsset
{ 
public:
	FPerPlatformInt                                    MinLOD;                                                     // 0x0030   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x0034   (0x0001)  
	bool                                               bOverrideLODStreamingSettings;                              // 0x0035   (0x0001)  
	FPerPlatformBool                                   bSupportLODStreaming;                                       // 0x0036   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0037   (0x0001)  MISSED
	FPerPlatformInt                                    MaxNumStreamedLODs;                                         // 0x0038   (0x0004)  
	FPerPlatformInt                                    MaxNumOptionalLODs;                                         // 0x003C   (0x0004)  
	TArray<FSkeletalMeshLODGroupSettings>              LODGroups;                                                  // 0x0040   (0x0010)  
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              SkeletalMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class USkeletalMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FName                                              BoneName;                                                   // 0x0030   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0050   (0x000C)  
	bool                                               bForceAlwaysAnimated;                                       // 0x005C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x005D   (0x0003)  MISSED


	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	// void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, FVector WorldLocation, FVector WorldNormal);   // [0x4143ae0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	// FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);                                                       // [0x41437a0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FTentDistribution
{ 
	float                                              TipAltitude;                                                // 0x0000   (0x0004)  
	float                                              TipValue;                                                   // 0x0004   (0x0004)  
	float                                              Width;                                                      // 0x0008   (0x0004)  
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x00D8 (216 bytes) (0x0001F8 - 0x0002D0) align 16 pad: 0x0000
class USkyAtmosphereComponent : public USceneComponent
{ 
public:
	ESkyAtmosphereTransformMode                        TransformMode;                                              // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01F9   (0x0003)  MISSED
	float                                              BottomRadius;                                               // 0x01FC   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x0200   (0x0004)  
	float                                              AtmosphereHeight;                                           // 0x0204   (0x0004)  
	float                                              MultiScatteringFactor;                                      // 0x0208   (0x0004)  
	float                                              TraceSampleCountScale;                                      // 0x020C   (0x0004)  
	float                                              RayleighScatteringScale;                                    // 0x0210   (0x0004)  
	FLinearColor                                       RayleighScattering;                                         // 0x0214   (0x0010)  
	float                                              RayleighExponentialDistribution;                            // 0x0224   (0x0004)  
	float                                              MieScatteringScale;                                         // 0x0228   (0x0004)  
	FLinearColor                                       MieScattering;                                              // 0x022C   (0x0010)  
	float                                              MieAbsorptionScale;                                         // 0x023C   (0x0004)  
	FLinearColor                                       MieAbsorption;                                              // 0x0240   (0x0010)  
	float                                              MieAnisotropy;                                              // 0x0250   (0x0004)  
	float                                              MieExponentialDistribution;                                 // 0x0254   (0x0004)  
	float                                              OtherAbsorptionScale;                                       // 0x0258   (0x0004)  
	FLinearColor                                       OtherAbsorption;                                            // 0x025C   (0x0010)  
	FTentDistribution                                  OtherTentDistribution;                                      // 0x026C   (0x000C)  
	FLinearColor                                       SkyLuminanceFactor;                                         // 0x0278   (0x0010)  
	float                                              AerialPespectiveViewDistanceScale;                          // 0x0288   (0x0004)  
	float                                              HeightFogContribution;                                      // 0x028C   (0x0004)  
	float                                              TransmittanceMinLightElevationAngle;                        // 0x0290   (0x0004)  
	float                                              AerialPerspectiveStartDepth;                                // 0x0294   (0x0004)  
	unsigned char                                      UnknownData01_6[0x24];                                      // 0x0298   (0x0024)  MISSED
	FGuid                                              bStaticLightingBuiltGUID;                                   // 0x02BC   (0x0010)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x02CC   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	// void SetSkyLuminanceFactor(FLinearColor NewValue);                                                                       // [0x41489c0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	// void SetRayleighScatteringScale(float NewValue);                                                                         // [0x4148940] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScattering
	// void SetRayleighScattering(FLinearColor NewValue);                                                                       // [0x41488b0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	// void SetRayleighExponentialDistribution(float NewValue);                                                                 // [0x4148830] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	// void SetOtherAbsorptionScale(float NewValue);                                                                            // [0x41487b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorption
	// void SetOtherAbsorption(FLinearColor NewValue);                                                                          // [0x4148720] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMultiScatteringFactor
	// void SetMultiScatteringFactor(float NewValue);                                                                           // [0x4148510] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScatteringScale
	// void SetMieScatteringScale(float NewValue);                                                                              // [0x4148410] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScattering
	// void SetMieScattering(FLinearColor NewValue);                                                                            // [0x4148380] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	// void SetMieExponentialDistribution(float NewValue);                                                                      // [0x4148300] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAnisotropy
	// void SetMieAnisotropy(float NewValue);                                                                                   // [0x40d6720] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	// void SetMieAbsorptionScale(float NewValue);                                                                              // [0x4148280] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorption
	// void SetMieAbsorption(FLinearColor NewValue);                                                                            // [0x41481f0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetHeightFogContribution
	// void SetHeightFogContribution(float NewValue);                                                                           // [0x40d5bf0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAtmosphereHeight
	// void SetAtmosphereHeight(float NewValue);                                                                                // [0x4147da0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	// void SetAerialPespectiveViewDistanceScale(float NewValue);                                                               // [0x4147d20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	// void OverrideAtmosphereLightDirection(int32_t AtmosphereLightIndex, FVector& LightDirection);                            // [0x4147c30] Final|RequiredAPI|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyAtmosphereComponent.GetAtmosphereTransmitanceOnGroundAtPlanetTop
	// FLinearColor GetAtmosphereTransmitanceOnGroundAtPlanetTop(class UDirectionalLightComponent* DirectionalLight);           // [0x4147b90] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ASkyAtmosphere : public AInfo
{ 
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                     // 0x0220   (0x0008)  
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x01D8 (472 bytes) (0x000228 - 0x000400) align 16 pad: 0x0000
class USkyLightComponent : public ULightComponentBase
{ 
public:
	bool                                               bRealTimeCapture;                                           // 0x0228   (0x0001)  
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                                 // 0x0229   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x022A   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0230   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0238   (0x0004)  
	int32_t                                            CubemapResolution;                                          // 0x023C   (0x0004)  
	float                                              SkyDistanceThreshold;                                       // 0x0240   (0x0004)  
	bool                                               bCaptureEmissiveOnly;                                       // 0x0244   (0x0001)  
	bool                                               bLowerHemisphereIsBlack;                                    // 0x0245   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0246   (0x0002)  MISSED
	FLinearColor                                       LowerHemisphereColor;                                       // 0x0248   (0x0010)  
	float                                              OcclusionMaxDistance;                                       // 0x0258   (0x0004)  
	float                                              Contrast;                                                   // 0x025C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0260   (0x0004)  
	float                                              MinOcclusion;                                               // 0x0264   (0x0004)  
	FColor                                             OcclusionTint;                                              // 0x0268   (0x0004)  
	bool                                               bCloudAmbientOcclusion : 1;                                 // 0x026C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x026D   (0x0003)  MISSED
	float                                              CloudAmbientOcclusionStrength;                              // 0x0270   (0x0004)  
	float                                              CloudAmbientOcclusionExtent;                                // 0x0274   (0x0004)  
	float                                              CloudAmbientOcclusionMapResolutionScale;                    // 0x0278   (0x0004)  
	float                                              CloudAmbientOcclusionApertureScale;                         // 0x027C   (0x0004)  
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                       // 0x0280   (0x0001)  
	unsigned char                                      UnknownData03_6[0xA7];                                      // 0x0281   (0x00A7)  MISSED
	class UTextureCube*                                BlendDestinationCubemap;                                    // 0x0328   (0x0008)  
	unsigned char                                      UnknownData04_7[0xD0];                                      // 0x0330   (0x00D0)  MISSED


	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	// void SetVolumetricScatteringIntensity(float NewIntensity);                                                               // [0x4148a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	// void SetOcclusionTint(FColor& InTint);                                                                                   // [0x4148690] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	// void SetOcclusionExponent(float InOcclusionExponent);                                                                    // [0x4148610] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	// void SetOcclusionContrast(float InOcclusionContrast);                                                                    // [0x4148590] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	// void SetMinOcclusion(float InMinOcclusion);                                                                              // [0x4148490] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	// void SetLowerHemisphereColor(FLinearColor& InLowerHemisphereColor);                                                      // [0x4148160] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	// void SetLightColor(FLinearColor NewLightColor);                                                                          // [0x41480d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x4148050] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	// void SetIndirectLightingIntensity(float NewIntensity);                                                                   // [0x4147fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	// void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);  // [0x4147eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	// void SetCubemap(class UTextureCube* NewCubemap);                                                                         // [0x4147e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	// void RecaptureSky();                                                                                                     // [0x4147d00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x0088 (136 bytes) (0x000028 - 0x0000B0) align 8 pad: 0x0000
class USlateBrushAsset : public UObject
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0028   (0x0088)  
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USlateTextureAtlasInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
class USmokeTestCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03A0 (928 bytes) (0x000028 - 0x0003C8) align 8 pad: 0x0000
class USoundAttenuation : public UObject
{ 
public:
	FSoundAttenuationSettings                          Attenuation;                                                // 0x0028   (0x03A0)  
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FSoundClassProperties
{ 
	float                                              Volume;                                                     // 0x0000   (0x0004)  
	float                                              Pitch;                                                      // 0x0004   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0008   (0x0004)  
	float                                              AttenuationDistanceScale;                                   // 0x000C   (0x0004)  
	float                                              LFEBleed;                                                   // 0x0010   (0x0004)  
	float                                              VoiceCenterChannelVolume;                                   // 0x0014   (0x0004)  
	float                                              RadioFilterVolume;                                          // 0x0018   (0x0004)  
	float                                              RadioFilterVolumeThreshold;                                 // 0x001C   (0x0004)  
	bool                                               bApplyEffects : 1;                                          // 0x0020:0 (0x0001)  
	bool                                               bAlwaysPlay : 1;                                            // 0x0020:1 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0020:2 (0x0001)  
	bool                                               bIsMusic : 1;                                               // 0x0020:3 (0x0001)  
	bool                                               bCenterChannelOnly : 1;                                     // 0x0020:4 (0x0001)  
	bool                                               bApplyAmbientVolumes : 1;                                   // 0x0020:5 (0x0001)  
	bool                                               bReverb : 1;                                                // 0x0020:6 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              Default2DReverbSendAmount;                                  // 0x0024   (0x0004)  
	FSoundModulationDefaultSettings                    ModulationSettings;                                         // 0x0028   (0x0040)  
	TEnumAsByte<EAudioOutputTarget>                    OutputTarget;                                               // 0x0068   (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x006A   (0x0006)  MISSED
	class USoundSubmix*                                DefaultSubmix;                                              // 0x0070   (0x0008)  
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPassiveSoundMixModifier
{ 
	class USoundMix*                                   SoundMix;                                                   // 0x0000   (0x0008)  
	float                                              MinVolumeThreshold;                                         // 0x0008   (0x0004)  
	float                                              MaxVolumeThreshold;                                         // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SoundClass
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000C8) align 8 pad: 0x0000
class USoundClass : public UObject
{ 
public:
	FSoundClassProperties                              Properties;                                                 // 0x0028   (0x0078)  
	TArray<class USoundClass*>                         ChildClasses;                                               // 0x00A0   (0x0010)  
	TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers;                                   // 0x00B0   (0x0010)  
	class USoundClass*                                 ParentClass;                                                // 0x00C0   (0x0008)  
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class USoundConcurrency : public UObject
{ 
public:
	FSoundConcurrencySettings                          Concurrency;                                                // 0x0028   (0x0028)  
};

/// Class /Script/Engine.SoundCue
/// Size: 0x03D8 (984 bytes) (0x000170 - 0x000548) align 8 pad: 0x0000
class USoundCue : public USoundBase
{ 
public:
	bool                                               bPrimeOnLoad : 1;                                           // 0x0170:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0171   (0x0007)  MISSED
	class USoundNode*                                  FirstNode;                                                  // 0x0178   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0180   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0184   (0x0004)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0188   (0x03A0)  
	float                                              SubtitlePriority;                                           // 0x0528   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x052C   (0x0004)  MISSED
	bool                                               bOverrideAttenuation : 1;                                   // 0x0530:0 (0x0001)  
	bool                                               bExcludeFromRandomNodeBranchCulling : 1;                    // 0x0530:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0531   (0x0003)  MISSED
	int32_t                                            CookedQualityIndex;                                         // 0x0534   (0x0004)  
	bool                                               bHasPlayWhenSilent : 1;                                     // 0x0538:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0539   (0x000F)  MISSED
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSourceEffectChainEntry
{ 
	class USoundEffectSourcePreset*                    Preset;                                                     // 0x0000   (0x0008)  
	bool                                               bBypass : 1;                                                // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class USoundEffectSourcePresetChain : public UObject
{ 
public:
	TArray<FSourceEffectChainEntry>                    Chain;                                                      // 0x0028   (0x0010)  
	bool                                               bPlayEffectChainTails : 1;                                  // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundGroup
{ 
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            DisplayName;                                                // 0x0008   (0x0010)  
	bool                                               bAlwaysDecompressOnLoad : 1;                                // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DecompressedDuration;                                       // 0x001C   (0x0004)  
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000088) align 8 pad: 0x0000
class USoundGroups : public UObject
{ 
public:
	TArray<FSoundGroup>                                SoundGroupProfiles;                                         // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0038   (0x0050)  MISSED
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0038 (56 bytes) (0x000008 - 0x000040) align 8 pad: 0x0000
struct FAudioEQEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0008   (0x0008)  MISSED
	float                                              FrequencyCenter0;                                           // 0x0010   (0x0004)  
	float                                              Gain0;                                                      // 0x0014   (0x0004)  
	float                                              Bandwidth0;                                                 // 0x0018   (0x0004)  
	float                                              FrequencyCenter1;                                           // 0x001C   (0x0004)  
	float                                              Gain1;                                                      // 0x0020   (0x0004)  
	float                                              Bandwidth1;                                                 // 0x0024   (0x0004)  
	float                                              FrequencyCenter2;                                           // 0x0028   (0x0004)  
	float                                              Gain2;                                                      // 0x002C   (0x0004)  
	float                                              Bandwidth2;                                                 // 0x0030   (0x0004)  
	float                                              FrequencyCenter3;                                           // 0x0034   (0x0004)  
	float                                              Gain3;                                                      // 0x0038   (0x0004)  
	float                                              Bandwidth3;                                                 // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundClassAdjuster
{ 
	class USoundClass*                                 SoundClassObject;                                           // 0x0000   (0x0008)  
	float                                              VolumeAdjuster;                                             // 0x0008   (0x0004)  
	float                                              PitchAdjuster;                                              // 0x000C   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0010   (0x0004)  
	bool                                               bApplyToChildren : 1;                                       // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              VoiceCenterChannelVolumeAdjuster;                           // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000090) align 8 pad: 0x0000
class USoundMix : public UObject
{ 
public:
	bool                                               bApplyEQ : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              EQPriority;                                                 // 0x002C   (0x0004)  
	FAudioEQEffect                                     EQSettings;                                                 // 0x0030   (0x0040)  
	TArray<FSoundClassAdjuster>                        SoundClassEffects;                                          // 0x0070   (0x0010)  
	float                                              InitialDelay;                                               // 0x0080   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0084   (0x0004)  
	float                                              Duration;                                                   // 0x0088   (0x0004)  
	float                                              FadeOutTime;                                                // 0x008C   (0x0004)  
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03B0 (944 bytes) (0x000048 - 0x0003F8) align 8 pad: 0x0000
class USoundNodeAttenuation : public USoundNode
{ 
public:
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0048   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0050   (0x03A0)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x03F0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x03F1   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeBranch : public USoundNode
{ 
public:
	FName                                              BoolParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeConcatenator : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeDelay : public USoundNode
{ 
public:
	float                                              DelayMin;                                                   // 0x0048   (0x0004)  
	float                                              DelayMax;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDialogueWaveParameter
{ 
	class UDialogueWave*                               DialogueWave;                                               // 0x0000   (0x0008)  
	FDialogueContext                                   Context;                                                    // 0x0008   (0x0018)  
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class USoundNodeDialoguePlayer : public USoundNode
{ 
public:
	FDialogueWaveParameter                             DialogueWaveParameter;                                      // 0x0048   (0x0020)  
	bool                                               bLooping : 1;                                               // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FDistanceDatum
{ 
	float                                              FadeInDistanceStart;                                        // 0x0000   (0x0004)  
	float                                              FadeInDistanceEnd;                                          // 0x0004   (0x0004)  
	float                                              FadeOutDistanceStart;                                       // 0x0008   (0x0004)  
	float                                              FadeOutDistanceEnd;                                         // 0x000C   (0x0004)  
	float                                              Volume;                                                     // 0x0010   (0x0004)  
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeDistanceCrossFade : public USoundNode
{ 
public:
	TArray<FDistanceDatum>                             CrossFadeInput;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeDoppler : public USoundNode
{ 
public:
	float                                              DopplerIntensity;                                           // 0x0048   (0x0004)  
	bool                                               bUseSmoothing;                                              // 0x004C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              SmoothingInterpSpeed;                                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0148 (328 bytes) (0x000048 - 0x000190) align 8 pad: 0x0000
class USoundNodeEnveloper : public USoundNode
{ 
public:
	float                                              LoopStart;                                                  // 0x0048   (0x0004)  
	float                                              LoopEnd;                                                    // 0x004C   (0x0004)  
	float                                              DurationAfterLoop;                                          // 0x0050   (0x0004)  
	int32_t                                            LoopCount;                                                  // 0x0054   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x0058:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0059   (0x0007)  MISSED
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                          // 0x0060   (0x0008)  
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                           // 0x0068   (0x0008)  
	FRuntimeFloatCurve                                 VolumeCurve;                                                // 0x0070   (0x0088)  
	FRuntimeFloatCurve                                 PitchCurve;                                                 // 0x00F8   (0x0088)  
	float                                              PitchMin;                                                   // 0x0180   (0x0004)  
	float                                              PitchMax;                                                   // 0x0184   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0188   (0x0004)  
	float                                              VolumeMax;                                                  // 0x018C   (0x0004)  
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeGroupControl : public USoundNode
{ 
public:
	TArray<int32_t>                                    GroupSizes;                                                 // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeLooping : public USoundNode
{ 
public:
	int32_t                                            LoopCount;                                                  // 0x0048   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0000 (0 bytes) (0x000048 - 0x000048) align 8 pad: 0x0000
class USoundNodeMature : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeMixer : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeModulator : public USoundNode
{ 
public:
	float                                              PitchMin;                                                   // 0x0048   (0x0004)  
	float                                              PitchMax;                                                   // 0x004C   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0050   (0x0004)  
	float                                              VolumeMax;                                                  // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FModulatorContinuousParams
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	float                                              Default;                                                    // 0x0008   (0x0004)  
	float                                              MinInput;                                                   // 0x000C   (0x0004)  
	float                                              MaxInput;                                                   // 0x0010   (0x0004)  
	float                                              MinOutput;                                                  // 0x0014   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0018   (0x0004)  
	TEnumAsByte<ModulationParamMode>                   ParamMode;                                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class USoundNodeModulatorContinuous : public USoundNode
{ 
public:
	FModulatorContinuousParams                         PitchModulationParams;                                      // 0x0048   (0x0020)  
	FModulatorContinuousParams                         VolumeModulationParams;                                     // 0x0068   (0x0020)  
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0028 (40 bytes) (0x000048 - 0x000070) align 8 pad: 0x0000
class USoundNodeOscillator : public USoundNode
{ 
public:
	bool                                               bModulateVolume : 1;                                        // 0x0048:0 (0x0001)  
	bool                                               bModulatePitch : 1;                                         // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AmplitudeMin;                                               // 0x004C   (0x0004)  
	float                                              AmplitudeMax;                                               // 0x0050   (0x0004)  
	float                                              FrequencyMin;                                               // 0x0054   (0x0004)  
	float                                              FrequencyMax;                                               // 0x0058   (0x0004)  
	float                                              OffsetMin;                                                  // 0x005C   (0x0004)  
	float                                              OffsetMax;                                                  // 0x0060   (0x0004)  
	float                                              CenterMin;                                                  // 0x0064   (0x0004)  
	float                                              CenterMax;                                                  // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0008 (8 bytes) (0x000058 - 0x000060) align 8 pad: 0x0000
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
public:
	FName                                              paramName;                                                  // 0x0058   (0x0008)  
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeQualityLevel : public USoundNode
{ 
public:
	int32_t                                            CookedQualityLevelIndex;                                    // 0x0048   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0030 (48 bytes) (0x000048 - 0x000078) align 8 pad: 0x0000
class USoundNodeRandom : public USoundNode
{ 
public:
	TArray<float>                                      Weights;                                                    // 0x0048   (0x0010)  
	TArray<bool>                                       HasBeenUsed;                                                // 0x0058   (0x0010)  
	int32_t                                            NumRandomUsed;                                              // 0x0068   (0x0004)  
	int32_t                                            PreselectAtLevelLoad;                                       // 0x006C   (0x0004)  
	bool                                               bShouldExcludeFromBranchCulling : 1;                        // 0x0070:0 (0x0001)  
	bool                                               bSoundCueExcludedFromBranchCulling : 1;                     // 0x0070:1 (0x0001)  
	bool                                               bRandomizeWithoutReplacement : 1;                           // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0010 (16 bytes) (0x000048 - 0x000058) align 8 pad: 0x0000
class USoundNodeSoundClass : public USoundNode
{ 
public:
	class USoundClass*                                 SoundClassOverride;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeSwitch : public USoundNode
{ 
public:
	FName                                              IntParameterName;                                           // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0008 (8 bytes) (0x000048 - 0x000050) align 8 pad: 0x0000
class USoundNodeWaveParam : public USoundNode
{ 
public:
	FName                                              WaveParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
public:
	SDK_UNDEFINED(40,191) /* TWeakObjectPtr<USoundWave*> */ __um(SoundWaveAssetPtr);                               // 0x0048   (0x0028)  
	class USoundWave*                                  SoundWave;                                                  // 0x0070   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0078   (0x0008)  MISSED
	bool                                               bLooping : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0018 (24 bytes) (0x000370 - 0x000388) align 8 pad: 0x0000
class USoundSourceBus : public USoundWave
{ 
public:
	ESourceBusChannels                                 SourceBusChannels;                                          // 0x0370   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0371   (0x0003)  MISSED
	float                                              SourceBusDuration;                                          // 0x0374   (0x0004)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0378   (0x0008)  
	bool                                               bAutoDeactivateWhenSilent : 1;                              // 0x0380:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0381   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class USoundSubmixBase : public UObject
{ 
public:
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                              // 0x0028   (0x0010)  
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0008 (8 bytes) (0x000038 - 0x000040) align 8 pad: 0x0000
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
public:
	class USoundSubmixBase*                            ParentSubmix;                                               // 0x0038   (0x0008)  
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x0080 (128 bytes) (0x000040 - 0x0000C0) align 8 pad: 0x0000
class USoundSubmix : public USoundSubmixWithParentBase
{ 
public:
	bool                                               bMuteWhenBackgrounded : 1;                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0041   (0x0007)  MISSED
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0048   (0x0010)  
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                   // 0x0058   (0x0008)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0060   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x0064   (0x0004)  
	EGainParamMode                                     GainMode;                                                   // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	float                                              OutputVolume;                                               // 0x006C   (0x0004)  
	float                                              WetLevel;                                                   // 0x0070   (0x0004)  
	float                                              DryLevel;                                                   // 0x0074   (0x0004)  
	FSoundModulationDestinationSettings                OutputVolumeModulation;                                     // 0x0078   (0x0010)  
	FSoundModulationDestinationSettings                WetLevelModulation;                                         // 0x0088   (0x0010)  
	FSoundModulationDestinationSettings                DryLevelModulation;                                         // 0x0098   (0x0010)  
	SDK_UNDEFINED(16,192) /* FMulticastInlineDelegate */ __um(OnSubmixRecordedFileDone);                           // 0x00A8   (0x0010)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x00B8   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.SoundSubmix.StopSpectralAnalysis
	// void StopSpectralAnalysis(class UObject* WorldContextObject);                                                            // [0x414ef90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopRecordingOutput
	// void StopRecordingOutput(class UObject* WorldContextObject, EAudioRecordingExportType ExportType, FString Name, FString Path, class USoundWave* ExistingSoundWaveToOverwrite); // [0x414ed90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StopEnvelopeFollowing
	// void StopEnvelopeFollowing(class UObject* WorldContextObject);                                                           // [0x414ed00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartSpectralAnalysis
	// void StartSpectralAnalysis(class UObject* WorldContextObject, EFFTSize FFTSize, EFFTPeakInterpolationMethod InterpolationMethod, EFFTWindowType WindowType, float HopSize, EAudioSpectrumType SpectrumType); // [0x414eb20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartRecordingOutput
	// void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);                                    // [0x414ea50] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.StartEnvelopeFollowing
	// void StartEnvelopeFollowing(class UObject* WorldContextObject);                                                          // [0x414e9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.SetSubmixOutputVolume
	// void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);                                     // [0x414e8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
	// void RemoveSpectralAnalysisDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixSpectralAnalysisBP);   // [0x414e800] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddSpectralAnalysisDelegate
	// void AddSpectralAnalysisDelegate(class UObject* WorldContextObject, TArray<FSoundSubmixSpectralAnalysisBandSettings>& InBandSettings, FDelegateProperty& OnSubmixSpectralAnalysisBP, float UpdateRate, float DecibelNoiseFloor, bool bDoNormalize, bool bDoAutoRange, float AutoRangeAttackTime, float AutoRangeReleaseTime); // [0x414e500] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.SoundSubmix.AddEnvelopeFollowerDelegate
	// void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, FDelegateProperty& OnSubmixEnvelopeBP);              // [0x414e410] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
public:
	FName                                              SoundfieldEncodingFormat;                                   // 0x0040   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0048   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0050   (0x0010)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0060   (0x0008)  
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              EndpointType;                                               // 0x0038   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0040   (0x0008)  
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                           // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              SoundfieldEndpointType;                                     // 0x0038   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0040   (0x0008)  
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                           // 0x0048   (0x0008)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0050   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0058   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0060   (0x0010)  
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0008 (8 bytes) (0x000150 - 0x000158) align 8 pad: 0x0000
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
public:
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0151   (0x0007)  MISSED
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x0008 (8 bytes) (0x000228 - 0x000230) align 8 pad: 0x0000
class ASphereReflectionCapture : public AReflectionCapture
{ 
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                          // 0x0228   (0x0008)  
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x0010 (16 bytes) (0x000270 - 0x000280) align 16 pad: 0x0000
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadius;                                            // 0x0270   (0x0004)  
	float                                              CaptureDistanceScale;                                       // 0x0274   (0x0004)  
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x0278   (0x0008)  
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USplineMetadata : public UObject
{ 
public:
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ASplineMeshActor : public AActor
{ 
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                        // 0x0220   (0x0008)  
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 4 pad: 0x0000
struct FSplineMeshParams
{ 
	FVector                                            StartPos;                                                   // 0x0000   (0x000C)  
	FVector                                            StartTangent;                                               // 0x000C   (0x000C)  
	FVector2D                                          StartScale;                                                 // 0x0018   (0x0008)  
	float                                              StartRoll;                                                  // 0x0020   (0x0004)  
	FVector2D                                          StartOffset;                                                // 0x0024   (0x0008)  
	FVector                                            EndPos;                                                     // 0x002C   (0x000C)  
	FVector2D                                          EndScale;                                                   // 0x0038   (0x0008)  
	FVector                                            EndTangent;                                                 // 0x0040   (0x000C)  
	float                                              EndRoll;                                                    // 0x004C   (0x0004)  
	FVector2D                                          EndOffset;                                                  // 0x0050   (0x0008)  
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x00A0 (160 bytes) (0x0004E0 - 0x000580) align 16 pad: 0x0000
class USplineMeshComponent : public UStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x04E0   (0x0008)  MISSED
	FSplineMeshParams                                  SplineParams;                                               // 0x04E8   (0x0058)  
	FVector                                            SplineUpDir;                                                // 0x0540   (0x000C)  
	float                                              SplineBoundaryMin;                                          // 0x054C   (0x0004)  
	FGuid                                              CachedMeshBodySetupGuid;                                    // 0x0550   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0560   (0x0008)  
	float                                              SplineBoundaryMax;                                          // 0x0568   (0x0004)  
	bool                                               bAllowSplineEditingPerInstance : 1;                         // 0x056C:0 (0x0001)  
	bool                                               bSmoothInterpRollScale : 1;                                 // 0x056C:1 (0x0001)  
	bool                                               bMeshDirty : 1;                                             // 0x056C:2 (0x0001)  
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                                // 0x056D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x056E   (0x0002)  MISSED
	float                                              VirtualTextureMainPassMaxDrawDistance;                      // 0x0570   (0x0004)  
	unsigned char                                      UnknownData02_7[0xC];                                       // 0x0574   (0x000C)  MISSED


	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	// void UpdateMesh();                                                                                                       // [0x415aea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	// void SetStartTangent(FVector StartTangent, bool bUpdateMesh);                                                            // [0x415ad10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	// void SetStartScale(FVector2D StartScale, bool bUpdateMesh);                                                              // [0x415ac40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	// void SetStartRoll(float StartRoll, bool bUpdateMesh);                                                                    // [0x415ab60] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	// void SetStartPosition(FVector StartPos, bool bUpdateMesh);                                                               // [0x415aa80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	// void SetStartOffset(FVector2D StartOffset, bool bUpdateMesh);                                                            // [0x415a9b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	// void SetStartAndEnd(FVector StartPos, FVector StartTangent, FVector EndPos, FVector EndTangent, bool bUpdateMesh);       // [0x415a7d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	// void SetSplineUpDir(FVector& InSplineUpDir, bool bUpdateMesh);                                                           // [0x415a6f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	// void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);                                       // [0x415a420] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	// void SetEndTangent(FVector EndTangent, bool bUpdateMesh);                                                                // [0x415a340] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	// void SetEndScale(FVector2D EndScale, bool bUpdateMesh);                                                                  // [0x415a270] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	// void SetEndRoll(float EndRoll, bool bUpdateMesh);                                                                        // [0x415a190] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	// void SetEndPosition(FVector EndPos, bool bUpdateMesh);                                                                   // [0x415a0b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	// void SetEndOffset(FVector2D EndOffset, bool bUpdateMesh);                                                                // [0x4159fe0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	// void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);                                                              // [0x4159f00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	// void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);                                                              // [0x4159e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	// FVector GetStartTangent();                                                                                               // [0x4159c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	// FVector2D GetStartScale();                                                                                               // [0x4159c30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	// float GetStartRoll();                                                                                                    // [0x4159c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	// FVector GetStartPosition();                                                                                              // [0x4159bc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	// FVector2D GetStartOffset();                                                                                              // [0x4159b80] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	// FVector GetSplineUpDir();                                                                                                // [0x4159b40] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	// TEnumAsByte<ESplineMeshAxis> GetForwardAxis();                                                                           // [0x4159750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	// FVector GetEndTangent();                                                                                                 // [0x4159710] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	// FVector2D GetEndScale();                                                                                                 // [0x41596d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	// float GetEndRoll();                                                                                                      // [0x41596a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	// FVector GetEndPosition();                                                                                                // [0x4159660] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	// FVector2D GetEndOffset();                                                                                                // [0x4159620] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	// float GetBoundaryMin();                                                                                                  // [0x4159550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	// float GetBoundaryMax();                                                                                                  // [0x4159520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0008 (8 bytes) (0x000358 - 0x000360) align 16 pad: 0x0000
class USpotLightComponent : public UPointLightComponent
{ 
public:
	float                                              InnerConeAngle;                                             // 0x0358   (0x0004)  
	float                                              OuterConeAngle;                                             // 0x035C   (0x0004)  


	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	// void SetOuterConeAngle(float NewOuterConeAngle);                                                                         // [0x415a670] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	// void SetInnerConeAngle(float NewInnerConeAngle);                                                                         // [0x415a570] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FStaticMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FName                                              ImportedMaterialSlotName;                                   // 0x0010   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0018   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x00F0 (240 bytes) (0x000060 - 0x000150) align 8 pad: 0x0000
class UStaticMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0060   (0x0020)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0080   (0x0004)  
	float                                              LpvBiasMultiplier;                                          // 0x0084   (0x0004)  
	TArray<FStaticMaterial>                            StaticMaterials;                                            // 0x0088   (0x0010)  
	float                                              LightmapUVDensity;                                          // 0x0098   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x009C   (0x0004)  
	int32_t                                            LightMapCoordinateIndex;                                    // 0x00A0   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x00A4   (0x0004)  
	class UBodySetup*                                  BodySetup;                                                  // 0x00A8   (0x0008)  
	int32_t                                            LODForCollision;                                            // 0x00B0   (0x0004)  
	bool                                               bGenerateMeshDistanceField : 1;                             // 0x00B4:0 (0x0001)  
	bool                                               bStripComplexCollisionForConsole : 1;                       // 0x00B4:1 (0x0001)  
	bool                                               bHasNavigationData : 1;                                     // 0x00B4:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00B4:3 (0x0001)  
	bool                                               bSupportPhysicalMaterialMasks : 1;                          // 0x00B4:4 (0x0001)  
	bool                                               bSupportRayTracing : 1;                                     // 0x00B4:5 (0x0001)  
	bool                                               bIsBuiltAtRuntime : 1;                                      // 0x00B4:6 (0x0001)  
	unsigned char                                      UnknownBit01 : 1;                                           // 0x00B4:7 (0x0001)  MISSED
	bool                                               bAllowCPUAccess : 1;                                        // 0x00B5:0 (0x0001)  
	bool                                               bSupportGpuUniformlyDistributedSampling : 1;                // 0x00B5:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x22];                                      // 0x00B6   (0x0022)  MISSED
	TArray<class UStaticMeshSocket*>                   Sockets;                                                    // 0x00D8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x00E8   (0x0010)  MISSED
	FVector                                            PositiveBoundsExtension;                                    // 0x00F8   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x0104   (0x000C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x0110   (0x001C)  
	int32_t                                            ElementToIgnoreForTexFactor;                                // 0x012C   (0x0004)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0130   (0x0010)  
	class UObject*                                     EditableMesh;                                               // 0x0140   (0x0008)  
	class UNavCollisionBase*                           NavCollision;                                               // 0x0148   (0x0008)  


	/// Functions
	// Function /Script/Engine.StaticMesh.SetStaticMaterials
	// void SetStaticMaterials(TArray<FStaticMaterial>& InStaticMaterials);                                                     // [0x415adf0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.RemoveSocket
	// void RemoveSocket(class UStaticMeshSocket* Socket);                                                                      // [0x4159d90] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.GetStaticMaterials
	// TArray<FStaticMaterial> GetStaticMaterials();                                                                            // [0x4159cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumSections
	// int32_t GetNumSections(int32_t InLOD);                                                                                   // [0x4159aa0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	// int32_t GetNumLODs();                                                                                                    // [0x4159a70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatforms
	// void GetMinimumLODForPlatforms(TMap<FName, int32_t>& PlatformMinimumLODs);                                               // [0x4159940] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatform
	// int32_t GetMinimumLODForPlatform(FName& PlatformName);                                                                   // [0x41598c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	// int32_t GetMaterialIndex(FName MaterialSlotName);                                                                        // [0x4159820] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetMaterial
	// class UMaterialInterface* GetMaterial(int32_t MaterialIndex);                                                            // [0x4159780] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBounds
	// FBoxSphereBounds GetBounds();                                                                                            // [0x41595d0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	// FBox GetBoundingBox();                                                                                                   // [0x4159580] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.FindSocket
	// class UStaticMeshSocket* FindSocket(FName InSocketName);                                                                 // [0x4159480] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StaticMesh.CreateStaticMeshDescription
	// class UStaticMeshDescription* CreateStaticMeshDescription(class UObject* Outer);                                         // [0x41593f0] Final|RequiredAPI|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.BuildFromStaticMeshDescriptions
	// void BuildFromStaticMeshDescriptions(TArray<UStaticMeshDescription*>& StaticMeshDescriptions, bool bBuildSimpleCollision); // [0x41592f0] Final|RequiredAPI|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddSocket
	// void AddSocket(class UStaticMeshSocket* Socket);                                                                         // [0x4159260] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StaticMesh.AddMaterial
	// FName AddMaterial(class UMaterialInterface* Material);                                                                   // [0x41591d0] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000068) align 8 pad: 0x0000
class UStaticMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0030   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x003C   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0048   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Tag;                                                        // 0x0058   (0x0010)  
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
public:
	float                                              Radius;                                                     // 0x0028   (0x0004)  
	float                                              OverlayArc;                                                 // 0x002C   (0x0004)  
	int32_t                                            Height;                                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED


	/// Functions
	// Function /Script/Engine.StereoLayerShapeCylinder.SetRadius
	// void SetRadius(float InRadius);                                                                                          // [0x415eac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetOverlayArc
	// void SetOverlayArc(float InOverlayArc);                                                                                  // [0x415e930] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetHeight
	// void SetHeight(int32_t InHeight);                                                                                        // [0x415e790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
public:
	FBox2D                                             LeftUVRect;                                                 // 0x0028   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x003C   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0050   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0058   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0060   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0068   (0x0008)  


	/// Functions
	// Function /Script/Engine.StereoLayerShapeEquirect.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x415e570] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 4 pad: 0x0000
struct FEquirectProps
{ 
	FBox2D                                             LeftUVRect;                                                 // 0x0000   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x0014   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0028   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0038   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x00E8 (232 bytes) (0x0001F8 - 0x0002E0) align 16 pad: 0x0000
class UStereoLayerComponent : public USceneComponent
{ 
public:
	bool                                               bLiveTexture : 1;                                           // 0x01F8:0 (0x0001)  
	bool                                               bSupportsDepth : 1;                                         // 0x01F8:1 (0x0001)  
	bool                                               bNoAlphaChannel : 1;                                        // 0x01F8:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x01F9   (0x0007)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0200   (0x0008)  
	class UTexture*                                    LeftTexture;                                                // 0x0208   (0x0008)  
	bool                                               bQuadPreserveTextureRatio : 1;                              // 0x0210:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0211   (0x0003)  MISSED
	FVector2D                                          QuadSize;                                                   // 0x0214   (0x0008)  
	FBox2D                                             UVRect;                                                     // 0x021C   (0x0014)  
	float                                              CylinderRadius;                                             // 0x0230   (0x0004)  
	float                                              CylinderOverlayArc;                                         // 0x0234   (0x0004)  
	int32_t                                            CylinderHeight;                                             // 0x0238   (0x0004)  
	FEquirectProps                                     EquirectProps;                                              // 0x023C   (0x0048)  
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                            // 0x0284   (0x0001)  
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                           // 0x0285   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0286   (0x0002)  MISSED
	class UStereoLayerShape*                           Shape;                                                      // 0x0288   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0290   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4C];                                      // 0x0294   (0x004C)  MISSED


	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	// void SetUVRect(FBox2D InUVRect);                                                                                         // [0x415ee20] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	// void SetTexture(class UTexture* InTexture);                                                                              // [0x415ed90] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	// void SetQuadSize(FVector2D InQuadSize);                                                                                  // [0x415ea40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	// void SetPriority(int32_t InPriority);                                                                                    // [0x415e9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetLeftTexture
	// void SetLeftTexture(class UTexture* InTexture);                                                                          // [0x415e820] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.SetEquirectProps
	// void SetEquirectProps(FEquirectProps InScaleBiases);                                                                     // [0x415e470] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	// void MarkTextureForUpdate();                                                                                             // [0x415e340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	// FBox2D GetUVRect();                                                                                                      // [0x415e310] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	// class UTexture* GetTexture();                                                                                            // [0x415e2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	// FVector2D GetQuadSize();                                                                                                 // [0x415e2c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	// int32_t GetPriority();                                                                                                   // [0x1ffdea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.StereoLayerComponent.GetLeftTexture
	// class UTexture* GetLeftTexture();                                                                                        // [0x415e1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	// void ShowSplashScreen();                                                                                                 // [0x321b390] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen
	// void SetSplashScreen(class UTexture* Texture, FVector2D Scale, FVector Offset, bool bShowLoadingMovie, bool bShowOnSet); // [0x415ebd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen
	// void HideSplashScreen();                                                                                                 // [0x321a230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
	// void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);                                                              // [0x415e140] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UStringTable : public UObject
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x008C (140 bytes) (0x000000 - 0x00008C) align 4 pad: 0x0000
struct FSubsurfaceProfileStruct
{ 
	FLinearColor                                       SurfaceAlbedo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       MeanFreePathColor;                                          // 0x0010   (0x0010)  
	float                                              MeanFreePathDistance;                                       // 0x0020   (0x0004)  
	float                                              WorldUnitScale;                                             // 0x0024   (0x0004)  
	bool                                               bEnableBurley;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ScatterRadius;                                              // 0x002C   (0x0004)  
	FLinearColor                                       SubsurfaceColor;                                            // 0x0030   (0x0010)  
	FLinearColor                                       FalloffColor;                                               // 0x0040   (0x0010)  
	FLinearColor                                       BoundaryColorBleed;                                         // 0x0050   (0x0010)  
	float                                              ExtinctionScale;                                            // 0x0060   (0x0004)  
	float                                              NormalScale;                                                // 0x0064   (0x0004)  
	float                                              ScatteringDistribution;                                     // 0x0068   (0x0004)  
	float                                              IOR;                                                        // 0x006C   (0x0004)  
	float                                              Roughness0;                                                 // 0x0070   (0x0004)  
	float                                              Roughness1;                                                 // 0x0074   (0x0004)  
	float                                              LobeMix;                                                    // 0x0078   (0x0004)  
	FLinearColor                                       TransmissionTintColor;                                      // 0x007C   (0x0010)  
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x0090 (144 bytes) (0x000028 - 0x0000B8) align 8 pad: 0x0000
class USubsurfaceProfile : public UObject
{ 
public:
	FSubsurfaceProfileStruct                           Settings;                                                   // 0x0028   (0x008C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
	// class UWorldSubsystem* GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);                             // [0x41616d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
	// class ULocalPlayerSubsystem* GetLocalPlayerSubSystemFromPlayerController(class APlayerController* PlayerController, class UClass* Class); // [0x41614b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
	// class ULocalPlayerSubsystem* GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);                 // [0x4161580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
	// class UGameInstanceSubsystem* GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);               // [0x41613e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
	// class UEngineSubsystem* GetEngineSubsystem(class UClass* Class);                                                         // [0x4161350] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000068) align 8 pad: 0x0000
class USubUVAnimation : public UObject
{ 
public:
	class UTexture2D*                                  SubUVTexture;                                               // 0x0028   (0x0008)  
	int32_t                                            SubImages_Horizontal;                                       // 0x0030   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x0034   (0x0004)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x0038   (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	float                                              AlphaThreshold;                                             // 0x003C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0040   (0x0028)  MISSED
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0010 (16 bytes) (0x000030 - 0x000040) align 8 pad: 0x0000
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
public:
	FFrameRate                                         FrameRate;                                                  // 0x0030   (0x0008)  
	bool                                               bGenerateFullFrame;                                         // 0x0038   (0x0001)  
	bool                                               bUseHighPerformanceClock;                                   // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UTextPropertyTestObject : public UObject
{ 
public:
	FText                                              DefaultedText;                                              // 0x0028   (0x0018)  
	FText                                              UndefaultedText;                                            // 0x0040   (0x0018)  
	FText                                              TransientText;                                              // 0x0058   (0x0018)  
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class ATextRenderActor : public AActor
{ 
public:
	class UTextRenderComponent*                        TextRender;                                                 // 0x0220   (0x0008)  
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0050 (80 bytes) (0x000450 - 0x0004A0) align 16 pad: 0x0000
class UTextRenderComponent : public UPrimitiveComponent
{ 
public:
	FText                                              Text;                                                       // 0x0450   (0x0018)  
	class UMaterialInterface*                          TextMaterial;                                               // 0x0468   (0x0008)  
	class UFont*                                       Font;                                                       // 0x0470   (0x0008)  
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                        // 0x0478   (0x0001)  
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                          // 0x0479   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x047A   (0x0002)  MISSED
	FColor                                             TextRenderColor;                                            // 0x047C   (0x0004)  
	float                                              XScale;                                                     // 0x0480   (0x0004)  
	float                                              YScale;                                                     // 0x0484   (0x0004)  
	float                                              WorldSize;                                                  // 0x0488   (0x0004)  
	float                                              InvDefaultSize;                                             // 0x048C   (0x0004)  
	float                                              HorizSpacingAdjust;                                         // 0x0490   (0x0004)  
	float                                              VertSpacingAdjust;                                          // 0x0494   (0x0004)  
	bool                                               bAlwaysRenderAsText : 1;                                    // 0x0498:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0499   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	// void SetYScale(float Value);                                                                                             // [0x4161db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	// void SetXScale(float Value);                                                                                             // [0x4161d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	// void SetWorldSize(float Value);                                                                                          // [0x4161cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	// void SetVertSpacingAdjust(float Value);                                                                                  // [0x4161bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalTextAligment> Value);                                                     // [0x4161c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	// void SetTextRenderColor(FColor Value);                                                                                   // [0x4161b30] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	// void SetTextMaterial(class UMaterialInterface* Material);                                                                // [0x4161aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetText
	// void SetText(FString Value);                                                                                             // [0x4161a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	// void SetHorizSpacingAdjust(float Value);                                                                                 // [0x4161900] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);                                                      // [0x4161980] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.SetFont
	// void SetFont(class UFont* Value);                                                                                        // [0x4161870] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	// void K2_SetText(FText& Value);                                                                                           // [0x41617a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	// FVector GetTextWorldSize();                                                                                              // [0x4161690] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	// FVector GetTextLocalSize();                                                                                              // [0x4161650] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x0068 (104 bytes) (0x000178 - 0x0001E0) align 16 pad: 0x0000
class UTexture2DArray : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_3[0x58];                                      // 0x0178   (0x0058)  MISSED
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x01D0   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x01D1   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressZ;                                                   // 0x01D2   (0x0001)  
	unsigned char                                      UnknownData01_7[0xD];                                       // 0x01D3   (0x000D)  MISSED
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x0018 (24 bytes) (0x000178 - 0x000190) align 16 pad: 0x0000
class UTexture2DDynamic : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0178   (0x0008)  MISSED
	TEnumAsByte<EPixelFormat>                          Format;                                                     // 0x0180   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0181   (0x000F)  MISSED
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0010 (16 bytes) (0x0001A0 - 0x0001B0) align 16 pad: 0x0000
class UTextureLightProfile : public UTexture2D
{ 
public:
	float                                              Brightness;                                                 // 0x01A0   (0x0004)  
	float                                              TextureMultiplier;                                          // 0x01A4   (0x0004)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x01A8   (0x0008)  MISSED
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
public:
};

/// Class /Script/Engine.TextureRenderTarget2DArray
/// Size: 0x0020 (32 bytes) (0x000180 - 0x0001A0) align 16 pad: 0x0000
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0180   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0184   (0x0004)  
	int32_t                                            Slices;                                                     // 0x0188   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x018C   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x019C   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x019D:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x019D:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x019E   (0x0002)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0020 (32 bytes) (0x000180 - 0x0001A0) align 16 pad: 0x0000
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0180   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x0184   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0194   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0195:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0195:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0xA];                                       // 0x0196   (0x000A)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetVolume
/// Size: 0x0020 (32 bytes) (0x000180 - 0x0001A0) align 16 pad: 0x0000
class UTextureRenderTargetVolume : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0180   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0184   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0188   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x018C   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x019C   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x019D:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x019D:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x019E   (0x0002)  MISSED
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UThumbnailInfo : public UObject
{ 
public:
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FTimelineEventEntry
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	SDK_UNDEFINED(16,193) /* FDelegateProperty */      __um(EventFunc);                                            // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FTimelineVectorTrack
{ 
	class UCurveVector*                                VectorCurve;                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,194) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              VectorPropertyName;                                         // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FTimelineFloatTrack
{ 
	class UCurveFloat*                                 FloatCurve;                                                 // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,195) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              FloatPropertyName;                                          // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FTimelineLinearColorTrack
{ 
	class UCurveLinearColor*                           LinearColorCurve;                                           // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,196) /* FDelegateProperty */      __um(InterpFunc);                                           // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              LinearColorPropertyName;                                    // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.Timeline
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FTimeline
{ 
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x0000   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0001:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0001:1 (0x0001)  
	bool                                               bPlaying : 1;                                               // 0x0001:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Length;                                                     // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              position;                                                   // 0x000C   (0x0004)  
	TArray<FTimelineEventEntry>                        Events;                                                     // 0x0010   (0x0010)  
	TArray<FTimelineVectorTrack>                       InterpVectors;                                              // 0x0020   (0x0010)  
	TArray<FTimelineFloatTrack>                        InterpFloats;                                               // 0x0030   (0x0010)  
	TArray<FTimelineLinearColorTrack>                  InterpLinearColors;                                         // 0x0040   (0x0010)  
	SDK_UNDEFINED(16,197) /* FDelegateProperty */      __um(TimelinePostUpdateFunc);                               // 0x0050   (0x0010)  
	SDK_UNDEFINED(16,198) /* FDelegateProperty */      __um(TimelineFinishedFunc);                                 // 0x0060   (0x0010)  
	SDK_UNDEFINED(8,199) /* TWeakObjectPtr<UObject*> */ __um(PropertySetObject);                                   // 0x0070   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0078   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0080   (0x0018)  MISSED
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x00A0 (160 bytes) (0x0000B0 - 0x000150) align 8 pad: 0x0000
class UTimelineComponent : public UActorComponent
{ 
public:
	FTimeline                                          TheTimeline;                                                // 0x00B0   (0x0098)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0148:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0149   (0x0007)  MISSED


	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	// void Stop();                                                                                                             // [0x4165450] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	// void SetVectorCurve(class UCurveVector* NewVectorCurve, FName VectorTrackName);                                          // [0x4165380] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	// void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);                                              // [0x4165300] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	// void SetTimelineLength(float NewLength);                                                                                 // [0x4165280] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	// void SetPlayRate(float NewRate);                                                                                         // [0x41650e0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	// void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);                                         // [0x4165160] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	// void SetNewTime(float NewTime);                                                                                          // [0x4165060] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLooping
	// void SetLooping(bool bNewLooping);                                                                                       // [0x4164fd0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	// void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);                      // [0x4164f00] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	// void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);                                                                 // [0x4164e70] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	// void SetFloatCurve(class UCurveFloat* NewFloatCurve, FName FloatTrackName);                                              // [0x4164da0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	// void ReverseFromEnd();                                                                                                   // [0x4164d80] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Reverse
	// void Reverse();                                                                                                          // [0x4164d60] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	// void PlayFromStart();                                                                                                    // [0x4164d40] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.Play
	// void Play();                                                                                                             // [0x4164d20] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	// void OnRep_Timeline();                                                                                                   // [0x4164d00] Final|Native|Public  
	// Function /Script/Engine.TimelineComponent.IsReversing
	// bool IsReversing();                                                                                                      // [0x4164cd0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x4164ca0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.IsLooping
	// bool IsLooping();                                                                                                        // [0x4164c70] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	// float GetTimelineLength();                                                                                               // [0x4164c40] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x4164b60] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	// float GetPlaybackPosition();                                                                                             // [0x4164b90] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	// bool GetIgnoreTimeDilation();                                                                                            // [0x4164b30] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FTTTrackBase
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FName                                              TrackName;                                                  // 0x0008   (0x0008)  
	bool                                               bIsExternalCurve;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0010 (16 bytes) (0x000018 - 0x000028) align 8 pad: 0x0000
struct FTTEventTrack : FTTTrackBase
{ 
	FName                                              FunctionName;                                               // 0x0018   (0x0008)  
	class UCurveFloat*                                 CurveKeys;                                                  // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0008 (8 bytes) (0x000018 - 0x000020) align 8 pad: 0x0000
struct FTTPropertyTrack : FTTTrackBase
{ 
	FName                                              PropertyName;                                               // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0008 (8 bytes) (0x000020 - 0x000028) align 8 pad: 0x0000
struct FTTFloatTrack : FTTPropertyTrack
{ 
	class UCurveFloat*                                 CurveFloat;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0008 (8 bytes) (0x000020 - 0x000028) align 8 pad: 0x0000
struct FTTVectorTrack : FTTPropertyTrack
{ 
	class UCurveVector*                                CurveVector;                                                // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0008 (8 bytes) (0x000020 - 0x000028) align 8 pad: 0x0000
struct FTTLinearColorTrack : FTTPropertyTrack
{ 
	class UCurveLinearColor*                           CurveLinearColor;                                           // 0x0020   (0x0008)  
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x0090 (144 bytes) (0x000028 - 0x0000B8) align 8 pad: 0x0000
class UTimelineTemplate : public UObject
{ 
public:
	float                                              TimelineLength;                                             // 0x0028   (0x0004)  
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x002C   (0x0001)  
	bool                                               bAutoPlay : 1;                                              // 0x002D:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x002D:1 (0x0001)  
	bool                                               bReplicated : 1;                                            // 0x002D:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x002D:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	TArray<FTTEventTrack>                              EventTracks;                                                // 0x0030   (0x0010)  
	TArray<FTTFloatTrack>                              FloatTracks;                                                // 0x0040   (0x0010)  
	TArray<FTTVectorTrack>                             VectorTracks;                                               // 0x0050   (0x0010)  
	TArray<FTTLinearColorTrack>                        LinearColorTracks;                                          // 0x0060   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x0070   (0x0010)  
	FGuid                                              TimelineGuid;                                               // 0x0080   (0x0010)  
	TEnumAsByte<ETickingGroup>                         TimelineTickGroup;                                          // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FName                                              VariableName;                                               // 0x0094   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x009C   (0x0008)  
	FName                                              UpdateFunctionName;                                         // 0x00A4   (0x0008)  
	FName                                              FinishedFunctionName;                                       // 0x00AC   (0x0008)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.TireType
/// Size: 0x0008 (8 bytes) (0x000030 - 0x000038) align 8 pad: 0x0000
class UTireType : public UDataAsset
{ 
public:
	float                                              FrictionScale;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FTouchInputControl
{ 
	class UTexture2D*                                  Image1;                                                     // 0x0000   (0x0008)  
	class UTexture2D*                                  Image2;                                                     // 0x0008   (0x0008)  
	FVector2D                                          Center;                                                     // 0x0010   (0x0008)  
	FVector2D                                          VisualSize;                                                 // 0x0018   (0x0008)  
	FVector2D                                          ThumbSize;                                                  // 0x0020   (0x0008)  
	FVector2D                                          InteractionSize;                                            // 0x0028   (0x0008)  
	FVector2D                                          InputScale;                                                 // 0x0030   (0x0008)  
	FKey                                               MainInputKey;                                               // 0x0038   (0x0018)  
	FKey                                               AltInputKey;                                                // 0x0050   (0x0018)  
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000058) align 8 pad: 0x0000
class UTouchInterface : public UObject
{ 
public:
	TArray<FTouchInputControl>                         Controls;                                                   // 0x0028   (0x0010)  
	float                                              ActiveOpacity;                                              // 0x0038   (0x0004)  
	float                                              InactiveOpacity;                                            // 0x003C   (0x0004)  
	float                                              TimeUntilDeactive;                                          // 0x0040   (0x0004)  
	float                                              TimeUntilReset;                                             // 0x0044   (0x0004)  
	float                                              ActivationDelay;                                            // 0x0048   (0x0004)  
	bool                                               bPreventRecenter;                                           // 0x004C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              StartupDelay;                                               // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x0000 (0 bytes) (0x000228 - 0x000228) align 8 pad: 0x0000
class ATriggerCapsule : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x0000 (0 bytes) (0x000228 - 0x000228) align 8 pad: 0x0000
class ATriggerSphere : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0000 (0 bytes) (0x000258 - 0x000258) align 8 pad: 0x0000
class ATriggerVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0000 (0 bytes) (0x000038 - 0x000038) align 8 pad: 0x0000
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
public:


	/// Functions
	// Function /Script/Engine.TwitterIntegrationBase.TwitterRequest
	// bool TwitterRequest(FString URL, TArray<FString>& ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int32_t AccountIndex); // [0x4169500] Native|Public|HasOutParms 
	// Function /Script/Engine.TwitterIntegrationBase.ShowTweetUI
	// bool ShowTweetUI(FString InitialMessage, FString URL, FString Picture);                                                  // [0x41693a0] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.Init
	// void Init();                                                                                                             // [0x31d11a0] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetNumAccounts
	// int32_t GetNumAccounts();                                                                                                // [0x4168830] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.GetAccountName
	// FString GetAccountName(int32_t AccountIndex);                                                                            // [0x4168750] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.CanShowTweetUI
	// bool CanShowTweetUI();                                                                                                   // [0x181c090] Native|Public        
	// Function /Script/Engine.TwitterIntegrationBase.AuthorizeAccounts
	// bool AuthorizeAccounts();                                                                                                // [0x1822ce0] Native|Public        
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x0050 (80 bytes) (0x000060 - 0x0000B0) align 8 pad: 0x0000
class UUserDefinedEnum : public UEnum
{ 
public:
	SDK_UNDEFINED(80,200) /* TMap<FName, FText> */     __um(DisplayNameMap);                                       // 0x0060   (0x0050)  
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0048 (72 bytes) (0x0000C0 - 0x000108) align 8 pad: 0x0000
class UUserDefinedStruct : public UScriptStruct
{ 
public:
	TEnumAsByte<EUserDefinedStructureStatus>           Status;                                                     // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x00C4   (0x0010)  
	unsigned char                                      UnknownData01_7[0x34];                                      // 0x00D4   (0x0034)  MISSED
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0238 (568 bytes) (0x000038 - 0x000270) align 8 pad: 0x0000
class UUserInterfaceSettings : public UDeveloperSettings
{ 
public:
	ERenderFocusRule                                   RenderFocusRule;                                            // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	SDK_UNDEFINED(80,201) /* TMap<TEnumAsByte<EMouseCursor>, FHardwareCursorReference> */ __um(HardwareCursors);   // 0x0040   (0x0050)  
	SDK_UNDEFINED(80,202) /* TMap<TEnumAsByte<EMouseCursor>, FSoftClassPath> */ __um(SoftwareCursors);             // 0x0090   (0x0050)  
	FSoftClassPath                                     DefaultCursor;                                              // 0x00E0   (0x0018)  
	FSoftClassPath                                     TextEditBeamCursor;                                         // 0x00F8   (0x0018)  
	FSoftClassPath                                     CrosshairsCursor;                                           // 0x0110   (0x0018)  
	FSoftClassPath                                     HandCursor;                                                 // 0x0128   (0x0018)  
	FSoftClassPath                                     GrabHandCursor;                                             // 0x0140   (0x0018)  
	FSoftClassPath                                     GrabHandClosedCursor;                                       // 0x0158   (0x0018)  
	FSoftClassPath                                     SlashedCircleCursor;                                        // 0x0170   (0x0018)  
	float                                              ApplicationScale;                                           // 0x0188   (0x0004)  
	EUIScalingRule                                     UIScaleRule;                                                // 0x018C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x018D   (0x0003)  MISSED
	FSoftClassPath                                     CustomScalingRuleClass;                                     // 0x0190   (0x0018)  
	FRuntimeFloatCurve                                 UIScaleCurve;                                               // 0x01A8   (0x0088)  
	bool                                               bAllowHighDPIInGameMode;                                    // 0x0230   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0231   (0x0003)  MISSED
	FIntPoint                                          DesignScreenSize;                                           // 0x0234   (0x0008)  
	bool                                               bLoadWidgetsOnDedicatedServer;                              // 0x023C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x023D   (0x0003)  MISSED
	TArray<class UObject*>                             CursorClasses;                                              // 0x0240   (0x0010)  
	class UClass*                                      CustomScalingRuleClassInstance;                             // 0x0250   (0x0008)  
	class UDPICustomScalingRule*                       CustomScalingRule;                                          // 0x0258   (0x0008)  
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x0260   (0x0010)  MISSED
};

/// Class /Script/Engine.VectorField
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UVectorField : public UObject
{ 
public:
	FBox                                               Bounds;                                                     // 0x0028   (0x001C)  
	float                                              Intensity;                                                  // 0x0044   (0x0004)  
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0040 (64 bytes) (0x000048 - 0x000088) align 8 pad: 0x0000
class UVectorFieldAnimated : public UVectorField
{ 
public:
	class UTexture2D*                                  Texture;                                                    // 0x0048   (0x0008)  
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                             // 0x0050   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	int32_t                                            VolumeSizeX;                                                // 0x0054   (0x0004)  
	int32_t                                            VolumeSizeY;                                                // 0x0058   (0x0004)  
	int32_t                                            VolumeSizeZ;                                                // 0x005C   (0x0004)  
	int32_t                                            SubImagesX;                                                 // 0x0060   (0x0004)  
	int32_t                                            SubImagesY;                                                 // 0x0064   (0x0004)  
	int32_t                                            FrameCount;                                                 // 0x0068   (0x0004)  
	float                                              FramesPerSecond;                                            // 0x006C   (0x0004)  
	bool                                               bLoop : 1;                                                  // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	class UVectorFieldStatic*                          NoiseField;                                                 // 0x0078   (0x0008)  
	float                                              NoiseScale;                                                 // 0x0080   (0x0004)  
	float                                              NoiseMax;                                                   // 0x0084   (0x0004)  
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0030 (48 bytes) (0x000450 - 0x000480) align 16 pad: 0x0000
class UVectorFieldComponent : public UPrimitiveComponent
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0450   (0x0008)  
	float                                              Intensity;                                                  // 0x0458   (0x0004)  
	float                                              Tightness;                                                  // 0x045C   (0x0004)  
	bool                                               bPreviewVectorField : 1;                                    // 0x0460:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x1F];                                      // 0x0461   (0x001F)  MISSED


	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	// void SetIntensity(float NewIntensity);                                                                                   // [0x4169310] Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000098) align 8 pad: 0x0000
class UVectorFieldStatic : public UVectorField
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0048   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x004C   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0050   (0x0004)  
	bool                                               bAllowCPUAccess;                                            // 0x0054   (0x0001)  
	unsigned char                                      UnknownData00_7[0x43];                                      // 0x0055   (0x0043)  MISSED
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AVectorFieldVolume : public AActor
{ 
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                       // 0x0220   (0x0008)  
};

/// Class /Script/Engine.ViewportStatsSubsystem
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UViewportStatsSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0030   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
	// void RemoveDisplayDelegate(int32_t IndexToRemove);                                                                       // [0x4169280] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.ViewportStatsSubsystem.AddTimedDisplay
	// void AddTimedDisplay(FText Text, FLinearColor Color, float Duration);                                                    // [0x41685c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.ViewportStatsSubsystem.AddDisplayDelegate
	// int32_t AddDisplayDelegate(FDelegateProperty& Delegate);                                                                 // [0x4168500] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVirtualTexture : public UObject
{ 
public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class ULightMapVirtualTexture : public UVirtualTexture
{ 
public:
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0000 (0 bytes) (0x0001A0 - 0x0001A0) align 16 pad: 0x0000
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
public:
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FVirtualTextureBuildSettings
{ 
	int32_t                                            TileSize;                                                   // 0x0000   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0004   (0x0004)  
	bool                                               bEnableCompressCrunch;                                      // 0x0008   (0x0001)  
	bool                                               bEnableCompressZlib;                                        // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTexture2D
/// Size: 0x0010 (16 bytes) (0x0001A0 - 0x0001B0) align 16 pad: 0x0000
class UVirtualTexture2D : public UTexture2D
{ 
public:
	FVirtualTextureBuildSettings                       Settings;                                                   // 0x01A0   (0x000C)  
	bool                                               bContinuousUpdate;                                          // 0x01AC   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x01AD   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x01AE   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTextureBuilder
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UVirtualTextureBuilder : public UObject
{ 
public:
	class UVirtualTexture2D*                           Texture;                                                    // 0x0028   (0x0008)  
	uint64_t                                           BuildHash;                                                  // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FVirtualTextureSpacePoolConfig
{ 
	int32_t                                            MinTileSize;                                                // 0x0000   (0x0004)  
	int32_t                                            MaxTileSize;                                                // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,203) /* TArray<TEnumAsByte<EPixelFormat>> */ __um(Formats);                                   // 0x0008   (0x0010)  
	int32_t                                            SizeInMegabyte;                                             // 0x0018   (0x0004)  
	bool                                               bAllowSizeScale;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UVirtualTexturePoolConfig : public UObject
{ 
public:
	int32_t                                            DefaultSizeInMegabyte;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FVirtualTextureSpacePoolConfig>             Pools;                                                      // 0x0030   (0x0010)  
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVisualLoggerAutomationTests : public UObject
{ 
public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.VisualLoggerKismetLibrary.RedirectVislog
	// void RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);                                        // [0x41691c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogText
	// void LogText(class UObject* WorldContextObject, FString Text, FName LogCategory, bool bAddToMessageLog);                 // [0x4169020] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogSegment
	// void LogSegment(class UObject* WorldContextObject, FVector SegmentStart, FVector SegmentEnd, FString Text, FLinearColor ObjectColor, float Thickness, FName CategoryName, bool bAddToMessageLog); // [0x4168d40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogLocation
	// void LogLocation(class UObject* WorldContextObject, FVector Location, FString Text, FLinearColor ObjectColor, float Radius, FName LogCategory, bool bAddToMessageLog); // [0x4168ab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogBox
	// void LogBox(class UObject* WorldContextObject, FBox BoxShape, FString Text, FLinearColor ObjectColor, FName LogCategory, bool bAddToMessageLog); // [0x4168860] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VisualLoggerKismetLibrary.EnableRecording
	// void EnableRecording(bool bEnabled);                                                                                     // [0x946dc0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0010 (16 bytes) (0x000068 - 0x000078) align 8 pad: 0x0000
class UVoiceChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0068   (0x0010)  MISSED
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FVoiceSettings
{ 
	class USceneComponent*                             ComponentToAttachTo;                                        // 0x0000   (0x0008)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0008   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0010   (0x0008)  
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x0038 (56 bytes) (0x0000B0 - 0x0000E8) align 8 pad: 0x0000
class UVOIPTalker : public UActorComponent
{ 
public:
	FVoiceSettings                                     Settings;                                                   // 0x00B0   (0x0018)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x00C8   (0x0020)  MISSED


	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	// void RegisterWithPlayerState(class APlayerState* OwningState);                                                           // [0x416cf20] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	// float GetVoiceLevel();                                                                                                   // [0x416cea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	// class UVOIPTalker* CreateTalkerForPlayer(class APlayerState* OwningState);                                               // [0x416ce10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	// void BPOnTalkingEnd();                                                                                                   // [0x2030290] Native|Event|Protected|BlueprintEvent 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	// void BPOnTalkingBegin(class UAudioComponent* AudioComponent);                                                            // [0x416cd80] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/Engine.VOIPStatics.SetMicThreshold
	// void SetMicThreshold(float InThreshold);                                                                                 // [0x416d240] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x0058 (88 bytes) (0x000178 - 0x0001D0) align 16 pad: 0x0000
class UVolumeTexture : public UTexture
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0178   (0x0058)  MISSED
};

/// Class /Script/Engine.VolumetricCloudComponent
/// Size: 0x0048 (72 bytes) (0x0001F8 - 0x000240) align 16 pad: 0x0000
class UVolumetricCloudComponent : public USceneComponent
{ 
public:
	float                                              LayerBottomAltitude;                                        // 0x01F8   (0x0004)  
	float                                              LayerHeight;                                                // 0x01FC   (0x0004)  
	float                                              TracingStartMaxDistance;                                    // 0x0200   (0x0004)  
	float                                              TracingMaxDistance;                                         // 0x0204   (0x0004)  
	float                                              PlanetRadius;                                               // 0x0208   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x020C   (0x0004)  
	class UMaterialInterface*                          Material;                                                   // 0x0210   (0x0008)  
	bool                                               bUsePerSampleAtmosphericLightTransmittance : 1;             // 0x0218:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0219   (0x0003)  MISSED
	float                                              SkyLightCloudBottomOcclusion;                               // 0x021C   (0x0004)  
	float                                              ViewSampleCountScale;                                       // 0x0220   (0x0004)  
	float                                              ReflectionSampleCountScale;                                 // 0x0224   (0x0004)  
	float                                              ShadowViewSampleCountScale;                                 // 0x0228   (0x0004)  
	float                                              ShadowReflectionSampleCountScale;                           // 0x022C   (0x0004)  
	float                                              ShadowTracingDistance;                                      // 0x0230   (0x0004)  
	float                                              StopTracingTransmittanceThreshold;                          // 0x0234   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0238   (0x0008)  MISSED


	/// Functions
	// Function /Script/Engine.VolumetricCloudComponent.SetViewSampleCountScale
	// void SetViewSampleCountScale(float NewValue);                                                                            // [0x416d740] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
	// void SetTracingStartMaxDistance(float NewValue);                                                                         // [0x416d6c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingMaxDistance
	// void SetTracingMaxDistance(float NewValue);                                                                              // [0x4147da0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetStopTracingTransmittanceThreshold
	// void SetStopTracingTransmittanceThreshold(float NewValue);                                                               // [0x416d5c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
	// void SetSkyLightCloudBottomOcclusion(float NewValue);                                                                    // [0x416d4c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
	// void SetShadowViewSampleCountScale(float NewValue);                                                                      // [0x4148410] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowTracingDistance
	// void SetShadowTracingDistance(float NewValue);                                                                           // [0x416d440] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
	// void SetShadowReflectionSampleCountScale(float NewValue);                                                                // [0x416d3c0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
	// void SetReflectionSampleCountScale(float NewValue);                                                                      // [0x4148830] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetPlanetRadius
	// void SetPlanetRadius(float NewValue);                                                                                    // [0x4148510] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetMaterial
	// void SetMaterial(class UMaterialInterface* NewValue);                                                                    // [0x416d130] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerHeight
	// void SetLayerHeight(float NewValue);                                                                                     // [0x416d0b0] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerBottomAltitude
	// void SetLayerBottomAltitude(float NewValue);                                                                             // [0x416d030] Final|RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetGroundAlbedo
	// void SetGroundAlbedo(FColor NewValue);                                                                                   // [0x416cfb0] Final|RequiredAPI|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
	// void SetbUsePerSampleAtmosphericLightTransmittance(bool NewValue);                                                       // [0x416d840] Final|RequiredAPI|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.VolumetricCloud
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AVolumetricCloud : public AInfo
{ 
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                   // 0x0220   (0x0008)  
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0008 (8 bytes) (0x000258 - 0x000260) align 8 pad: 0x0000
class AVolumetricLightmapDensityVolume : public AVolume
{ 
public:
	FInt32Interval                                     AllowedMipLevelRange;                                       // 0x0258   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x0008 (8 bytes) (0x000220 - 0x000228) align 8 pad: 0x0000
class AWindDirectionalSource : public AInfo
{ 
public:
	class UWindDirectionalSourceComponent*             Component;                                                  // 0x0220   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0028 (40 bytes) (0x0001F8 - 0x000220) align 16 pad: 0x0000
class UWindDirectionalSourceComponent : public USceneComponent
{ 
public:
	float                                              Strength;                                                   // 0x01F8   (0x0004)  
	float                                              Speed;                                                      // 0x01FC   (0x0004)  
	float                                              MinGustAmount;                                              // 0x0200   (0x0004)  
	float                                              MaxGustAmount;                                              // 0x0204   (0x0004)  
	float                                              Radius;                                                     // 0x0208   (0x0004)  
	bool                                               bPointWind : 1;                                             // 0x020C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x13];                                      // 0x020D   (0x0013)  MISSED


	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	// void SetWindType(EWindSourceType InNewType);                                                                             // [0x416d7c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	// void SetStrength(float InNewStrength);                                                                                   // [0x416d640] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	// void SetSpeed(float InNewSpeed);                                                                                         // [0x416d540] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	// void SetRadius(float InNewRadius);                                                                                       // [0x416d340] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	// void SetMinimumGustAmount(float InNewMinGust);                                                                           // [0x416d2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	// void SetMaximumGustAmount(float InNewMaxGust);                                                                           // [0x416d1c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000068) align 8 pad: 0x0000
class UWorldComposition : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x20];                                      // 0x0028   (0x0020)  MISSED
	TArray<class ULevelStreaming*>                     TilesStreaming;                                             // 0x0048   (0x0010)  
	double                                             TilesStreamingTimeThreshold;                                // 0x0058   (0x0008)  
	bool                                               bLoadAllTilesDuringCinematic;                               // 0x0060   (0x0001)  
	bool                                               bRebaseOriginIn3DSpace;                                     // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	float                                              RebaseOriginDistance;                                       // 0x0064   (0x0004)  
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 4 pad: 0x0000
struct FMaterialProxySettings
{ 
	FIntPoint                                          TextureSize;                                                // 0x0000   (0x0008)  
	float                                              GutterSpace;                                                // 0x0008   (0x0004)  
	float                                              MetallicConstant;                                           // 0x000C   (0x0004)  
	float                                              RoughnessConstant;                                          // 0x0010   (0x0004)  
	float                                              AnisotropyConstant;                                         // 0x0014   (0x0004)  
	float                                              SpecularConstant;                                           // 0x0018   (0x0004)  
	float                                              OpacityConstant;                                            // 0x001C   (0x0004)  
	float                                              OpacityMaskConstant;                                        // 0x0020   (0x0004)  
	float                                              AmbientOcclusionConstant;                                   // 0x0024   (0x0004)  
	TEnumAsByte<ETextureSizingType>                    TextureSizingType;                                          // 0x0028   (0x0001)  
	TEnumAsByte<EMaterialMergeType>                    MaterialMergeType;                                          // 0x0029   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x002A   (0x0001)  
	bool                                               bAllowTwoSidedMaterial : 1;                                 // 0x002B:0 (0x0001)  
	bool                                               bNormalMap : 1;                                             // 0x002B:1 (0x0001)  
	bool                                               bTangentMap : 1;                                            // 0x002B:2 (0x0001)  
	bool                                               bMetallicMap : 1;                                           // 0x002B:3 (0x0001)  
	bool                                               bRoughnessMap : 1;                                          // 0x002B:4 (0x0001)  
	bool                                               bAnisotropyMap : 1;                                         // 0x002B:5 (0x0001)  
	bool                                               bSpecularMap : 1;                                           // 0x002B:6 (0x0001)  
	bool                                               bEmissiveMap : 1;                                           // 0x002B:7 (0x0001)  
	bool                                               bOpacityMap : 1;                                            // 0x002C:0 (0x0001)  
	bool                                               bOpacityMaskMap : 1;                                        // 0x002C:1 (0x0001)  
	bool                                               bAmbientOcclusionMap : 1;                                   // 0x002C:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FIntPoint                                          DiffuseTextureSize;                                         // 0x0030   (0x0008)  
	FIntPoint                                          NormalTextureSize;                                          // 0x0038   (0x0008)  
	FIntPoint                                          TangentTextureSize;                                         // 0x0040   (0x0008)  
	FIntPoint                                          MetallicTextureSize;                                        // 0x0048   (0x0008)  
	FIntPoint                                          RoughnessTextureSize;                                       // 0x0050   (0x0008)  
	FIntPoint                                          AnisotropyTextureSize;                                      // 0x0058   (0x0008)  
	FIntPoint                                          SpecularTextureSize;                                        // 0x0060   (0x0008)  
	FIntPoint                                          EmissiveTextureSize;                                        // 0x0068   (0x0008)  
	FIntPoint                                          OpacityTextureSize;                                         // 0x0070   (0x0008)  
	FIntPoint                                          OpacityMaskTextureSize;                                     // 0x0078   (0x0008)  
	FIntPoint                                          AmbientOcclusionTextureSize;                                // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 4 pad: 0x0000
struct FMeshProxySettings
{ 
	int32_t                                            ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              VoxelSize;                                                  // 0x0004   (0x0004)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x0008   (0x0088)  
	float                                              MergeDistance;                                              // 0x0090   (0x0004)  
	FColor                                             UnresolvedGeometryColor;                                    // 0x0094   (0x0004)  
	float                                              MaxRayCastDist;                                             // 0x0098   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x009C   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00A0   (0x0004)  
	TEnumAsByte<EProxyNormalComputationMethod>         NormalCalculationMethod;                                    // 0x00A4   (0x0001)  
	TEnumAsByte<ELandscapeCullingPrecision>            LandscapeCullingPrecision;                                  // 0x00A5   (0x0001)  
	bool                                               bCalculateCorrectLODModel : 1;                              // 0x00A6:0 (0x0001)  
	bool                                               bOverrideVoxelSize : 1;                                     // 0x00A6:1 (0x0001)  
	bool                                               bOverrideTransferDistance : 1;                              // 0x00A6:2 (0x0001)  
	bool                                               bUseHardAngleThreshold : 1;                                 // 0x00A6:3 (0x0001)  
	bool                                               bComputeLightMapResolution : 1;                             // 0x00A6:4 (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x00A6:5 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x00A6:6 (0x0001)  
	bool                                               bAllowAdjacency : 1;                                        // 0x00A6:7 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x00A7:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x00A7:1 (0x0001)  
	bool                                               bCreateCollision : 1;                                       // 0x00A7:2 (0x0001)  
	bool                                               bAllowVertexColors : 1;                                     // 0x00A7:3 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x00A7:4 (0x0001)  
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 4 pad: 0x0000
struct FMeshMergingSettings
{ 
	int32_t                                            TargetLightMapResolution;                                   // 0x0000   (0x0004)  
	EUVOutput                                          OutputUVs[8];                                               // 0x0004   (0x0008)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x000C   (0x0088)  
	int32_t                                            GutterSize;                                                 // 0x0094   (0x0004)  
	int32_t                                            SpecificLOD;                                                // 0x0098   (0x0004)  
	EMeshLODSelectionType                              LODSelectionType;                                           // 0x009C   (0x0001)  
	bool                                               bGenerateLightMapUV : 1;                                    // 0x009D:0 (0x0001)  
	bool                                               bComputedLightMapResolution : 1;                            // 0x009D:1 (0x0001)  
	bool                                               bPivotPointAtZero : 1;                                      // 0x009D:2 (0x0001)  
	bool                                               bMergePhysicsData : 1;                                      // 0x009D:3 (0x0001)  
	bool                                               bMergeMaterials : 1;                                        // 0x009D:4 (0x0001)  
	bool                                               bCreateMergedMaterial : 1;                                  // 0x009D:5 (0x0001)  
	bool                                               bBakeVertexDataToMesh : 1;                                  // 0x009D:6 (0x0001)  
	bool                                               bUseVertexDataForBakingMaterial : 1;                        // 0x009D:7 (0x0001)  
	bool                                               bUseTextureBinning : 1;                                     // 0x009E:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x009E:1 (0x0001)  
	bool                                               bMergeEquivalentMaterials : 1;                              // 0x009E:2 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x009E:3 (0x0001)  
	bool                                               bIncludeImposters : 1;                                      // 0x009E:4 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x009E:5 (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x009F   (0x0001)  MISSED
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align 4 pad: 0x0000
struct FHierarchicalSimplification
{ 
	float                                              TransitionScreenSize;                                       // 0x0000   (0x0004)  
	float                                              OverrideDrawDistance;                                       // 0x0004   (0x0004)  
	bool                                               bUseOverrideDrawDistance : 1;                               // 0x0008:0 (0x0001)  
	bool                                               bAllowSpecificExclusion : 1;                                // 0x0008:1 (0x0001)  
	bool                                               bSimplifyMesh : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bOnlyGenerateClustersForVolumes : 1;                        // 0x0008:3 (0x0001)  
	bool                                               bReusePreviousLevelClusters : 1;                            // 0x0008:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FMeshProxySettings                                 ProxySetting;                                               // 0x000C   (0x00A8)  
	FMeshMergingSettings                               MergeSetting;                                               // 0x00B4   (0x00A0)  
	float                                              DesiredBoundRadius;                                         // 0x0154   (0x0004)  
	float                                              DesiredFillingPercentage;                                   // 0x0158   (0x0004)  
	int32_t                                            MinNumberOfActorsToBuild;                                   // 0x015C   (0x0004)  
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UHierarchicalLODSetup : public UObject
{ 
public:
	TArray<FHierarchicalSimplification>                HierarchicalLODSetup;                                       // 0x0028   (0x0010)  
	SDK_UNDEFINED(40,204) /* TWeakObjectPtr<UMaterialInterface*> */ __um(OverrideBaseMaterial);                    // 0x0038   (0x0028)  
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FNetViewer
{ 
	class UNetConnection*                              Connection;                                                 // 0x0000   (0x0008)  
	class AActor*                                      InViewer;                                                   // 0x0008   (0x0008)  
	class AActor*                                      ViewTarget;                                                 // 0x0010   (0x0008)  
	FVector                                            ViewLocation;                                               // 0x0018   (0x000C)  
	FVector                                            ViewDir;                                                    // 0x0024   (0x000C)  
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x0180 (384 bytes) (0x000220 - 0x0003A0) align 8 pad: 0x0000
class AWorldSettings : public AInfo
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0220   (0x0008)  MISSED
	int32_t                                            VisibilityCellSize;                                         // 0x0228   (0x0004)  
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                   // 0x022C   (0x0001)  
	bool                                               bPrecomputeVisibility : 1;                                  // 0x022D:0 (0x0001)  
	bool                                               bPlaceCellsOnlyAlongCameraTracks : 1;                       // 0x022D:1 (0x0001)  
	bool                                               bEnableWorldBoundsChecks : 1;                               // 0x022D:2 (0x0001)  
	bool                                               bEnableNavigationSystem : 1;                                // 0x022D:3 (0x0001)  
	bool                                               bEnableAISystem : 1;                                        // 0x022D:4 (0x0001)  
	bool                                               bEnableWorldComposition : 1;                                // 0x022D:5 (0x0001)  
	bool                                               bUseClientSideLevelStreamingVolumes : 1;                    // 0x022D:6 (0x0001)  
	bool                                               bEnableWorldOriginRebasing : 1;                             // 0x022D:7 (0x0001)  
	bool                                               bWorldGravitySet : 1;                                       // 0x022E:0 (0x0001)  
	bool                                               bGlobalGravitySet : 1;                                      // 0x022E:1 (0x0001)  
	bool                                               bMinimizeBSPSections : 1;                                   // 0x022E:2 (0x0001)  
	bool                                               bForceNoPrecomputedLighting : 1;                            // 0x022E:3 (0x0001)  
	bool                                               bHighPriorityLoading : 1;                                   // 0x022E:4 (0x0001)  
	bool                                               bHighPriorityLoadingLocal : 1;                              // 0x022E:5 (0x0001)  
	bool                                               bOverrideDefaultBroadphaseSettings : 1;                     // 0x022E:6 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x022F   (0x0001)  MISSED
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                     // 0x0230   (0x0008)  
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                             // 0x0238   (0x0008)  
	float                                              WorldToMeters;                                              // 0x0240   (0x0004)  
	float                                              KillZ;                                                      // 0x0244   (0x0004)  
	class UClass*                                      KillZDamageType;                                            // 0x0248   (0x0008)  
	float                                              WorldGravityZ;                                              // 0x0250   (0x0004)  
	float                                              GlobalGravityZ;                                             // 0x0254   (0x0004)  
	class UClass*                                      DefaultPhysicsVolumeClass;                                  // 0x0258   (0x0008)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x0260   (0x0008)  
	class UClass*                                      DefaultGameMode;                                            // 0x0268   (0x0008)  
	class UClass*                                      GameNetworkManagerClass;                                    // 0x0270   (0x0008)  
	int32_t                                            PackedLightAndShadowMapTextureSize;                         // 0x0278   (0x0004)  
	FVector                                            DefaultColorScale;                                          // 0x027C   (0x000C)  
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                   // 0x0288   (0x0004)  
	float                                              GlobalDistanceFieldViewDistance;                            // 0x028C   (0x0004)  
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;               // 0x0290   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0294   (0x0004)  MISSED
	FReverbSettings                                    DefaultReverbSettings;                                      // 0x0298   (0x0020)  
	FInteriorSettings                                  DefaultAmbientZoneSettings;                                 // 0x02B8   (0x0024)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class USoundMix*                                   DefaultBaseSoundMix;                                        // 0x02E0   (0x0008)  
	float                                              TimeDilation;                                               // 0x02E8   (0x0004)  
	float                                              MatineeTimeDilation;                                        // 0x02EC   (0x0004)  
	float                                              DemoPlayTimeDilation;                                       // 0x02F0   (0x0004)  
	float                                              MinGlobalTimeDilation;                                      // 0x02F4   (0x0004)  
	float                                              MaxGlobalTimeDilation;                                      // 0x02F8   (0x0004)  
	float                                              MinUndilatedFrameTime;                                      // 0x02FC   (0x0004)  
	float                                              MaxUndilatedFrameTime;                                      // 0x0300   (0x0004)  
	FBroadphaseSettings                                BroadphaseSettings;                                         // 0x0304   (0x0040)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	class APlayerState*                                Pauser;                                                     // 0x0348   (0x0008)  
	TArray<FNetViewer>                                 ReplicationViewers;                                         // 0x0350   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0360   (0x0010)  
	class APlayerState*                                PauserPlayerState;                                          // 0x0370   (0x0008)  
	int32_t                                            MaxNumberOfBookmarks;                                       // 0x0378   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x037C   (0x0004)  MISSED
	class UClass*                                      DefaultBookmarkClass;                                       // 0x0380   (0x0008)  
	TArray<class UBookmarkBase*>                       BookmarkArray;                                              // 0x0388   (0x0010)  
	class UClass*                                      LastBookmarkClass;                                          // 0x0398   (0x0008)  


	/// Functions
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	// void OnRep_WorldGravityZ();                                                                                              // [0x1781660] Native|Public        
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FVectorDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FVector4Distribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FFloatRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FVectorRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FFormatArgumentData
{ 
	FString                                            ArgumentName;                                               // 0x0000   (0x0010)  
	TEnumAsByte<EFormatArgumentType>                   ArgumentValueType;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	FText                                              ArgumentValue;                                              // 0x0018   (0x0018)  
	int32_t                                            ArgumentValueInt;                                           // 0x0030   (0x0004)  
	float                                              ArgumentValueFloat;                                         // 0x0034   (0x0004)  
	ETextGender                                        ArgumentValueGender;                                        // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FExpressionOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x0000 (0 bytes) (0x000014 - 0x000014) align 4 pad: 0x0000
struct FVector2MaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FBranchingPointNotifyPayload
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPlatformInterfaceData
{ 
	FName                                              DataName;                                                   // 0x0000   (0x0008)  
	TEnumAsByte<EPlatformInterfaceDataType>            Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            IntValue;                                                   // 0x000C   (0x0004)  
	float                                              FloatValue;                                                 // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            StringValue;                                                // 0x0018   (0x0010)  
	class UObject*                                     ObjectValue;                                                // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPlatformInterfaceDelegateResult
{ 
	bool                                               bSuccessful;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FPlatformInterfaceData                             Data;                                                       // 0x0008   (0x0030)  
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FDebugFloatHistory
{ 
	TArray<float>                                      Samples;                                                    // 0x0000   (0x0010)  
	float                                              MaxSamples;                                                 // 0x0010   (0x0004)  
	float                                              MinValue;                                                   // 0x0014   (0x0004)  
	float                                              MaxValue;                                                   // 0x0018   (0x0004)  
	bool                                               bAutoAdjustMinMax;                                          // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FLatentActionInfo
{ 
	int32_t                                            Linkage;                                                    // 0x0000   (0x0004)  
	int32_t                                            UUID;                                                       // 0x0004   (0x0004)  
	FName                                              ExecutionFunction;                                          // 0x0008   (0x0008)  
	class UObject*                                     CallbackTarget;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FTimerHandle
{ 
	uint64_t                                           Handle;                                                     // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCollisionProfileName
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FGenericStruct
{ 
	int32_t                                            Data;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FUserActivity
{ 
	FString                                            ActionName;                                                 // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDataTableRowHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FTableRowBase
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDamageEvent
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UClass*                                      DamageTypeClass;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FFastArraySerializerItem
{ 
	int32_t                                            ReplicationID;                                              // 0x0000   (0x0004)  
	int32_t                                            ReplicationKey;                                             // 0x0004   (0x0004)  
	int32_t                                            MostRecentArrayReplicationKey;                              // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x0108 (264 bytes) (0x000000 - 0x000108) align 8 pad: 0x0000
struct FFastArraySerializer
{ 
	unsigned char                                      UnknownData00_7[0x54];                                      // 0x0000   (0x0054)  MISSED
	int32_t                                            ArrayReplicationKey;                                        // 0x0054   (0x0004)  
	unsigned char                                      UnknownData01_6[0xA8];                                      // 0x0058   (0x00A8)  MISSED
	EFastArraySerializerDeltaFlags                     DeltaFlags;                                                 // 0x0100   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0101   (0x0007)  MISSED
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBits
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FCharacterNetworkSerializationPackedBits
{ 
	unsigned char                                      UnknownData00_2[0x98];                                      // 0x0000   (0x0098)  MISSED
};

/// Struct /Script/Engine.CharacterMoveResponsePackedBits
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FCharacterMoveResponsePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.CharacterServerMovePackedBits
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FCharacterServerMovePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x0098 (152 bytes) (0x000010 - 0x0000A8) align 8 pad: 0x0000
struct FPointDamageEvent : FDamageEvent
{ 
	float                                              Damage;                                                     // 0x0010   (0x0004)  
	FVector_NetQuantizeNormal                          ShotDirection;                                              // 0x0014   (0x000C)  
	FHitResult                                         HitInfo;                                                    // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FForceFeedbackParameters
{ 
	FName                                              Tag;                                                        // 0x0000   (0x0008)  
	bool                                               bLooping;                                                   // 0x0008   (0x0001)  
	bool                                               bIgnoreTimeDilation;                                        // 0x0009   (0x0001)  
	bool                                               bPlayWhilePaused;                                           // 0x000A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x000B   (0x0001)  MISSED
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FViewTargetTransitionParams
{ 
	float                                              BlendTime;                                                  // 0x0000   (0x0004)  
	TEnumAsByte<EViewTargetBlendFunction>              BlendFunction;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              BlendExp;                                                   // 0x0008   (0x0004)  
	bool                                               bLockOutgoing : 1;                                          // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FUpdateLevelStreamingLevelStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bNewShouldBeLoaded;                                         // 0x000C   (0x0001)  
	bool                                               bNewShouldBeVisible;                                        // 0x000D   (0x0001)  
	bool                                               bNewShouldBlockOnLoad;                                      // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x000F   (0x0001)  MISSED
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FUpdateLevelVisibilityLevelInfo
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	FName                                              Filename;                                                   // 0x0008   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000038) align 8 pad: 0x0000
struct FAnimNode_AssetPlayerBase : FAnimNode_Base
{ 
	FName                                              GroupName;                                                  // 0x0010   (0x0008)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x0018   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x0019   (0x0001)  
	bool                                               bIgnoreForRelevancyTest;                                    // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001B   (0x0001)  MISSED
	float                                              BlendWeight;                                                // 0x001C   (0x0004)  
	float                                              InternalTimeAccumulator;                                    // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0024   (0x0014)  MISSED
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInputRange
{ 
	float                                              Min;                                                        // 0x0000   (0x0004)  
	float                                              Max;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 4 pad: 0x0000
struct FInputScaleBiasClamp
{ 
	bool                                               bMapRange;                                                  // 0x0000   (0x0001)  
	bool                                               bClampResult;                                               // 0x0001   (0x0001)  
	bool                                               bInterpResult;                                              // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FInputRange                                        InRange;                                                    // 0x0004   (0x0008)  
	FInputRange                                        OutRange;                                                   // 0x000C   (0x0008)  
	float                                              Scale;                                                      // 0x0014   (0x0004)  
	float                                              Bias;                                                       // 0x0018   (0x0004)  
	float                                              ClampMin;                                                   // 0x001C   (0x0004)  
	float                                              ClampMax;                                                   // 0x0020   (0x0004)  
	float                                              InterpSpeedIncreasing;                                      // 0x0024   (0x0004)  
	float                                              InterpSpeedDecreasing;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FInputAlphaBoolBlend
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendoutTime;                                               // 0x0004   (0x0004)  
	EAlphaBlendOption                                  BlendOption;                                                // 0x0008   (0x0001)  
	bool                                               bInitialized;                                               // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0010   (0x0008)  
	FAlphaBlend                                        AlphaBlend;                                                 // 0x0018   (0x0030)  
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInputScaleBias
{ 
	float                                              Scale;                                                      // 0x0000   (0x0004)  
	float                                              Bias;                                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPoseLinkBase
{ 
	int32_t                                            LinkID;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0004   (0x000C)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FComponentSpacePoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FKeyHandleLookupTable
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FPoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FComponentReference
{ 
	class AActor*                                      OtherActor;                                                 // 0x0000   (0x0008)  
	FName                                              ComponentProperty;                                          // 0x0008   (0x0008)  
	FString                                            PathToComponent;                                            // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x0770 (1904 bytes) (0x000000 - 0x000770) align 16 pad: 0x0000
struct FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_2[0x770];                                     // 0x0000   (0x0770)  MISSED
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (520 bytes) (0x000000 - 0x000208) align 8 pad: 0x0000
struct FRuntimeCurveLinearColor
{ 
	FRichCurve                                         ColorCurves[4];                                             // 0x0000   (0x0200)  
	class UCurveLinearColor*                           ExternalCurve;                                              // 0x0200   (0x0008)  
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FPerBoneBlendWeight
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPoseSnapshot
{ 
	TArray<FTransform>                                 LocalTransforms;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      BoneNames;                                                  // 0x0010   (0x0010)  
	FName                                              SkeletalMeshName;                                           // 0x0020   (0x0008)  
	FName                                              SnapshotName;                                               // 0x0028   (0x0008)  
	bool                                               bIsValid;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000030) align 8 pad: 0x0000
struct FAnimNode_Root : FAnimNode_Base
{ 
	FPoseLink                                          Result;                                                     // 0x0010   (0x0010)  
	FName                                              Name;                                                       // 0x0020   (0x0008)  
	FName                                              Group;                                                      // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FAnimCurveParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.ActorComponentDuplicatedObjectData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FActorComponentDuplicatedObjectData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FActorComponentInstanceData
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     SourceComponentTemplate;                                    // 0x0008   (0x0008)  
	EComponentCreationMethod                           SourceComponentCreationMethod;                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            SourceComponentTypeSerializedIndex;                         // 0x0014   (0x0004)  
	TArray<char>                                       SavedProperties;                                            // 0x0018   (0x0010)  
	FActorComponentDuplicatedObjectData                UniqueTransientPackage;                                     // 0x0028   (0x0010)  
	TArray<FActorComponentDuplicatedObjectData>        DuplicatedObjects;                                          // 0x0038   (0x0010)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0048   (0x0010)  
	TArray<FName>                                      ReferencedNames;                                            // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x0050 (80 bytes) (0x000068 - 0x0000B8) align 8 pad: 0x0000
struct FSceneComponentInstanceData : FActorComponentInstanceData
{ 
	SDK_UNDEFINED(80,205) /* TMap<USceneComponent*, FTransform> */ __um(AttachedInstanceComponents);               // 0x0068   (0x0050)  
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FAnimationGroupReference
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x0008   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FAnimGroupInstance
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FAnimTickRecord
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMarkerSyncAnimPosition
{ 
	FName                                              PreviousMarkerName;                                         // 0x0000   (0x0008)  
	FName                                              NextMarkerName;                                             // 0x0008   (0x0008)  
	float                                              PositionBetweenMarkers;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FBlendFilter
{ 
	unsigned char                                      UnknownData00_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FBlendSampleData
{ 
	int32_t                                            SampleDataIndex;                                            // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               Animation;                                                  // 0x0008   (0x0008)  
	float                                              TotalWeight;                                                // 0x0010   (0x0004)  
	float                                              Time;                                                       // 0x0014   (0x0004)  
	float                                              PreviousTime;                                               // 0x0018   (0x0004)  
	float                                              SamplePlayRate;                                             // 0x001C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0020   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FAnimationRecordingSettings
{ 
	bool                                               bRecordInWorldSpace;                                        // 0x0000   (0x0001)  
	bool                                               bRemoveRootAnimation;                                       // 0x0001   (0x0001)  
	bool                                               bAutoSaveAsset;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              SampleRate;                                                 // 0x0004   (0x0004)  
	float                                              Length;                                                     // 0x0008   (0x0004)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x000C   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x000E   (0x0001)  MISSED
	bool                                               bRecordTransforms;                                          // 0x000F   (0x0001)  
	bool                                               bRecordCurves;                                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FComponentSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLocalSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FNamedTransform
{ 
	FTransform                                         Value;                                                      // 0x0000   (0x0030)  
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FNamedColor
{ 
	FColor                                             Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FNamedVector
{ 
	FVector                                            Value;                                                      // 0x0000   (0x000C)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FNamedFloat
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAnimParentNodeAssetOverride
{ 
	class UAnimationAsset*                             NewAsset;                                                   // 0x0000   (0x0008)  
	FGuid                                              ParentNodeGuid;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimationFrameSnapshot
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FStateMachineDebugData
{ 
	unsigned char                                      UnknownData00_2[0xB0];                                      // 0x0000   (0x00B0)  MISSED
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FStateMachineStateDebugData
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FAnimGraphBlendOptions
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendoutTime;                                               // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FGraphAssetPlayerInformation
{ 
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FCachedPoseIndices
{ 
	TArray<int32_t>                                    OrderedSavedPoseNodeIndices;                                // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FRootMotionExtractionStep
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	float                                              StartPosition;                                              // 0x0008   (0x0004)  
	float                                              EndPosition;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimationErrorStats
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0180 (384 bytes) (0x000018 - 0x000198) align 8 pad: 0x0000
struct FVectorCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurves[3];                                             // 0x0018   (0x0180)  
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x04C8 (1224 bytes) (0x000018 - 0x0004E0) align 8 pad: 0x0000
struct FTransformCurve : FAnimCurveBase
{ 
	FVectorCurve                                       TranslationCurve;                                           // 0x0018   (0x0198)  
	FVectorCurve                                       RotationCurve;                                              // 0x01B0   (0x0198)  
	FVectorCurve                                       ScaleCurve;                                                 // 0x0348   (0x0198)  
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align 8 pad: 0x0000
struct FSlotEvaluationPose
{ 
	TEnumAsByte<EAdditiveAnimationType>                AdditiveType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Weight;                                                     // 0x0004   (0x0004)  
	unsigned char                                      UnknownData01_7[0xD8];                                      // 0x0008   (0x00D8)  MISSED
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FA2Pose
{ 
	TArray<FTransform>                                 Bones;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000028) align 8 pad: 0x0000
struct FA2CSPose : FA2Pose
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0010   (0x0008)  MISSED
	TArray<char>                                       ComponentSpaceFlags;                                        // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FQueuedDrawDebugItem
{ 
	TEnumAsByte<EDrawDebugItemType>                    ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            StartLoc;                                                   // 0x0004   (0x000C)  
	FVector                                            EndLoc;                                                     // 0x0010   (0x000C)  
	FVector                                            Center;                                                     // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	float                                              Radius;                                                     // 0x0034   (0x0004)  
	float                                              Size;                                                       // 0x0038   (0x0004)  
	int32_t                                            Segments;                                                   // 0x003C   (0x0004)  
	FColor                                             Color;                                                      // 0x0040   (0x0004)  
	bool                                               bPersistentLines;                                           // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x0048   (0x0004)  
	float                                              Thickness;                                                  // 0x004C   (0x0004)  
	FString                                            Message;                                                    // 0x0050   (0x0010)  
	FVector2D                                          TextScale;                                                  // 0x0060   (0x0008)  
};

/// Struct /Script/Engine.AnimInstanceSubsystemData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAnimInstanceSubsystemData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01B0 (432 bytes) (0x000000 - 0x0001B0) align 8 pad: 0x0000
struct FAnimMontageInstance
{ 
	class UAnimMontage*                                Montage;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	bool                                               bPlaying;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DefaultBlendTimeMultiplier;                                 // 0x002C   (0x0004)  
	unsigned char                                      UnknownData02_6[0xB8];                                      // 0x0030   (0x00B8)  MISSED
	TArray<int32_t>                                    NextSections;                                               // 0x00E8   (0x0010)  
	TArray<int32_t>                                    PrevSections;                                               // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0108   (0x0010)  MISSED
	TArray<FAnimNotifyEvent>                           ActiveStateBranchingPoints;                                 // 0x0118   (0x0010)  
	float                                              position;                                                   // 0x0128   (0x0004)  
	float                                              PlayRate;                                                   // 0x012C   (0x0004)  
	FAlphaBlend                                        Blend;                                                      // 0x0130   (0x0030)  
	unsigned char                                      UnknownData04_6[0x2C];                                      // 0x0160   (0x002C)  MISSED
	int32_t                                            DisableRootMotionCount;                                     // 0x018C   (0x0004)  
	unsigned char                                      UnknownData05_7[0x20];                                      // 0x0190   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00C0 (192 bytes) (0x000010 - 0x0000D0) align 8 pad: 0x0000
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{ 
	FPoseLink                                          Base;                                                       // 0x0010   (0x0010)  
	FPoseLink                                          Additive;                                                   // 0x0020   (0x0010)  
	EAnimAlphaInputType                                AlphaInputType;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              Alpha;                                                      // 0x0034   (0x0004)  
	bool                                               bAlphaBoolEnabled : 1;                                      // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FInputAlphaBoolBlend                               AlphaBoolBlend;                                             // 0x0040   (0x0048)  
	FName                                              AlphaCurveName;                                             // 0x0088   (0x0008)  
	FInputScaleBias                                    AlphaScaleBias;                                             // 0x0090   (0x0008)  
	FInputScaleBiasClamp                               AlphaScaleBiasClamp;                                        // 0x0098   (0x0030)  
	int32_t                                            LODThreshold;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData02_7[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000058) align 8 pad: 0x0000
struct FAnimNode_CustomProperty : FAnimNode_Base
{ 
	TArray<FName>                                      SourcePropertyNames;                                        // 0x0010   (0x0010)  
	TArray<FName>                                      DestPropertyNames;                                          // 0x0020   (0x0010)  
	class UObject*                                     TargetInstance;                                             // 0x0030   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0060 (96 bytes) (0x000010 - 0x000070) align 8 pad: 0x0000
struct FAnimNode_Inertialization : FAnimNode_Base
{ 
	FPoseLink                                          Source;                                                     // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x50];                                      // 0x0020   (0x0050)  MISSED
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FInertializationPoseDiff
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.InertializationCurveDiff
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FInertializationCurveDiff
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FInertializationBoneDiff
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 16 pad: 0x0000
struct FInertializationPose
{ 
	unsigned char                                      UnknownData00_2[0xA0];                                      // 0x0000   (0x00A0)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x0048 (72 bytes) (0x000058 - 0x0000A0) align 8 pad: 0x0000
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty
{ 
	TArray<FPoseLink>                                  InputPoses;                                                 // 0x0058   (0x0010)  
	TArray<FName>                                      InputPoseNames;                                             // 0x0068   (0x0010)  
	class UClass*                                      InstanceClass;                                              // 0x0078   (0x0008)  
	FName                                              Tag;                                                        // 0x0080   (0x0008)  
	unsigned char                                      UnknownData00_6[0x14];                                      // 0x0088   (0x0014)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x009C:0 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x009C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x009D   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x0010 (16 bytes) (0x0000A0 - 0x0000B0) align 8 pad: 0x0000
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph
{ 
	class UClass*                                      Interface;                                                  // 0x00A0   (0x0008)  
	FName                                              Layer;                                                      // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x0108 (264 bytes) (0x000010 - 0x000118) align 8 pad: 0x0000
struct FAnimNode_LinkedInputPose : FAnimNode_Base
{ 
	FName                                              Name;                                                       // 0x0010   (0x0008)  
	FName                                              Graph;                                                      // 0x0018   (0x0008)  
	FPoseLink                                          InputPose;                                                  // 0x0020   (0x0010)  
	unsigned char                                      UnknownData00_7[0xE8];                                      // 0x0030   (0x00E8)  MISSED
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x0148 (328 bytes) (0x000010 - 0x000158) align 8 pad: 0x0000
struct FAnimNode_SaveCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          Pose;                                                       // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
	unsigned char                                      UnknownData00_7[0x130];                                     // 0x0028   (0x0130)  MISSED
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000080) align 8 pad: 0x0000
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase
{ 
	class UAnimSequenceBase*                           Sequence;                                                   // 0x0038   (0x0008)  
	float                                              PlayRateBasis;                                              // 0x0040   (0x0004)  
	float                                              PlayRate;                                                   // 0x0044   (0x0004)  
	FInputScaleBiasClamp                               PlayRateScaleBiasClamp;                                     // 0x0048   (0x0030)  
	float                                              StartPosition;                                              // 0x0078   (0x0004)  
	bool                                               bLoopAnimation;                                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00A0 (160 bytes) (0x000010 - 0x0000B0) align 8 pad: 0x0000
struct FAnimNode_StateMachine : FAnimNode_Base
{ 
	int32_t                                            StateMachineIndexInClass;                                   // 0x0010   (0x0004)  
	int32_t                                            MaxTransitionsPerFrame;                                     // 0x0014   (0x0004)  
	bool                                               bSkipFirstUpdateTransition;                                 // 0x0018   (0x0001)  
	bool                                               bReinitializeOnBecomingRelevant;                            // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_7[0x96];                                      // 0x001A   (0x0096)  MISSED
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FAnimationPotentialTransition
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align 8 pad: 0x0000
struct FAnimationActiveTransitionEntry
{ 
	unsigned char                                      UnknownData00_7[0xB8];                                      // 0x0000   (0x00B8)  MISSED
	class UBlendProfile*                               BlendProfile;                                               // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x00E8 (232 bytes) (0x000010 - 0x0000F8) align 8 pad: 0x0000
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{ 
	unsigned char                                      UnknownData00_3[0xD8];                                      // 0x0010   (0x00D8)  MISSED
	int32_t                                            FramesToCachePose;                                          // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TEnumAsByte<EEvaluatorDataSource>                  DataSource;                                                 // 0x00F0   (0x0001)  
	TEnumAsByte<EEvaluatorMode>                        EvaluatorMode;                                              // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData02_7[0x6];                                       // 0x00F2   (0x0006)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000028) align 8 pad: 0x0000
struct FAnimNode_TransitionResult : FAnimNode_Base
{ 
	bool                                               bCanEnterTransition;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x0011   (0x0017)  MISSED
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000028) align 8 pad: 0x0000
struct FAnimNode_UseCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          LinkToCachingNode;                                          // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{ 
	FPoseLink                                          LocalPose;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{ 
	FComponentSpacePoseLink                            ComponentPose;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FAnimNotifyArray
{ 
	TArray<FAnimNotifyEventReference>                  Notifies;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FCompressedTrack
{ 
	TArray<char>                                       ByteStream;                                                 // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	float                                              Mins[3];                                                    // 0x0020   (0x000C)  
	float                                              Ranges[3];                                                  // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCurveTrack
{ 
	FName                                              CurveName;                                                  // 0x0000   (0x0008)  
	TArray<float>                                      CurveWeights;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FScaleTrack
{ 
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FRotationTrack
{ 
	TArray<FQuat>                                      RotKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FTranslationTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FRawAnimSequenceTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<FQuat>                                      RotKeys;                                                    // 0x0010   (0x0010)  
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FAnimSequenceTrackContainer
{ 
	TArray<FRawAnimSequenceTrack>                      AnimationTracks;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      TrackNames;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x0150 (336 bytes) (0x000770 - 0x0008C0) align 16 pad: 0x0000
struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData00_1[0x150];                                     // 0x0770   (0x0150)  MISSED
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000030) align 8 pad: 0x0000
struct FAnimNode_SingleNode : FAnimNode_Base
{ 
	FPoseLink                                          SourcePose;                                                 // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FAnimationTransitionRule
{ 
	FName                                              RuleToExecute;                                              // 0x0000   (0x0008)  
	bool                                               TransitionReturnVal;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            TransitionIndex;                                            // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000028) align 8 pad: 0x0000
struct FAnimationState : FAnimationStateBase
{ 
	TArray<FAnimationTransitionRule>                   Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FAnimNotifyTrack
{ 
	FName                                              TrackName;                                                  // 0x0000   (0x0008)  
	FLinearColor                                       TrackColor;                                                 // 0x0008   (0x0010)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0018   (0x0020)  MISSED
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPerBoneBlendWeights
{ 
	TArray<FPerBoneBlendWeight>                        BoneBlendWeights;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FAssetImportInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AssetManagerSearchRules
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FAssetManagerSearchRules
{ 
	TArray<FString>                                    AssetScanPaths;                                             // 0x0000   (0x0010)  
	TArray<FString>                                    IncludePatterns;                                            // 0x0010   (0x0010)  
	TArray<FString>                                    ExcludePatterns;                                            // 0x0020   (0x0010)  
	class UClass*                                      AssetBaseClass;                                             // 0x0030   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0038   (0x0001)  
	bool                                               bForceSynchronousScan;                                      // 0x0039   (0x0001)  
	bool                                               bSkipVirtualPathExpansion;                                  // 0x003A   (0x0001)  
	bool                                               bSkipManagerIncludeCheck;                                   // 0x003B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x003C   (0x0014)  MISSED
};

/// Struct /Script/Engine.AtmospherePrecomputeInstanceData
/// Size: 0x00A8 (168 bytes) (0x0000B8 - 0x000160) align 8 pad: 0x0000
struct FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_1[0xA8];                                      // 0x00B8   (0x00A8)  MISSED
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000048) align 8 pad: 0x0000
struct FAudioReverbEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData00_1[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FNavAvoidanceData
{ 
	unsigned char                                      UnknownData00_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FGridBlendSample
{ 
	FEditorElement                                     GridElement;                                                // 0x0000   (0x0018)  
	float                                              BlendWeight;                                                // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBPEditorBookmarkNode
{ 
	FGuid                                              NodeGuid;                                                   // 0x0000   (0x0010)  
	FGuid                                              ParentGuid;                                                 // 0x0010   (0x0010)  
	FText                                              DisplayName;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FEditedDocumentInfo
{ 
	FSoftObjectPath                                    EditedObjectPath;                                           // 0x0000   (0x0018)  
	FVector2D                                          SavedViewOffset;                                            // 0x0018   (0x0008)  
	float                                              SavedZoomAmount;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UObject*                                     EditedObject;                                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FBPInterfaceDescription
{ 
	class UClass*                                      Interface;                                                  // 0x0000   (0x0008)  
	TArray<class UEdGraph*>                            Graphs;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00D0 (208 bytes) (0x000000 - 0x0000D0) align 8 pad: 0x0000
struct FBPVariableDescription
{ 
	FName                                              VarName;                                                    // 0x0000   (0x0008)  
	FGuid                                              VarGuid;                                                    // 0x0008   (0x0010)  
	FEdGraphPinType                                    VarType;                                                    // 0x0018   (0x0058)  
	FString                                            FriendlyName;                                               // 0x0070   (0x0010)  
	FText                                              Category;                                                   // 0x0080   (0x0018)  
	uint64_t                                           PropertyFlags;                                              // 0x0098   (0x0008)  
	FName                                              RepNotifyFunc;                                              // 0x00A0   (0x0008)  
	TEnumAsByte<ELifetimeCondition>                    ReplicationCondition;                                       // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	FString                                            DefaultValue;                                               // 0x00C0   (0x0010)  
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBlueprintMacroCosmeticInfo
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FCompilerNativizationOptions
{ 
	FName                                              PlatformName;                                               // 0x0000   (0x0008)  
	bool                                               ServerOnlyPlatform;                                         // 0x0008   (0x0001)  
	bool                                               ClientOnlyPlatform;                                         // 0x0009   (0x0001)  
	bool                                               bExcludeMonolithicHeaders;                                  // 0x000A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x000B   (0x0005)  MISSED
	TArray<FName>                                      ExcludedModules;                                            // 0x0010   (0x0010)  
	SDK_UNDEFINED(80,206) /* TSet<FSoftObjectPath> */  __um(ExcludedAssets);                                       // 0x0020   (0x0050)  
	TArray<FString>                                    ExcludedFolderPaths;                                        // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FEventGraphFastCallPair
{ 
	class UFunction*                                   FunctionToPatch;                                            // 0x0000   (0x0008)  
	int32_t                                            EventGraphCallOffset;                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBlueprintDebugData
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FPointerToUberGraphFrame
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (400 bytes) (0x000000 - 0x000190) align 8 pad: 0x0000
struct FDebuggingInfoForSingleFunction
{ 
	unsigned char                                      UnknownData00_2[0x190];                                     // 0x0000   (0x0190)  MISSED
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FNodeToCodeAssociation
{ 
	unsigned char                                      UnknownData00_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FAnimCurveType
{ 
	unsigned char                                      UnknownData00_2[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBookmarkBaseJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0000 (0 bytes) (0x000001 - 0x000001) align 1 pad: 0x0000
struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{ 
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FBookmark2DJumpToSettings
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FCachedAnimTransitionData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              FromStateName;                                              // 0x0008   (0x0008)  
	FName                                              ToStateName;                                                // 0x0010   (0x0008)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FCachedAnimRelevancyData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FCachedAnimAssetPlayerData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FCachedAnimStateData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_7[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCachedAnimStateArray
{ 
	TArray<FCachedAnimStateData>                       States;                                                     // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPooledCameraShakes
{ 
	TArray<class UCameraShakeBase*>                    PooledShakes;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CameraShakeDuration
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FCameraShakeDuration
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	ECameraShakeDurationType                           Type;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.CameraShakeInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FCameraShakeInfo
{ 
	FCameraShakeDuration                               Duration;                                                   // 0x0000   (0x0008)  
	float                                              BlendIn;                                                    // 0x0008   (0x0004)  
	float                                              BlendOut;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.CameraShakeStopParams
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FCameraShakeStopParams
{ 
	bool                                               bImmediately;                                               // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.CameraShakeUpdateResult
/// Size: 0x0590 (1424 bytes) (0x000000 - 0x000590) align 16 pad: 0x0000
struct FCameraShakeUpdateResult
{ 
	unsigned char                                      UnknownData00_2[0x590];                                     // 0x0000   (0x0590)  MISSED
};

/// Struct /Script/Engine.CameraShakeScrubParams
/// Size: 0x0600 (1536 bytes) (0x000000 - 0x000600) align 16 pad: 0x0000
struct FCameraShakeScrubParams
{ 
	float                                              AbsoluteTime;                                               // 0x0000   (0x0004)  
	float                                              ShakeScale;                                                 // 0x0004   (0x0004)  
	float                                              DynamicScale;                                               // 0x0008   (0x0004)  
	float                                              BlendingWeight;                                             // 0x000C   (0x0004)  
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x05F0)  
};

/// Struct /Script/Engine.CameraShakeUpdateParams
/// Size: 0x0600 (1536 bytes) (0x000000 - 0x000600) align 16 pad: 0x0000
struct FCameraShakeUpdateParams
{ 
	float                                              DeltaTime;                                                  // 0x0000   (0x0004)  
	float                                              ShakeScale;                                                 // 0x0004   (0x0004)  
	float                                              DynamicScale;                                               // 0x0008   (0x0004)  
	float                                              BlendingWeight;                                             // 0x000C   (0x0004)  
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x05F0)  
};

/// Struct /Script/Engine.CameraShakeStartParams
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FCameraShakeStartParams
{ 
	bool                                               bIsRestarting;                                              // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FDummySpacerCameraTypes
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCanvasIcon
{ 
	class UTexture*                                    Texture;                                                    // 0x0000   (0x0008)  
	float                                              U;                                                          // 0x0008   (0x0004)  
	float                                              V;                                                          // 0x000C   (0x0004)  
	float                                              UL;                                                         // 0x0010   (0x0004)  
	float                                              VL;                                                         // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FWrappedStringElement
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
	FVector2D                                          LineExtent;                                                 // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FTextSizingParameters
{ 
	float                                              DrawX;                                                      // 0x0000   (0x0004)  
	float                                              DrawY;                                                      // 0x0004   (0x0004)  
	float                                              DrawXL;                                                     // 0x0008   (0x0004)  
	float                                              DrawYL;                                                     // 0x000C   (0x0004)  
	FVector2D                                          Scaling;                                                    // 0x0010   (0x0008)  
	class UFont*                                       DrawFont;                                                   // 0x0018   (0x0008)  
	FVector2D                                          SpacingAdjust;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FChildActorAttachedActorInfo
{ 
	SDK_UNDEFINED(8,207) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	FName                                              SocketName;                                                 // 0x0008   (0x0008)  
	FTransform                                         RelativeTransform;                                          // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x0030 (48 bytes) (0x0000B8 - 0x0000E8) align 8 pad: 0x0000
struct FChildActorComponentInstanceData : FSceneComponentInstanceData
{ 
	class UClass*                                      ChildActorClass;                                            // 0x00B8   (0x0008)  
	FName                                              ChildActorName;                                             // 0x00C0   (0x0008)  
	TArray<FChildActorAttachedActorInfo>               AttachedActors;                                             // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x00D8   (0x0010)  MISSED
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FAutoCompleteNode
{ 
	int32_t                                            IndexChar;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    AutoCompleteListIndices;                                    // 0x0008   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0018   (0x0010)  MISSED
};

/// Struct /Script/Engine.CurveAtlasColorAdjustments
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FCurveAtlasColorAdjustments
{ 
	bool                                               bChromaKeyTexture : 1;                                      // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AdjustBrightness;                                           // 0x0004   (0x0004)  
	float                                              AdjustBrightnessCurve;                                      // 0x0008   (0x0004)  
	float                                              AdjustVibrance;                                             // 0x000C   (0x0004)  
	float                                              AdjustSaturation;                                           // 0x0010   (0x0004)  
	float                                              AdjustRGBCurve;                                             // 0x0014   (0x0004)  
	float                                              AdjustHue;                                                  // 0x0018   (0x0004)  
	float                                              AdjustMinAlpha;                                             // 0x001C   (0x0004)  
	float                                              AdjustMaxAlpha;                                             // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FNamedCurveValue
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FCurveTableRowHandle
{ 
	class UCurveTable*                                 CurveTable;                                                 // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.CustomAttribute
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCustomAttribute
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            VariantType;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.CustomAttributePerBoneData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FCustomAttribute>                           Attributes;                                                 // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FDataTableCategoryHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              ColumnName;                                                 // 0x0008   (0x0008)  
	FName                                              RowContents;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align 8 pad: 0x0000
struct FRollbackNetStartupActorInfo
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     Archetype;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_6[0x28];                                      // 0x0010   (0x0028)  MISSED
	class ULevel*                                      Level;                                                      // 0x0038   (0x0008)  
	unsigned char                                      UnknownData02_6[0x60];                                      // 0x0040   (0x0060)  MISSED
	TArray<class UObject*>                             ObjReferences;                                              // 0x00A0   (0x0010)  
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FGraphReference
{ 
	class UEdGraph*                                    MacroGraph;                                                 // 0x0000   (0x0008)  
	class UBlueprint*                                  GraphBlueprint;                                             // 0x0008   (0x0008)  
	FGuid                                              GraphGuid;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FEdGraphPinReference
{ 
	SDK_UNDEFINED(8,208) /* TWeakObjectPtr<UEdGraphNode*> */ __um(OwningNode);                                     // 0x0000   (0x0008)  
	FGuid                                              PinId;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align 8 pad: 0x0000
struct FEdGraphSchemaAction
{ 
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FText                                              MenuDescription;                                            // 0x0008   (0x0018)  
	FText                                              TooltipDescription;                                         // 0x0020   (0x0018)  
	FText                                              Category;                                                   // 0x0038   (0x0018)  
	FText                                              Keywords;                                                   // 0x0050   (0x0018)  
	int32_t                                            Grouping;                                                   // 0x0068   (0x0004)  
	int32_t                                            SectionID;                                                  // 0x006C   (0x0004)  
	TArray<FString>                                    MenuDescriptionArray;                                       // 0x0070   (0x0010)  
	TArray<FString>                                    FullSearchTitlesArray;                                      // 0x0080   (0x0010)  
	TArray<FString>                                    FullSearchKeywordsArray;                                    // 0x0090   (0x0010)  
	TArray<FString>                                    FullSearchCategoryArray;                                    // 0x00A0   (0x0010)  
	TArray<FString>                                    LocalizedMenuDescriptionArray;                              // 0x00B0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchTitlesArray;                             // 0x00C0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchKeywordsArray;                           // 0x00D0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchCategoryArray;                           // 0x00E0   (0x0010)  
	FString                                            SearchText;                                                 // 0x00F0   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0008 (8 bytes) (0x000100 - 0x000108) align 8 pad: 0x0000
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{ 
	class UEdGraphNode*                                NodeTemplate;                                               // 0x0100   (0x0008)  
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FScreenMessageString
{ 
	uint64_t                                           Key;                                                        // 0x0000   (0x0008)  
	FString                                            ScreenMessage;                                              // 0x0008   (0x0010)  
	FColor                                             DisplayColor;                                               // 0x0018   (0x0004)  
	float                                              TimeToDisplay;                                              // 0x001C   (0x0004)  
	float                                              CurrentTimeDisplayed;                                       // 0x0020   (0x0004)  
	FVector2D                                          TextScale;                                                  // 0x0024   (0x0008)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align 8 pad: 0x0000
struct FURL
{ 
	FString                                            Protocol;                                                   // 0x0000   (0x0010)  
	FString                                            Host;                                                       // 0x0010   (0x0010)  
	int32_t                                            Port;                                                       // 0x0020   (0x0004)  
	int32_t                                            Valid;                                                      // 0x0024   (0x0004)  
	FString                                            Map;                                                        // 0x0028   (0x0010)  
	FString                                            RedirectURL;                                                // 0x0038   (0x0010)  
	TArray<FString>                                    Op;                                                         // 0x0048   (0x0010)  
	FString                                            Portal;                                                     // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FFullyLoadedPackagesInfo
{ 
	TEnumAsByte<EFullyLoadPackageType>                 FullyLoadType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Tag;                                                        // 0x0008   (0x0010)  
	TArray<FName>                                      PackagesToLoad;                                             // 0x0018   (0x0010)  
	TArray<class UObject*>                             LoadedObjects;                                              // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FLevelStreamingStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bShouldBeVisible : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	uint32_t                                           LODIndex;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FNamedNetDriver
{ 
	class UNetDriver*                                  NetDriver;                                                  // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0288 (648 bytes) (0x000000 - 0x000288) align 8 pad: 0x0000
struct FWorldContext
{ 
	unsigned char                                      UnknownData00_7[0xD0];                                      // 0x0000   (0x00D0)  MISSED
	FURL                                               LastURL;                                                    // 0x00D0   (0x0068)  
	FURL                                               LastRemoteURL;                                              // 0x0138   (0x0068)  
	class UPendingNetGame*                             PendingNetGame;                                             // 0x01A0   (0x0008)  
	TArray<FFullyLoadedPackagesInfo>                   PackagesToFullyLoad;                                        // 0x01A8   (0x0010)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x01B8   (0x0010)  MISSED
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                            // 0x01C8   (0x0010)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x01D8   (0x0018)  MISSED
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                          // 0x01F0   (0x0010)  
	TArray<FLevelStreamingStatus>                      PendingLevelStreamingStatusUpdates;                         // 0x0200   (0x0010)  
	class UGameViewportClient*                         GameViewport;                                               // 0x0210   (0x0008)  
	class UGameInstance*                               OwningGameInstance;                                         // 0x0218   (0x0008)  
	TArray<FNamedNetDriver>                            ActiveNetDrivers;                                           // 0x0220   (0x0010)  
	unsigned char                                      UnknownData03_7[0x58];                                      // 0x0230   (0x0058)  MISSED
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FExposureSettings
{ 
	float                                              FixedEV100;                                                 // 0x0000   (0x0004)  
	bool                                               bFixed;                                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTickPrerequisite
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 4 pad: 0x0000
struct FCanvasUVTri
{ 
	FVector2D                                          V0_Pos;                                                     // 0x0000   (0x0008)  
	FVector2D                                          V0_UV;                                                      // 0x0008   (0x0008)  
	FLinearColor                                       V0_Color;                                                   // 0x0010   (0x0010)  
	FVector2D                                          V1_Pos;                                                     // 0x0020   (0x0008)  
	FVector2D                                          V1_UV;                                                      // 0x0028   (0x0008)  
	FLinearColor                                       V1_Color;                                                   // 0x0030   (0x0010)  
	FVector2D                                          V2_Pos;                                                     // 0x0040   (0x0008)  
	FVector2D                                          V2_UV;                                                      // 0x0048   (0x0008)  
	FLinearColor                                       V2_Color;                                                   // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FDepthFieldGlowInfo
{ 
	bool                                               bEnableGlow : 1;                                            // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       GlowColor;                                                  // 0x0004   (0x0010)  
	FVector2D                                          GlowOuterRadius;                                            // 0x0014   (0x0008)  
	FVector2D                                          GlowInnerRadius;                                            // 0x001C   (0x0008)  
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FFontRenderInfo
{ 
	bool                                               bClipText : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bEnableShadow : 1;                                          // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FDepthFieldGlowInfo                                GlowInfo;                                                   // 0x0004   (0x0024)  
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FRadialDamageParams
{ 
	float                                              BaseDamage;                                                 // 0x0000   (0x0004)  
	float                                              MinimumDamage;                                              // 0x0004   (0x0004)  
	float                                              InnerRadius;                                                // 0x0008   (0x0004)  
	float                                              OuterRadius;                                                // 0x000C   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000040) align 8 pad: 0x0000
struct FRadialDamageEvent : FDamageEvent
{ 
	FRadialDamageParams                                Params;                                                     // 0x0010   (0x0014)  
	FVector                                            Origin;                                                     // 0x0024   (0x000C)  
	TArray<FHitResult>                                 ComponentHits;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMeshBuildSettings
{ 
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:0 (0x0001)  
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:5 (0x0001)  
	bool                                               bBuildReversedIndexBuffer : 1;                              // 0x0000:6 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:7 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0001:0 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x0001:1 (0x0001)  
	bool                                               bGenerateDistanceFieldAsIfTwoSided : 1;                     // 0x0001:2 (0x0001)  
	bool                                               bSupportFaceRemap : 1;                                      // 0x0001:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MinLightmapResolution;                                      // 0x0004   (0x0004)  
	int32_t                                            SrcLightmapIndex;                                           // 0x0008   (0x0004)  
	int32_t                                            DstLightmapIndex;                                           // 0x000C   (0x0004)  
	float                                              BuildScale;                                                 // 0x0010   (0x0004)  
	FVector                                            BuildScale3D;                                               // 0x0014   (0x000C)  
	float                                              DistanceFieldResolutionScale;                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UStaticMesh*                                 DistanceFieldReplacementMesh;                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FPOV
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FAnimUpdateRateParameters
{ 
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0000   (0x0001)  MISSED
	EUpdateRateShiftBucket                             ShiftBucket;                                                // 0x0001   (0x0001)  
	bool                                               bInterpolateSkippedFrames : 1;                              // 0x0002:0 (0x0001)  
	bool                                               bShouldUseLodMap : 1;                                       // 0x0002:1 (0x0001)  
	bool                                               bShouldUseMinLod : 1;                                       // 0x0002:2 (0x0001)  
	bool                                               bSkipUpdate : 1;                                            // 0x0002:3 (0x0001)  
	bool                                               bSkipEvaluation : 1;                                        // 0x0002:4 (0x0001)  
	unsigned char                                      UnknownData01_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	int32_t                                            UpdateRate;                                                 // 0x0004   (0x0004)  
	int32_t                                            EvaluationRate;                                             // 0x0008   (0x0004)  
	float                                              TickedPoseOffestTime;                                       // 0x000C   (0x0004)  
	float                                              AdditionalTime;                                             // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	int32_t                                            BaseNonRenderedUpdateRate;                                  // 0x0018   (0x0004)  
	int32_t                                            MaxEvalRateForInterpolation;                                // 0x001C   (0x0004)  
	TArray<float>                                      BaseVisibleDistanceFactorThesholds;                         // 0x0020   (0x0010)  
	SDK_UNDEFINED(80,209) /* TMap<int32_t, int32_t> */ __um(LODToFrameSkipMap);                                    // 0x0030   (0x0050)  
	int32_t                                            SkippedUpdateFrames;                                        // 0x0080   (0x0004)  
	int32_t                                            SkippedEvalFrames;                                          // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FAnimSlotDesc
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	int32_t                                            NumChannels;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FAnimSlotInfo
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	TArray<float>                                      ChannelWeights;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMTDResult
{ 
	FVector                                            Direction;                                                  // 0x0000   (0x000C)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FOverlapResult
{ 
	SDK_UNDEFINED(8,210) /* TWeakObjectPtr<AActor*> */ __um(Actor);                                                // 0x0000   (0x0008)  
	SDK_UNDEFINED(8,211) /* TWeakObjectPtr<UPrimitiveComponent*> */ __um(Component);                               // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0010   (0x0004)  MISSED
	bool                                               bBlockingHit : 1;                                           // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FSwarmDebugOptions
{ 
	bool                                               bDistributionEnabled : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bForceContentExport : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bInitialized : 1;                                           // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FLightmassDebugOptions
{ 
	bool                                               bDebugMode : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bStatsEnabled : 1;                                          // 0x0000:1 (0x0001)  
	bool                                               bGatherBSPSurfacesAcrossComponents : 1;                     // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              CoplanarTolerance;                                          // 0x0004   (0x0004)  
	bool                                               bUseImmediateImport : 1;                                    // 0x0008:0 (0x0001)  
	bool                                               bImmediateProcessMappings : 1;                              // 0x0008:1 (0x0001)  
	bool                                               bSortMappings : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bDumpBinaryFiles : 1;                                       // 0x0008:3 (0x0001)  
	bool                                               bDebugMaterials : 1;                                        // 0x0008:4 (0x0001)  
	bool                                               bPadMappings : 1;                                           // 0x0008:5 (0x0001)  
	bool                                               bDebugPaddings : 1;                                         // 0x0008:6 (0x0001)  
	bool                                               bOnlyCalcDebugTexelMappings : 1;                            // 0x0008:7 (0x0001)  
	bool                                               bUseRandomColors : 1;                                       // 0x0009:0 (0x0001)  
	bool                                               bColorBordersGreen : 1;                                     // 0x0009:1 (0x0001)  
	bool                                               bColorByExecutionTime : 1;                                  // 0x0009:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              ExecutionTimeDivisor;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FBasedPosition
{ 
	class AActor*                                      Base;                                                       // 0x0000   (0x0008)  
	FVector                                            position;                                                   // 0x0008   (0x000C)  
	FVector                                            CachedBaseLocation;                                         // 0x0014   (0x000C)  
	FRotator                                           CachedBaseRotation;                                         // 0x0020   (0x000C)  
	FVector                                            CachedTransPosition;                                        // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FFractureEffect
{ 
	class UParticleSystem*                             ParticleSystem;                                             // 0x0000   (0x0008)  
	class USoundBase*                                  Sound;                                                      // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FRigidBodyContactInfo
{ 
	FVector                                            ContactPosition;                                            // 0x0000   (0x000C)  
	FVector                                            ContactNormal;                                              // 0x000C   (0x000C)  
	float                                              ContactPenetration;                                         // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UPhysicalMaterial*                           PhysMaterial[2];                                            // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCollisionImpactData
{ 
	TArray<FRigidBodyContactInfo>                      ContactInfos;                                               // 0x0000   (0x0010)  
	FVector                                            TotalNormalImpulse;                                         // 0x0010   (0x000C)  
	FVector                                            TotalFrictionImpulse;                                       // 0x001C   (0x000C)  
	bool                                               bIsVelocityDeltaUnderThreshold;                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FRigidBodyState
{ 
	FVector_NetQuantize100                             position;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FQuat                                              Quaternion;                                                 // 0x0010   (0x0010)  
	FVector_NetQuantize100                             LinVel;                                                     // 0x0020   (0x000C)  
	FVector_NetQuantize100                             AngVel;                                                     // 0x002C   (0x000C)  
	char                                               Flags;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FPredictProjectilePathPointData
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FVector                                            Velocity;                                                   // 0x000C   (0x000C)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FPredictProjectilePathResult
{ 
	TArray<FPredictProjectilePathPointData>            PathData;                                                   // 0x0000   (0x0010)  
	FPredictProjectilePathPointData                    LastTraceDestination;                                       // 0x0010   (0x001C)  
	FHitResult                                         HitResult;                                                  // 0x002C   (0x0088)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FPredictProjectilePathParams
{ 
	FVector                                            StartLocation;                                              // 0x0000   (0x000C)  
	FVector                                            LaunchVelocity;                                             // 0x000C   (0x000C)  
	bool                                               bTraceWithCollision;                                        // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              ProjectileRadius;                                           // 0x001C   (0x0004)  
	float                                              MaxSimTime;                                                 // 0x0020   (0x0004)  
	bool                                               bTraceWithChannel;                                          // 0x0024   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	SDK_UNDEFINED(16,212) /* TArray<TEnumAsByte<EObjectTypeQuery>> */ __um(ObjectTypes);                           // 0x0028   (0x0010)  
	TArray<class AActor*>                              ActorsToIgnore;                                             // 0x0038   (0x0010)  
	float                                              SimFrequency;                                               // 0x0048   (0x0004)  
	float                                              OverrideGravityZ;                                           // 0x004C   (0x0004)  
	TEnumAsByte<EDrawDebugTrace>                       DrawDebugType;                                              // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              DrawDebugTime;                                              // 0x0054   (0x0004)  
	bool                                               bTraceComplex;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FActiveHapticFeedbackEffect
{ 
	class UHapticFeedbackEffect_Base*                  HapticEffect;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 4 pad: 0x0000
struct FClusterNode
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
	FVector                                            MinInstanceScale;                                           // 0x0028   (0x000C)  
	FVector                                            MaxInstanceScale;                                           // 0x0034   (0x000C)  
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FClusterNode_DEPRECATED
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.HLODISMComponentDesc
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FHLODISMComponentDesc
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
	TArray<FTransform>                                 Instances;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FImportanceTexture
{ 
	FIntPoint                                          Size;                                                       // 0x0000   (0x0008)  
	int32_t                                            NumMips;                                                    // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      MarginalCDF;                                                // 0x0010   (0x0010)  
	TArray<float>                                      ConditionalCDF;                                             // 0x0020   (0x0010)  
	TArray<FColor>                                     TextureData;                                                // 0x0030   (0x0010)  
	SDK_UNDEFINED(8,213) /* TWeakObjectPtr<UTexture2D*> */ __um(Texture);                                          // 0x0040   (0x0008)  
	TEnumAsByte<EImportanceWeight>                     Weighting;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FInstancedStaticMeshLightMapInstanceData
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	TArray<FGuid>                                      MapBuildDataIds;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x0098 (152 bytes) (0x0000B8 - 0x000150) align 16 pad: 0x0000
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x00B8   (0x0008)  
	FInstancedStaticMeshLightMapInstanceData           CachedStaticLighting;                                       // 0x00C0   (0x0040)  
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x0100   (0x0010)  
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x0110   (0x0010)  
	unsigned char                                      UnknownData00_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	int32_t                                            InstancingRandomSeed;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0144   (0x000C)  MISSED
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FInterpEdSelKey
{ 
	class UInterpGroup*                                Group;                                                      // 0x0000   (0x0008)  
	class UInterpTrack*                                Track;                                                      // 0x0008   (0x0008)  
	int32_t                                            KeyIndex;                                                   // 0x0010   (0x0004)  
	float                                              UnsnappedPosition;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FCameraPreviewInfo
{ 
	class UClass*                                      PawnClass;                                                  // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	class APawn*                                       PawnInst;                                                   // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FSubTrackGroup
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	TArray<int32_t>                                    TrackIndices;                                               // 0x0010   (0x0010)  
	bool                                               bIsCollapsed : 1;                                           // 0x0020:0 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0020:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSupportedSubTrackInfo
{ 
	class UClass*                                      SupportedClass;                                             // 0x0000   (0x0008)  
	FString                                            SubTrackName;                                               // 0x0008   (0x0010)  
	int32_t                                            GroupIndex;                                                 // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FVectorSpringState
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FFloatSpringState
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FDrawToRenderTargetContext
{ 
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FLatentActionManager
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x012C (300 bytes) (0x000000 - 0x00012C) align 4 pad: 0x0000
struct FLevelSimplificationDetails
{ 
	bool                                               bCreatePackagePerAsset;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DetailsPercentage;                                          // 0x0004   (0x0004)  
	FMaterialProxySettings                             StaticMeshMaterialSettings;                                 // 0x0008   (0x0088)  
	bool                                               bOverrideLandscapeExportLOD;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            LandscapeExportLOD;                                         // 0x0094   (0x0004)  
	FMaterialProxySettings                             LandscapeMaterialSettings;                                  // 0x0098   (0x0088)  
	bool                                               bBakeFoliageToLandscape;                                    // 0x0120   (0x0001)  
	bool                                               bBakeGrassToLandscape;                                      // 0x0121   (0x0001)  
	bool                                               bGenerateMeshNormalMap;                                     // 0x0122   (0x0001)  
	bool                                               bGenerateMeshMetallicMap;                                   // 0x0123   (0x0001)  
	bool                                               bGenerateMeshRoughnessMap;                                  // 0x0124   (0x0001)  
	bool                                               bGenerateMeshSpecularMap;                                   // 0x0125   (0x0001)  
	bool                                               bGenerateLandscapeNormalMap;                                // 0x0126   (0x0001)  
	bool                                               bGenerateLandscapeMetallicMap;                              // 0x0127   (0x0001)  
	bool                                               bGenerateLandscapeRoughnessMap;                             // 0x0128   (0x0001)  
	bool                                               bGenerateLandscapeSpecularMap;                              // 0x0129   (0x0001)  
	unsigned char                                      UnknownData02_7[0x2];                                       // 0x012A   (0x0002)  MISSED
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FStreamableTextureInstance
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
struct FDynamicTextureInstance : FStreamableTextureInstance
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0028   (0x0008)  
	bool                                               bAttached;                                                  // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              OriginalRadius;                                             // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0058 (88 bytes) (0x0000B8 - 0x000110) align 16 pad: 0x0000
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x00C0   (0x0030)  
	FGuid                                              LightGuid;                                                  // 0x00F0   (0x0010)  
	int32_t                                            PreviewShadowMapChannel;                                    // 0x0100   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0104   (0x000C)  MISSED
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FBatchedPoint
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
	float                                              PointSize;                                                  // 0x001C   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x0020   (0x0004)  
	char                                               DepthPriority;                                              // 0x0024   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FBatchedLine
{ 
	FVector                                            Start;                                                      // 0x0000   (0x000C)  
	FVector                                            End;                                                        // 0x000C   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x0018   (0x0010)  
	float                                              Thickness;                                                  // 0x0028   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x002C   (0x0004)  
	char                                               DepthPriority;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FClientReceiveData
{ 
	class APlayerController*                           LocalPC;                                                    // 0x0000   (0x0008)  
	FName                                              MessageType;                                                // 0x0008   (0x0008)  
	int32_t                                            MessageIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            MessageString;                                              // 0x0018   (0x0010)  
	class APlayerState*                                RelatedPlayerState;                                         // 0x0028   (0x0008)  
	class APlayerState*                                RelatedPlayerState0;                                        // 0x0030   (0x0008)  
	class UObject*                                     OptionalObject;                                             // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.HLODInstancingKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FHLODInstancingKey
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.LODMappingData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLODMappingData
{ 
	TArray<int32_t>                                    Mapping;                                                    // 0x0000   (0x0010)  
	TArray<int32_t>                                    InverseMapping;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FParameterGroupData
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	int32_t                                            GroupSortPriority;                                          // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskValue
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 1 pad: 0x0000
struct FStaticComponentMaskValue
{ 
	bool                                               R;                                                          // 0x0000   (0x0001)  
	bool                                               G;                                                          // 0x0001   (0x0001)  
	bool                                               B;                                                          // 0x0002   (0x0001)  
	bool                                               A;                                                          // 0x0003   (0x0001)  
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FParameterChannelNames
{ 
	FText                                              R;                                                          // 0x0000   (0x0018)  
	FText                                              G;                                                          // 0x0018   (0x0018)  
	FText                                              B;                                                          // 0x0030   (0x0018)  
	FText                                              A;                                                          // 0x0048   (0x0018)  
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FFunctionExpressionOutput
{ 
	class UMaterialExpressionFunctionOutput*           ExpressionOutput;                                           // 0x0000   (0x0008)  
	FGuid                                              ExpressionOutputId;                                         // 0x0008   (0x0010)  
	FExpressionOutput                                  Output;                                                     // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FFunctionExpressionInput
{ 
	class UMaterialExpressionFunctionInput*            ExpressionInput;                                            // 0x0000   (0x0008)  
	FGuid                                              ExpressionInputId;                                          // 0x0008   (0x0010)  
	FExpressionInput                                   Input;                                                      // 0x0018   (0x0014)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FScalarParameterAtlasInstanceData
{ 
	bool                                               bIsUsedAsAtlasPosition;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	SDK_UNDEFINED(40,214) /* TWeakObjectPtr<UCurveLinearColor*> */ __um(Curve);                                    // 0x0008   (0x0028)  
	SDK_UNDEFINED(40,215) /* TWeakObjectPtr<UCurveLinearColorAtlas*> */ __um(Atlas);                               // 0x0030   (0x0028)  
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FString                                            MemberScope;                                                // 0x0008   (0x0010)  
	FName                                              MemberName;                                                 // 0x0018   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0020   (0x0010)  
	bool                                               bSelfContext;                                               // 0x0030   (0x0001)  
	bool                                               bWasDeprecated;                                             // 0x0031   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMeshInstancingSettings
{ 
	class UClass*                                      ActorClassToUse;                                            // 0x0000   (0x0008)  
	int32_t                                            InstanceReplacementThreshold;                               // 0x0008   (0x0004)  
	EMeshInstancingReplacementMethod                   MeshReplacementMethod;                                      // 0x000C   (0x0001)  
	bool                                               bSkipMeshesWithVertexColors;                                // 0x000D   (0x0001)  
	bool                                               bUseHLODVolumes;                                            // 0x000E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x000F   (0x0001)  MISSED
	class UClass*                                      ISMComponentToUse;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FMeshReductionSettings
{ 
	float                                              PercentTriangles;                                           // 0x0000   (0x0004)  
	float                                              PercentVertices;                                            // 0x0004   (0x0004)  
	float                                              MaxDeviation;                                               // 0x0008   (0x0004)  
	float                                              PixelError;                                                 // 0x000C   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x0010   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x0014   (0x0004)  
	int32_t                                            BaseLODModel;                                               // 0x0018   (0x0004)  
	TEnumAsByte<EMeshFeatureImportance>                SilhouetteImportance;                                       // 0x001C   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                TextureImportance;                                          // 0x001D   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                ShadingImportance;                                          // 0x001E   (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x001F:0 (0x0001)  
	bool                                               bGenerateUniqueLightmapUVs : 1;                             // 0x001F:1 (0x0001)  
	bool                                               bKeepSymmetry : 1;                                          // 0x001F:2 (0x0001)  
	bool                                               bVisibilityAided : 1;                                       // 0x001F:3 (0x0001)  
	bool                                               bCullOccluded : 1;                                          // 0x001F:4 (0x0001)  
	EStaticMeshReductionTerimationCriterion            TerminationCriterion;                                       // 0x0020   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VisibilityAggressiveness;                                   // 0x0021   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VertexColorImportance;                                      // 0x0022   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x0023   (0x0001)  MISSED
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FNameCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              Value;                                                      // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0010 (16 bytes) (0x000068 - 0x000078) align 8 pad: 0x0000
struct FNameCurve : FIndexedCurve
{ 
	TArray<FNameCurveKey>                              Keys;                                                       // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000078) align 8 pad: 0x0000
struct FNavDataConfig : FNavAgentProperties
{ 
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	FColor                                             Color;                                                      // 0x0038   (0x0004)  
	FVector                                            DefaultQueryExtent;                                         // 0x003C   (0x000C)  
	class UClass*                                      NavigationDataClass;                                        // 0x0048   (0x0008)  
	SDK_UNDEFINED(40,216) /* TWeakObjectPtr<UClass*> */ __um(NavDataClass);                                        // 0x0050   (0x0028)  
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align 4 pad: 0x0000
struct FPacketSimulationSettings
{ 
	int32_t                                            PktLoss;                                                    // 0x0000   (0x0004)  
	int32_t                                            PktLossMaxSize;                                             // 0x0004   (0x0004)  
	int32_t                                            PktLossMinSize;                                             // 0x0008   (0x0004)  
	int32_t                                            PktOrder;                                                   // 0x000C   (0x0004)  
	int32_t                                            PktDup;                                                     // 0x0010   (0x0004)  
	int32_t                                            PktLag;                                                     // 0x0014   (0x0004)  
	int32_t                                            PktLagVariance;                                             // 0x0018   (0x0004)  
	int32_t                                            PktLagMin;                                                  // 0x001C   (0x0004)  
	int32_t                                            PktLagMax;                                                  // 0x0020   (0x0004)  
	int32_t                                            PktIncomingLagMin;                                          // 0x0024   (0x0004)  
	int32_t                                            PktIncomingLagMax;                                          // 0x0028   (0x0004)  
	int32_t                                            PktIncomingLoss;                                            // 0x002C   (0x0004)  
	int32_t                                            PktJitter;                                                  // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 16 pad: 0x0000
struct FNodeItem
{ 
	FName                                              ParentName;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FParticleCurvePair
{ 
	FString                                            CurveName;                                                  // 0x0000   (0x0010)  
	class UObject*                                     CurveObject;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FBeamTargetData
{ 
	FName                                              TargetName;                                                 // 0x0000   (0x0008)  
	float                                              TargetPercentage;                                           // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FParticleSystemWorldManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleSystemReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FParticleEmitterReplayFrame
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FFreezablePerPlatformInt
{ 
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPlayerMuteList
{ 
	unsigned char                                      UnknownData00_7[0x30];                                      // 0x0000   (0x0030)  MISSED
	bool                                               bHasVoiceHandshakeCompleted;                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            VoiceChannelIdx;                                            // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FPreviewAttachedObjectPair
{ 
	SDK_UNDEFINED(40,217) /* TWeakObjectPtr<UObject*> */ __um(AttachedObject);                                     // 0x0000   (0x0028)  
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	FName                                              AttachedTo;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPreviewAssetAttachContainer
{ 
	TArray<FPreviewAttachedObjectPair>                 AttachedObjects;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0048 (72 bytes) (0x0000B8 - 0x000100) align 16 pad: 0x0000
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         ComponentTransform;                                         // 0x00C0   (0x0030)  
	int32_t                                            VisibilityId;                                               // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	class UPrimitiveComponent*                         LODParent;                                                  // 0x00F8   (0x0008)  
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FSpriteCategoryInfo
{ 
	FName                                              Category;                                                   // 0x0000   (0x0008)  
	FText                                              DisplayName;                                                // 0x0008   (0x0018)  
	FText                                              Description;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.QuartzPulseOverrideStep
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FQuartzPulseOverrideStep
{ 
	int32_t                                            NumberOfPulses;                                             // 0x0000   (0x0004)  
	EQuartzCommandQuantization                         PulseDuration;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.QuartzTimeSignature
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FQuartzTimeSignature
{ 
	int32_t                                            NumBeats;                                                   // 0x0000   (0x0004)  
	EQuartzTimeSignatureQuantization                   BeatType;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	TArray<FQuartzPulseOverrideStep>                   OptionalPulseOverride;                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.QuartzClockSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FQuartzClockSettings
{ 
	FQuartzTimeSignature                               TimeSignature;                                              // 0x0000   (0x0018)  
	bool                                               bIgnoreLevelChange;                                         // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.QuartzQuantizationBoundary
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FQuartzQuantizationBoundary
{ 
	EQuartzCommandQuantization                         Quantization;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Multiplier;                                                 // 0x0004   (0x0004)  
	EQuarztQuantizationReference                       CountingReferencePoint;                                     // 0x0008   (0x0001)  
	bool                                               bFireOnClockStart;                                          // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.QuartzTransportTimeStamp
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FQuartzTransportTimeStamp
{ 
	int32_t                                            Bars;                                                       // 0x0000   (0x0004)  
	int32_t                                            Beat;                                                       // 0x0004   (0x0004)  
	float                                              BeatFraction;                                               // 0x0008   (0x0004)  
	float                                              Seconds;                                                    // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FLevelNameAndTime
{ 
	FString                                            LevelName;                                                  // 0x0000   (0x0010)  
	uint32_t                                           LevelChangeTimeInMS;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCompressedRichCurve
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FRootMotionSourceStatus
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FRootMotionFinishVelocitySettings
{ 
	ERootMotionFinishVelocityMode                      Mode;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            SetVelocity;                                                // 0x0004   (0x000C)  
	float                                              ClampVelocity;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align 16 pad: 0x0008
#pragma pack(push, 0x1)
struct FRootMotionSource
{ 
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	uint16_t                                           Priority;                                                   // 0x0010   (0x0002)  
	uint16_t                                           LocalID;                                                    // 0x0012   (0x0002)  
	ERootMotionAccumulateMode                          AccumulateMode;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              InstanceName;                                               // 0x0018   (0x0008)  
	float                                              StartTime;                                                  // 0x0020   (0x0004)  
	float                                              CurrentTime;                                                // 0x0024   (0x0004)  
	float                                              PreviousTime;                                               // 0x0028   (0x0004)  
	float                                              Duration;                                                   // 0x002C   (0x0004)  
	FRootMotionSourceStatus                            Status;                                                     // 0x0030   (0x0001)  
	FRootMotionSourceSettings                          Settings;                                                   // 0x0031   (0x0001)  
	bool                                               bInLocalSpace;                                              // 0x0032   (0x0001)  
	unsigned char                                      UnknownData02_6[0xD];                                       // 0x0033   (0x000D)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0040   (0x0040)  
	FRootMotionFinishVelocitySettings                  FinishVelocityParams;                                       // 0x0080   (0x0014)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};
#pragma pack(pop)

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x0038 (56 bytes) (0x000098 - 0x0000D0) align 16 pad: 0x0000
struct FRootMotionSource_JumpForce : FRootMotionSource
{ 
	FRotator                                           Rotation;                                                   // 0x0098   (0x000C)  
	float                                              Distance;                                                   // 0x00A4   (0x0004)  
	float                                              Height;                                                     // 0x00A8   (0x0004)  
	bool                                               bDisableTimeout;                                            // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00C0   (0x0010)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x0038 (56 bytes) (0x000098 - 0x0000D0) align 16 pad: 0x0000
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            InitialTargetLocation;                                      // 0x00A4   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00B0   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00C0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00C8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x0028 (40 bytes) (0x000098 - 0x0000C0) align 16 pad: 0x0000
struct FRootMotionSource_MoveToForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00A4   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x0048 (72 bytes) (0x000098 - 0x0000E0) align 16 pad: 0x0000
struct FRootMotionSource_RadialForce : FRootMotionSource
{ 
	FVector                                            Location;                                                   // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class AActor*                                      LocationActor;                                              // 0x00A8   (0x0008)  
	float                                              Radius;                                                     // 0x00B0   (0x0004)  
	float                                              Strength;                                                   // 0x00B4   (0x0004)  
	bool                                               bIsPush;                                                    // 0x00B8   (0x0001)  
	bool                                               bNoZForce;                                                  // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
	class UCurveFloat*                                 StrengthDistanceFalloff;                                    // 0x00C0   (0x0008)  
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00C8   (0x0008)  
	bool                                               bUseFixedWorldDirection;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FRotator                                           FixedWorldDirection;                                        // 0x00D4   (0x000C)  
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x0018 (24 bytes) (0x000098 - 0x0000B0) align 16 pad: 0x0000
struct FRootMotionSource_ConstantForce : FRootMotionSource
{ 
	FVector                                            Force;                                                      // 0x0098   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align 8 pad: 0x0000
struct FCameraExposureSettings
{ 
	TEnumAsByte<EAutoExposureMethod>                   Method;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              LowPercent;                                                 // 0x0004   (0x0004)  
	float                                              HighPercent;                                                // 0x0008   (0x0004)  
	float                                              MinBrightness;                                              // 0x000C   (0x0004)  
	float                                              MaxBrightness;                                              // 0x0010   (0x0004)  
	float                                              SpeedUp;                                                    // 0x0014   (0x0004)  
	float                                              SpeedDown;                                                  // 0x0018   (0x0004)  
	float                                              Bias;                                                       // 0x001C   (0x0004)  
	class UCurveFloat*                                 BiasCurve;                                                  // 0x0020   (0x0008)  
	class UTexture*                                    MeterMask;                                                  // 0x0028   (0x0008)  
	float                                              HistogramLogMin;                                            // 0x0030   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x0034   (0x0004)  
	float                                              CalibrationConstant;                                        // 0x0038   (0x0004)  
	bool                                               ApplyPhysicalCameraExposure : 1;                            // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (132 bytes) (0x000000 - 0x000084) align 4 pad: 0x0000
struct FGaussianSumBloomSettings
{ 
	float                                              Intensity;                                                  // 0x0000   (0x0004)  
	float                                              Threshold;                                                  // 0x0004   (0x0004)  
	float                                              SizeScale;                                                  // 0x0008   (0x0004)  
	float                                              Filter1Size;                                                // 0x000C   (0x0004)  
	float                                              Filter2Size;                                                // 0x0010   (0x0004)  
	float                                              Filter3Size;                                                // 0x0014   (0x0004)  
	float                                              Filter4Size;                                                // 0x0018   (0x0004)  
	float                                              Filter5Size;                                                // 0x001C   (0x0004)  
	float                                              Filter6Size;                                                // 0x0020   (0x0004)  
	FLinearColor                                       Filter1Tint;                                                // 0x0024   (0x0010)  
	FLinearColor                                       Filter2Tint;                                                // 0x0034   (0x0010)  
	FLinearColor                                       Filter3Tint;                                                // 0x0044   (0x0010)  
	FLinearColor                                       Filter4Tint;                                                // 0x0054   (0x0010)  
	FLinearColor                                       Filter5Tint;                                                // 0x0064   (0x0010)  
	FLinearColor                                       Filter6Tint;                                                // 0x0074   (0x0010)  
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FConvolutionBloomSettings
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0000   (0x0008)  
	float                                              Size;                                                       // 0x0008   (0x0004)  
	FVector2D                                          CenterUV;                                                   // 0x000C   (0x0008)  
	float                                              PreFilterMin;                                               // 0x0014   (0x0004)  
	float                                              PreFilterMax;                                               // 0x0018   (0x0004)  
	float                                              PreFilterMult;                                              // 0x001C   (0x0004)  
	float                                              BufferScale;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FLensBloomSettings
{ 
	FGaussianSumBloomSettings                          GaussianSum;                                                // 0x0000   (0x0084)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FConvolutionBloomSettings                          Convolution;                                                // 0x0088   (0x0028)  
	TEnumAsByte<EBloomMethod>                          Method;                                                     // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FLensImperfectionSettings
{ 
	class UTexture*                                    DirtMask;                                                   // 0x0000   (0x0008)  
	float                                              DirtMaskIntensity;                                          // 0x0008   (0x0004)  
	FLinearColor                                       DirtMaskTint;                                               // 0x000C   (0x0010)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align 8 pad: 0x0000
struct FLensSettings
{ 
	FLensBloomSettings                                 Bloom;                                                      // 0x0000   (0x00B8)  
	FLensImperfectionSettings                          Imperfections;                                              // 0x00B8   (0x0020)  
	float                                              ChromaticAberration;                                        // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FFilmStockSettings
{ 
	float                                              slope;                                                      // 0x0000   (0x0004)  
	float                                              Toe;                                                        // 0x0004   (0x0004)  
	float                                              Shoulder;                                                   // 0x0008   (0x0004)  
	float                                              BlackClip;                                                  // 0x000C   (0x0004)  
	float                                              WhiteClip;                                                  // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FColorGradePerRangeSettings
{ 
	FVector4                                           Saturation;                                                 // 0x0000   (0x0010)  
	FVector4                                           Contrast;                                                   // 0x0010   (0x0010)  
	FVector4                                           Gamma;                                                      // 0x0020   (0x0010)  
	FVector4                                           Gain;                                                       // 0x0030   (0x0010)  
	FVector4                                           Offset;                                                     // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align 16 pad: 0x0000
struct FColorGradingSettings
{ 
	FColorGradePerRangeSettings                        Global;                                                     // 0x0000   (0x0050)  
	FColorGradePerRangeSettings                        Shadows;                                                    // 0x0050   (0x0050)  
	FColorGradePerRangeSettings                        Midtones;                                                   // 0x00A0   (0x0050)  
	FColorGradePerRangeSettings                        Highlights;                                                 // 0x00F0   (0x0050)  
	float                                              ShadowsMax;                                                 // 0x0140   (0x0004)  
	float                                              HighlightsMin;                                              // 0x0144   (0x0004)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Struct /Script/Engine.SceneViewExtensionIsActiveFunctor
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FSceneViewExtensionIsActiveFunctor
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 4 pad: 0x0000
struct FClothPhysicsProperties_Legacy
{ 
	float                                              VerticalResistance;                                         // 0x0000   (0x0004)  
	float                                              HorizontalResistance;                                       // 0x0004   (0x0004)  
	float                                              BendResistance;                                             // 0x0008   (0x0004)  
	float                                              ShearResistance;                                            // 0x000C   (0x0004)  
	float                                              Friction;                                                   // 0x0010   (0x0004)  
	float                                              Damping;                                                    // 0x0014   (0x0004)  
	float                                              TetherStiffness;                                            // 0x0018   (0x0004)  
	float                                              TetherLimit;                                                // 0x001C   (0x0004)  
	float                                              Drag;                                                       // 0x0020   (0x0004)  
	float                                              StiffnessFrequency;                                         // 0x0024   (0x0004)  
	float                                              GravityScale;                                               // 0x0028   (0x0004)  
	float                                              MassScale;                                                  // 0x002C   (0x0004)  
	float                                              InertiaBlend;                                               // 0x0030   (0x0004)  
	float                                              SelfCollisionThickness;                                     // 0x0034   (0x0004)  
	float                                              SelfCollisionSquashScale;                                   // 0x0038   (0x0004)  
	float                                              SelfCollisionStiffness;                                     // 0x003C   (0x0004)  
	float                                              SolverFrequency;                                            // 0x0040   (0x0004)  
	float                                              FiberCompression;                                           // 0x0044   (0x0004)  
	float                                              FiberExpansion;                                             // 0x0048   (0x0004)  
	float                                              FiberResistance;                                            // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FClothingAssetData_Legacy
{ 
	FName                                              AssetName;                                                  // 0x0000   (0x0008)  
	FString                                            ApexFileName;                                               // 0x0008   (0x0010)  
	bool                                               bClothPropertiesChanged;                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FClothPhysicsProperties_Legacy                     PhysicsProperties;                                          // 0x001C   (0x0050)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x006C   (0x000C)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FSkeletalMeshClothBuildParams
{ 
	SDK_UNDEFINED(8,218) /* TWeakObjectPtr<UClothingAssetBase*> */ __um(TargetAsset);                              // 0x0000   (0x0008)  
	int32_t                                            TargetLod;                                                  // 0x0008   (0x0004)  
	bool                                               bRemapParameters;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FString                                            AssetName;                                                  // 0x0010   (0x0010)  
	int32_t                                            LODIndex;                                                   // 0x0020   (0x0004)  
	int32_t                                            SourceSection;                                              // 0x0024   (0x0004)  
	bool                                               bRemoveFromMesh;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0029   (0x0007)  MISSED
	SDK_UNDEFINED(40,219) /* TWeakObjectPtr<UPhysicsAsset*> */ __um(PhysicsAsset);                                 // 0x0030   (0x0028)  
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FBoneMirrorExport
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	FName                                              SourceBoneName;                                             // 0x0008   (0x0008)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshComponentClothTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FNameMapping
{ 
	FName                                              NodeName;                                                   // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FRigConfiguration
{ 
	class URig*                                        Rig;                                                        // 0x0000   (0x0008)  
	TArray<FNameMapping>                               BoneMappingTable;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FBoneReductionSetting
{ 
	TArray<FName>                                      BonesToRemove;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FReferencePose
{ 
	FName                                              PoseName;                                                   // 0x0000   (0x0008)  
	TArray<FTransform>                                 ReferencePose;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSkeletonToMeshLinkup
{ 
	TArray<int32_t>                                    SkeletonToMeshTable;                                        // 0x0000   (0x0010)  
	TArray<int32_t>                                    MeshToSkeletonTable;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSkelMeshSkinWeightInfo
{ 
	int32_t                                            Bones[12];                                                  // 0x0000   (0x0030)  
	char                                               Weights[12];                                                // 0x0030   (0x000C)  
};

/// Struct /Script/Engine.SkinWeightProfileManagerTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FSkinWeightProfileManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x00B8 (184 bytes) (0x0000B8 - 0x000170) align 16 pad: 0x0000
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{ 
	FGuid                                              LightGuid;                                                  // 0x00B8   (0x0010)  
	float                                              AverageBrightness;                                          // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData00_7[0xA4];                                      // 0x00CC   (0x00A4)  MISSED
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FSmartNameMapping
{ 
	unsigned char                                      UnknownData00_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FCurveMetaData
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundClassEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSoundNodeEditorData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundSubmixSpectralAnalysisBandSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FSoundSubmixSpectralAnalysisBandSettings
{ 
	float                                              BandFrequency;                                              // 0x0000   (0x0004)  
	int32_t                                            AttackTimeMsec;                                             // 0x0004   (0x0004)  
	int32_t                                            ReleaseTimeMsec;                                            // 0x0008   (0x0004)  
	float                                              QFactor;                                                    // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FSoundWaveEnvelopeDataPerSound
{ 
	float                                              Envelope;                                                   // 0x0000   (0x0004)  
	float                                              PlaybackTime;                                               // 0x0004   (0x0004)  
	class USoundWave*                                  SoundWave;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSoundWaveSpectralData
{ 
	float                                              FrequencyHz;                                                // 0x0000   (0x0004)  
	float                                              Magnitude;                                                  // 0x0004   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FSoundWaveSpectralDataPerSound
{ 
	TArray<FSoundWaveSpectralData>                     SpectralData;                                               // 0x0000   (0x0010)  
	float                                              PlaybackTime;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FStreamedAudioPlatformData
{ 
	unsigned char                                      UnknownData00_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x00E8 (232 bytes) (0x0000B8 - 0x0001A0) align 8 pad: 0x0000
struct FSplineInstanceData : FSceneComponentInstanceData
{ 
	bool                                               bSplineHasBeenEdited;                                       // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FSplineCurves                                      SplineCurves;                                               // 0x00C0   (0x0070)  
	FSplineCurves                                      SplineCurvesPreUCS;                                         // 0x0130   (0x0070)  
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align 4 pad: 0x0000
struct FSplinePoint
{ 
	float                                              InputKey;                                                   // 0x0000   (0x0004)  
	FVector                                            position;                                                   // 0x0004   (0x000C)  
	FVector                                            ArriveTangent;                                              // 0x0010   (0x000C)  
	FVector                                            LeaveTangent;                                               // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	FVector                                            Scale;                                                      // 0x0034   (0x000C)  
	TEnumAsByte<ESplinePointType>                      Type;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0041   (0x0003)  MISSED
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x0030 (48 bytes) (0x0000B8 - 0x0000E8) align 8 pad: 0x0000
struct FSplineMeshInstanceData : FSceneComponentInstanceData
{ 
	FVector                                            StartPos;                                                   // 0x00B8   (0x000C)  
	FVector                                            EndPos;                                                     // 0x00C4   (0x000C)  
	FVector                                            StartTangent;                                               // 0x00D0   (0x000C)  
	FVector                                            EndTangent;                                                 // 0x00DC   (0x000C)  
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMaterialRemapIndex
{ 
	uint32_t                                           ImportVersionKey;                                           // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    MaterialRemap;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FAssetEditorOrbitCameraPosition
{ 
	bool                                               bIsSet;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            CamOrbitPoint;                                              // 0x0004   (0x000C)  
	FVector                                            CamOrbitZoom;                                               // 0x0010   (0x000C)  
	FRotator                                           CamOrbitRotation;                                           // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FMeshSectionInfoMap
{ 
	SDK_UNDEFINED(80,220) /* TMap<uint32_t, FMeshSectionInfo> */ __um(Map);                                        // 0x0000   (0x0050)  
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMeshSectionInfo
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	bool                                               bEnableCollision;                                           // 0x0004   (0x0001)  
	bool                                               bCastShadow;                                                // 0x0005   (0x0001)  
	bool                                               bVisibleInRayTracing;                                       // 0x0006   (0x0001)  
	bool                                               bForceOpaque;                                               // 0x0007   (0x0001)  
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align 8 pad: 0x0000
struct FStaticMeshSourceModel
{ 
	FMeshBuildSettings                                 BuildSettings;                                              // 0x0000   (0x0030)  
	FMeshReductionSettings                             ReductionSettings;                                          // 0x0030   (0x0024)  
	float                                              LODDistance;                                                // 0x0054   (0x0004)  
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            SourceImportFilename;                                       // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FStaticMeshOptimizationSettings
{ 
	TEnumAsByte<EOptimizationType>                     ReductionMethod;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0008   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x000C   (0x0004)  
	bool                                               bRecalcNormals;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              NormalsThreshold;                                           // 0x0014   (0x0004)  
	char                                               SilhouetteImportance;                                       // 0x0018   (0x0001)  
	char                                               TextureImportance;                                          // 0x0019   (0x0001)  
	char                                               ShadingImportance;                                          // 0x001A   (0x0001)  
	unsigned char                                      UnknownData02_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 16 pad: 0x0000
struct FPaintedVertex
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FColor                                             Color;                                                      // 0x000C   (0x0004)  
	FVector4                                           Normal;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FStaticMeshVertexColorLODData
{ 
	TArray<FPaintedVertex>                             PaintedVertices;                                            // 0x0000   (0x0010)  
	TArray<FColor>                                     VertexBufferColors;                                         // 0x0010   (0x0010)  
	uint32_t                                           LODIndex;                                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0040 (64 bytes) (0x000100 - 0x000140) align 16 pad: 0x0000
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0100   (0x0008)  
	TArray<FStaticMeshVertexColorLODData>              VertexColorLODs;                                            // 0x0108   (0x0010)  
	TArray<FGuid>                                      CachedStaticLighting;                                       // 0x0118   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0128   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0138   (0x0008)  MISSED
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FTextureFormatSettings
{ 
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x0000   (0x0001)  
	bool                                               CompressionNoAlpha : 1;                                     // 0x0001:0 (0x0001)  
	bool                                               CompressionNone : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               sRGB : 1;                                                   // 0x0001:3 (0x0001)  
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTexturePlatformData
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FTextureSource
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FTextureSourceBlock
{ 
	int32_t                                            BlockX;                                                     // 0x0000   (0x0004)  
	int32_t                                            BlockY;                                                     // 0x0004   (0x0004)  
	int32_t                                            SizeX;                                                      // 0x0008   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x000C   (0x0004)  
	int32_t                                            NumSlices;                                                  // 0x0010   (0x0004)  
	int32_t                                            NumMips;                                                    // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FStreamingRenderAssetPrimitiveInfo
{ 
	class UStreamableRenderAsset*                      RenderAsset;                                                // 0x0000   (0x0008)  
	FBoxSphereBounds                                   Bounds;                                                     // 0x0008   (0x001C)  
	float                                              TexelFactor;                                                // 0x0024   (0x0004)  
	uint32_t                                           PackedRelativeBox;                                          // 0x0028   (0x0004)  
	bool                                               bAllowInvalidTexelFactorWhenUnregistered : 1;               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Engine.TTTrackId
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FTTTrackId
{ 
	int32_t                                            TrackType;                                                  // 0x0000   (0x0004)  
	int32_t                                            TrackIndex;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FTimeStretchCurveInstance
{ 
	bool                                               bHasValidData;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_7[0x2F];                                      // 0x0001   (0x002F)  MISSED
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FHardwareCursorReference
{ 
	FName                                              CursorPath;                                                 // 0x0000   (0x0008)  
	FVector2D                                          HotSpot;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FStartPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 4 pad: 0x0000
struct FLevelViewportInfo
{ 
	FVector                                            CamPosition;                                                // 0x0000   (0x000C)  
	FRotator                                           CamRotation;                                                // 0x000C   (0x000C)  
	float                                              CamOrthoZoom;                                               // 0x0018   (0x0004)  
	bool                                               CamUpdated;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSCPoolElem
{ 
	class UParticleSystemComponent*                    PSC;                                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FPSCPool
{ 
	TArray<FPSCPoolElem>                               FreeElements;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align 4 pad: 0x0000
struct FLightmassWorldInfoSettings
{ 
	float                                              StaticLightingLevelScale;                                   // 0x0000   (0x0004)  
	int32_t                                            NumIndirectLightingBounces;                                 // 0x0004   (0x0004)  
	int32_t                                            NumSkyLightingBounces;                                      // 0x0008   (0x0004)  
	float                                              IndirectLightingQuality;                                    // 0x000C   (0x0004)  
	float                                              IndirectLightingSmoothness;                                 // 0x0010   (0x0004)  
	FColor                                             EnvironmentColor;                                           // 0x0014   (0x0004)  
	float                                              EnvironmentIntensity;                                       // 0x0018   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x001C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0020   (0x0004)  
	TEnumAsByte<EVolumeLightingMethod>                 VolumeLightingMethod;                                       // 0x0024   (0x0001)  
	bool                                               bUseAmbientOcclusion : 1;                                   // 0x0025:0 (0x0001)  
	bool                                               bGenerateAmbientOcclusionMaterialMask : 1;                  // 0x0025:1 (0x0001)  
	bool                                               bVisualizeMaterialDiffuse : 1;                              // 0x0025:2 (0x0001)  
	bool                                               bVisualizeAmbientOcclusion : 1;                             // 0x0025:3 (0x0001)  
	bool                                               bCompressLightmaps : 1;                                     // 0x0025:4 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	float                                              VolumetricLightmapDetailCellSize;                           // 0x0028   (0x0004)  
	float                                              VolumetricLightmapMaximumBrickMemoryMb;                     // 0x002C   (0x0004)  
	float                                              VolumetricLightmapSphericalHarmonicSmoothing;               // 0x0030   (0x0004)  
	float                                              VolumeLightSamplePlacementScale;                            // 0x0034   (0x0004)  
	float                                              DirectIlluminationOcclusionFraction;                        // 0x0038   (0x0004)  
	float                                              IndirectIlluminationOcclusionFraction;                      // 0x003C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0040   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0044   (0x0004)  
	float                                              MaxOcclusionDistance;                                       // 0x0048   (0x0004)  
};

/// Class /Script/UMG.Visual
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UVisual : public UObject
{ 
public:
};

/// Struct /Script/UMG.WidgetTransform
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FWidgetTransform
{ 
	FVector2D                                          Translation;                                                // 0x0000   (0x0008)  
	FVector2D                                          Scale;                                                      // 0x0008   (0x0008)  
	FVector2D                                          Shear;                                                      // 0x0010   (0x0008)  
	float                                              Angle;                                                      // 0x0018   (0x0004)  
};

/// Class /Script/UMG.Widget
/// Size: 0x00E0 (224 bytes) (0x000028 - 0x000108) align 8 pad: 0x0000
class UWidget : public UVisual
{ 
public:
	class UPanelSlot*                                  Slot;                                                       // 0x0028   (0x0008)  
	SDK_UNDEFINED(16,221) /* FDelegateProperty */      __um(bIsEnabledDelegate);                                   // 0x0030   (0x0010)  
	FText                                              ToolTipText;                                                // 0x0040   (0x0018)  
	SDK_UNDEFINED(16,222) /* FDelegateProperty */      __um(ToolTipTextDelegate);                                  // 0x0058   (0x0010)  
	class UWidget*                                     ToolTipWidget;                                              // 0x0068   (0x0008)  
	SDK_UNDEFINED(16,223) /* FDelegateProperty */      __um(ToolTipWidgetDelegate);                                // 0x0070   (0x0010)  
	SDK_UNDEFINED(16,224) /* FDelegateProperty */      __um(VisibilityDelegate);                                   // 0x0080   (0x0010)  
	FWidgetTransform                                   RenderTransform;                                            // 0x0090   (0x001C)  
	FVector2D                                          RenderTransformPivot;                                       // 0x00AC   (0x0008)  
	bool                                               bIsVariable : 1;                                            // 0x00B4:0 (0x0001)  
	bool                                               bCreatedByConstructionScript : 1;                           // 0x00B4:1 (0x0001)  
	bool                                               bIsEnabled : 1;                                             // 0x00B4:2 (0x0001)  
	bool                                               bOverride_Cursor : 1;                                       // 0x00B4:3 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x00B5   (0x0003)  MISSED
	class USlateAccessibleWidgetData*                  AccessibleWidgetData;                                       // 0x00B8   (0x0008)  
	bool                                               bIsVolatile : 1;                                            // 0x00C0:0 (0x0001)  
	TEnumAsByte<EMouseCursor>                          Cursor;                                                     // 0x00C1   (0x0001)  
	EWidgetClipping                                    Clipping;                                                   // 0x00C2   (0x0001)  
	ESlateVisibility                                   Visibility;                                                 // 0x00C3   (0x0001)  
	float                                              RenderOpacity;                                              // 0x00C4   (0x0004)  
	class UWidgetNavigation*                           Navigation;                                                 // 0x00C8   (0x0008)  
	EFlowDirectionPreference                           FlowDirectionPreference;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x27];                                      // 0x00D1   (0x0027)  MISSED
	TArray<class UPropertyBinding*>                    NativeBindings;                                             // 0x00F8   (0x0010)  


	/// Functions
	// Function /Script/UMG.Widget.SetVisibility
	// void SetVisibility(ESlateVisibility InVisibility);                                                                       // [0x37294c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetUserFocus
	// void SetUserFocus(class APlayerController* PlayerController);                                                            // [0x3729290] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetToolTipText
	// void SetToolTipText(FText& InToolTipText);                                                                               // [0x37291c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Widget.SetToolTip
	// void SetToolTip(class UWidget* Widget);                                                                                  // [0x3729130] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTranslation
	// void SetRenderTranslation(FVector2D Translation);                                                                        // [0x3729020] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransformPivot
	// void SetRenderTransformPivot(FVector2D Pivot);                                                                           // [0x3728fa0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransformAngle
	// void SetRenderTransformAngle(float Angle);                                                                               // [0x3728f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderTransform
	// void SetRenderTransform(FWidgetTransform InTransform);                                                                   // [0x3728e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderShear
	// void SetRenderShear(FVector2D Shear);                                                                                    // [0x3728dc0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderScale
	// void SetRenderScale(FVector2D Scale);                                                                                    // [0x3728d40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Widget.SetRenderOpacity
	// void SetRenderOpacity(float InOpacity);                                                                                  // [0x3728cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleExplicit
	// void SetNavigationRuleExplicit(EUINavigation Direction, class UWidget* InWidget);                                        // [0x3728b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleCustomBoundary
	// void SetNavigationRuleCustomBoundary(EUINavigation Direction, FDelegateProperty InCustomDelegate);                       // [0x3728a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleCustom
	// void SetNavigationRuleCustom(EUINavigation Direction, FDelegateProperty InCustomDelegate);                               // [0x3728980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRuleBase
	// void SetNavigationRuleBase(EUINavigation Direction, EUINavigationRule Rule);                                             // [0x37288b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetNavigationRule
	// void SetNavigationRule(EUINavigation Direction, EUINavigationRule Rule, FName WidgetToFocus);                            // [0x37287a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetKeyboardFocus
	// void SetKeyboardFocus();                                                                                                 // [0x3728780] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetIsEnabled
	// void SetIsEnabled(bool bInIsEnabled);                                                                                    // [0x37286f0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetFocus
	// void SetFocus();                                                                                                         // [0x3728650] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetCursor
	// void SetCursor(TEnumAsByte<EMouseCursor> InCursor);                                                                      // [0x37285d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetClipping
	// void SetClipping(EWidgetClipping InClipping);                                                                            // [0x3728550] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.SetAllNavigationRules
	// void SetAllNavigationRules(EUINavigationRule Rule, FName WidgetToFocus);                                                 // [0x3728480] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.ResetCursor
	// void ResetCursor();                                                                                                      // [0x3728460] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.RemoveFromParent
	// void RemoveFromParent();                                                                                                 // [0x181c120] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.OnReply__DelegateSignature
	// FEventReply OnReply__DelegateSignature();                                                                                // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.OnPointerEvent__DelegateSignature
	// FEventReply OnPointerEvent__DelegateSignature(FGeometry MyGeometry, FPointerEvent& MouseEvent);                          // [0x24710f0] Public|Delegate|HasOutParms 
	// Function /Script/UMG.Widget.IsVisible
	// bool IsVisible();                                                                                                        // [0x3728430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.IsHovered
	// bool IsHovered();                                                                                                        // [0x181c090] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.InvalidateLayoutAndVolatility
	// void InvalidateLayoutAndVolatility();                                                                                    // [0x3728410] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.HasUserFocusedDescendants
	// bool HasUserFocusedDescendants(class APlayerController* PlayerController);                                               // [0x3728370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasUserFocus
	// bool HasUserFocus(class APlayerController* PlayerController);                                                            // [0x37282d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasMouseCaptureByUser
	// bool HasMouseCaptureByUser(int32_t UserIndex, int32_t PointerIndex);                                                     // [0x3728200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasMouseCapture
	// bool HasMouseCapture();                                                                                                  // [0x37281d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasKeyboardFocus
	// bool HasKeyboardFocus();                                                                                                 // [0x37281a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasFocusedDescendants
	// bool HasFocusedDescendants();                                                                                            // [0x3728170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.HasAnyUserFocus
	// bool HasAnyUserFocus();                                                                                                  // [0x3728140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetWidget__DelegateSignature
	// class UWidget* GetWidget__DelegateSignature();                                                                           // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetVisibility
	// ESlateVisibility GetVisibility();                                                                                        // [0x3728110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetTickSpaceGeometry
	// FGeometry GetTickSpaceGeometry();                                                                                        // [0x3727ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetText__DelegateSignature
	// FText GetText__DelegateSignature();                                                                                      // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateVisibility__DelegateSignature
	// ESlateVisibility GetSlateVisibility__DelegateSignature();                                                                // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateColor__DelegateSignature
	// FSlateColor GetSlateColor__DelegateSignature();                                                                          // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetSlateBrush__DelegateSignature
	// FSlateBrush GetSlateBrush__DelegateSignature();                                                                          // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetRenderTransformAngle
	// float GetRenderTransformAngle();                                                                                         // [0x3727f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetRenderOpacity
	// float GetRenderOpacity();                                                                                                // [0x3727f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetParent
	// class UPanelWidget* GetParent();                                                                                         // [0x3727f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetPaintSpaceGeometry
	// FGeometry GetPaintSpaceGeometry();                                                                                       // [0x3727ef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetOwningPlayer
	// class APlayerController* GetOwningPlayer();                                                                              // [0x3727ec0] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetOwningLocalPlayer
	// class ULocalPlayer* GetOwningLocalPlayer();                                                                              // [0x3727e90] BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetMouseCursor__DelegateSignature
	// TEnumAsByte<EMouseCursor> GetMouseCursor__DelegateSignature();                                                           // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetLinearColor__DelegateSignature
	// FLinearColor GetLinearColor__DelegateSignature();                                                                        // [0x24710f0] Public|Delegate|HasDefaults 
	// Function /Script/UMG.Widget.GetIsEnabled
	// bool GetIsEnabled();                                                                                                     // [0x3727e60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetInt32__DelegateSignature
	// int32_t GetInt32__DelegateSignature();                                                                                   // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetGameInstance
	// class UGameInstance* GetGameInstance();                                                                                  // [0x3727e30] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetFloat__DelegateSignature
	// float GetFloat__DelegateSignature();                                                                                     // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetDesiredSize
	// FVector2D GetDesiredSize();                                                                                              // [0x3727dc0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetClipping
	// EWidgetClipping GetClipping();                                                                                           // [0x3727d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetCheckBoxState__DelegateSignature
	// ECheckBoxState GetCheckBoxState__DelegateSignature();                                                                    // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetCachedGeometry
	// FGeometry GetCachedGeometry();                                                                                           // [0x3727d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetBool__DelegateSignature
	// bool GetBool__DelegateSignature();                                                                                       // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GetAccessibleText
	// FText GetAccessibleText();                                                                                               // [0x3727cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GetAccessibleSummaryText
	// FText GetAccessibleSummaryText();                                                                                        // [0x3727c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Widget.GenerateWidgetForString__DelegateSignature
	// class UWidget* GenerateWidgetForString__DelegateSignature(FString Item);                                                 // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.GenerateWidgetForObject__DelegateSignature
	// class UWidget* GenerateWidgetForObject__DelegateSignature(class UObject* Item);                                          // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.Widget.ForceVolatile
	// void ForceVolatile(bool bForce);                                                                                         // [0x3727b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Widget.ForceLayoutPrepass
	// void ForceLayoutPrepass();                                                                                               // [0x3727b60] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.NamedSlotBinding
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FNamedSlotBinding
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UWidget*                                     Content;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/UMG.AnimationEventBinding
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FAnimationEventBinding
{ 
	class UWidgetAnimation*                            Animation;                                                  // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,225) /* FDelegateProperty */      __um(Delegate);                                             // 0x0008   (0x0010)  
	EWidgetAnimationEvent                              AnimationEvent;                                             // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              UserTag;                                                    // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/UMG.UserWidget
/// Size: 0x0158 (344 bytes) (0x000108 - 0x000260) align 8 pad: 0x0000
class UUserWidget : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0108   (0x0008)  MISSED
	FLinearColor                                       ColorAndOpacity;                                            // 0x0110   (0x0010)  
	SDK_UNDEFINED(16,226) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x0120   (0x0010)  
	FSlateColor                                        ForegroundColor;                                            // 0x0130   (0x0028)  
	SDK_UNDEFINED(16,227) /* FDelegateProperty */      __um(ForegroundColorDelegate);                              // 0x0158   (0x0010)  
	SDK_UNDEFINED(16,228) /* FMulticastInlineDelegate */ __um(OnVisibilityChanged);                                // 0x0168   (0x0010)  
	unsigned char                                      UnknownData01_6[0x18];                                      // 0x0178   (0x0018)  MISSED
	FMargin                                            Padding;                                                    // 0x0190   (0x0010)  
	TArray<class UUMGSequencePlayer*>                  ActiveSequencePlayers;                                      // 0x01A0   (0x0010)  
	class UUMGSequenceTickManager*                     AnimationTickManager;                                       // 0x01B0   (0x0008)  
	TArray<class UUMGSequencePlayer*>                  StoppedSequencePlayers;                                     // 0x01B8   (0x0010)  
	TArray<FNamedSlotBinding>                          NamedSlotBindings;                                          // 0x01C8   (0x0010)  
	class UWidgetTree*                                 WidgetTree;                                                 // 0x01D8   (0x0008)  
	int32_t                                            Priority;                                                   // 0x01E0   (0x0004)  
	bool                                               bSupportsKeyboardFocus : 1;                                 // 0x01E4:0 (0x0001)  
	bool                                               bIsFocusable : 1;                                           // 0x01E4:1 (0x0001)  
	bool                                               bStopAction : 1;                                            // 0x01E4:2 (0x0001)  
	bool                                               bHasScriptImplementedTick : 1;                              // 0x01E4:3 (0x0001)  
	bool                                               bHasScriptImplementedPaint : 1;                             // 0x01E4:4 (0x0001)  
	unsigned char                                      UnknownData02_5[0xB];                                       // 0x01E5   (0x000B)  MISSED
	EWidgetTickFrequency                               TickFrequency;                                              // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x01F1   (0x0007)  MISSED
	class UInputComponent*                             InputComponent;                                             // 0x01F8   (0x0008)  
	TArray<FAnimationEventBinding>                     AnimationCallbacks;                                         // 0x0200   (0x0010)  
	unsigned char                                      UnknownData04_7[0x50];                                      // 0x0210   (0x0050)  MISSED


	/// Functions
	// Function /Script/UMG.UserWidget.UnregisterInputComponent
	// void UnregisterInputComponent();                                                                                         // [0x3725c60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationStarted
	// void UnbindFromAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                          // [0x3725b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationFinished
	// void UnbindFromAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                         // [0x3725aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationStarted
	// void UnbindAllFromAnimationStarted(class UWidgetAnimation* Animation);                                                   // [0x3725a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationFinished
	// void UnbindAllFromAnimationFinished(class UWidgetAnimation* Animation);                                                  // [0x3725980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.Tick
	// void Tick(FGeometry MyGeometry, float InDeltaTime);                                                                      // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.StopListeningForInputAction
	// void StopListeningForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType);                                  // [0x37258b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopListeningForAllInputActions
	// void StopListeningForAllInputActions();                                                                                  // [0x3725890] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAnimationsAndLatentActions
	// void StopAnimationsAndLatentActions();                                                                                   // [0x3725870] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAnimation
	// void StopAnimation(class UWidgetAnimation* InAnimation);                                                                 // [0x37257e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.StopAllAnimations
	// void StopAllAnimations();                                                                                                // [0x37257c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPositionInViewport
	// void SetPositionInViewport(FVector2D position, bool bRemoveDPIScale);                                                    // [0x37254c0] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPlaybackSpeed
	// void SetPlaybackSpeed(class UWidgetAnimation* InAnimation, float PlaybackSpeed);                                         // [0x37253f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3725360] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetOwningPlayer
	// void SetOwningPlayer(class APlayerController* LocalPlayerController);                                                    // [0x37252d0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetNumLoopsToPlay
	// void SetNumLoopsToPlay(class UWidgetAnimation* InAnimation, int32_t NumLoopsToPlay);                                     // [0x3725200] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetInputActionPriority
	// void SetInputActionPriority(int32_t NewPriority);                                                                        // [0x3724fa0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetInputActionBlocking
	// void SetInputActionBlocking(bool bShouldBlock);                                                                          // [0x3724f10] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetForegroundColor
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x3724da0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetDesiredSizeInViewport
	// void SetDesiredSizeInViewport(FVector2D Size);                                                                           // [0x3724d20] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3724c00] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAnimationCurrentTime
	// void SetAnimationCurrentTime(class UWidgetAnimation* InAnimation, float InTime);                                         // [0x3724b30] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAnchorsInViewport
	// void SetAnchorsInViewport(FAnchors Anchors);                                                                             // [0x3724aa0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.SetAlignmentInViewport
	// void SetAlignmentInViewport(FVector2D Alignment);                                                                        // [0x3724a20] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.UserWidget.ReverseAnimation
	// void ReverseAnimation(class UWidgetAnimation* InAnimation);                                                              // [0x3724990] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.RemoveFromViewport
	// void RemoveFromViewport();                                                                                               // [0x3724970] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.RegisterInputComponent
	// void RegisterInputComponent();                                                                                           // [0x3724950] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PreConstruct
	// void PreConstruct(bool IsDesignTime);                                                                                    // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.PlaySound
	// void PlaySound(class USoundBase* SoundToPlay);                                                                           // [0x37248c0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationTimeRange
	// class UUMGSequencePlayer* PlayAnimationTimeRange(class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x37246a0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationReverse
	// class UUMGSequencePlayer* PlayAnimationReverse(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x3724580] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimationForward
	// class UUMGSequencePlayer* PlayAnimationForward(class UWidgetAnimation* InAnimation, float PlaybackSpeed, bool bRestoreState); // [0x3724460] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PlayAnimation
	// class UUMGSequencePlayer* PlayAnimation(class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed, bool bRestoreState); // [0x3724290] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.PauseAnimation
	// float PauseAnimation(class UWidgetAnimation* InAnimation);                                                               // [0x37241f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.OnTouchStarted
	// FEventReply OnTouchStarted(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                           // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchMoved
	// FEventReply OnTouchMoved(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchGesture
	// FEventReply OnTouchGesture(FGeometry MyGeometry, FPointerEvent& GestureEvent);                                           // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchForceChanged
	// FEventReply OnTouchForceChanged(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                      // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnTouchEnded
	// FEventReply OnTouchEnded(FGeometry MyGeometry, FPointerEvent& InTouchEvent);                                             // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnRemovedFromFocusPath
	// void OnRemovedFromFocusPath(FFocusEvent InFocusEvent);                                                                   // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPreviewMouseButtonDown
	// FEventReply OnPreviewMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                   // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPreviewKeyDown
	// FEventReply OnPreviewKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnPaint
	// void OnPaint(FPaintContext& Context);                                                                                    // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent|Const 
	// Function /Script/UMG.UserWidget.OnMouseWheel
	// FEventReply OnMouseWheel(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                               // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseMove
	// FEventReply OnMouseMove(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseLeave
	// void OnMouseLeave(FPointerEvent& MouseEvent);                                                                            // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseEnter
	// void OnMouseEnter(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                      // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseCaptureLost
	// void OnMouseCaptureLost();                                                                                               // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonUp
	// FEventReply OnMouseButtonUp(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                            // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonDown
	// FEventReply OnMouseButtonDown(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                          // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMouseButtonDoubleClick
	// FEventReply OnMouseButtonDoubleClick(FGeometry InMyGeometry, FPointerEvent& InMouseEvent);                               // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnMotionDetected
	// FEventReply OnMotionDetected(FGeometry MyGeometry, FMotionEvent InMotionEvent);                                          // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyUp
	// FEventReply OnKeyUp(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                         // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyDown
	// FEventReply OnKeyDown(FGeometry MyGeometry, FKeyEvent InKeyEvent);                                                       // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnKeyChar
	// FEventReply OnKeyChar(FGeometry MyGeometry, FCharacterEvent InCharacterEvent);                                           // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnInitialized
	// void OnInitialized();                                                                                                    // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnFocusReceived
	// FEventReply OnFocusReceived(FGeometry MyGeometry, FFocusEvent InFocusEvent);                                             // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnFocusLost
	// void OnFocusLost(FFocusEvent InFocusEvent);                                                                              // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDrop
	// bool OnDrop(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                      // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragOver
	// bool OnDragOver(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                  // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragLeave
	// void OnDragLeave(FPointerEvent PointerEvent, class UDragDropOperation* Operation);                                       // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragEnter
	// void OnDragEnter(FGeometry MyGeometry, FPointerEvent PointerEvent, class UDragDropOperation* Operation);                 // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragDetected
	// void OnDragDetected(FGeometry MyGeometry, FPointerEvent& PointerEvent, class UDragDropOperation*& Operation);            // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnDragCancelled
	// void OnDragCancelled(FPointerEvent& PointerEvent, class UDragDropOperation* Operation);                                  // [0x24710f0] BlueprintCosmetic|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnimationStarted
	// void OnAnimationStarted(class UWidgetAnimation* Animation);                                                              // [0x3724160] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnimationFinished
	// void OnAnimationFinished(class UWidgetAnimation* Animation);                                                             // [0x37240d0] BlueprintCosmetic|Native|Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAnalogValueChanged
	// FEventReply OnAnalogValueChanged(FGeometry MyGeometry, FAnalogInputEvent InAnalogInputEvent);                            // [0x24710f0] Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.OnAddedToFocusPath
	// void OnAddedToFocusPath(FFocusEvent InFocusEvent);                                                                       // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.ListenForInputAction
	// void ListenForInputAction(FName ActionName, TEnumAsByte<EInputEvent> EventType, bool bConsume, FDelegateProperty Callback); // [0x3723f40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/UMG.UserWidget.IsPlayingAnimation
	// bool IsPlayingAnimation();                                                                                               // [0x3723f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsListeningForInputAction
	// bool IsListeningForInputAction(FName ActionName);                                                                        // [0x3723e70] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsInViewport
	// bool IsInViewport();                                                                                                     // [0x3723c50] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsInteractable
	// bool IsInteractable();                                                                                                   // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent|Const 
	// Function /Script/UMG.UserWidget.IsAnyAnimationPlaying
	// bool IsAnyAnimationPlaying();                                                                                            // [0x3723e40] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.IsAnimationPlayingForward
	// bool IsAnimationPlayingForward(class UWidgetAnimation* InAnimation);                                                     // [0x3723da0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.IsAnimationPlaying
	// bool IsAnimationPlaying(class UWidgetAnimation* InAnimation);                                                            // [0x3723d00] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetOwningPlayerPawn
	// class APawn* GetOwningPlayerPawn();                                                                                      // [0x3723cb0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetOwningPlayerCameraManager
	// class APlayerCameraManager* GetOwningPlayerCameraManager();                                                              // [0x3723c80] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetIsVisible
	// bool GetIsVisible();                                                                                                     // [0x3723c50] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAnimationCurrentTime
	// float GetAnimationCurrentTime(class UWidgetAnimation* InAnimation);                                                      // [0x3723bb0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAnchorsInViewport
	// FAnchors GetAnchorsInViewport();                                                                                         // [0x3723b70] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.GetAlignmentInViewport
	// FVector2D GetAlignmentInViewport();                                                                                      // [0x3723b30] Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.UserWidget.FlushAnimations
	// void FlushAnimations();                                                                                                  // [0x3723b10] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.Destruct
	// void Destruct();                                                                                                         // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.Construct
	// void Construct();                                                                                                        // [0x24710f0] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/UMG.UserWidget.CancelLatentActions
	// void CancelLatentActions();                                                                                              // [0x3723ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationStarted
	// void BindToAnimationStarted(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                              // [0x37239d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationFinished
	// void BindToAnimationFinished(class UWidgetAnimation* Animation, FDelegateProperty Delegate);                             // [0x37238f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.BindToAnimationEvent
	// void BindToAnimationEvent(class UWidgetAnimation* Animation, FDelegateProperty Delegate, EWidgetAnimationEvent AnimationEvent, FName UserTag); // [0x3723770] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.AddToViewport
	// void AddToViewport(int32_t ZOrder);                                                                                      // [0x37236e0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UserWidget.AddToPlayerScreen
	// bool AddToPlayerScreen(int32_t ZOrder);                                                                                  // [0x3723640] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PanelWidget
/// Size: 0x0018 (24 bytes) (0x000108 - 0x000120) align 8 pad: 0x0000
class UPanelWidget : public UWidget
{ 
public:
	TArray<class UPanelSlot*>                          Slots;                                                      // 0x0108   (0x0010)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0118   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.PanelWidget.RemoveChildAt
	// bool RemoveChildAt(int32_t Index);                                                                                       // [0x3714ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.RemoveChild
	// bool RemoveChild(class UWidget* Content);                                                                                // [0x3714c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.HasChild
	// bool HasChild(class UWidget* Content);                                                                                   // [0x3714a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.HasAnyChildren
	// bool HasAnyChildren();                                                                                                   // [0x1768240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildrenCount
	// int32_t GetChildrenCount();                                                                                              // [0x3714720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildIndex
	// int32_t GetChildIndex(class UWidget* Content);                                                                           // [0x3714680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetChildAt
	// class UWidget* GetChildAt(int32_t Index);                                                                                // [0x37145e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.GetAllChildren
	// TArray<UWidget*> GetAllChildren();                                                                                       // [0x3714560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.PanelWidget.ClearChildren
	// void ClearChildren();                                                                                                    // [0x3714490] Native|Public|BlueprintCallable 
	// Function /Script/UMG.PanelWidget.AddChild
	// class UPanelSlot* AddChild(class UWidget* Content);                                                                      // [0x3714350] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ContentWidget
/// Size: 0x0000 (0 bytes) (0x000120 - 0x000120) align 8 pad: 0x0000
class UContentWidget : public UPanelWidget
{ 
public:


	/// Functions
	// Function /Script/UMG.ContentWidget.SetContent
	// class UPanelSlot* SetContent(class UWidget* Content);                                                                    // [0x370c520] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ContentWidget.GetContentSlot
	// class UPanelSlot* GetContentSlot();                                                                                      // [0x370be40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ContentWidget.GetContent
	// class UWidget* GetContent();                                                                                             // [0x370be10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Border
/// Size: 0x0150 (336 bytes) (0x000120 - 0x000270) align 8 pad: 0x0000
class UBorder : public UContentWidget
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0120   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0121   (0x0001)  
	bool                                               bShowEffectWhenDisabled : 1;                                // 0x0122:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x1];                                       // 0x0123   (0x0001)  MISSED
	FLinearColor                                       ContentColorAndOpacity;                                     // 0x0124   (0x0010)  
	SDK_UNDEFINED(16,229) /* FDelegateProperty */      __um(ContentColorAndOpacityDelegate);                       // 0x0134   (0x0010)  
	FMargin                                            Padding;                                                    // 0x0144   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FSlateBrush                                        Background;                                                 // 0x0158   (0x0088)  
	SDK_UNDEFINED(16,230) /* FDelegateProperty */      __um(BackgroundDelegate);                                   // 0x01E0   (0x0010)  
	FLinearColor                                       BrushColor;                                                 // 0x01F0   (0x0010)  
	SDK_UNDEFINED(16,231) /* FDelegateProperty */      __um(BrushColorDelegate);                                   // 0x0200   (0x0010)  
	FVector2D                                          DesiredSizeScale;                                           // 0x0210   (0x0008)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x0218   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	SDK_UNDEFINED(16,232) /* FDelegateProperty */      __um(OnMouseButtonDownEvent);                               // 0x021C   (0x0010)  
	SDK_UNDEFINED(16,233) /* FDelegateProperty */      __um(OnMouseButtonUpEvent);                                 // 0x022C   (0x0010)  
	SDK_UNDEFINED(16,234) /* FDelegateProperty */      __um(OnMouseMoveEvent);                                     // 0x023C   (0x0010)  
	SDK_UNDEFINED(16,235) /* FDelegateProperty */      __um(OnMouseDoubleClickEvent);                              // 0x024C   (0x0010)  
	unsigned char                                      UnknownData03_7[0x14];                                      // 0x025C   (0x0014)  MISSED


	/// Functions
	// Function /Script/UMG.Border.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x37095c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3708e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708710] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetDesiredSizeScale
	// void SetDesiredSizeScale(FVector2D InScale);                                                                             // [0x3708590] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetContentColorAndOpacity
	// void SetContentColorAndOpacity(FLinearColor InContentColorAndOpacity);                                                   // [0x3708500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromTexture
	// void SetBrushFromTexture(class UTexture2D* Texture);                                                                     // [0x3708260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromMaterial
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x3708260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushFromAsset
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x37081d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrushColor
	// void SetBrushColor(FLinearColor InBrushColor);                                                                           // [0x3708140] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Border.SetBrush
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x3708030] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Border.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x37077b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Button
/// Size: 0x0308 (776 bytes) (0x000120 - 0x000428) align 8 pad: 0x0000
class UButton : public UContentWidget
{ 
public:
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0120   (0x0008)  
	FButtonStyle                                       WidgetStyle;                                                // 0x0128   (0x0278)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x03A0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x03B0   (0x0010)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x03C0   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x03C1   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x03C2   (0x0001)  
	bool                                               IsFocusable;                                                // 0x03C3   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x03C4   (0x0004)  MISSED
	SDK_UNDEFINED(16,236) /* FMulticastInlineDelegate */ __um(OnClicked);                                          // 0x03C8   (0x0010)  
	SDK_UNDEFINED(16,237) /* FMulticastInlineDelegate */ __um(OnPressed);                                          // 0x03D8   (0x0010)  
	SDK_UNDEFINED(16,238) /* FMulticastInlineDelegate */ __um(OnReleased);                                         // 0x03E8   (0x0010)  
	SDK_UNDEFINED(16,239) /* FMulticastInlineDelegate */ __um(OnHovered);                                          // 0x03F8   (0x0010)  
	SDK_UNDEFINED(16,240) /* FMulticastInlineDelegate */ __um(OnUnhovered);                                        // 0x0408   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0418   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.Button.SetTouchMethod
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x37093c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetStyle
	// void SetStyle(FButtonStyle& InStyle);                                                                                    // [0x37092e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Button.SetPressMethod
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x37090e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3708470] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Button.SetClickMethod
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x3708370] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Button.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor InBackgroundColor);                                                                 // [0x3707e80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Button.IsPressed
	// bool IsPressed();                                                                                                        // [0x3707bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CheckBox
/// Size: 0x0650 (1616 bytes) (0x000120 - 0x000770) align 8 pad: 0x0000
class UCheckBox : public UContentWidget
{ 
public:
	ECheckBoxState                                     CheckedState;                                               // 0x0120   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0121   (0x0003)  MISSED
	SDK_UNDEFINED(16,241) /* FDelegateProperty */      __um(CheckedStateDelegate);                                 // 0x0124   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FCheckBoxStyle                                     WidgetStyle;                                                // 0x0138   (0x0580)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x06B8   (0x0008)  
	class USlateBrushAsset*                            UncheckedImage;                                             // 0x06C0   (0x0008)  
	class USlateBrushAsset*                            UncheckedHoveredImage;                                      // 0x06C8   (0x0008)  
	class USlateBrushAsset*                            UncheckedPressedImage;                                      // 0x06D0   (0x0008)  
	class USlateBrushAsset*                            CheckedImage;                                               // 0x06D8   (0x0008)  
	class USlateBrushAsset*                            CheckedHoveredImage;                                        // 0x06E0   (0x0008)  
	class USlateBrushAsset*                            CheckedPressedImage;                                        // 0x06E8   (0x0008)  
	class USlateBrushAsset*                            UndeterminedImage;                                          // 0x06F0   (0x0008)  
	class USlateBrushAsset*                            UndeterminedHoveredImage;                                   // 0x06F8   (0x0008)  
	class USlateBrushAsset*                            UndeterminedPressedImage;                                   // 0x0700   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0708   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0709   (0x0003)  MISSED
	FMargin                                            Padding;                                                    // 0x070C   (0x0010)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x071C   (0x0004)  MISSED
	FSlateColor                                        BorderBackgroundColor;                                      // 0x0720   (0x0028)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x0748   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x0749   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x074A   (0x0001)  
	bool                                               IsFocusable;                                                // 0x074B   (0x0001)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x074C   (0x0004)  MISSED
	SDK_UNDEFINED(16,242) /* FMulticastInlineDelegate */ __um(OnCheckStateChanged);                                // 0x0750   (0x0010)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0760   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.CheckBox.SetTouchMethod
	// void SetTouchMethod(TEnumAsByte<EButtonTouchMethod> InTouchMethod);                                                      // [0x3709440] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetPressMethod
	// void SetPressMethod(TEnumAsByte<EButtonPressMethod> InPressMethod);                                                      // [0x3709160] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetIsChecked
	// void SetIsChecked(bool InIsChecked);                                                                                     // [0x3708890] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetClickMethod
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x37083f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.SetCheckedState
	// void SetCheckedState(ECheckBoxState InCheckedState);                                                                     // [0x37082f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CheckBox.IsPressed
	// bool IsPressed();                                                                                                        // [0x3707c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CheckBox.IsChecked
	// bool IsChecked();                                                                                                        // [0x3707bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CheckBox.GetCheckedState
	// ECheckBoxState GetCheckedState();                                                                                        // [0x3707780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.ComboBox
/// Size: 0x0038 (56 bytes) (0x000108 - 0x000140) align 8 pad: 0x0000
class UComboBox : public UWidget
{ 
public:
	TArray<class UObject*>                             Items;                                                      // 0x0108   (0x0010)  
	SDK_UNDEFINED(16,243) /* FDelegateProperty */      __um(OnGenerateWidgetEvent);                                // 0x0118   (0x0010)  
	bool                                               bIsFocusable;                                               // 0x0128   (0x0001)  
	unsigned char                                      UnknownData00_7[0x17];                                      // 0x0129   (0x0017)  MISSED
};

/// Class /Script/UMG.ComboBoxString
/// Size: 0x0CF8 (3320 bytes) (0x000108 - 0x000E00) align 8 pad: 0x0000
class UComboBoxString : public UWidget
{ 
public:
	TArray<FString>                                    DefaultOptions;                                             // 0x0108   (0x0010)  
	FString                                            SelectedOption;                                             // 0x0118   (0x0010)  
	FComboBoxStyle                                     WidgetStyle;                                                // 0x0128   (0x03F0)  
	FTableRowStyle                                     ItemStyle;                                                  // 0x0518   (0x07C8)  
	FMargin                                            ContentPadding;                                             // 0x0CE0   (0x0010)  
	float                                              MaxListHeight;                                              // 0x0CF0   (0x0004)  
	bool                                               HasDownArrow;                                               // 0x0CF4   (0x0001)  
	bool                                               EnableGamepadNavigationMode;                                // 0x0CF5   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0CF6   (0x0002)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0CF8   (0x0058)  
	FSlateColor                                        ForegroundColor;                                            // 0x0D50   (0x0028)  
	bool                                               bIsFocusable;                                               // 0x0D78   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0D79   (0x0003)  MISSED
	SDK_UNDEFINED(16,244) /* FDelegateProperty */      __um(OnGenerateWidgetEvent);                                // 0x0D7C   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0D8C   (0x0004)  MISSED
	SDK_UNDEFINED(16,245) /* FMulticastInlineDelegate */ __um(OnSelectionChanged);                                 // 0x0D90   (0x0010)  
	SDK_UNDEFINED(16,246) /* FMulticastInlineDelegate */ __um(OnOpening);                                          // 0x0DA0   (0x0010)  
	unsigned char                                      UnknownData03_7[0x50];                                      // 0x0DB0   (0x0050)  MISSED


	/// Functions
	// Function /Script/UMG.ComboBoxString.SetSelectedOption
	// void SetSelectedOption(FString Option);                                                                                  // [0x370cf60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.SetSelectedIndex
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x370ced0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.RemoveOption
	// bool RemoveOption(FString Option);                                                                                       // [0x370c310] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.RefreshOptions
	// void RefreshOptions();                                                                                                   // [0x370c260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.OnSelectionChangedEvent__DelegateSignature
	// void OnSelectionChangedEvent__DelegateSignature(FString SelectedItem, TEnumAsByte<ESelectInfo> SelectionType);           // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.ComboBoxString.OnOpeningEvent__DelegateSignature
	// void OnOpeningEvent__DelegateSignature();                                                                                // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.ComboBoxString.IsOpen
	// bool IsOpen();                                                                                                           // [0x370c230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetSelectedOption
	// FString GetSelectedOption();                                                                                             // [0x370c010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetSelectedIndex
	// int32_t GetSelectedIndex();                                                                                              // [0x370bfe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetOptionCount
	// int32_t GetOptionCount();                                                                                                // [0x370bfb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.GetOptionAtIndex
	// FString GetOptionAtIndex(int32_t Index);                                                                                 // [0x370bed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.FindOptionIndex
	// int32_t FindOptionIndex(FString Option);                                                                                 // [0x370bcd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ComboBoxString.ClearSelection
	// void ClearSelection();                                                                                                   // [0x370b920] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.ClearOptions
	// void ClearOptions();                                                                                                     // [0x370b900] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ComboBoxString.AddOption
	// void AddOption(FString Option);                                                                                          // [0x370b770] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Overlay
/// Size: 0x0010 (16 bytes) (0x000120 - 0x000130) align 8 pad: 0x0000
class UOverlay : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.Overlay.AddChildToOverlay
	// class UOverlaySlot* AddChildToOverlay(class UWidget* Content);                                                           // [0x37143f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.PanelSlot
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UPanelSlot : public UVisual
{ 
public:
	class UPanelWidget*                                Parent;                                                     // 0x0028   (0x0008)  
	class UWidget*                                     Content;                                                    // 0x0030   (0x0008)  
};

/// Class /Script/UMG.OverlaySlot
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UOverlaySlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0052   (0x0006)  MISSED


	/// Functions
	// Function /Script/UMG.OverlaySlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3715940] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.OverlaySlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3715350] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.OverlaySlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3715120] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.ShapedTextOptions
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align 1 pad: 0x0000
struct FShapedTextOptions
{ 
	bool                                               bOverride_TextShapingMethod : 1;                            // 0x0000:0 (0x0001)  
	bool                                               bOverride_TextFlowDirection : 1;                            // 0x0000:1 (0x0001)  
	ETextShapingMethod                                 TextShapingMethod;                                          // 0x0001   (0x0001)  
	ETextFlowDirection                                 TextFlowDirection;                                          // 0x0002   (0x0001)  
};

/// Class /Script/UMG.EditableText
/// Size: 0x0358 (856 bytes) (0x000108 - 0x000460) align 8 pad: 0x0000
class UEditableText : public UWidget
{ 
public:
	FText                                              Text;                                                       // 0x0108   (0x0018)  
	SDK_UNDEFINED(16,247) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0120   (0x0010)  
	FText                                              HintText;                                                   // 0x0130   (0x0018)  
	SDK_UNDEFINED(16,248) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0148   (0x0010)  
	FEditableTextStyle                                 WidgetStyle;                                                // 0x0158   (0x0220)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0378   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageSelected;                                    // 0x0380   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageComposing;                                   // 0x0388   (0x0008)  
	class USlateBrushAsset*                            CaretImage;                                                 // 0x0390   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x0398   (0x0058)  
	FSlateColor                                        ColorAndOpacity;                                            // 0x03F0   (0x0028)  
	bool                                               IsReadOnly;                                                 // 0x0418   (0x0001)  
	bool                                               IsPassword;                                                 // 0x0419   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x041A   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x041C   (0x0004)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x0420   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0421   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x0422   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0423   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x0424   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0425   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x0426   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0427   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0428   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0429   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x042A   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x042B   (0x0003)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x042E   (0x0002)  MISSED
	SDK_UNDEFINED(16,249) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0430   (0x0010)  
	SDK_UNDEFINED(16,250) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0440   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0450   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.EditableText.SetText
	// void SetText(FText InText);                                                                                              // [0x370d050] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x370cc50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetIsReadOnly
	// void SetIsReadOnly(bool InbIsReadyOnly);                                                                                 // [0x370cb30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetIsPassword
	// void SetIsPassword(bool InbIsPassword);                                                                                  // [0x370ca10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x370c730] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableText.OnEditableTextCommittedEvent__DelegateSignature
	// void OnEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableText.OnEditableTextChangedEvent__DelegateSignature
	// void OnEditableTextChangedEvent__DelegateSignature(FText& Text);                                                         // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableText.GetText
	// FText GetText();                                                                                                         // [0x370c090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.EditableTextBox
/// Size: 0x0930 (2352 bytes) (0x000108 - 0x000A38) align 8 pad: 0x0000
class UEditableTextBox : public UWidget
{ 
public:
	FText                                              Text;                                                       // 0x0108   (0x0018)  
	SDK_UNDEFINED(16,251) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0120   (0x0010)  
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0130   (0x07F8)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0928   (0x0008)  
	FText                                              HintText;                                                   // 0x0930   (0x0018)  
	SDK_UNDEFINED(16,252) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0948   (0x0010)  
	FSlateFontInfo                                     Font;                                                       // 0x0958   (0x0058)  
	FLinearColor                                       ForegroundColor;                                            // 0x09B0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x09C0   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x09D0   (0x0010)  
	bool                                               IsReadOnly;                                                 // 0x09E0   (0x0001)  
	bool                                               IsPassword;                                                 // 0x09E1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x09E2   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x09E4   (0x0004)  
	FMargin                                            Padding;                                                    // 0x09E8   (0x0010)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x09F8   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x09F9   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x09FA   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x09FB   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x09FC   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x09FD   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x09FE   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x09FF   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0A00   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0A01   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0A02   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0A03   (0x0003)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0A06   (0x0002)  MISSED
	SDK_UNDEFINED(16,253) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0A08   (0x0010)  
	SDK_UNDEFINED(16,254) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0A18   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0A28   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.EditableTextBox.SetText
	// void SetText(FText InText);                                                                                              // [0x370d130] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x370ccd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x370cbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetIsPassword
	// void SetIsPassword(bool bIsPassword);                                                                                    // [0x370caa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetHintText
	// void SetHintText(FText InText);                                                                                          // [0x370c810] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.SetError
	// void SetError(FText InError);                                                                                            // [0x370c650] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxCommittedEvent__DelegateSignature
	// void OnEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);             // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxChangedEvent__DelegateSignature
	// void OnEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                                      // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.EditableTextBox.HasError
	// bool HasError();                                                                                                         // [0x370c200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.EditableTextBox.GetText
	// FText GetText();                                                                                                         // [0x370c130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.EditableTextBox.ClearError
	// void ClearError();                                                                                                       // [0x370b8e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.GridPanel
/// Size: 0x0030 (48 bytes) (0x000120 - 0x000150) align 8 pad: 0x0000
class UGridPanel : public UPanelWidget
{ 
public:
	TArray<float>                                      ColumnFill;                                                 // 0x0120   (0x0010)  
	TArray<float>                                      RowFill;                                                    // 0x0130   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0140   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.GridPanel.SetRowFill
	// void SetRowFill(int32_t ColumnIndex, float Coefficient);                                                                 // [0x370ce00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridPanel.SetColumnFill
	// void SetColumnFill(int32_t ColumnIndex, float Coefficient);                                                              // [0x370c450] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridPanel.AddChildToGrid
	// class UGridSlot* AddChildToGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                                // [0x370b660] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Image
/// Size: 0x0108 (264 bytes) (0x000108 - 0x000210) align 8 pad: 0x0000
class UImage : public UWidget
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0108   (0x0088)  
	SDK_UNDEFINED(16,255) /* FDelegateProperty */      __um(BrushDelegate);                                        // 0x0190   (0x0010)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x01A0   (0x0010)  
	SDK_UNDEFINED(16,256) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x01B0   (0x0010)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x01C1   (0x0003)  MISSED
	SDK_UNDEFINED(16,257) /* FDelegateProperty */      __um(OnMouseButtonDownEvent);                               // 0x01C4   (0x0010)  
	unsigned char                                      UnknownData01_7[0x3C];                                      // 0x01D4   (0x003C)  MISSED


	/// Functions
	// Function /Script/UMG.Image.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x3711330] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x3710cc0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushTintColor
	// void SetBrushTintColor(FSlateColor TintColor);                                                                           // [0x3710b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushSize
	// void SetBrushSize(FVector2D DesiredSize);                                                                                // [0x3710ac0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushResourceObject
	// void SetBrushResourceObject(class UObject* ResourceObject);                                                              // [0x3710a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromTextureDynamic
	// void SetBrushFromTextureDynamic(class UTexture2DDynamic* Texture, bool bMatchSize);                                      // [0x3710960] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromTexture
	// void SetBrushFromTexture(class UTexture2D* Texture, bool bMatchSize);                                                    // [0x3710890] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromSoftTexture
	// void SetBrushFromSoftTexture(TWeakObjectPtr<UTexture2D*> SoftTexture, bool bMatchSize);                                  // [0x3710740] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromSoftMaterial
	// void SetBrushFromSoftMaterial(TWeakObjectPtr<UMaterialInterface*> SoftMaterial);                                         // [0x3710630] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromMaterial
	// void SetBrushFromMaterial(class UMaterialInterface* Material);                                                           // [0x1773cc0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromAtlasInterface
	// void SetBrushFromAtlasInterface(TScriptInterface<Class> AtlasRegion, bool bMatchSize);                                   // [0x3710540] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrushFromAsset
	// void SetBrushFromAsset(class USlateBrushAsset* Asset);                                                                   // [0x37104b0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.Image.SetBrush
	// void SetBrush(FSlateBrush& InBrush);                                                                                     // [0x37103a0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.Image.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial();                                                                    // [0x370fb70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.UserWidgetPool
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align 8 pad: 0x0000
struct FUserWidgetPool
{ 
	TArray<class UUserWidget*>                         ActiveWidgets;                                              // 0x0000   (0x0010)  
	TArray<class UUserWidget*>                         InactiveWidgets;                                            // 0x0010   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0020   (0x0060)  MISSED
};

/// Class /Script/UMG.ListViewBase
/// Size: 0x0110 (272 bytes) (0x000108 - 0x000218) align 8 pad: 0x0000
class UListViewBase : public UWidget
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x0108   (0x0008)  
	float                                              WheelScrollMultiplier;                                      // 0x0110   (0x0004)  
	bool                                               bEnableScrollAnimation;                                     // 0x0114   (0x0001)  
	bool                                               bEnableFixedLineOffset;                                     // 0x0115   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0116   (0x0002)  MISSED
	float                                              FixedLineScrollOffset;                                      // 0x0118   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	SDK_UNDEFINED(16,258) /* FMulticastInlineDelegate */ __um(BP_OnEntryGenerated);                                // 0x0120   (0x0010)  
	SDK_UNDEFINED(16,259) /* FMulticastInlineDelegate */ __um(BP_OnEntryReleased);                                 // 0x0130   (0x0010)  
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0140   (0x0080)  
	unsigned char                                      UnknownData02_7[0x58];                                      // 0x01C0   (0x0058)  MISSED


	/// Functions
	// Function /Script/UMG.ListViewBase.SetWheelScrollMultiplier
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x3711b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.SetScrollOffset
	// void SetScrollOffset(float InScrollOffset);                                                                              // [0x37115f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.SetScrollbarVisibility
	// void SetScrollbarVisibility(ESlateVisibility InVisibility);                                                              // [0x3711670] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.ScrollToTop
	// void ScrollToTop();                                                                                                      // [0x3710260] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.ScrollToBottom
	// void ScrollToBottom();                                                                                                   // [0x3710240] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.RequestRefresh
	// void RequestRefresh();                                                                                                   // [0x3710190] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.RegenerateAllEntries
	// void RegenerateAllEntries();                                                                                             // [0x37100e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListViewBase.GetDisplayedEntryWidgets
	// TArray<UUserWidget*> GetDisplayedEntryWidgets();                                                                         // [0x370fae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.ListView
/// Size: 0x0150 (336 bytes) (0x000218 - 0x000368) align 8 pad: 0x0000
class UListView : public UListViewBase
{ 
public:
	unsigned char                                      UnknownData00_3[0xC0];                                      // 0x0218   (0x00C0)  MISSED
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x02D8   (0x0001)  
	TEnumAsByte<ESelectionMode>                        SelectionMode;                                              // 0x02D9   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x02DA   (0x0001)  
	bool                                               bClearSelectionOnClick;                                     // 0x02DB   (0x0001)  
	bool                                               bIsFocusable;                                               // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02DD   (0x0003)  MISSED
	float                                              EntrySpacing;                                               // 0x02E0   (0x0004)  
	bool                                               bReturnFocusToSelection;                                    // 0x02E4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x02E5   (0x0003)  MISSED
	TArray<class UObject*>                             ListItems;                                                  // 0x02E8   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x02F8   (0x0010)  MISSED
	SDK_UNDEFINED(16,260) /* FMulticastInlineDelegate */ __um(BP_OnEntryInitialized);                              // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,261) /* FMulticastInlineDelegate */ __um(BP_OnItemClicked);                                   // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,262) /* FMulticastInlineDelegate */ __um(BP_OnItemDoubleClicked);                             // 0x0328   (0x0010)  
	SDK_UNDEFINED(16,263) /* FMulticastInlineDelegate */ __um(BP_OnItemIsHoveredChanged);                          // 0x0338   (0x0010)  
	SDK_UNDEFINED(16,264) /* FMulticastInlineDelegate */ __um(BP_OnItemSelectionChanged);                          // 0x0348   (0x0010)  
	SDK_UNDEFINED(16,265) /* FMulticastInlineDelegate */ __um(BP_OnItemScrolledIntoView);                          // 0x0358   (0x0010)  


	/// Functions
	// Function /Script/UMG.ListView.SetSelectionMode
	// void SetSelectionMode(TEnumAsByte<ESelectionMode> SelectionMode);                                                        // [0x3711870] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.SetSelectedIndex
	// void SetSelectedIndex(int32_t Index);                                                                                    // [0x37116f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.ScrollIndexIntoView
	// void ScrollIndexIntoView(int32_t Index);                                                                                 // [0x37101b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.RemoveItem
	// void RemoveItem(class UObject* Item);                                                                                    // [0x3710100] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.NavigateToIndex
	// void NavigateToIndex(int32_t Index);                                                                                     // [0x3710050] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.IsRefreshPending
	// bool IsRefreshPending();                                                                                                 // [0x3710020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetNumItems
	// int32_t GetNumItems();                                                                                                   // [0x370fde0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetListItems
	// TArray<UObject*> GetListItems();                                                                                         // [0x370fdb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetItemAt
	// class UObject* GetItemAt(int32_t Index);                                                                                 // [0x370fc70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.GetIndexForItem
	// int32_t GetIndexForItem(class UObject* Item);                                                                            // [0x370fba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.ClearListItems
	// void ClearListItems();                                                                                                   // [0x370fa90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetSelectedItem
	// void BP_SetSelectedItem(class UObject* Item);                                                                            // [0x370fa00] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetListItems
	// void BP_SetListItems(TArray<UObject*>& InListItems);                                                                     // [0x370f950] Final|Native|Private|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_SetItemSelection
	// void BP_SetItemSelection(class UObject* Item, bool bSelected);                                                           // [0x370f880] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_ScrollItemIntoView
	// void BP_ScrollItemIntoView(class UObject* Item);                                                                         // [0x370f7f0] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_NavigateToItem
	// void BP_NavigateToItem(class UObject* Item);                                                                             // [0x370f760] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_IsItemVisible
	// bool BP_IsItemVisible(class UObject* Item);                                                                              // [0x370f6c0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_GetSelectedItems
	// bool BP_GetSelectedItems(TArray<UObject*>& Items);                                                                       // [0x370f600] Final|Native|Private|HasOutParms|BlueprintCallable|Const 
	// Function /Script/UMG.ListView.BP_GetSelectedItem
	// class UObject* BP_GetSelectedItem();                                                                                     // [0x370f5d0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_GetNumItemsSelected
	// int32_t BP_GetNumItemsSelected();                                                                                        // [0x370f5a0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ListView.BP_ClearSelection
	// void BP_ClearSelection();                                                                                                // [0x370f580] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.BP_CancelScrollIntoView
	// void BP_CancelScrollIntoView();                                                                                          // [0x370f560] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.ListView.AddItem
	// void AddItem(class UObject* Item);                                                                                       // [0x370f4d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextLayoutWidget
/// Size: 0x0020 (32 bytes) (0x000108 - 0x000128) align 8 pad: 0x0000
class UTextLayoutWidget : public UWidget
{ 
public:
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0108   (0x0003)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x010B   (0x0001)  
	ETextWrappingPolicy                                WrappingPolicy;                                             // 0x010C   (0x0001)  
	bool                                               AutoWrapText : 1;                                           // 0x010D:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x2];                                       // 0x010E   (0x0002)  MISSED
	float                                              WrapTextAt;                                                 // 0x0110   (0x0004)  
	FMargin                                            Margin;                                                     // 0x0114   (0x0010)  
	float                                              LineHeightPercentage;                                       // 0x0124   (0x0004)  


	/// Functions
	// Function /Script/UMG.TextLayoutWidget.SetJustification
	// void SetJustification(TEnumAsByte<ETextJustify> InJustification);                                                        // [0x371dfe0] Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.MultiLineEditableTextBox
/// Size: 0x0B70 (2928 bytes) (0x000128 - 0x000C98) align 8 pad: 0x0000
class UMultiLineEditableTextBox : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	FText                                              HintText;                                                   // 0x0140   (0x0018)  
	SDK_UNDEFINED(16,266) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0158   (0x0010)  
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0168   (0x07F8)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x0960   (0x0270)  
	bool                                               bIsReadOnly;                                                // 0x0BD0   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0BD1   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0BD2   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0BD3   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0BD4   (0x0004)  MISSED
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0BD8   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x0BE0   (0x0058)  
	FLinearColor                                       ForegroundColor;                                            // 0x0C38   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0C48   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x0C58   (0x0010)  
	SDK_UNDEFINED(16,267) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0C68   (0x0010)  
	SDK_UNDEFINED(16,268) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0C78   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0C88   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.MultiLineEditableTextBox.SetTextStyle
	// void SetTextStyle(FTextBlockStyle& InTextStyle);                                                                         // [0x3715800] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetText
	// void SetText(FText InText);                                                                                              // [0x3715720] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x37152c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x3715040] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.SetError
	// void SetError(FText InError);                                                                                            // [0x3714df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature
	// void OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);    // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxChangedEvent__DelegateSignature
	// void OnMultiLineEditableTextBoxChangedEvent__DelegateSignature(FText& Text);                                             // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableTextBox.GetText
	// FText GetText();                                                                                                         // [0x37149a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MultiLineEditableTextBox.GetHintText
	// FText GetHintText();                                                                                                     // [0x3714820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.MenuAnchor
/// Size: 0x0050 (80 bytes) (0x000120 - 0x000170) align 8 pad: 0x0000
class UMenuAnchor : public UContentWidget
{ 
public:
	class UClass*                                      MenuClass;                                                  // 0x0120   (0x0008)  
	SDK_UNDEFINED(16,269) /* FDelegateProperty */      __um(OnGetMenuContentEvent);                                // 0x0128   (0x0010)  
	SDK_UNDEFINED(16,270) /* FDelegateProperty */      __um(OnGetUserMenuContentEvent);                            // 0x0138   (0x0010)  
	TEnumAsByte<EMenuPlacement>                        Placement;                                                  // 0x0148   (0x0001)  
	bool                                               bFitInWindow;                                               // 0x0149   (0x0001)  
	bool                                               ShouldDeferPaintingAfterWindowContent;                      // 0x014A   (0x0001)  
	bool                                               UseApplicationMenuStack;                                    // 0x014B   (0x0001)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	SDK_UNDEFINED(16,271) /* FMulticastInlineDelegate */ __um(OnMenuOpenChanged);                                  // 0x0150   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0160   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.MenuAnchor.ToggleOpen
	// void ToggleOpen(bool bFocusOnOpen);                                                                                      // [0x3715aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.ShouldOpenDueToClick
	// bool ShouldOpenDueToClick();                                                                                             // [0x3715a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.SetPlacement
	// void SetPlacement(TEnumAsByte<EMenuPlacement> InPlacement);                                                              // [0x3715460] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.Open
	// void Open(bool bFocusMenu);                                                                                              // [0x3714b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.IsOpen
	// bool IsOpen();                                                                                                           // [0x3714b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.HasOpenSubMenus
	// bool HasOpenSubMenus();                                                                                                  // [0x3714b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.GetUserWidget__DelegateSignature
	// class UUserWidget* GetUserWidget__DelegateSignature();                                                                   // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.MenuAnchor.GetMenuPosition
	// FVector2D GetMenuPosition();                                                                                             // [0x37148c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MenuAnchor.FitInWindow
	// void FitInWindow(bool bFit);                                                                                             // [0x37144d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MenuAnchor.Close
	// void Close();                                                                                                            // [0x37144b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ProgressBar
/// Size: 0x0210 (528 bytes) (0x000108 - 0x000318) align 8 pad: 0x0000
class UProgressBar : public UWidget
{ 
public:
	FProgressBarStyle                                  WidgetStyle;                                                // 0x0108   (0x01A0)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x02A8   (0x0008)  
	class USlateBrushAsset*                            BackgroundImage;                                            // 0x02B0   (0x0008)  
	class USlateBrushAsset*                            FillImage;                                                  // 0x02B8   (0x0008)  
	class USlateBrushAsset*                            MarqueeImage;                                               // 0x02C0   (0x0008)  
	float                                              Percent;                                                    // 0x02C8   (0x0004)  
	TEnumAsByte<EProgressBarFillType>                  BarFillType;                                                // 0x02CC   (0x0001)  
	bool                                               bIsMarquee;                                                 // 0x02CD   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x02CE   (0x0002)  MISSED
	FVector2D                                          BorderPadding;                                              // 0x02D0   (0x0008)  
	SDK_UNDEFINED(16,272) /* FDelegateProperty */      __um(PercentDelegate);                                      // 0x02D8   (0x0010)  
	FLinearColor                                       FillColorAndOpacity;                                        // 0x02E8   (0x0010)  
	SDK_UNDEFINED(16,273) /* FDelegateProperty */      __um(FillColorAndOpacityDelegate);                          // 0x02F8   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0308   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.ProgressBar.SetPercent
	// void SetPercent(float InPercent);                                                                                        // [0x37153e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ProgressBar.SetIsMarquee
	// void SetIsMarquee(bool InbIsMarquee);                                                                                    // [0x37151a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ProgressBar.SetFillColorAndOpacity
	// void SetFillColorAndOpacity(FLinearColor InColor);                                                                       // [0x3714ed0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.RetainerBox
/// Size: 0x0030 (48 bytes) (0x000120 - 0x000150) align 8 pad: 0x0000
class URetainerBox : public UContentWidget
{ 
public:
	bool                                               bRetainRender;                                              // 0x0120   (0x0001)  
	bool                                               RenderOnInvalidation;                                       // 0x0121   (0x0001)  
	bool                                               RenderOnPhase;                                              // 0x0122   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0123   (0x0001)  MISSED
	int32_t                                            Phase;                                                      // 0x0124   (0x0004)  
	int32_t                                            PhaseCount;                                                 // 0x0128   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	class UMaterialInterface*                          EffectMaterial;                                             // 0x0130   (0x0008)  
	FName                                              TextureParameter;                                           // 0x0138   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0140   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.RetainerBox.SetTextureParameter
	// void SetTextureParameter(FName TextureParameter);                                                                        // [0x37158b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetRetainRendering
	// void SetRetainRendering(bool bInRetainRendering);                                                                        // [0x37155b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetRenderingPhase
	// void SetRenderingPhase(int32_t RenderPhase, int32_t TotalPhases);                                                        // [0x37154e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.SetEffectMaterial
	// void SetEffectMaterial(class UMaterialInterface* EffectMaterial);                                                        // [0x3714d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.RequestRender
	// void RequestRender();                                                                                                    // [0x3714d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RetainerBox.GetEffectMaterial
	// class UMaterialInstanceDynamic* GetEffectMaterial();                                                                     // [0x3714750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.RichTextBlock
/// Size: 0x0550 (1360 bytes) (0x000128 - 0x000678) align 8 pad: 0x0000
class URichTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	class UDataTable*                                  TextStyleSet;                                               // 0x0140   (0x0008)  
	TArray<class UClass*>                              DecoratorClasses;                                           // 0x0148   (0x0010)  
	bool                                               bOverrideDefaultStyle;                                      // 0x0158   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0159   (0x0007)  MISSED
	FTextBlockStyle                                    DefaultTextStyleOverride;                                   // 0x0160   (0x0270)  
	float                                              MinDesiredWidth;                                            // 0x03D0   (0x0004)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x03D4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x03D5   (0x0003)  MISSED
	FTextBlockStyle                                    DefaultTextStyle;                                           // 0x03D8   (0x0270)  
	TArray<class URichTextBlockDecorator*>             InstanceDecorators;                                         // 0x0648   (0x0010)  
	unsigned char                                      UnknownData02_7[0x20];                                      // 0x0658   (0x0020)  MISSED


	/// Functions
	// Function /Script/UMG.RichTextBlock.SetTextTransformPolicy
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x371aa40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetTextStyleSet
	// void SetTextStyleSet(class UDataTable* NewTextStyleSet);                                                                 // [0x371a9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetText
	// void SetText(FText& InText);                                                                                             // [0x371a8e0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x3719fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultTextStyle
	// void SetDefaultTextStyle(FTextBlockStyle& InDefaultTextStyle);                                                           // [0x3719a70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultStrikeBrush
	// void SetDefaultStrikeBrush(FSlateBrush& InStrikeBrush);                                                                  // [0x3719960] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowOffset
	// void SetDefaultShadowOffset(FVector2D InShadowOffset);                                                                   // [0x37198e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowColorAndOpacity
	// void SetDefaultShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                              // [0x3719850] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultFont
	// void SetDefaultFont(FSlateFontInfo InFontInfo);                                                                          // [0x3719730] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetDefaultColorAndOpacity
	// void SetDefaultColorAndOpacity(FSlateColor InColorAndOpacity);                                                           // [0x3719640] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.SetAutoWrapText
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x3719530] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.GetText
	// FText GetText();                                                                                                         // [0x37188e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.RichTextBlock.GetDecoratorByClass
	// class URichTextBlockDecorator* GetDecoratorByClass(class UClass* DecoratorClass);                                        // [0x3718660] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.RichTextBlock.ClearAllDefaultStyleOverrides
	// void ClearAllDefaultStyleOverrides();                                                                                    // [0x3718280] Final|Native|Public  
};

/// Class /Script/UMG.RichTextBlockDecorator
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class URichTextBlockDecorator : public UObject
{ 
public:
};

/// Class /Script/UMG.ScrollBox
/// Size: 0x0760 (1888 bytes) (0x000120 - 0x000880) align 8 pad: 0x0000
class UScrollBox : public UPanelWidget
{ 
public:
	FScrollBoxStyle                                    WidgetStyle;                                                // 0x0120   (0x0228)  
	FScrollBarStyle                                    WidgetBarStyle;                                             // 0x0348   (0x04D0)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0818   (0x0008)  
	class USlateWidgetStyleAsset*                      BarStyle;                                                   // 0x0820   (0x0008)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0828   (0x0001)  
	ESlateVisibility                                   ScrollbarVisibility;                                        // 0x0829   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x082A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x082B   (0x0001)  MISSED
	FVector2D                                          ScrollbarThickness;                                         // 0x082C   (0x0008)  
	FMargin                                            ScrollbarPadding;                                           // 0x0834   (0x0010)  
	bool                                               AlwaysShowScrollbar;                                        // 0x0844   (0x0001)  
	bool                                               AlwaysShowScrollbarTrack;                                   // 0x0845   (0x0001)  
	bool                                               AllowOverscroll;                                            // 0x0846   (0x0001)  
	bool                                               bAnimateWheelScrolling;                                     // 0x0847   (0x0001)  
	EDescendantScrollDestination                       NavigationDestination;                                      // 0x0848   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0849   (0x0003)  MISSED
	float                                              NavigationScrollPadding;                                    // 0x084C   (0x0004)  
	EScrollWhenFocusChanges                            ScrollWhenFocusChanges;                                     // 0x0850   (0x0001)  
	bool                                               bAllowRightClickDragScrolling;                              // 0x0851   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0852   (0x0002)  MISSED
	float                                              WheelScrollMultiplier;                                      // 0x0854   (0x0004)  
	SDK_UNDEFINED(16,274) /* FMulticastInlineDelegate */ __um(OnUserScrolled);                                     // 0x0858   (0x0010)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0868   (0x0018)  MISSED


	/// Functions
	// Function /Script/UMG.ScrollBox.SetWheelScrollMultiplier
	// void SetWheelScrollMultiplier(float NewWheelScrollMultiplier);                                                           // [0x371ac40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollWhenFocusChanges
	// void SetScrollWhenFocusChanges(EScrollWhenFocusChanges NewScrollWhenFocusChanges);                                       // [0x371a3e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollOffset
	// void SetScrollOffset(float NewScrollOffset);                                                                             // [0x371a360] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarVisibility
	// void SetScrollbarVisibility(ESlateVisibility NewScrollBarVisibility);                                                    // [0x371a2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarThickness
	// void SetScrollbarThickness(FVector2D& NewScrollbarThickness);                                                            // [0x371a500] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetScrollbarPadding
	// void SetScrollbarPadding(FMargin& NewScrollbarPadding);                                                                  // [0x371a460] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetOrientation
	// void SetOrientation(TEnumAsByte<EOrientation> NewOrientation);                                                           // [0x371a0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetConsumeMouseWheel
	// void SetConsumeMouseWheel(EConsumeMouseWheel NewConsumeMouseWheel);                                                      // [0x37195c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAnimateWheelScrolling
	// void SetAnimateWheelScrolling(bool bShouldAnimateWheelScrolling);                                                        // [0x37194a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAlwaysShowScrollbar
	// void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);                                                                // [0x3719410] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.SetAllowOverscroll
	// void SetAllowOverscroll(bool NewAllowOverscroll);                                                                        // [0x3719380] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollWidgetIntoView
	// void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDestination, float Padding); // [0x3719220] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollToStart
	// void ScrollToStart();                                                                                                    // [0x3719200] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.ScrollToEnd
	// void ScrollToEnd();                                                                                                      // [0x37191e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBox.GetViewOffsetFraction
	// float GetViewOffsetFraction();                                                                                           // [0x3718980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.GetScrollOffsetOfEnd
	// float GetScrollOffsetOfEnd();                                                                                            // [0x37188b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.GetScrollOffset
	// float GetScrollOffset();                                                                                                 // [0x3718880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.ScrollBox.EndInertialScrolling
	// void EndInertialScrolling();                                                                                             // [0x37183a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBox
/// Size: 0x0038 (56 bytes) (0x000120 - 0x000158) align 8 pad: 0x0000
class USizeBox : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0120   (0x0010)  MISSED
	float                                              WidthOverride;                                              // 0x0130   (0x0004)  
	float                                              HeightOverride;                                             // 0x0134   (0x0004)  
	float                                              MinDesiredWidth;                                            // 0x0138   (0x0004)  
	float                                              MinDesiredHeight;                                           // 0x013C   (0x0004)  
	float                                              MaxDesiredWidth;                                            // 0x0140   (0x0004)  
	float                                              MaxDesiredHeight;                                           // 0x0144   (0x0004)  
	float                                              MinAspectRatio;                                             // 0x0148   (0x0004)  
	float                                              MaxAspectRatio;                                             // 0x014C   (0x0004)  
	bool                                               bOverride_WidthOverride : 1;                                // 0x0150:0 (0x0001)  
	bool                                               bOverride_HeightOverride : 1;                               // 0x0150:1 (0x0001)  
	bool                                               bOverride_MinDesiredWidth : 1;                              // 0x0150:2 (0x0001)  
	bool                                               bOverride_MinDesiredHeight : 1;                             // 0x0150:3 (0x0001)  
	bool                                               bOverride_MaxDesiredWidth : 1;                              // 0x0150:4 (0x0001)  
	bool                                               bOverride_MaxDesiredHeight : 1;                             // 0x0150:5 (0x0001)  
	bool                                               bOverride_MinAspectRatio : 1;                               // 0x0150:6 (0x0001)  
	bool                                               bOverride_MaxAspectRatio : 1;                               // 0x0150:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0151   (0x0007)  MISSED


	/// Functions
	// Function /Script/UMG.SizeBox.SetWidthOverride
	// void SetWidthOverride(float InWidthOverride);                                                                            // [0x371acc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x371a030] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinDesiredHeight
	// void SetMinDesiredHeight(float InMinDesiredHeight);                                                                      // [0x3719f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMinAspectRatio
	// void SetMinAspectRatio(float InMinAspectRatio);                                                                          // [0x3719eb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxDesiredWidth
	// void SetMaxDesiredWidth(float InMaxDesiredWidth);                                                                        // [0x3719e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxDesiredHeight
	// void SetMaxDesiredHeight(float InMaxDesiredHeight);                                                                      // [0x3719db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetMaxAspectRatio
	// void SetMaxAspectRatio(float InMaxAspectRatio);                                                                          // [0x3719d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.SetHeightOverride
	// void SetHeightOverride(float InHeightOverride);                                                                          // [0x3719b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearWidthOverride
	// void ClearWidthOverride();                                                                                               // [0x3718380] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinDesiredWidth
	// void ClearMinDesiredWidth();                                                                                             // [0x3718360] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinDesiredHeight
	// void ClearMinDesiredHeight();                                                                                            // [0x3718340] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMinAspectRatio
	// void ClearMinAspectRatio();                                                                                              // [0x3718320] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredWidth
	// void ClearMaxDesiredWidth();                                                                                             // [0x3718300] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredHeight
	// void ClearMaxDesiredHeight();                                                                                            // [0x37182e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearMaxAspectRatio
	// void ClearMaxAspectRatio();                                                                                              // [0x37182c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBox.ClearHeightOverride
	// void ClearHeightOverride();                                                                                              // [0x37182a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBox
/// Size: 0x0028 (40 bytes) (0x000120 - 0x000148) align 8 pad: 0x0000
class UWrapBox : public UPanelWidget
{ 
public:
	FVector2D                                          InnerSlotPadding;                                           // 0x0120   (0x0008)  
	float                                              WrapWidth;                                                  // 0x0128   (0x0004)  
	float                                              WrapSize;                                                   // 0x012C   (0x0004)  
	bool                                               bExplicitWrapWidth;                                         // 0x0130   (0x0001)  
	bool                                               bExplicitWrapSize;                                          // 0x0131   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0132   (0x0001)  
	unsigned char                                      UnknownData00_7[0x15];                                      // 0x0133   (0x0015)  MISSED


	/// Functions
	// Function /Script/UMG.WrapBox.SetInnerSlotPadding
	// void SetInnerSlotPadding(FVector2D InPadding);                                                                           // [0x3733990] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WrapBox.AddChildToWrapBox
	// class UWrapBoxSlot* AddChildToWrapBox(class UWidget* Content);                                                           // [0x3732500] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextBlock
/// Size: 0x0198 (408 bytes) (0x000128 - 0x0002C0) align 8 pad: 0x0000
class UTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	int32_t                                            TruncateCharacterLimit;                                     // 0x0140   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	FString                                            TruncationCharacters;                                       // 0x0148   (0x0010)  
	SDK_UNDEFINED(16,275) /* FDelegateProperty */      __um(TextDelegate);                                         // 0x0158   (0x0010)  
	FSlateColor                                        ColorAndOpacity;                                            // 0x0168   (0x0028)  
	SDK_UNDEFINED(16,276) /* FDelegateProperty */      __um(ColorAndOpacityDelegate);                              // 0x0190   (0x0010)  
	FSlateFontInfo                                     Font;                                                       // 0x01A0   (0x0058)  
	FSlateBrush                                        StrikeBrush;                                                // 0x01F8   (0x0088)  
	FVector2D                                          ShadowOffset;                                               // 0x0280   (0x0008)  
	FLinearColor                                       ShadowColorAndOpacity;                                      // 0x0288   (0x0010)  
	SDK_UNDEFINED(16,277) /* FDelegateProperty */      __um(ShadowColorAndOpacityDelegate);                        // 0x0298   (0x0010)  
	float                                              MinDesiredWidth;                                            // 0x02A8   (0x0004)  
	bool                                               bWrapWithInvalidationPanel;                                 // 0x02AC   (0x0001)  
	bool                                               bAutoWrapText;                                              // 0x02AD   (0x0001)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x02AE   (0x0001)  
	bool                                               bSimpleTextMode;                                            // 0x02AF   (0x0001)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x02B0   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.TextBlock.TruncateText
	// void TruncateText(int32_t InCharacterLimit, FString InTruncationCharacters);                                             // [0x371ed40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetTextTransformPolicy
	// void SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy);                                                     // [0x371ebc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetText
	// void SetText(FText InText);                                                                                              // [0x371ead0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetStrikeBrush
	// void SetStrikeBrush(FSlateBrush InStrikeBrush);                                                                          // [0x371e9d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetShadowOffset
	// void SetShadowOffset(FVector2D InShadowOffset);                                                                          // [0x371e730] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetShadowColorAndOpacity
	// void SetShadowColorAndOpacity(FLinearColor InShadowColorAndOpacity);                                                     // [0x371e6a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x371e620] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetMinDesiredWidth
	// void SetMinDesiredWidth(float InMinDesiredWidth);                                                                        // [0x371e300] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetFont
	// void SetFont(FSlateFontInfo InFontInfo);                                                                                 // [0x371dd40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetColorAndOpacity
	// void SetColorAndOpacity(FSlateColor InColorAndOpacity);                                                                  // [0x371dad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.SetAutoWrapText
	// void SetAutoWrapText(bool InAutoTextWrap);                                                                               // [0x371da40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.GetText
	// FText GetText();                                                                                                         // [0x371d660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.TextBlock.GetDynamicOutlineMaterial
	// class UMaterialInstanceDynamic* GetDynamicOutlineMaterial();                                                             // [0x371d420] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TextBlock.GetDynamicFontMaterial
	// class UMaterialInstanceDynamic* GetDynamicFontMaterial();                                                                // [0x371d3f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TileView
/// Size: 0x0020 (32 bytes) (0x000368 - 0x000388) align 8 pad: 0x0000
class UTileView : public UListView
{ 
public:
	float                                              EntryHeight;                                                // 0x0368   (0x0004)  
	float                                              EntryWidth;                                                 // 0x036C   (0x0004)  
	EListItemAlignment                                 TileAlignment;                                              // 0x0370   (0x0001)  
	bool                                               bWrapHorizontalNavigation;                                  // 0x0371   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0372   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.TileView.SetEntryWidth
	// void SetEntryWidth(float NewWidth);                                                                                      // [0x371dcc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TileView.SetEntryHeight
	// void SetEntryHeight(float NewHeight);                                                                                    // [0x371dc40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TileView.GetEntryWidth
	// float GetEntryWidth();                                                                                                   // [0x371d470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.TileView.GetEntryHeight
	// float GetEntryHeight();                                                                                                  // [0x371d450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.TreeView
/// Size: 0x0058 (88 bytes) (0x000368 - 0x0003C0) align 8 pad: 0x0000
class UTreeView : public UListView
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0368   (0x0010)  MISSED
	SDK_UNDEFINED(16,278) /* FDelegateProperty */      __um(BP_OnGetItemChildren);                                 // 0x0378   (0x0010)  
	SDK_UNDEFINED(16,279) /* FMulticastInlineDelegate */ __um(BP_OnItemExpansionChanged);                          // 0x0388   (0x0010)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0398   (0x0028)  MISSED


	/// Functions
	// Function /Script/UMG.TreeView.SetItemExpansion
	// void SetItemExpansion(class UObject* Item, bool bExpandItem);                                                            // [0x3725030] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TreeView.ExpandAll
	// void ExpandAll();                                                                                                        // [0x3723af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.TreeView.CollapseAll
	// void CollapseAll();                                                                                                      // [0x3723ad0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.UniformGridPanel
/// Size: 0x0028 (40 bytes) (0x000120 - 0x000148) align 8 pad: 0x0000
class UUniformGridPanel : public UPanelWidget
{ 
public:
	FMargin                                            SlotPadding;                                                // 0x0120   (0x0010)  
	float                                              MinDesiredSlotWidth;                                        // 0x0130   (0x0004)  
	float                                              MinDesiredSlotHeight;                                       // 0x0134   (0x0004)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0138   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.UniformGridPanel.SetSlotPadding
	// void SetSlotPadding(FMargin InSlotPadding);                                                                              // [0x3725620] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotWidth
	// void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth);                                                                // [0x3725180] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotHeight
	// void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight);                                                              // [0x3725100] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridPanel.AddChildToUniformGrid
	// class UUniformGridSlot* AddChildToUniformGrid(class UWidget* Content, int32_t InRow, int32_t InColumn);                  // [0x3723530] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetSwitcher
/// Size: 0x0018 (24 bytes) (0x000120 - 0x000138) align 8 pad: 0x0000
class UWidgetSwitcher : public UPanelWidget
{ 
public:
	int32_t                                            ActiveWidgetIndex;                                          // 0x0120   (0x0004)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0124   (0x0014)  MISSED


	/// Functions
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidgetIndex
	// void SetActiveWidgetIndex(int32_t Index);                                                                                // [0x1773de0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidget
	// void SetActiveWidget(class UWidget* Widget);                                                                             // [0x1773cc0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcher.GetWidgetAtIndex
	// class UWidget* GetWidgetAtIndex(int32_t Index);                                                                          // [0x1773870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetNumWidgets
	// int32_t GetNumWidgets();                                                                                                 // [0x37328e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidgetIndex
	// int32_t GetActiveWidgetIndex();                                                                                          // [0x3732610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidget
	// class UWidget* GetActiveWidget();                                                                                        // [0x37325e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Slider
/// Size: 0x03F0 (1008 bytes) (0x000108 - 0x0004F8) align 8 pad: 0x0000
class USlider : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0108   (0x0004)  
	SDK_UNDEFINED(16,280) /* FDelegateProperty */      __um(ValueDelegate);                                        // 0x010C   (0x0010)  
	float                                              MinValue;                                                   // 0x011C   (0x0004)  
	float                                              MaxValue;                                                   // 0x0120   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	FSliderStyle                                       WidgetStyle;                                                // 0x0128   (0x0340)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0468   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0469   (0x0003)  MISSED
	FLinearColor                                       SliderBarColor;                                             // 0x046C   (0x0010)  
	FLinearColor                                       SliderHandleColor;                                          // 0x047C   (0x0010)  
	bool                                               IndentHandle;                                               // 0x048C   (0x0001)  
	bool                                               Locked;                                                     // 0x048D   (0x0001)  
	bool                                               MouseUsesStep;                                              // 0x048E   (0x0001)  
	bool                                               RequiresControllerLock;                                     // 0x048F   (0x0001)  
	float                                              StepSize;                                                   // 0x0490   (0x0004)  
	bool                                               IsFocusable;                                                // 0x0494   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0495   (0x0003)  MISSED
	SDK_UNDEFINED(16,281) /* FMulticastInlineDelegate */ __um(OnMouseCaptureBegin);                                // 0x0498   (0x0010)  
	SDK_UNDEFINED(16,282) /* FMulticastInlineDelegate */ __um(OnMouseCaptureEnd);                                  // 0x04A8   (0x0010)  
	SDK_UNDEFINED(16,283) /* FMulticastInlineDelegate */ __um(OnControllerCaptureBegin);                           // 0x04B8   (0x0010)  
	SDK_UNDEFINED(16,284) /* FMulticastInlineDelegate */ __um(OnControllerCaptureEnd);                             // 0x04C8   (0x0010)  
	SDK_UNDEFINED(16,285) /* FMulticastInlineDelegate */ __um(OnValueChanged);                                     // 0x04D8   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x04E8   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.Slider.SetValue
	// void SetValue(float InValue);                                                                                            // [0x371ec40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetStepSize
	// void SetStepSize(float InValue);                                                                                         // [0x371e950] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetSliderHandleColor
	// void SetSliderHandleColor(FLinearColor InValue);                                                                         // [0x371e8c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Slider.SetSliderBarColor
	// void SetSliderBarColor(FLinearColor InValue);                                                                            // [0x371e830] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Slider.SetMinValue
	// void SetMinValue(float InValue);                                                                                         // [0x371e490] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetMaxValue
	// void SetMaxValue(float InValue);                                                                                         // [0x371e200] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetLocked
	// void SetLocked(bool InValue);                                                                                            // [0x371e060] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.SetIndentHandle
	// void SetIndentHandle(bool InValue);                                                                                      // [0x371df50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Slider.GetValue
	// float GetValue();                                                                                                        // [0x371d7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Slider.GetNormalizedValue
	// float GetNormalizedValue();                                                                                              // [0x371d5b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.SlateChildSize
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FSlateChildSize
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	TEnumAsByte<ESlateSizeRule>                        SizeRule;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/UMG.RadialBoxSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FRadialBoxSettings
{ 
	float                                              StartingAngle;                                              // 0x0000   (0x0004)  
	bool                                               bDistributeItemsEvenly;                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              AngleBetweenItems;                                          // 0x0008   (0x0004)  
	float                                              SectorCentralAngle;                                         // 0x000C   (0x0004)  
};

/// Class /Script/UMG.DynamicEntryBoxBase
/// Size: 0x00D0 (208 bytes) (0x000108 - 0x0001D8) align 8 pad: 0x0000
class UDynamicEntryBoxBase : public UWidget
{ 
public:
	EDynamicBoxType                                    EntryBoxType;                                               // 0x0108   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	FVector2D                                          EntrySpacing;                                               // 0x010C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	TArray<FVector2D>                                  SpacingPattern;                                             // 0x0118   (0x0010)  
	FSlateChildSize                                    EntrySizeRule;                                              // 0x0128   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  EntryHorizontalAlignment;                                   // 0x0130   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    EntryVerticalAlignment;                                     // 0x0131   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0132   (0x0002)  MISSED
	int32_t                                            MaxElementSize;                                             // 0x0134   (0x0004)  
	FRadialBoxSettings                                 RadialBoxSettings;                                          // 0x0138   (0x0010)  
	unsigned char                                      UnknownData03_6[0x10];                                      // 0x0148   (0x0010)  MISSED
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0158   (0x0080)  


	/// Functions
	// Function /Script/UMG.DynamicEntryBoxBase.SetRadialSettings
	// void SetRadialSettings(FRadialBoxSettings& InSettings);                                                                  // [0x370cd50] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBoxBase.SetEntrySpacing
	// void SetEntrySpacing(FVector2D& InEntrySpacing);                                                                         // [0x370c5c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBoxBase.GetNumEntries
	// int32_t GetNumEntries();                                                                                                 // [0x370bea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.DynamicEntryBoxBase.GetAllEntries
	// TArray<UUserWidget*> GetAllEntries();                                                                                    // [0x370bd80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.RichTextBlockImageDecorator
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class URichTextBlockImageDecorator : public URichTextBlockDecorator
{ 
public:
	class UDataTable*                                  ImageSet;                                                   // 0x0028   (0x0008)  
};

/// Class /Script/UMG.WidgetComponent
/// Size: 0x0128 (296 bytes) (0x000478 - 0x0005A0) align 16 pad: 0x0000
class UWidgetComponent : public UMeshComponent
{ 
public:
	EWidgetSpace                                       Space;                                                      // 0x0478   (0x0001)  
	EWidgetTimingPolicy                                TimingPolicy;                                               // 0x0479   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x047A   (0x0006)  MISSED
	class UClass*                                      WidgetClass;                                                // 0x0480   (0x0008)  
	FIntPoint                                          DrawSize;                                                   // 0x0488   (0x0008)  
	bool                                               bManuallyRedraw;                                            // 0x0490   (0x0001)  
	bool                                               bRedrawRequested;                                           // 0x0491   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0492   (0x0002)  MISSED
	float                                              RedrawTime;                                                 // 0x0494   (0x0004)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0498   (0x0008)  MISSED
	FIntPoint                                          CurrentDrawSize;                                            // 0x04A0   (0x0008)  
	bool                                               bDrawAtDesiredSize;                                         // 0x04A8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x04A9   (0x0003)  MISSED
	FVector2D                                          Pivot;                                                      // 0x04AC   (0x0008)  
	bool                                               bReceiveHardwareInput;                                      // 0x04B4   (0x0001)  
	bool                                               bWindowFocusable;                                           // 0x04B5   (0x0001)  
	EWindowVisibility                                  WindowVisibility;                                           // 0x04B6   (0x0001)  
	bool                                               bApplyGammaCorrection;                                      // 0x04B7   (0x0001)  
	class ULocalPlayer*                                OwnerPlayer;                                                // 0x04B8   (0x0008)  
	FLinearColor                                       BackgroundColor;                                            // 0x04C0   (0x0010)  
	FLinearColor                                       TintColorAndOpacity;                                        // 0x04D0   (0x0010)  
	float                                              OpacityFromTexture;                                         // 0x04E0   (0x0004)  
	EWidgetBlendMode                                   BlendMode;                                                  // 0x04E4   (0x0001)  
	bool                                               bIsTwoSided;                                                // 0x04E5   (0x0001)  
	bool                                               TickWhenOffscreen;                                          // 0x04E6   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x04E7   (0x0001)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x04E8   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial;                                        // 0x04F0   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial_OneSided;                               // 0x04F8   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial;                                             // 0x0500   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial_OneSided;                                    // 0x0508   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial;                                             // 0x0510   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial_OneSided;                                    // 0x0518   (0x0008)  
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0520   (0x0008)  
	class UMaterialInstanceDynamic*                    MaterialInstance;                                           // 0x0528   (0x0008)  
	bool                                               bAddedToScreen;                                             // 0x0530   (0x0001)  
	bool                                               bEditTimeUsable;                                            // 0x0531   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0532   (0x0002)  MISSED
	FName                                              SharedLayerName;                                            // 0x0534   (0x0008)  
	int32_t                                            LayerZOrder;                                                // 0x053C   (0x0004)  
	EWidgetGeometryMode                                GeometryMode;                                               // 0x0540   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0541   (0x0003)  MISSED
	float                                              CylinderArcAngle;                                           // 0x0544   (0x0004)  
	ETickMode                                          TickMode;                                                   // 0x0548   (0x0001)  
	unsigned char                                      UnknownData07_6[0x27];                                      // 0x0549   (0x0027)  MISSED
	class UUserWidget*                                 Widget;                                                     // 0x0570   (0x0008)  
	unsigned char                                      UnknownData08_7[0x28];                                      // 0x0578   (0x0028)  MISSED


	/// Functions
	// Function /Script/UMG.WidgetComponent.SetWindowVisibility
	// void SetWindowVisibility(EWindowVisibility InVisibility);                                                                // [0x37307e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWindowFocusable
	// void SetWindowFocusable(bool bInWindowFocusable);                                                                        // [0x37304a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWidgetSpace
	// void SetWidgetSpace(EWidgetSpace NewSpace);                                                                              // [0x3730420] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetWidget
	// void SetWidget(class UUserWidget* Widget);                                                                               // [0x3730390] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTwoSided
	// void SetTwoSided(bool bWantTwoSided);                                                                                    // [0x3730300] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTintColorAndOpacity
	// void SetTintColorAndOpacity(FLinearColor NewTintColorAndOpacity);                                                        // [0x3730270] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTickWhenOffscreen
	// void SetTickWhenOffscreen(bool bWantTickWhenOffscreen);                                                                  // [0x37301e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetTickMode
	// void SetTickMode(ETickMode InTickMode);                                                                                  // [0x3730160] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetRedrawTime
	// void SetRedrawTime(float InRedrawTime);                                                                                  // [0x37300e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetPivot
	// void SetPivot(FVector2D& InPivot);                                                                                       // [0x3730050] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetOwnerPlayer
	// void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);                                                                    // [0x372ffc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetManuallyRedraw
	// void SetManuallyRedraw(bool bUseManualRedraw);                                                                           // [0x372fe00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetGeometryMode
	// void SetGeometryMode(EWidgetGeometryMode InGeometryMode);                                                                // [0x372f710] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetDrawSize
	// void SetDrawSize(FVector2D Size);                                                                                        // [0x372f670] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetDrawAtDesiredSize
	// void SetDrawAtDesiredSize(bool bInDrawAtDesiredSize);                                                                    // [0x372f5e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetCylinderArcAngle
	// void SetCylinderArcAngle(float InCylinderArcAngle);                                                                      // [0x372f560] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor NewBackgroundColor);                                                                // [0x372f220] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.RequestRenderUpdate
	// void RequestRenderUpdate();                                                                                              // [0x372f1e0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.RequestRedraw
	// void RequestRedraw();                                                                                                    // [0x372f1c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetComponent.IsWidgetVisible
	// bool IsWidgetVisible();                                                                                                  // [0x372ea70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWindowVisiblility
	// EWindowVisibility GetWindowVisiblility();                                                                                // [0x372e9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWindowFocusable
	// bool GetWindowFocusable();                                                                                               // [0x372e990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWidgetSpace
	// EWidgetSpace GetWidgetSpace();                                                                                           // [0x372e970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetWidget
	// class UUserWidget* GetWidget();                                                                                          // [0x372e940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetUserWidgetObject
	// class UUserWidget* GetUserWidgetObject();                                                                                // [0x372e8e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetTwoSided
	// bool GetTwoSided();                                                                                                      // [0x372e8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetTickWhenOffscreen
	// bool GetTickWhenOffscreen();                                                                                             // [0x372e8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetRenderTarget
	// class UTextureRenderTarget2D* GetRenderTarget();                                                                         // [0x372e6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetRedrawTime
	// float GetRedrawTime();                                                                                                   // [0x372e6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetPivot
	// FVector2D GetPivot();                                                                                                    // [0x372e6a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetOwnerPlayer
	// class ULocalPlayer* GetOwnerPlayer();                                                                                    // [0x372e670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetMaterialInstance
	// class UMaterialInstanceDynamic* GetMaterialInstance();                                                                   // [0x372e640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetManuallyRedraw
	// bool GetManuallyRedraw();                                                                                                // [0x31d10c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetGeometryMode
	// EWidgetGeometryMode GetGeometryMode();                                                                                   // [0x372e070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetDrawSize
	// FVector2D GetDrawSize();                                                                                                 // [0x372df20] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetDrawAtDesiredSize
	// bool GetDrawAtDesiredSize();                                                                                             // [0x372df00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetCylinderArcAngle
	// float GetCylinderArcAngle();                                                                                             // [0x372deb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetComponent.GetCurrentDrawSize
	// FVector2D GetCurrentDrawSize();                                                                                          // [0x372de70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.AsyncTaskDownloadImage
/// Size: 0x0020 (32 bytes) (0x000030 - 0x000050) align 8 pad: 0x0000
class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
{ 
public:
	SDK_UNDEFINED(16,286) /* FMulticastInlineDelegate */ __um(OnSuccess);                                          // 0x0030   (0x0010)  
	SDK_UNDEFINED(16,287) /* FMulticastInlineDelegate */ __um(OnFail);                                             // 0x0040   (0x0010)  


	/// Functions
	// Function /Script/UMG.AsyncTaskDownloadImage.DownloadImage
	// class UAsyncTaskDownloadImage* DownloadImage(FString URL);                                                               // [0x37075e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlur
/// Size: 0x00B8 (184 bytes) (0x000120 - 0x0001D8) align 8 pad: 0x0000
class UBackgroundBlur : public UContentWidget
{ 
public:
	FMargin                                            Padding;                                                    // 0x0120   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0130   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0131   (0x0001)  
	bool                                               bApplyAlphaToBlur;                                          // 0x0132   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0133   (0x0001)  MISSED
	float                                              BlurStrength;                                               // 0x0134   (0x0004)  
	bool                                               bOverrideAutoRadiusCalculation;                             // 0x0138   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0139   (0x0003)  MISSED
	int32_t                                            BlurRadius;                                                 // 0x013C   (0x0004)  
	FSlateBrush                                        LowQualityFallbackBrush;                                    // 0x0140   (0x0088)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x01C8   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.BackgroundBlur.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x37094c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3708d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetLowQualityFallbackBrush
	// void SetLowQualityFallbackBrush(FSlateBrush& InBrush);                                                                   // [0x37089e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708610] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetBlurStrength
	// void SetBlurStrength(float InStrength);                                                                                  // [0x3707fa0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetBlurRadius
	// void SetBlurRadius(int32_t InBlurRadius);                                                                                // [0x3707f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlur.SetApplyAlphaToBlur
	// void SetApplyAlphaToBlur(bool bInApplyAlphaToBlur);                                                                      // [0x3707d60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BackgroundBlurSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UBackgroundBlurSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x004A   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.BackgroundBlurSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3709540] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlurSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3708da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BackgroundBlurSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708690] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.DynamicPropertyPath
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
struct FDynamicPropertyPath : FCachedPropertyPath
{ 
};

/// Class /Script/UMG.PropertyBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class UPropertyBinding : public UObject
{ 
public:
	SDK_UNDEFINED(8,288) /* TWeakObjectPtr<UObject*> */ __um(SourceObject);                                        // 0x0028   (0x0008)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0030   (0x0028)  
	FName                                              DestinationProperty;                                        // 0x0058   (0x0008)  
};

/// Class /Script/UMG.BoolBinding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UBoolBinding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.BoolBinding.GetValue
	// bool GetValue();                                                                                                         // [0x37079a0] Final|Native|Public|Const 
};

/// Class /Script/UMG.BorderSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UBorderSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x004A   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.BorderSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3709640] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BorderSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3708ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.BorderSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.BrushBinding
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UBrushBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0060   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.BrushBinding.GetValue
	// FSlateBrush GetValue();                                                                                                  // [0x37079d0] Final|Native|Public|Const 
};

/// Class /Script/UMG.ButtonSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UButtonSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x004A   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.ButtonSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x37096c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ButtonSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3708f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ButtonSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708810] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.CanvasPanel
/// Size: 0x0010 (16 bytes) (0x000120 - 0x000130) align 8 pad: 0x0000
class UCanvasPanel : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.CanvasPanel.AddChildToCanvas
	// class UCanvasPanelSlot* AddChildToCanvas(class UWidget* Content);                                                        // [0x3707540] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.AnchorData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FAnchorData
{ 
	FMargin                                            Offsets;                                                    // 0x0000   (0x0010)  
	FAnchors                                           Anchors;                                                    // 0x0010   (0x0010)  
	FVector2D                                          Alignment;                                                  // 0x0020   (0x0008)  
};

/// Class /Script/UMG.CanvasPanelSlot
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UCanvasPanelSlot : public UPanelSlot
{ 
public:
	FAnchorData                                        LayoutData;                                                 // 0x0038   (0x0028)  
	bool                                               bAutoSize;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            ZOrder;                                                     // 0x0064   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0068   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.CanvasPanelSlot.SetZOrder
	// void SetZOrder(int32_t InZOrder);                                                                                        // [0x3709740] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetSize
	// void SetSize(FVector2D InSize);                                                                                          // [0x3709260] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetPosition
	// void SetPosition(FVector2D InPosition);                                                                                  // [0x3709060] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetOffsets
	// void SetOffsets(FMargin InOffset);                                                                                       // [0x3708c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetMinimum
	// void SetMinimum(FVector2D InMinimumAnchors);                                                                             // [0x3708b70] Final|Native|Public|HasDefaults 
	// Function /Script/UMG.CanvasPanelSlot.SetMaximum
	// void SetMaximum(FVector2D InMaximumAnchors);                                                                             // [0x3708af0] Final|Native|Public|HasDefaults 
	// Function /Script/UMG.CanvasPanelSlot.SetLayout
	// void SetLayout(FAnchorData& InLayoutData);                                                                               // [0x3708920] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAutoSize
	// void SetAutoSize(bool InbAutoSize);                                                                                      // [0x3707df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAnchors
	// void SetAnchors(FAnchors InAnchors);                                                                                     // [0x3707cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.SetAlignment
	// void SetAlignment(FVector2D InAlignment);                                                                                // [0x3707c50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.CanvasPanelSlot.GetZOrder
	// int32_t GetZOrder();                                                                                                     // [0x3707b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetSize
	// FVector2D GetSize();                                                                                                     // [0x37078f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetPosition
	// FVector2D GetPosition();                                                                                                 // [0x37078b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetOffsets
	// FMargin GetOffsets();                                                                                                    // [0x3707870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetLayout
	// FAnchorData GetLayout();                                                                                                 // [0x37077e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAutoSize
	// bool GetAutoSize();                                                                                                      // [0x3707750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAnchors
	// FAnchors GetAnchors();                                                                                                   // [0x3707710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.CanvasPanelSlot.GetAlignment
	// FVector2D GetAlignment();                                                                                                // [0x37076d0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.CheckedStateBinding
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UCheckedStateBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0060   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.CheckedStateBinding.GetValue
	// ECheckBoxState GetValue();                                                                                               // [0x3707b60] Final|Native|Public|Const 
};

/// Class /Script/UMG.CircularThrobber
/// Size: 0x00B8 (184 bytes) (0x000108 - 0x0001C0) align 8 pad: 0x0000
class UCircularThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0108   (0x0004)  
	float                                              Period;                                                     // 0x010C   (0x0004)  
	float                                              Radius;                                                     // 0x0110   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0118   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0120   (0x0088)  
	bool                                               bEnableRadius;                                              // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x01A9   (0x0017)  MISSED


	/// Functions
	// Function /Script/UMG.CircularThrobber.SetRadius
	// void SetRadius(float InRadius);                                                                                          // [0x37091e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CircularThrobber.SetPeriod
	// void SetPeriod(float InPeriod);                                                                                          // [0x3708fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.CircularThrobber.SetNumberOfPieces
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x3708bf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ColorBinding
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UColorBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0060   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.ColorBinding.GetSlateValue
	// FSlateColor GetSlateValue();                                                                                             // [0x3707930] Final|Native|Public|Const 
	// Function /Script/UMG.ColorBinding.GetLinearValue
	// FLinearColor GetLinearValue();                                                                                           // [0x3707830] Final|Native|Public|HasDefaults|Const 
};

/// Class /Script/UMG.DragDropOperation
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000088) align 8 pad: 0x0000
class UDragDropOperation : public UObject
{ 
public:
	FString                                            Tag;                                                        // 0x0028   (0x0010)  
	class UObject*                                     Payload;                                                    // 0x0038   (0x0008)  
	class UWidget*                                     DefaultDragVisual;                                          // 0x0040   (0x0008)  
	EDragPivot                                         Pivot;                                                      // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FVector2D                                          Offset;                                                     // 0x004C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	SDK_UNDEFINED(16,289) /* FMulticastInlineDelegate */ __um(OnDrop);                                             // 0x0058   (0x0010)  
	SDK_UNDEFINED(16,290) /* FMulticastInlineDelegate */ __um(OnDragCancelled);                                    // 0x0068   (0x0010)  
	SDK_UNDEFINED(16,291) /* FMulticastInlineDelegate */ __um(OnDragged);                                          // 0x0078   (0x0010)  


	/// Functions
	// Function /Script/UMG.DragDropOperation.Drop
	// void Drop(FPointerEvent& PointerEvent);                                                                                  // [0x370bba0] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.DragDropOperation.Dragged
	// void Dragged(FPointerEvent& PointerEvent);                                                                               // [0x370ba70] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/UMG.DragDropOperation.DragCancelled
	// void DragCancelled(FPointerEvent& PointerEvent);                                                                         // [0x370b940] Native|Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/UMG.DynamicEntryBox
/// Size: 0x0008 (8 bytes) (0x0001D8 - 0x0001E0) align 8 pad: 0x0000
class UDynamicEntryBox : public UDynamicEntryBoxBase
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x01D8   (0x0008)  


	/// Functions
	// Function /Script/UMG.DynamicEntryBox.Reset
	// void Reset(bool bDeleteWidgets);                                                                                         // [0x370c3c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.RemoveEntry
	// void RemoveEntry(class UUserWidget* EntryWidget);                                                                        // [0x370c280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntryOfClass
	// class UUserWidget* BP_CreateEntryOfClass(class UClass* EntryClass);                                                      // [0x370b840] Final|Native|Private|BlueprintCallable 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntry
	// class UUserWidget* BP_CreateEntry();                                                                                     // [0x370b810] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/UMG.ExpandableArea
/// Size: 0x0230 (560 bytes) (0x000108 - 0x000338) align 8 pad: 0x0000
class UExpandableArea : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0108   (0x0008)  MISSED
	FExpandableAreaStyle                               Style;                                                      // 0x0110   (0x0120)  
	FSlateBrush                                        BorderBrush;                                                // 0x0230   (0x0088)  
	FSlateColor                                        BorderColor;                                                // 0x02B8   (0x0028)  
	bool                                               bIsExpanded;                                                // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02E1   (0x0003)  MISSED
	float                                              MaxHeight;                                                  // 0x02E4   (0x0004)  
	FMargin                                            HeaderPadding;                                              // 0x02E8   (0x0010)  
	FMargin                                            AreaPadding;                                                // 0x02F8   (0x0010)  
	SDK_UNDEFINED(16,292) /* FMulticastInlineDelegate */ __um(OnExpansionChanged);                                 // 0x0308   (0x0010)  
	class UWidget*                                     HeaderContent;                                              // 0x0318   (0x0008)  
	class UWidget*                                     BodyContent;                                                // 0x0320   (0x0008)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0328   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.ExpandableArea.SetIsExpanded_Animated
	// void SetIsExpanded_Animated(bool IsExpanded);                                                                            // [0x370c980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ExpandableArea.SetIsExpanded
	// void SetIsExpanded(bool IsExpanded);                                                                                     // [0x370c8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ExpandableArea.GetIsExpanded
	// bool GetIsExpanded();                                                                                                    // [0x370be70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.FloatBinding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UFloatBinding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.FloatBinding.GetValue
	// float GetValue();                                                                                                        // [0x370c1d0] Final|Native|Public|Const 
};

/// Class /Script/UMG.GridSlot
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000070) align 8 pad: 0x0000
class UGridSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x004A   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x004C   (0x0004)  
	int32_t                                            RowSpan;                                                    // 0x0050   (0x0004)  
	int32_t                                            Column;                                                     // 0x0054   (0x0004)  
	int32_t                                            ColumnSpan;                                                 // 0x0058   (0x0004)  
	int32_t                                            Layer;                                                      // 0x005C   (0x0004)  
	FVector2D                                          Nudge;                                                      // 0x0060   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0068   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.GridSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3711a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetRowSpan
	// void SetRowSpan(int32_t InRowSpan);                                                                                      // [0x3711560] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetRow
	// void SetRow(int32_t InRow);                                                                                              // [0x37114d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x37113b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetNudge
	// void SetNudge(FVector2D InNudge);                                                                                        // [0x37112b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetLayer
	// void SetLayer(int32_t InLayer);                                                                                          // [0x3711140] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3710f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetColumnSpan
	// void SetColumnSpan(int32_t InColumnSpan);                                                                                // [0x3710de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.GridSlot.SetColumn
	// void SetColumn(int32_t InColumn);                                                                                        // [0x3710d50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBox
/// Size: 0x0010 (16 bytes) (0x000120 - 0x000130) align 8 pad: 0x0000
class UHorizontalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.HorizontalBox.AddChildToHorizontalBox
	// class UHorizontalBoxSlot* AddChildToHorizontalBox(class UWidget* Content);                                               // [0x370f430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.HorizontalBoxSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UHorizontalBoxSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	FSlateChildSize                                    Size;                                                       // 0x0050   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED


	/// Functions
	// Function /Script/UMG.HorizontalBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3711a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetSize
	// void SetSize(FSlateChildSize InSize);                                                                                    // [0x37118f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3711440] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.HorizontalBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3710fe0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.InputKeySelector
/// Size: 0x05F8 (1528 bytes) (0x000108 - 0x000700) align 8 pad: 0x0000
class UInputKeySelector : public UWidget
{ 
public:
	FButtonStyle                                       WidgetStyle;                                                // 0x0108   (0x0278)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x0380   (0x0270)  
	FInputChord                                        SelectedKey;                                                // 0x05F0   (0x0020)  
	FSlateFontInfo                                     Font;                                                       // 0x0610   (0x0058)  
	FMargin                                            Margin;                                                     // 0x0668   (0x0010)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x0678   (0x0010)  
	FText                                              KeySelectionText;                                           // 0x0688   (0x0018)  
	FText                                              NoKeySpecifiedText;                                         // 0x06A0   (0x0018)  
	bool                                               bAllowModifierKeys;                                         // 0x06B8   (0x0001)  
	bool                                               bAllowGamepadKeys;                                          // 0x06B9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x06BA   (0x0006)  MISSED
	TArray<FKey>                                       EscapeKeys;                                                 // 0x06C0   (0x0010)  
	SDK_UNDEFINED(16,293) /* FMulticastInlineDelegate */ __um(OnKeySelected);                                      // 0x06D0   (0x0010)  
	SDK_UNDEFINED(16,294) /* FMulticastInlineDelegate */ __um(OnIsSelectingKeyChanged);                            // 0x06E0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x06F0   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.InputKeySelector.SetTextBlockVisibility
	// void SetTextBlockVisibility(ESlateVisibility InVisibility);                                                              // [0x3711980] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetSelectedKey
	// void SetSelectedKey(FInputChord& InSelectedKey);                                                                         // [0x3711780] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetNoKeySpecifiedText
	// void SetNoKeySpecifiedText(FText InNoKeySpecifiedText);                                                                  // [0x37111d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetKeySelectionText
	// void SetKeySelectionText(FText InKeySelectionText);                                                                      // [0x3711060] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetEscapeKeys
	// void SetEscapeKeys(TArray<FKey>& InKeys);                                                                                // [0x3710e70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetAllowModifierKeys
	// void SetAllowModifierKeys(bool bInAllowModifierKeys);                                                                    // [0x3710310] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.SetAllowGamepadKeys
	// void SetAllowGamepadKeys(bool bInAllowGamepadKeys);                                                                      // [0x3710280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InputKeySelector.OnKeySelected__DelegateSignature
	// void OnKeySelected__DelegateSignature(FInputChord SelectedKey);                                                          // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.InputKeySelector.OnIsSelectingKeyChanged__DelegateSignature
	// void OnIsSelectingKeyChanged__DelegateSignature();                                                                       // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.InputKeySelector.GetIsSelectingKey
	// bool GetIsSelectingKey();                                                                                                // [0x370fc40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.Int32Binding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UInt32Binding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.Int32Binding.GetValue
	// int32_t GetValue();                                                                                                      // [0x370feb0] Final|Native|Public|Const 
};

/// Class /Script/UMG.InvalidationBox
/// Size: 0x0018 (24 bytes) (0x000120 - 0x000138) align 8 pad: 0x0000
class UInvalidationBox : public UContentWidget
{ 
public:
	bool                                               bCanCache;                                                  // 0x0120   (0x0001)  
	bool                                               CacheRelativeTransforms;                                    // 0x0121   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x0122   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.InvalidationBox.SetCanCache
	// void SetCanCache(bool CanCache);                                                                                         // [0x3710c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InvalidationBox.InvalidateCache
	// void InvalidateCache();                                                                                                  // [0xbbc500] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.InvalidationBox.GetCanCache
	// bool GetCanCache();                                                                                                      // [0x370fab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UserListEntry
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UUserListEntry : public UInterface
{ 
public:


	/// Functions
	// Function /Script/UMG.UserListEntry.BP_OnItemSelectionChanged
	// void BP_OnItemSelectionChanged(bool bIsSelected);                                                                        // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserListEntry.BP_OnItemExpansionChanged
	// void BP_OnItemExpansionChanged(bool bIsExpanded);                                                                        // [0x24710f0] Event|Protected|BlueprintEvent 
	// Function /Script/UMG.UserListEntry.BP_OnEntryReleased
	// void BP_OnEntryReleased();                                                                                               // [0x24710f0] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserListEntryLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UUserListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/UMG.UserListEntryLibrary.IsListItemSelected
	// bool IsListItemSelected(TScriptInterface<Class> UserListEntry);                                                          // [0x370ff80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.UserListEntryLibrary.IsListItemExpanded
	// bool IsListItemExpanded(TScriptInterface<Class> UserListEntry);                                                          // [0x370fee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.UserListEntryLibrary.GetOwningListView
	// class UListViewBase* GetOwningListView(TScriptInterface<Class> UserListEntry);                                           // [0x370fe10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.UserObjectListEntry
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UUserObjectListEntry : public UUserListEntry
{ 
public:


	/// Functions
	// Function /Script/UMG.UserObjectListEntry.OnListItemObjectSet
	// void OnListItemObjectSet(class UObject* ListItemObject);                                                                 // [0x24710f0] Event|Protected|BlueprintEvent 
};

/// Class /Script/UMG.UserObjectListEntryLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/UMG.UserObjectListEntryLibrary.GetListItemObject
	// class UObject* GetListItemObject(TScriptInterface<Class> UserObjectListEntry);                                           // [0x370fd10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/UMG.ListViewDesignerPreviewItem
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UListViewDesignerPreviewItem : public UObject
{ 
public:
};

/// Class /Script/UMG.MouseCursorBinding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UMouseCursorBinding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.MouseCursorBinding.GetValue
	// TEnumAsByte<EMouseCursor> GetValue();                                                                                    // [0x3714a40] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneEntitySystem
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 8 pad: 0x0000
class UMovieSceneEntitySystem : public UObject
{ 
public:
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0028   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertySystem
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMovieScenePropertySystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0040   (0x0008)  MISSED
	class UMovieScenePropertyInstantiatorSystem*       InstantiatorSystem;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/UMG.MovieScene2DTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSignedObject
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UMovieSceneSignedObject : public UObject
{ 
public:
	FGuid                                              Signature;                                                  // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0038   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSectionEvalOptions
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FMovieSceneSectionEvalOptions
{ 
	bool                                               bCanEditCompletionMode;                                     // 0x0000   (0x0001)  
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0001   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneEasingSettings
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneEasingSettings
{ 
	int32_t                                            AutoEaseInDuration;                                         // 0x0000   (0x0004)  
	int32_t                                            AutoEaseOutDuration;                                        // 0x0004   (0x0004)  
	SDK_UNDEFINED(16,295) /* TScriptInterface<Class> */ __um(EaseIn);                                              // 0x0008   (0x0010)  
	bool                                               bManualEaseIn;                                              // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	int32_t                                            ManualEaseInDuration;                                       // 0x001C   (0x0004)  
	SDK_UNDEFINED(16,296) /* TScriptInterface<Class> */ __um(EaseOut);                                             // 0x0020   (0x0010)  
	bool                                               bManualEaseOut;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            ManualEaseOutDuration;                                      // 0x0034   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFrameRange
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneFrameRange
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.OptionalMovieSceneBlendType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align 1 pad: 0x0000
struct FOptionalMovieSceneBlendType
{ 
	EMovieSceneBlendType                               BlendType;                                                  // 0x0000   (0x0001)  
	bool                                               bIsValid;                                                   // 0x0001   (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneSection
/// Size: 0x0098 (152 bytes) (0x000050 - 0x0000E8) align 8 pad: 0x0000
class UMovieSceneSection : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneSectionEvalOptions                      EvalOptions;                                                // 0x0050   (0x0002)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x0052   (0x0006)  MISSED
	FMovieSceneEasingSettings                          Easing;                                                     // 0x0058   (0x0038)  
	FMovieSceneFrameRange                              SectionRange;                                               // 0x0090   (0x0010)  
	FFrameNumber                                       PreRollFrames;                                              // 0x00A0   (0x0004)  
	FFrameNumber                                       PostRollFrames;                                             // 0x00A4   (0x0004)  
	int32_t                                            RowIndex;                                                   // 0x00A8   (0x0004)  
	int32_t                                            OverlapPriority;                                            // 0x00AC   (0x0004)  
	bool                                               bIsActive : 1;                                              // 0x00B0:0 (0x0001)  
	bool                                               bIsLocked : 1;                                              // 0x00B0:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              StartTime;                                                  // 0x00B4   (0x0004)  
	float                                              EndTime;                                                    // 0x00B8   (0x0004)  
	float                                              PrerollTime;                                                // 0x00BC   (0x0004)  
	float                                              PostrollTime;                                               // 0x00C0   (0x0004)  
	bool                                               bIsInfinite : 1;                                            // 0x00C4:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00C5   (0x0003)  MISSED
	bool                                               bSupportsInfiniteRange;                                     // 0x00C8   (0x0001)  
	FOptionalMovieSceneBlendType                       BlendType;                                                  // 0x00C9   (0x0002)  
	unsigned char                                      UnknownData03_7[0x1D];                                      // 0x00CB   (0x001D)  MISSED


	/// Functions
	// Function /Script/MovieScene.MovieSceneSection.SetRowIndex
	// void SetRowIndex(int32_t NewRowIndex);                                                                                   // [0x35121d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetPreRollFrames
	// void SetPreRollFrames(int32_t InPreRollFrames);                                                                          // [0x3512140] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetPostRollFrames
	// void SetPostRollFrames(int32_t InPostRollFrames);                                                                        // [0x35120b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetOverlapPriority
	// void SetOverlapPriority(int32_t NewPriority);                                                                            // [0x3511e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetIsLocked
	// void SetIsLocked(bool bInIsLocked);                                                                                      // [0x3511df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetIsActive
	// void SetIsActive(bool bInIsActive);                                                                                      // [0x3511d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetCompletionMode
	// void SetCompletionMode(EMovieSceneCompletionMode InCompletionMode);                                                      // [0x3511a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.SetBlendType
	// void SetBlendType(EMovieSceneBlendType InBlendType);                                                                     // [0x3511a10] RequiredAPI|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSection.IsLocked
	// bool IsLocked();                                                                                                         // [0x3510e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.IsActive
	// bool IsActive();                                                                                                         // [0x3510e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetRowIndex
	// int32_t GetRowIndex();                                                                                                   // [0x9c17c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetPreRollFrames
	// int32_t GetPreRollFrames();                                                                                              // [0x3510d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetPostRollFrames
	// int32_t GetPostRollFrames();                                                                                             // [0x3510d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetOverlapPriority
	// int32_t GetOverlapPriority();                                                                                            // [0x3510ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetCompletionMode
	// EMovieSceneCompletionMode GetCompletionMode();                                                                           // [0x3510a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSection.GetBlendType
	// FOptionalMovieSceneBlendType GetBlendType();                                                                             // [0x3510940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.MovieScene2DTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieScene2DTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneChannel
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneChannel
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTangentData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneTangentData
{ 
	float                                              ArriveTangent;                                              // 0x0000   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0004   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0008   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x000C   (0x0004)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFloatValue
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMovieSceneFloatValue
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FMovieSceneTangentData                             Tangent;                                                    // 0x0004   (0x0014)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0019   (0x0001)  
	char                                               PaddingByte;                                                // 0x001A   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyHandleMap
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneKeyHandleMap : FKeyHandleLookupTable
{ 
};

/// Struct /Script/MovieScene.MovieSceneFloatChannel
/// Size: 0x0098 (152 bytes) (0x000008 - 0x0000A0) align 8 pad: 0x0000
struct FMovieSceneFloatChannel : FMovieSceneChannel
{ 
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x0008   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x0009   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneFloatValue>                      Values;                                                     // 0x0020   (0x0010)  
	float                                              DefaultValue;                                               // 0x0030   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x0034   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FMovieSceneKeyHandleMap                            KeyHandles;                                                 // 0x0038   (0x0060)  
	FFrameRate                                         TickResolution;                                             // 0x0098   (0x0008)  
};

/// Class /Script/UMG.MovieScene2DTransformSection
/// Size: 0x0470 (1136 bytes) (0x0000E8 - 0x000558) align 8 pad: 0x0000
class UMovieScene2DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieScene2DTransformMask                         TransformMask;                                              // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[2];                                             // 0x00F8   (0x0140)  
	FMovieSceneFloatChannel                            Rotation;                                                   // 0x0238   (0x00A0)  
	FMovieSceneFloatChannel                            Scale[2];                                                   // 0x02D8   (0x0140)  
	FMovieSceneFloatChannel                            Shear[2];                                                   // 0x0418   (0x0140)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvalOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackEvalOptions
{ 
	bool                                               bCanEvaluateNearestSection : 1;                             // 0x0000:0 (0x0001)  
	bool                                               bEvalNearestSection : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0000:3 (0x0001)  
	bool                                               bEvaluateNearestSection : 1;                                // 0x0000:4 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationFieldEntry
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneTrackEvaluationFieldEntry
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	FFrameNumberRange                                  Range;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0018   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x001D   (0x0001)  MISSED
	int16_t                                            LegacySortOrder;                                            // 0x001E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationField
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackEvaluationField
{ 
	TArray<FMovieSceneTrackEvaluationFieldEntry>       Entries;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrack
/// Size: 0x0040 (64 bytes) (0x000050 - 0x000090) align 8 pad: 0x0000
class UMovieSceneTrack : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneTrackEvalOptions                        EvalOptions;                                                // 0x0050   (0x0004)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0054   (0x0001)  MISSED
	bool                                               bIsEvalDisabled;                                            // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	TArray<int32_t>                                    RowsDisabled;                                               // 0x0058   (0x0010)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0068   (0x0004)  MISSED
	FGuid                                              EvaluationFieldGuid;                                        // 0x006C   (0x0010)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	FMovieSceneTrackEvaluationField                    EvaluationField;                                            // 0x0080   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneNameableTrack
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieSceneNameableTrack : public UMovieSceneTrack
{ 
public:
};

/// Struct /Script/MovieScene.MovieScenePropertyBinding
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieScenePropertyBinding
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	FName                                              PropertyPath;                                               // 0x0008   (0x0008)  
	bool                                               bCanUseClassLookup;                                         // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyTrack
/// Size: 0x0030 (48 bytes) (0x000090 - 0x0000C0) align 8 pad: 0x0000
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{ 
public:
	class UMovieSceneSection*                          SectionToKey;                                               // 0x0090   (0x0008)  
	FMovieScenePropertyBinding                         PropertyBinding;                                            // 0x0098   (0x0014)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x00B0   (0x0010)  
};

/// Class /Script/UMG.MovieScene2DTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/UMG.MovieSceneMarginPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneMarginPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/UMG.MovieSceneMarginSection
/// Size: 0x0288 (648 bytes) (0x0000E8 - 0x000370) align 8 pad: 0x0000
class UMovieSceneMarginSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneFloatChannel                            TopCurve;                                                   // 0x00F0   (0x00A0)  
	FMovieSceneFloatChannel                            LeftCurve;                                                  // 0x0190   (0x00A0)  
	FMovieSceneFloatChannel                            RightCurve;                                                 // 0x0230   (0x00A0)  
	FMovieSceneFloatChannel                            BottomCurve;                                                // 0x02D0   (0x00A0)  
};

/// Class /Script/UMG.MovieSceneMarginTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0090   (0x0010)  
};

/// Class /Script/UMG.MovieSceneWidgetMaterialTrack
/// Size: 0x0020 (32 bytes) (0x0000A0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A0   (0x0008)  MISSED
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x00A8   (0x0010)  
	FName                                              TrackName;                                                  // 0x00B8   (0x0008)  
};

/// Class /Script/UMG.MultiLineEditableText
/// Size: 0x0348 (840 bytes) (0x000128 - 0x000470) align 8 pad: 0x0000
class UMultiLineEditableText : public UTextLayoutWidget
{ 
public:
	FText                                              Text;                                                       // 0x0128   (0x0018)  
	FText                                              HintText;                                                   // 0x0140   (0x0018)  
	SDK_UNDEFINED(16,297) /* FDelegateProperty */      __um(HintTextDelegate);                                     // 0x0158   (0x0010)  
	FTextBlockStyle                                    WidgetStyle;                                                // 0x0168   (0x0270)  
	bool                                               bIsReadOnly;                                                // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x03D9   (0x0007)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x03E0   (0x0058)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0438   (0x0001)  
	bool                                               ClearTextSelectionOnFocusLoss;                              // 0x0439   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x043A   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x043B   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x043C   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x043D   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x043E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x043F   (0x0001)  MISSED
	SDK_UNDEFINED(16,298) /* FMulticastInlineDelegate */ __um(OnTextChanged);                                      // 0x0440   (0x0010)  
	SDK_UNDEFINED(16,299) /* FMulticastInlineDelegate */ __um(OnTextCommitted);                                    // 0x0450   (0x0010)  
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0460   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.MultiLineEditableText.SetWidgetStyle
	// void SetWidgetStyle(FTextBlockStyle& InWidgetStyle);                                                                     // [0x37159c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetText
	// void SetText(FText InText);                                                                                              // [0x3715640] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetIsReadOnly
	// void SetIsReadOnly(bool bReadOnly);                                                                                      // [0x3715230] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.SetHintText
	// void SetHintText(FText InHintText);                                                                                      // [0x3714f60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextCommittedEvent__DelegateSignature
	// void OnMultiLineEditableTextCommittedEvent__DelegateSignature(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);       // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextChangedEvent__DelegateSignature
	// void OnMultiLineEditableTextChangedEvent__DelegateSignature(FText& Text);                                                // [0x24710f0] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/UMG.MultiLineEditableText.GetText
	// FText GetText();                                                                                                         // [0x3714900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.MultiLineEditableText.GetHintText
	// FText GetHintText();                                                                                                     // [0x3714780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.NamedSlot
/// Size: 0x0010 (16 bytes) (0x000120 - 0x000130) align 8 pad: 0x0000
class UNamedSlot : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED
};

/// Class /Script/UMG.NamedSlotInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNamedSlotInterface : public UInterface
{ 
public:
};

/// Class /Script/UMG.NativeWidgetHost
/// Size: 0x0010 (16 bytes) (0x000108 - 0x000118) align 8 pad: 0x0000
class UNativeWidgetHost : public UWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0108   (0x0010)  MISSED
};

/// Class /Script/UMG.SafeZone
/// Size: 0x0018 (24 bytes) (0x000120 - 0x000138) align 8 pad: 0x0000
class USafeZone : public UContentWidget
{ 
public:
	bool                                               PadLeft;                                                    // 0x0120   (0x0001)  
	bool                                               PadRight;                                                   // 0x0121   (0x0001)  
	bool                                               PadTop;                                                     // 0x0122   (0x0001)  
	bool                                               PadBottom;                                                  // 0x0123   (0x0001)  
	unsigned char                                      UnknownData00_7[0x14];                                      // 0x0124   (0x0014)  MISSED


	/// Functions
	// Function /Script/UMG.SafeZone.SetSidesToPad
	// void SetSidesToPad(bool InPadLeft, bool InPadRight, bool InPadTop, bool InPadBottom);                                    // [0x371a590] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SafeZoneSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class USafeZoneSlot : public UPanelSlot
{ 
public:
	bool                                               bIsTitleSafe;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FMargin                                            SafeAreaScale;                                              // 0x003C   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HAlign;                                                     // 0x004C   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VAlign;                                                     // 0x004D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	FMargin                                            Padding;                                                    // 0x0050   (0x0010)  
};

/// Class /Script/UMG.ScaleBox
/// Size: 0x0020 (32 bytes) (0x000120 - 0x000140) align 8 pad: 0x0000
class UScaleBox : public UContentWidget
{ 
public:
	TEnumAsByte<EStretch>                              Stretch;                                                    // 0x0120   (0x0001)  
	TEnumAsByte<EStretchDirection>                     StretchDirection;                                           // 0x0121   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x0122   (0x0002)  MISSED
	float                                              UserSpecifiedScale;                                         // 0x0124   (0x0004)  
	bool                                               IgnoreInheritedScale;                                       // 0x0128   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0129   (0x0017)  MISSED


	/// Functions
	// Function /Script/UMG.ScaleBox.SetUserSpecifiedScale
	// void SetUserSpecifiedScale(float InUserSpecifiedScale);                                                                  // [0x371aac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetStretchDirection
	// void SetStretchDirection(TEnumAsByte<EStretchDirection> InStretchDirection);                                             // [0x371a860] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetStretch
	// void SetStretch(TEnumAsByte<EStretch> InStretch);                                                                        // [0x371a7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBox.SetIgnoreInheritedScale
	// void SetIgnoreInheritedScale(bool bInIgnoreInheritedScale);                                                              // [0x3719ca0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScaleBoxSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UScaleBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x004A   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.ScaleBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x37096c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x371a130] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScaleBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3708810] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBar
/// Size: 0x0508 (1288 bytes) (0x000108 - 0x000610) align 8 pad: 0x0000
class UScrollBar : public UWidget
{ 
public:
	FScrollBarStyle                                    WidgetStyle;                                                // 0x0108   (0x04D0)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x05D8   (0x0008)  
	bool                                               bAlwaysShowScrollbar;                                       // 0x05E0   (0x0001)  
	bool                                               bAlwaysShowScrollbarTrack;                                  // 0x05E1   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x05E2   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x05E3   (0x0001)  MISSED
	FVector2D                                          Thickness;                                                  // 0x05E4   (0x0008)  
	FMargin                                            Padding;                                                    // 0x05EC   (0x0010)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x05FC   (0x0014)  MISSED


	/// Functions
	// Function /Script/UMG.ScrollBar.SetState
	// void SetState(float InOffsetFraction, float InThumbSizeFraction);                                                        // [0x371a710] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.ScrollBoxSlot
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UScrollBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0xE];                                       // 0x004A   (0x000E)  MISSED


	/// Functions
	// Function /Script/UMG.ScrollBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x371ab40] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x371a1c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.ScrollBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3719ba0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SizeBoxSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class USizeBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0048   (0x0010)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED


	/// Functions
	// Function /Script/UMG.SizeBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x371abc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x371a250] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SizeBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3719c20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.SlateBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute
	// FVector2D TransformVectorLocalToAbsolute(FGeometry& Geometry, FVector2D LocalVector);                                    // [0x371b040] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorAbsoluteToLocal
	// FVector2D TransformVectorAbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteVector);                                 // [0x371af40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarLocalToAbsolute
	// float TransformScalarLocalToAbsolute(FGeometry& Geometry, float LocalScalar);                                            // [0x371ae40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarAbsoluteToLocal
	// float TransformScalarAbsoluteToLocal(FGeometry& Geometry, float AbsoluteScalar);                                         // [0x371ad40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetLocal
	// void ScreenToWidgetLocal(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D ScreenPosition, FVector2D& LocalCoordinate, bool bIncludeWindowPosition); // [0x3719000] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetAbsolute
	// void ScreenToWidgetAbsolute(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& AbsoluteCoordinate, bool bIncludeWindowPosition); // [0x3718ea0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToViewport
	// void ScreenToViewport(class UObject* WorldContextObject, FVector2D ScreenPosition, FVector2D& ViewportPosition);         // [0x3718da0] Final|Native|Static|Public|HasOutParms|HasDefaults 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToViewport
	// void LocalToViewport(class UObject* WorldContextObject, FGeometry& Geometry, FVector2D LocalCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x3718bb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToAbsolute
	// FVector2D LocalToAbsolute(FGeometry& Geometry, FVector2D LocalCoordinate);                                               // [0x3718ab0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.IsUnderLocation
	// bool IsUnderLocation(FGeometry& Geometry, FVector2D& AbsoluteCoordinate);                                                // [0x37189b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalTopLeft
	// FVector2D GetLocalTopLeft(FGeometry& Geometry);                                                                          // [0x37187c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalSize
	// FVector2D GetLocalSize(FGeometry& Geometry);                                                                             // [0x3718700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.GetAbsoluteSize
	// FVector2D GetAbsoluteSize(FGeometry& Geometry);                                                                          // [0x37185a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.EqualEqual_SlateBrush
	// bool EqualEqual_SlateBrush(FSlateBrush& A, FSlateBrush& B);                                                              // [0x37183c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToViewport
	// void AbsoluteToViewport(class UObject* WorldContextObject, FVector2D AbsoluteDesktopCoordinate, FVector2D& PixelPosition, FVector2D& ViewportPosition); // [0x3718120] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToLocal
	// FVector2D AbsoluteToLocal(FGeometry& Geometry, FVector2D AbsoluteCoordinate);                                            // [0x3718020] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/UMG.SlateMeshVertex
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align 4 pad: 0x0000
struct FSlateMeshVertex
{ 
	FVector2D                                          position;                                                   // 0x0000   (0x0008)  
	FColor                                             Color;                                                      // 0x0008   (0x0004)  
	FVector2D                                          UV0;                                                        // 0x000C   (0x0008)  
	FVector2D                                          UV1;                                                        // 0x0014   (0x0008)  
	FVector2D                                          UV2;                                                        // 0x001C   (0x0008)  
	FVector2D                                          UV3;                                                        // 0x0024   (0x0008)  
	FVector2D                                          UV4;                                                        // 0x002C   (0x0008)  
	FVector2D                                          UV5;                                                        // 0x0034   (0x0008)  
};

/// Class /Script/UMG.SlateVectorArtData
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000060) align 8 pad: 0x0000
class USlateVectorArtData : public UObject
{ 
public:
	TArray<FSlateMeshVertex>                           VertexData;                                                 // 0x0028   (0x0010)  
	TArray<uint32_t>                                   IndexData;                                                  // 0x0038   (0x0010)  
	class UMaterialInterface*                          Material;                                                   // 0x0048   (0x0008)  
	FVector2D                                          ExtentMin;                                                  // 0x0050   (0x0008)  
	FVector2D                                          ExtentMax;                                                  // 0x0058   (0x0008)  
};

/// Class /Script/UMG.SlateAccessibleWidgetData
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000080) align 8 pad: 0x0000
class USlateAccessibleWidgetData : public UObject
{ 
public:
	bool                                               bCanChildrenBeAccessible;                                   // 0x0028   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleBehavior;                                         // 0x0029   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleSummaryBehavior;                                  // 0x002A   (0x0001)  
	unsigned char                                      UnknownData00_6[0x5];                                       // 0x002B   (0x0005)  MISSED
	FText                                              AccessibleText;                                             // 0x0030   (0x0018)  
	SDK_UNDEFINED(16,300) /* FDelegateProperty */      __um(AccessibleTextDelegate);                               // 0x0048   (0x0010)  
	FText                                              AccessibleSummaryText;                                      // 0x0058   (0x0018)  
	SDK_UNDEFINED(16,301) /* FDelegateProperty */      __um(AccessibleSummaryTextDelegate);                        // 0x0070   (0x0010)  
};

/// Class /Script/UMG.Spacer
/// Size: 0x0018 (24 bytes) (0x000108 - 0x000120) align 8 pad: 0x0000
class USpacer : public UWidget
{ 
public:
	FVector2D                                          Size;                                                       // 0x0108   (0x0008)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0110   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.Spacer.SetSize
	// void SetSize(FVector2D InSize);                                                                                          // [0x371e7b0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/UMG.SpinBox
/// Size: 0x0418 (1048 bytes) (0x000108 - 0x000520) align 8 pad: 0x0000
class USpinBox : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0108   (0x0004)  
	SDK_UNDEFINED(16,302) /* FDelegateProperty */      __um(ValueDelegate);                                        // 0x010C   (0x0010)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	FSpinBoxStyle                                      WidgetStyle;                                                // 0x0120   (0x02E8)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0408   (0x0008)  
	int32_t                                            MinFractionalDigits;                                        // 0x0410   (0x0004)  
	int32_t                                            MaxFractionalDigits;                                        // 0x0414   (0x0004)  
	bool                                               bAlwaysUsesDeltaSnap;                                       // 0x0418   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0419   (0x0003)  MISSED
	float                                              Delta;                                                      // 0x041C   (0x0004)  
	float                                              SliderExponent;                                             // 0x0420   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0424   (0x0004)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0428   (0x0058)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0480   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0481   (0x0003)  MISSED
	float                                              MinDesiredWidth;                                            // 0x0484   (0x0004)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0488   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x0489   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x048A   (0x0006)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x0490   (0x0028)  
	SDK_UNDEFINED(16,303) /* FMulticastInlineDelegate */ __um(OnValueChanged);                                     // 0x04B8   (0x0010)  
	SDK_UNDEFINED(16,304) /* FMulticastInlineDelegate */ __um(OnValueCommitted);                                   // 0x04C8   (0x0010)  
	SDK_UNDEFINED(16,305) /* FMulticastInlineDelegate */ __um(OnBeginSliderMovement);                              // 0x04D8   (0x0010)  
	SDK_UNDEFINED(16,306) /* FMulticastInlineDelegate */ __um(OnEndSliderMovement);                                // 0x04E8   (0x0010)  
	bool                                               bOverride_MinValue : 1;                                     // 0x04F8:0 (0x0001)  
	bool                                               bOverride_MaxValue : 1;                                     // 0x04F8:1 (0x0001)  
	bool                                               bOverride_MinSliderValue : 1;                               // 0x04F8:2 (0x0001)  
	bool                                               bOverride_MaxSliderValue : 1;                               // 0x04F8:3 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x04F9   (0x0003)  MISSED
	float                                              MinValue;                                                   // 0x04FC   (0x0004)  
	float                                              MaxValue;                                                   // 0x0500   (0x0004)  
	float                                              MinSliderValue;                                             // 0x0504   (0x0004)  
	float                                              MaxSliderValue;                                             // 0x0508   (0x0004)  
	unsigned char                                      UnknownData06_7[0x14];                                      // 0x050C   (0x0014)  MISSED


	/// Functions
	// Function /Script/UMG.SpinBox.SetValue
	// void SetValue(float NewValue);                                                                                           // [0x371ecc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinValue
	// void SetMinValue(float NewValue);                                                                                        // [0x371e510] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinSliderValue
	// void SetMinSliderValue(float NewValue);                                                                                  // [0x371e410] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMinFractionalDigits
	// void SetMinFractionalDigits(int32_t NewValue);                                                                           // [0x371e380] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxValue
	// void SetMaxValue(float NewValue);                                                                                        // [0x371e280] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxSliderValue
	// void SetMaxSliderValue(float NewValue);                                                                                  // [0x371e180] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetMaxFractionalDigits
	// void SetMaxFractionalDigits(int32_t NewValue);                                                                           // [0x371e0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetForegroundColor
	// void SetForegroundColor(FSlateColor InForegroundColor);                                                                  // [0x371de60] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetDelta
	// void SetDelta(float NewValue);                                                                                           // [0x371dbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.SetAlwaysUsesDeltaSnap
	// void SetAlwaysUsesDeltaSnap(bool bNewValue);                                                                             // [0x371d800] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueCommittedEvent__DelegateSignature
	// void OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, TEnumAsByte<ETextCommit> CommitMethod);              // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueChangedEvent__DelegateSignature
	// void OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);                                                       // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.OnSpinBoxBeginSliderMovement__DelegateSignature
	// void OnSpinBoxBeginSliderMovement__DelegateSignature();                                                                  // [0x24710f0] MulticastDelegate|Public|Delegate 
	// Function /Script/UMG.SpinBox.GetValue
	// float GetValue();                                                                                                        // [0x371d7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinValue
	// float GetMinValue();                                                                                                     // [0x371d580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinSliderValue
	// float GetMinSliderValue();                                                                                               // [0x371d550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMinFractionalDigits
	// int32_t GetMinFractionalDigits();                                                                                        // [0x371d520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxValue
	// float GetMaxValue();                                                                                                     // [0x371d4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxSliderValue
	// float GetMaxSliderValue();                                                                                               // [0x371d4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetMaxFractionalDigits
	// int32_t GetMaxFractionalDigits();                                                                                        // [0x371d490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetDelta
	// float GetDelta();                                                                                                        // [0x371d3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.GetAlwaysUsesDeltaSnap
	// bool GetAlwaysUsesDeltaSnap();                                                                                           // [0x371d390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.SpinBox.ClearMinValue
	// void ClearMinValue();                                                                                                    // [0x371d370] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMinSliderValue
	// void ClearMinSliderValue();                                                                                              // [0x371d350] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMaxValue
	// void ClearMaxValue();                                                                                                    // [0x371d330] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.SpinBox.ClearMaxSliderValue
	// void ClearMaxSliderValue();                                                                                              // [0x371d310] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.TextBinding
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UTextBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0060   (0x0008)  MISSED


	/// Functions
	// Function /Script/UMG.TextBinding.GetTextValue
	// FText GetTextValue();                                                                                                    // [0x371d700] Final|Native|Public|Const 
	// Function /Script/UMG.TextBinding.GetStringValue
	// FString GetStringValue();                                                                                                // [0x371d5e0] Final|Native|Public|Const 
};

/// Class /Script/UMG.Throbber
/// Size: 0x00A8 (168 bytes) (0x000108 - 0x0001B0) align 8 pad: 0x0000
class UThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0108   (0x0004)  
	bool                                               bAnimateHorizontally;                                       // 0x010C   (0x0001)  
	bool                                               bAnimateVertically;                                         // 0x010D   (0x0001)  
	bool                                               bAnimateOpacity;                                            // 0x010E   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x010F   (0x0001)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0110   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0118   (0x0088)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x01A0   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.Throbber.SetNumberOfPieces
	// void SetNumberOfPieces(int32_t InNumberOfPieces);                                                                        // [0x371e590] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateVertically
	// void SetAnimateVertically(bool bInAnimateVertically);                                                                    // [0x371d9b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateOpacity
	// void SetAnimateOpacity(bool bInAnimateOpacity);                                                                          // [0x371d920] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Throbber.SetAnimateHorizontally
	// void SetAnimateHorizontally(bool bInAnimateHorizontally);                                                                // [0x371d890] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/MovieScene.MovieSceneRootEvaluationTemplateInstance
/// Size: 0x00E8 (232 bytes) (0x000000 - 0x0000E8) align 8 pad: 0x0000
struct FMovieSceneRootEvaluationTemplateInstance
{ 
	SDK_UNDEFINED(8,307) /* TWeakObjectPtr<UMovieSceneSequence*> */ __um(WeakRootSequence);                        // 0x0000   (0x0008)  
	class UMovieSceneCompiledDataManager*              CompiledDataManager;                                        // 0x0008   (0x0008)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0010   (0x0008)  MISSED
	class UMovieSceneEntitySystemLinker*               EntitySystemLinker;                                         // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_6[0x70];                                      // 0x0020   (0x0070)  MISSED
	SDK_UNDEFINED(80,308) /* TMap<FMovieSceneSequenceID, UObject*> */ __um(DirectorInstances);                     // 0x0090   (0x0050)  
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x00E0   (0x0008)  MISSED
};

/// Class /Script/UMG.UMGSequencePlayer
/// Size: 0x03A0 (928 bytes) (0x000028 - 0x0003C8) align 8 pad: 0x0000
class UUMGSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x238];                                     // 0x0028   (0x0238)  MISSED
	class UWidgetAnimation*                            Animation;                                                  // 0x0260   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0268   (0x0008)  MISSED
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x0270   (0x00E8)  
	unsigned char                                      UnknownData02_7[0x70];                                      // 0x0358   (0x0070)  MISSED


	/// Functions
	// Function /Script/UMG.UMGSequencePlayer.SetUserTag
	// void SetUserTag(FName InUserTag);                                                                                        // [0x37256b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UMGSequencePlayer.GetUserTag
	// FName GetUserTag();                                                                                                      // [0x3723ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.UMGSequenceTickManager
/// Size: 0x00F8 (248 bytes) (0x000028 - 0x000120) align 8 pad: 0x0000
class UUMGSequenceTickManager : public UObject
{ 
public:
	SDK_UNDEFINED(80,309) /* TSet<TWeakObjectPtr<UUserWidget*>> */ __um(WeakUserWidgets);                          // 0x0028   (0x0050)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0078   (0x0008)  
	unsigned char                                      UnknownData00_7[0xA0];                                      // 0x0080   (0x00A0)  MISSED
};

/// Class /Script/UMG.UniformGridSlot
/// Size: 0x0018 (24 bytes) (0x000038 - 0x000050) align 8 pad: 0x0000
class UUniformGridSlot : public UPanelSlot
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0038   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0039   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x003C   (0x0004)  
	int32_t                                            Column;                                                     // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0044   (0x000C)  MISSED


	/// Functions
	// Function /Script/UMG.UniformGridSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3725740] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetRow
	// void SetRow(int32_t InRow);                                                                                              // [0x3725590] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3724e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.UniformGridSlot.SetColumn
	// void SetColumn(int32_t InColumn);                                                                                        // [0x3724c90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBox
/// Size: 0x0010 (16 bytes) (0x000120 - 0x000130) align 8 pad: 0x0000
class UVerticalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0120   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.VerticalBox.AddChildToVerticalBox
	// class UVerticalBoxSlot* AddChildToVerticalBox(class UWidget* Content);                                                   // [0x3727900] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.VerticalBoxSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UVerticalBoxSlot : public UPanelSlot
{ 
public:
	FSlateChildSize                                    Size;                                                       // 0x0038   (0x0008)  
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED


	/// Functions
	// Function /Script/UMG.VerticalBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3729320] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetSize
	// void SetSize(FSlateChildSize InSize);                                                                                    // [0x37290a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3728c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.VerticalBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3728670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.Viewport
/// Size: 0x0048 (72 bytes) (0x000120 - 0x000168) align 8 pad: 0x0000
class UViewport : public UContentWidget
{ 
public:
	FLinearColor                                       BackgroundColor;                                            // 0x0120   (0x0010)  
	unsigned char                                      UnknownData00_7[0x38];                                      // 0x0130   (0x0038)  MISSED


	/// Functions
	// Function /Script/UMG.Viewport.Spawn
	// class AActor* Spawn(class UClass* ActorClass);                                                                           // [0x3729540] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.Viewport.SetViewRotation
	// void SetViewRotation(FRotator Rotation);                                                                                 // [0x3729430] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Viewport.SetViewLocation
	// void SetViewLocation(FVector Location);                                                                                  // [0x37293a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.Viewport.GetViewRotation
	// FRotator GetViewRotation();                                                                                              // [0x37280a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Viewport.GetViewportWorld
	// class UWorld* GetViewportWorld();                                                                                        // [0x37280e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.Viewport.GetViewLocation
	// FVector GetViewLocation();                                                                                               // [0x3728060] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.VisibilityBinding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UVisibilityBinding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.VisibilityBinding.GetValue
	// ESlateVisibility GetValue();                                                                                             // [0x3728030] Final|Native|Public|Const 
};

/// Class /Script/MovieScene.MovieSceneSequence
/// Size: 0x0010 (16 bytes) (0x000050 - 0x000060) align 8 pad: 0x0000
class UMovieSceneSequence : public UMovieSceneSignedObject
{ 
public:
	class UMovieSceneCompiledData*                     CompiledData;                                               // 0x0050   (0x0008)  
	EMovieSceneCompletionMode                          DefaultCompletionMode;                                      // 0x0058   (0x0001)  
	bool                                               bParentContextsAreSignificant;                              // 0x0059   (0x0001)  
	bool                                               bPlayableDirectly;                                          // 0x005A   (0x0001)  
	EMovieSceneSequenceFlags                           SequenceFlags;                                              // 0x005B   (0x0001)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x005C   (0x0004)  MISSED


	/// Functions
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingsByTag
	// TArray<FMovieSceneObjectBindingID> FindBindingsByTag(FName InBindingName);                                               // [0x3510860] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingByTag
	// FMovieSceneObjectBindingID FindBindingByTag(FName InBindingName);                                                        // [0x35107b0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/UMG.WidgetAnimationBinding
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FWidgetAnimationBinding
{ 
	FName                                              WidgetName;                                                 // 0x0000   (0x0008)  
	FName                                              SlotWidgetName;                                             // 0x0008   (0x0008)  
	FGuid                                              AnimationGuid;                                              // 0x0010   (0x0010)  
	bool                                               bIsRootWidget;                                              // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0021   (0x0003)  MISSED
};

/// Class /Script/UMG.WidgetAnimation
/// Size: 0x0030 (48 bytes) (0x000060 - 0x000090) align 8 pad: 0x0000
class UWidgetAnimation : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0060   (0x0008)  
	TArray<FWidgetAnimationBinding>                    AnimationBindings;                                          // 0x0068   (0x0010)  
	bool                                               bLegacyFinishOnStop;                                        // 0x0078   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FString                                            DisplayLabel;                                               // 0x0080   (0x0010)  


	/// Functions
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationStarted
	// void UnbindFromAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                  // [0x37297e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationFinished
	// void UnbindFromAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                 // [0x3729700] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationStarted
	// void UnbindAllFromAnimationStarted(class UUserWidget* Widget);                                                           // [0x3729670] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationFinished
	// void UnbindAllFromAnimationFinished(class UUserWidget* Widget);                                                          // [0x37295e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.GetStartTime
	// float GetStartTime();                                                                                                    // [0x3727fc0] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetAnimation.GetEndTime
	// float GetEndTime();                                                                                                      // [0x3727e00] Final|RequiredAPI|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationStarted
	// void BindToAnimationStarted(class UUserWidget* Widget, FDelegateProperty Delegate);                                      // [0x3727a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationFinished
	// void BindToAnimationFinished(class UUserWidget* Widget, FDelegateProperty Delegate);                                     // [0x37279a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.BlueprintWidgetAnimationDelegateBinding
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FBlueprintWidgetAnimationDelegateBinding
{ 
	EWidgetAnimationEvent                              Action;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              AnimationToBind;                                            // 0x0004   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x000C   (0x0008)  
	FName                                              UserTag;                                                    // 0x0014   (0x0008)  
};

/// Class /Script/UMG.WidgetAnimationDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintWidgetAnimationDelegateBinding>   WidgetAnimationDelegateBindings;                            // 0x0028   (0x0010)  
};

/// Class /Script/UMG.WidgetAnimationPlayCallbackProxy
/// Size: 0x0020 (32 bytes) (0x000028 - 0x000048) align 8 pad: 0x0000
class UWidgetAnimationPlayCallbackProxy : public UObject
{ 
public:
	SDK_UNDEFINED(16,310) /* FMulticastInlineDelegate */ __um(Finished);                                           // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED


	/// Functions
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationTimeRangeProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x372c700] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationProxyObject
	// class UWidgetAnimationPlayCallbackProxy* CreatePlayAnimationProxyObject(class UUMGSequencePlayer*& Result, class UUserWidget* Widget, class UWidgetAnimation* InAnimation, float StartAtTime, int32_t NumLoopsToPlay, TEnumAsByte<EUMGSequencePlayMode> PlayMode, float PlaybackSpeed); // [0x372c4e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/UMG.WidgetBinding
/// Size: 0x0000 (0 bytes) (0x000060 - 0x000060) align 8 pad: 0x0000
class UWidgetBinding : public UPropertyBinding
{ 
public:


	/// Functions
	// Function /Script/UMG.WidgetBinding.GetValue
	// class UWidget* GetValue();                                                                                               // [0x372e910] Final|Native|Public|Const 
};

/// Struct /Script/UMG.DelegateRuntimeBinding
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 8 pad: 0x0000
struct FDelegateRuntimeBinding
{ 
	FString                                            ObjectName;                                                 // 0x0000   (0x0010)  
	FName                                              PropertyName;                                               // 0x0010   (0x0008)  
	FName                                              FunctionName;                                               // 0x0018   (0x0008)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0020   (0x0028)  
	EBindingKind                                       Kind;                                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/UMG.WidgetBlueprintGeneratedClass
/// Size: 0x0040 (64 bytes) (0x000328 - 0x000368) align 8 pad: 0x0000
class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	class UWidgetTree*                                 WidgetTree;                                                 // 0x0328   (0x0008)  
	bool                                               bClassRequiresNativeTick : 1;                               // 0x0330:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x7];                                       // 0x0331   (0x0007)  MISSED
	TArray<FDelegateRuntimeBinding>                    Bindings;                                                   // 0x0338   (0x0010)  
	TArray<class UWidgetAnimation*>                    Animations;                                                 // 0x0348   (0x0010)  
	TArray<FName>                                      NamedSlots;                                                 // 0x0358   (0x0010)  
};

/// Class /Script/UMG.WidgetBlueprintLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/UMG.WidgetBlueprintLibrary.UnlockMouse
	// FEventReply UnlockMouse(FEventReply& Reply);                                                                             // [0x37308d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.Unhandled
	// FEventReply Unhandled();                                                                                                 // [0x3730860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarState
	// void SetWindowTitleBarState(class UWidget* TitleBarContent, EWindowTitleBarMode Mode, bool bTitleBarDragEnabled, bool bWindowButtonsVisible, bool bTitleBarVisible); // [0x3730640] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarOnCloseClickedDelegate
	// void SetWindowTitleBarOnCloseClickedDelegate(FDelegateProperty Delegate);                                                // [0x37305b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarCloseButtonActive
	// void SetWindowTitleBarCloseButtonActive(bool bActive);                                                                   // [0x3730530] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetUserFocus
	// FEventReply SetUserFocus(FEventReply& Reply, class UWidget* FocusWidget, bool bInAllUsers);                              // [0x372bf80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetMousePosition
	// FEventReply SetMousePosition(FEventReply& Reply, FVector2D NewMousePosition);                                            // [0x372fe90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnlyEx
	// void SetInputMode_UIOnlyEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode); // [0x372fd00] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnly
	// void SetInputMode_UIOnly(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport);    // [0x372fc00] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameOnly
	// void SetInputMode_GameOnly(class APlayerController* PlayerController);                                                   // [0x372fb80] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUIEx
	// void SetInputMode_GameAndUIEx(class APlayerController* PlayerController, class UWidget* InWidgetToFocus, EMouseLockMode InMouseLockMode, bool bHideCursorDuringCapture); // [0x372fa30] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUI
	// void SetInputMode_GameAndUI(class APlayerController* Target, class UWidget* InWidgetToFocus, bool bLockMouseToViewport, bool bHideCursorDuringCapture); // [0x372f8d0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetHardwareCursor
	// bool SetHardwareCursor(class UObject* WorldContextObject, TEnumAsByte<EMouseCursor> CursorShape, FName CursorName, FVector2D HotSpot); // [0x372f790] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetFocusToGameViewport
	// void SetFocusToGameViewport();                                                                                           // [0x372f6f0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetColorVisionDeficiencyType
	// void SetColorVisionDeficiencyType(EColorVisionDeficiency Type, float Severity, bool CorrectDeficiency, bool ShowCorrectionWithDeficiency); // [0x372f400] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToTexture
	// void SetBrushResourceToTexture(FSlateBrush& Brush, class UTexture2D* Texture);                                           // [0x372f2b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToMaterial
	// void SetBrushResourceToMaterial(FSlateBrush& Brush, class UMaterialInterface* Material);                                 // [0x372f2b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.RestorePreviousWindowTitleBarState
	// void RestorePreviousWindowTitleBarState();                                                                               // [0x372f200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseMouseCapture
	// FEventReply ReleaseMouseCapture(FEventReply& Reply);                                                                     // [0x372f0d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseJoystickCapture
	// FEventReply ReleaseJoystickCapture(FEventReply& Reply, bool bInAllJoysticks);                                            // [0x372c220] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.OnGameWindowCloseButtonClickedDelegate__DelegateSignature
	// void OnGameWindowCloseButtonClickedDelegate__DelegateSignature();                                                        // [0x24710f0] Public|Delegate      
	// Function /Script/UMG.WidgetBlueprintLibrary.NoResourceBrush
	// FSlateBrush NoResourceBrush();                                                                                           // [0x372f020] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromTexture
	// FSlateBrush MakeBrushFromTexture(class UTexture2D* Texture, int32_t Width, int32_t Height);                              // [0x372ee80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromMaterial
	// FSlateBrush MakeBrushFromMaterial(class UMaterialInterface* Material, int32_t Width, int32_t Height);                    // [0x372ece0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromAsset
	// FSlateBrush MakeBrushFromAsset(class USlateBrushAsset* BrushAsset);                                                      // [0x372ebd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.LockMouse
	// FEventReply LockMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                               // [0x372eaa0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.IsDragDropping
	// bool IsDragDropping();                                                                                                   // [0x372ea40] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.Handled
	// FEventReply Handled();                                                                                                   // [0x372e9d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetSafeZonePadding
	// void GetSafeZonePadding(class UObject* WorldContextObject, FVector4& SafePadding, FVector2D& SafePaddingScale, FVector4& SpillOverPadding); // [0x372e720] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetKeyEventFromAnalogInputEvent
	// FKeyEvent GetKeyEventFromAnalogInputEvent(FAnalogInputEvent& Event);                                                     // [0x372e4c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromPointerEvent
	// FInputEvent GetInputEventFromPointerEvent(FPointerEvent& Event);                                                         // [0x372e370] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromNavigationEvent
	// FInputEvent GetInputEventFromNavigationEvent(FNavigationEvent& Event);                                                   // [0x372e290] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromKeyEvent
	// FInputEvent GetInputEventFromKeyEvent(FKeyEvent& Event);                                                                 // [0x372e170] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromCharacterEvent
	// FInputEvent GetInputEventFromCharacterEvent(FCharacterEvent& Event);                                                     // [0x372e090] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDynamicMaterial
	// class UMaterialInstanceDynamic* GetDynamicMaterial(FSlateBrush& Brush);                                                  // [0x372df60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDragDroppingContent
	// class UDragDropOperation* GetDragDroppingContent();                                                                      // [0x372ded0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsTexture2D
	// class UTexture2D* GetBrushResourceAsTexture2D(FSlateBrush& Brush);                                                       // [0x372dd60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsMaterial
	// class UMaterialInterface* GetBrushResourceAsMaterial(FSlateBrush& Brush);                                                // [0x372dc50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResource
	// class UObject* GetBrushResource(FSlateBrush& Brush);                                                                     // [0x372db40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsWithInterface
	// void GetAllWidgetsWithInterface(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* Interface, bool TopLevelOnly); // [0x372d9d0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsOfClass
	// void GetAllWidgetsOfClass(class UObject* WorldContextObject, TArray<UUserWidget*>& FoundWidgets, class UClass* WidgetClass, bool TopLevelOnly); // [0x372d860] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.EndDragDrop
	// FEventReply EndDragDrop(FEventReply& Reply);                                                                             // [0x372d770] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawTextFormatted
	// void DrawTextFormatted(FPaintContext& Context, FText& Text, FVector2D position, class UFont* Font, int32_t FontSize, FName FontTypeFace, FLinearColor Tint); // [0x372d4f0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawText
	// void DrawText(FPaintContext& Context, FString inString, FVector2D position, FLinearColor Tint);                          // [0x372d360] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLines
	// void DrawLines(FPaintContext& Context, TArray<FVector2D>& Points, FLinearColor Tint, bool bAntiAlias, float Thickness);  // [0x372d180] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLine
	// void DrawLine(FPaintContext& Context, FVector2D PositionA, FVector2D PositionB, FLinearColor Tint, bool bAntiAlias, float Thickness); // [0x372cf70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawBox
	// void DrawBox(FPaintContext& Context, FVector2D position, FVector2D Size, class USlateBrushAsset* Brush, FLinearColor Tint); // [0x372cdb0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DismissAllMenus
	// void DismissAllMenus();                                                                                                  // [0x372cd90] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDragIfPressed
	// FEventReply DetectDragIfPressed(FPointerEvent& PointerEvent, class UWidget* WidgetDetectingDrag, FKey DragKey);          // [0x372cb40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDrag
	// FEventReply DetectDrag(FEventReply& Reply, class UWidget* WidgetDetectingDrag, FKey DragKey);                            // [0x372c960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CreateDragDropOperation
	// class UDragDropOperation* CreateDragDropOperation(class UClass* OperationClass);                                         // [0x372c450] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.Create
	// class UUserWidget* Create(class UObject* WorldContextObject, class UClass* WidgetType, class APlayerController* OwningPlayer); // [0x372c350] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetBlueprintLibrary.ClearUserFocus
	// FEventReply ClearUserFocus(FEventReply& Reply, bool bInAllUsers);                                                        // [0x372c220] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureMouse
	// FEventReply CaptureMouse(FEventReply& Reply, class UWidget* CapturingWidget);                                            // [0x372c0f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureJoystick
	// FEventReply CaptureJoystick(FEventReply& Reply, class UWidget* CapturingWidget, bool bInAllJoysticks);                   // [0x372bf80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetBlueprintLibrary.CancelDragDrop
	// void CancelDragDrop();                                                                                                   // [0x372bf60] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetInteractionComponent
/// Size: 0x01F8 (504 bytes) (0x0001F8 - 0x0003F0) align 16 pad: 0x0000
class UWidgetInteractionComponent : public USceneComponent
{ 
public:
	SDK_UNDEFINED(16,311) /* FMulticastInlineDelegate */ __um(OnHoveredWidgetChanged);                             // 0x01F8   (0x0010)  
	unsigned char                                      UnknownData00_6[0x10];                                      // 0x0208   (0x0010)  MISSED
	int32_t                                            VirtualUserIndex;                                           // 0x0218   (0x0004)  
	int32_t                                            PointerIndex;                                               // 0x021C   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0220   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0221   (0x0003)  MISSED
	float                                              InteractionDistance;                                        // 0x0224   (0x0004)  
	EWidgetInteractionSource                           InteractionSource;                                          // 0x0228   (0x0001)  
	bool                                               bEnableHitTesting;                                          // 0x0229   (0x0001)  
	bool                                               bShowDebug;                                                 // 0x022A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x022B   (0x0001)  MISSED
	float                                              DebugSphereLineThickness;                                   // 0x022C   (0x0004)  
	float                                              DebugLineThickness;                                         // 0x0230   (0x0004)  
	FLinearColor                                       DebugColor;                                                 // 0x0234   (0x0010)  
	unsigned char                                      UnknownData03_6[0x7C];                                      // 0x0244   (0x007C)  MISSED
	FHitResult                                         CustomHitResult;                                            // 0x02C0   (0x0088)  
	FVector2D                                          LocalHitLocation;                                           // 0x0348   (0x0008)  
	FVector2D                                          LastLocalHitLocation;                                       // 0x0350   (0x0008)  
	class UWidgetComponent*                            HoveredWidgetComponent;                                     // 0x0358   (0x0008)  
	FHitResult                                         LastHitResult;                                              // 0x0360   (0x0088)  
	bool                                               bIsHoveredWidgetInteractable;                               // 0x03E8   (0x0001)  
	bool                                               bIsHoveredWidgetFocusable;                                  // 0x03E9   (0x0001)  
	bool                                               bIsHoveredWidgetHitTestVisible;                             // 0x03EA   (0x0001)  
	unsigned char                                      UnknownData04_7[0x5];                                       // 0x03EB   (0x0005)  MISSED


	/// Functions
	// Function /Script/UMG.WidgetInteractionComponent.SetFocus
	// void SetFocus(class UWidget* FocusWidget);                                                                               // [0x3733700] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.SetCustomHitResult
	// void SetCustomHitResult(FHitResult& HitResult);                                                                          // [0x3733510] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.SendKeyChar
	// bool SendKeyChar(FString Characters, bool bRepeat);                                                                      // [0x37333c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ScrollWheel
	// void ScrollWheel(float ScrollDelta);                                                                                     // [0x3733330] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ReleasePointerKey
	// void ReleasePointerKey(FKey Key);                                                                                        // [0x37331c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.ReleaseKey
	// bool ReleaseKey(FKey Key);                                                                                               // [0x37330c0] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressPointerKey
	// void PressPointerKey(FKey Key);                                                                                          // [0x3732e60] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressKey
	// bool PressKey(FKey Key, bool bRepeat);                                                                                   // [0x3732d20] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.PressAndReleaseKey
	// bool PressAndReleaseKey(FKey Key);                                                                                       // [0x3732c20] Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverInteractableWidget
	// bool IsOverInteractableWidget();                                                                                         // [0x3732bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverHitTestVisibleWidget
	// bool IsOverHitTestVisibleWidget();                                                                                       // [0x3732bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverFocusableWidget
	// bool IsOverFocusableWidget();                                                                                            // [0x3732b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.GetLastHitResult
	// FHitResult GetLastHitResult();                                                                                           // [0x3732670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.GetHoveredWidgetComponent
	// class UWidgetComponent* GetHoveredWidgetComponent();                                                                     // [0x3732640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/UMG.WidgetInteractionComponent.Get2DHitLocation
	// FVector2D Get2DHitLocation();                                                                                            // [0x37325a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/UMG.WidgetLayoutLibrary
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
{ 
public:


	/// Functions
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot
	// class UWrapBoxSlot* SlotAsWrapBoxSlot(class UWidget* Widget);                                                            // [0x3734510] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWidgetSwitcherSlot
	// class UWidgetSwitcherSlot* SlotAsWidgetSwitcherSlot(class UWidget* Widget);                                              // [0x3734480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsVerticalBoxSlot
	// class UVerticalBoxSlot* SlotAsVerticalBoxSlot(class UWidget* Widget);                                                    // [0x37343f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsUniformGridSlot
	// class UUniformGridSlot* SlotAsUniformGridSlot(class UWidget* Widget);                                                    // [0x3734360] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSizeBoxSlot
	// class USizeBoxSlot* SlotAsSizeBoxSlot(class UWidget* Widget);                                                            // [0x37342d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScrollBoxSlot
	// class UScrollBoxSlot* SlotAsScrollBoxSlot(class UWidget* Widget);                                                        // [0x3734240] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScaleBoxSlot
	// class UScaleBoxSlot* SlotAsScaleBoxSlot(class UWidget* Widget);                                                          // [0x37341b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSafeBoxSlot
	// class USafeZoneSlot* SlotAsSafeBoxSlot(class UWidget* Widget);                                                           // [0x3734120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsOverlaySlot
	// class UOverlaySlot* SlotAsOverlaySlot(class UWidget* Widget);                                                            // [0x3734090] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsHorizontalBoxSlot
	// class UHorizontalBoxSlot* SlotAsHorizontalBoxSlot(class UWidget* Widget);                                                // [0x3734000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsGridSlot
	// class UGridSlot* SlotAsGridSlot(class UWidget* Widget);                                                                  // [0x3733f70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsCanvasSlot
	// class UCanvasPanelSlot* SlotAsCanvasSlot(class UWidget* Widget);                                                         // [0x3733ee0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsBorderSlot
	// class UBorderSlot* SlotAsBorderSlot(class UWidget* Widget);                                                              // [0x3733e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.RemoveAllWidgets
	// void RemoveAllWidgets(class UObject* WorldContextObject);                                                                // [0x37332b0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.ProjectWorldLocationToWidgetPosition
	// bool ProjectWorldLocationToWidgetPosition(class APlayerController* PlayerController, FVector WorldLocation, FVector2D& ScreenPosition, bool bPlayerViewportRelative); // [0x3732f50] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportWidgetGeometry
	// FGeometry GetViewportWidgetGeometry(class UObject* WorldContextObject);                                                  // [0x3732ae0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportSize
	// FVector2D GetViewportSize(class UObject* WorldContextObject);                                                            // [0x3732a50] Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportScale
	// float GetViewportScale(class UObject* WorldContextObject);                                                               // [0x37329c0] Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetPlayerScreenWidgetGeometry
	// FGeometry GetPlayerScreenWidgetGeometry(class APlayerController* PlayerController);                                      // [0x3732910] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionScaledByDPI
	// bool GetMousePositionScaledByDPI(class APlayerController* Player, float& LocationX, float& LocationY);                   // [0x37327c0] Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnViewport
	// FVector2D GetMousePositionOnViewport(class UObject* WorldContextObject);                                                 // [0x3732730] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnPlatform
	// FVector2D GetMousePositionOnPlatform();                                                                                  // [0x37326f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/UMG.WidgetNavigationData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FWidgetNavigationData
{ 
	EUINavigationRule                                  Rule;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              WidgetToFocus;                                              // 0x0004   (0x0008)  
	SDK_UNDEFINED(8,312) /* TWeakObjectPtr<UWidget*> */ __um(Widget);                                              // 0x000C   (0x0008)  
	SDK_UNDEFINED(16,313) /* FDelegateProperty */      __um(CustomDelegate);                                       // 0x0014   (0x0010)  
};

/// Class /Script/UMG.WidgetNavigation
/// Size: 0x00D8 (216 bytes) (0x000028 - 0x000100) align 8 pad: 0x0000
class UWidgetNavigation : public UObject
{ 
public:
	FWidgetNavigationData                              Up;                                                         // 0x0028   (0x0024)  
	FWidgetNavigationData                              Down;                                                       // 0x004C   (0x0024)  
	FWidgetNavigationData                              Left;                                                       // 0x0070   (0x0024)  
	FWidgetNavigationData                              Right;                                                      // 0x0094   (0x0024)  
	FWidgetNavigationData                              Next;                                                       // 0x00B8   (0x0024)  
	FWidgetNavigationData                              Previous;                                                   // 0x00DC   (0x0024)  
};

/// Class /Script/UMG.WidgetSwitcherSlot
/// Size: 0x0020 (32 bytes) (0x000038 - 0x000058) align 8 pad: 0x0000
class UWidgetSwitcherSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0052   (0x0006)  MISSED


	/// Functions
	// Function /Script/UMG.WidgetSwitcherSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3733c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcherSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3733a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WidgetSwitcherSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3733790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WidgetTree
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
class UWidgetTree : public UObject
{ 
public:
	class UWidget*                                     RootWidget;                                                 // 0x0028   (0x0008)  
};

/// Class /Script/UMG.WindowTitleBarArea
/// Size: 0x0020 (32 bytes) (0x000120 - 0x000140) align 8 pad: 0x0000
class UWindowTitleBarArea : public UContentWidget
{ 
public:
	bool                                               bWindowButtonsEnabled;                                      // 0x0120   (0x0001)  
	bool                                               bDoubleClickTogglesFullscreen;                              // 0x0121   (0x0001)  
	unsigned char                                      UnknownData00_7[0x1E];                                      // 0x0122   (0x001E)  MISSED


	/// Functions
	// Function /Script/UMG.WindowTitleBarArea.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3733cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarArea.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3733aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarArea.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3733810] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WindowTitleBarAreaSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UWindowTitleBarAreaSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData00_7[0x16];                                      // 0x004A   (0x0016)  MISSED


	/// Functions
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3733d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3733b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3733890] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/UMG.WrapBoxSlot
/// Size: 0x0028 (40 bytes) (0x000038 - 0x000060) align 8 pad: 0x0000
class UWrapBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	bool                                               bFillEmptySpace;                                            // 0x0048   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              FillSpanWhenLessThan;                                       // 0x004C   (0x0004)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_7[0xE];                                       // 0x0052   (0x000E)  MISSED


	/// Functions
	// Function /Script/UMG.WrapBoxSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x3733dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetPadding
	// void SetPadding(FMargin InPadding);                                                                                      // [0x3733bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x3733910] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetFillSpanWhenLessThan
	// void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan);                                                              // [0x3733680] Final|Native|Public|BlueprintCallable 
	// Function /Script/UMG.WrapBoxSlot.SetFillEmptySpace
	// void SetFillEmptySpace(bool InbFillEmptySpace);                                                                          // [0x37335f0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/UMG.EventReply
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align 8 pad: 0x0000
struct FEventReply
{ 
	unsigned char                                      UnknownData00_2[0xB8];                                      // 0x0000   (0x00B8)  MISSED
};

/// Struct /Script/UMG.PaintContext
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FPaintContext
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplateBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneEvalTemplateBase
{ 
	unsigned char                                      UnknownData00_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplate
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvalTemplate : FMovieSceneEvalTemplateBase
{ 
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	SDK_UNDEFINED(8,314) /* TWeakObjectPtr<UMovieSceneSection*> */ __um(SourceSectionPtr);                         // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.ScalarParameterNameAndCurve
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FScalarParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            ParameterCurve;                                             // 0x0008   (0x00A0)  
};

/// Struct /Script/MovieScene.MovieSceneBoolChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneBoolChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	bool                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<bool>                                       Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieSceneTracks.BoolParameterNameAndCurve
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align 8 pad: 0x0000
struct FBoolParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneBoolChannel                             ParameterCurve;                                             // 0x0008   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.Vector2DParameterNameAndCurves
/// Size: 0x0148 (328 bytes) (0x000000 - 0x000148) align 8 pad: 0x0000
struct FVector2DParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00A8   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.VectorParameterNameAndCurves
/// Size: 0x01E8 (488 bytes) (0x000000 - 0x0001E8) align 8 pad: 0x0000
struct FVectorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00A8   (0x00A0)  
	FMovieSceneFloatChannel                            ZCurve;                                                     // 0x0148   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.ColorParameterNameAndCurves
/// Size: 0x0288 (648 bytes) (0x000000 - 0x000288) align 8 pad: 0x0000
struct FColorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x00A8   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0148   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x01E8   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.TransformParameterNameAndCurves
/// Size: 0x05A8 (1448 bytes) (0x000000 - 0x0005A8) align 8 pad: 0x0000
struct FTransformParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x0008   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x01E8   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x03C8   (0x01E0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParameterSectionTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000080) align 8 pad: 0x0000
struct FMovieSceneParameterSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FScalarParameterNameAndCurve>               Scalars;                                                    // 0x0020   (0x0010)  
	TArray<FBoolParameterNameAndCurve>                 Bools;                                                      // 0x0030   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2Ds;                                                  // 0x0040   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              Vectors;                                                    // 0x0050   (0x0010)  
	TArray<FColorParameterNameAndCurves>               Colors;                                                     // 0x0060   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           Transforms;                                                 // 0x0070   (0x0010)  
};

/// Struct /Script/UMG.MovieSceneWidgetMaterialSectionTemplate
/// Size: 0x0010 (16 bytes) (0x000080 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneWidgetMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x0080   (0x0010)  
};

/// Struct /Script/UMG.RichTextStyleRow
/// Size: 0x0270 (624 bytes) (0x000008 - 0x000278) align 8 pad: 0x0000
struct FRichTextStyleRow : FTableRowBase
{ 
	FTextBlockStyle                                    TextStyle;                                                  // 0x0008   (0x0270)  
};

/// Struct /Script/UMG.RichImageRow
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000090) align 8 pad: 0x0000
struct FRichImageRow : FTableRowBase
{ 
	FSlateBrush                                        Brush;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/UMG.WidgetComponentInstanceData
/// Size: 0x0010 (16 bytes) (0x0000B8 - 0x0000C8) align 8 pad: 0x0000
struct FWidgetComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x00B8   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceLoopCount
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSequenceLoopCount
{ 
	int32_t                                            Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneSequencePlaybackSettings
{ 
	bool                                               bAutoPlay : 1;                                              // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FMovieSceneSequenceLoopCount                       LoopCount;                                                  // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              StartTime;                                                  // 0x000C   (0x0004)  
	bool                                               bRandomStartTime : 1;                                       // 0x0010:0 (0x0001)  
	bool                                               bRestoreState : 1;                                          // 0x0010:1 (0x0001)  
	bool                                               bDisableMovementInput : 1;                                  // 0x0010:2 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x0010:3 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x0010:4 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x0010:5 (0x0001)  
	bool                                               bDisableCameraCuts : 1;                                     // 0x0010:6 (0x0001)  
	bool                                               bPauseAtEnd : 1;                                            // 0x0010:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceReplProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneSequenceReplProperties
{ 
	FFrameTime                                         LastKnownPosition;                                          // 0x0000   (0x0008)  
	TEnumAsByte<EMovieScenePlayerStatus>               LastKnownStatus;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            LastKnownNumLoops;                                          // 0x000C   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSequencePlayer
/// Size: 0x04C0 (1216 bytes) (0x000028 - 0x0004E8) align 8 pad: 0x0000
class UMovieSceneSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x238];                                     // 0x0028   (0x0238)  MISSED
	SDK_UNDEFINED(16,315) /* FMulticastInlineDelegate */ __um(OnPlay);                                             // 0x0260   (0x0010)  
	SDK_UNDEFINED(16,316) /* FMulticastInlineDelegate */ __um(OnPlayReverse);                                      // 0x0270   (0x0010)  
	SDK_UNDEFINED(16,317) /* FMulticastInlineDelegate */ __um(OnStop);                                             // 0x0280   (0x0010)  
	SDK_UNDEFINED(16,318) /* FMulticastInlineDelegate */ __um(OnPause);                                            // 0x0290   (0x0010)  
	SDK_UNDEFINED(16,319) /* FMulticastInlineDelegate */ __um(OnFinished);                                         // 0x02A0   (0x0010)  
	TEnumAsByte<EMovieScenePlayerStatus>               Status;                                                     // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x02B1   (0x0003)  MISSED
	bool                                               bReversePlayback : 1;                                       // 0x02B4:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x02B5   (0x0003)  MISSED
	class UMovieSceneSequence*                         Sequence;                                                   // 0x02B8   (0x0008)  
	FFrameNumber                                       StartTime;                                                  // 0x02C0   (0x0004)  
	int32_t                                            DurationFrames;                                             // 0x02C4   (0x0004)  
	float                                              DurationSubFrames;                                          // 0x02C8   (0x0004)  
	int32_t                                            CurrentNumLoops;                                            // 0x02CC   (0x0004)  
	FMovieSceneSequencePlaybackSettings                PlaybackSettings;                                           // 0x02D0   (0x0014)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x02E8   (0x00E8)  
	unsigned char                                      UnknownData04_6[0x68];                                      // 0x03D0   (0x0068)  MISSED
	FMovieSceneSequenceReplProperties                  NetSyncProps;                                               // 0x0438   (0x0010)  
	SDK_UNDEFINED(16,320) /* TScriptInterface<Class> */ __um(PlaybackClient);                                      // 0x0448   (0x0010)  
	class UMovieSceneSequenceTickManager*              TickManager;                                                // 0x0458   (0x0008)  
	unsigned char                                      UnknownData05_7[0x88];                                      // 0x0460   (0x0088)  MISSED


	/// Functions
	// Function /Script/MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime
	// void StopAtCurrentTime();                                                                                                // [0x3512350] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Stop
	// void Stop();                                                                                                             // [0x3512330] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetTimeRange
	// void SetTimeRange(float StartTime, float Duration);                                                                      // [0x3512260] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlayRate
	// void SetPlayRate(float PlayRate);                                                                                        // [0x3511f10] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlaybackPosition
	// void SetPlaybackPosition(FMovieSceneSequencePlaybackParams PlaybackParams);                                              // [0x3511f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRate
	// void SetFrameRate(FFrameRate FrameRate);                                                                                 // [0x3511cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRange
	// void SetFrameRange(int32_t StartFrame, int32_t Duration, float SubFrames);                                               // [0x3511ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetDisableCameraCuts
	// void SetDisableCameraCuts(bool bInDisableCameraCuts);                                                                    // [0x3511b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToSeconds
	// void ScrubToSeconds(float TimeInSeconds);                                                                                // [0x3511960] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToMarkedFrame
	// bool ScrubToMarkedFrame(FString InLabel);                                                                                // [0x3511850] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToFrame
	// void ScrubToFrame(FFrameTime NewPosition);                                                                               // [0x35117a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Scrub
	// void Scrub();                                                                                                            // [0x3511780] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_OnStopEvent
	// void RPC_OnStopEvent(FFrameTime StoppedTime);                                                                            // [0x35116c0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_ExplicitServerUpdateEvent
	// void RPC_ExplicitServerUpdateEvent(EUpdatePositionMethod Method, FFrameTime RelevantTime);                               // [0x35115e0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RestoreState
	// void RestoreState();                                                                                                     // [0x3511760] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToSeconds
	// void PlayToSeconds(float TimeInSeconds);                                                                                 // [0x3511530] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToMarkedFrame
	// bool PlayToMarkedFrame(FString InLabel);                                                                                 // [0x3511420] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToFrame
	// void PlayToFrame(FFrameTime NewPosition);                                                                                // [0x3511370] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayTo
	// void PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams);                                                           // [0x3511250] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayReverse
	// void PlayReverse();                                                                                                      // [0x3511230] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayLooping
	// void PlayLooping(int32_t NumLoops);                                                                                      // [0x35111a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Play
	// void Play();                                                                                                             // [0x3511180] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Pause
	// void Pause();                                                                                                            // [0x3511160] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToSeconds
	// void JumpToSeconds(float TimeInSeconds);                                                                                 // [0x35110b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToMarkedFrame
	// bool JumpToMarkedFrame(FString InLabel);                                                                                 // [0x3510fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToFrame
	// void JumpToFrame(FFrameTime NewPosition);                                                                                // [0x3510ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsReversed
	// bool IsReversed();                                                                                                       // [0x3510ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPlaying
	// bool IsPlaying();                                                                                                        // [0x3510e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPaused
	// bool IsPaused();                                                                                                         // [0x3510e60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GoToEndAndStop
	// void GoToEndAndStop();                                                                                                   // [0x3510de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetStartTime
	// FQualifiedFrameTime GetStartTime();                                                                                      // [0x3510d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetSequence
	// class UMovieSceneSequence* GetSequence();                                                                                // [0x3510d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetPlayRate
	// float GetPlayRate();                                                                                                     // [0x3510d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetObjectBindings
	// TArray<FMovieSceneObjectBindingID> GetObjectBindings(class UObject* InObject);                                           // [0x3510c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameRate
	// FFrameRate GetFrameRate();                                                                                               // [0x3510be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameDuration
	// int32_t GetFrameDuration();                                                                                              // [0x3510bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetEndTime
	// FQualifiedFrameTime GetEndTime();                                                                                        // [0x3510b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDuration
	// FQualifiedFrameTime GetDuration();                                                                                       // [0x3510b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDisableCameraCuts
	// bool GetDisableCameraCuts();                                                                                             // [0x3510ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetCurrentTime
	// FQualifiedFrameTime GetCurrentTime();                                                                                    // [0x3510aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetBoundObjects
	// TArray<UObject*> GetBoundObjects(FMovieSceneObjectBindingID ObjectBinding);                                              // [0x3510970] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ChangePlaybackDirection
	// void ChangePlaybackDirection();                                                                                          // [0x3510790] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/MovieScene.MovieSceneSectionParameters
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FMovieSceneSectionParameters
{ 
	FFrameNumber                                       StartFrameOffset;                                           // 0x0000   (0x0004)  
	bool                                               bCanLoop;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FFrameNumber                                       EndFrameOffset;                                             // 0x0008   (0x0004)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x000C   (0x0004)  
	float                                              TimeScale;                                                  // 0x0010   (0x0004)  
	int32_t                                            HierarchicalBias;                                           // 0x0014   (0x0004)  
	float                                              StartOffset;                                                // 0x0018   (0x0004)  
	float                                              PrerollTime;                                                // 0x001C   (0x0004)  
	float                                              PostrollTime;                                               // 0x0020   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSubSection
/// Size: 0x0080 (128 bytes) (0x0000E8 - 0x000168) align 8 pad: 0x0000
class UMovieSceneSubSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSectionParameters                       Parameters;                                                 // 0x00E8   (0x0024)  
	float                                              StartOffset;                                                // 0x010C   (0x0004)  
	float                                              TimeScale;                                                  // 0x0110   (0x0004)  
	float                                              PrerollTime;                                                // 0x0114   (0x0004)  
	char                                               NetworkMask;                                                // 0x0118   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0119   (0x0007)  MISSED
	class UMovieSceneSequence*                         SubSequence;                                                // 0x0120   (0x0008)  
	SDK_UNDEFINED(28,321) /* TLazyObjectPtr<AActor*> */ __um(ActorToRecord);                                       // 0x0128   (0x001C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	FString                                            TargetSequenceName;                                         // 0x0148   (0x0010)  
	FDirectoryPath                                     TargetPathToRecordTo;                                       // 0x0158   (0x0010)  


	/// Functions
	// Function /Script/MovieScene.MovieSceneSubSection.SetSequence
	// void SetSequence(class UMovieSceneSequence* Sequence);                                                                   // [0x3515450] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieScene.MovieSceneSubSection.GetSequence
	// class UMovieSceneSequence* GetSequence();                                                                                // [0x3515420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieScene.MovieSceneSubTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneSubTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0090   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneCustomClockSource
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneCustomClockSource : public UInterface
{ 
public:


	/// Functions
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnTick
	// void OnTick(float DeltaSeconds, float InPlayRate);                                                                       // [0x35054b0] Native|Public        
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStopPlaying
	// void OnStopPlaying(FQualifiedFrameTime& InStopTime);                                                                     // [0x3505400] Native|Public|HasOutParms 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStartPlaying
	// void OnStartPlaying(FQualifiedFrameTime& InStartTime);                                                                   // [0x3505350] Native|Public|HasOutParms 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnRequestCurrentTime
	// FFrameTime OnRequestCurrentTime(FQualifiedFrameTime& InCurrentTime, float InPlayRate);                                   // [0x3505250] Native|Public|HasOutParms 
};

/// Class /Script/MovieScene.MovieSceneDeterminismSource
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneDeterminismSource : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneEntityProvider
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneEntityProvider : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneEvaluationHook
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneEvaluationHook : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePlaybackClient
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieScenePlaybackClient : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneTrackTemplateProducer
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneTrackTemplateProducer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.NodeAndChannelMappings
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UNodeAndChannelMappings : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroup
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneNodeGroup : public UObject
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroupCollection
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneNodeGroupCollection : public UObject
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneSpawnable
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align 16 pad: 0x0000
struct FMovieSceneSpawnable
{ 
	FTransform                                         SpawnTransform;                                             // 0x0000   (0x0030)  
	TArray<FName>                                      Tags;                                                       // 0x0030   (0x0010)  
	bool                                               bContinuouslyRespawn;                                       // 0x0040   (0x0001)  
	bool                                               bNetAddressableName;                                        // 0x0041   (0x0001)  
	bool                                               bEvaluateTracksWhenNotSpawned;                              // 0x0042   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0043   (0x0001)  MISSED
	FGuid                                              Guid;                                                       // 0x0044   (0x0010)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0058   (0x0010)  
	class UObject*                                     ObjectTemplate;                                             // 0x0068   (0x0008)  
	TArray<FGuid>                                      ChildPossessables;                                          // 0x0070   (0x0010)  
	ESpawnOwnership                                    Ownership;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              LevelName;                                                  // 0x0084   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieScenePossessable
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FMovieScenePossessable
{ 
	TArray<FName>                                      Tags;                                                       // 0x0000   (0x0010)  
	FGuid                                              Guid;                                                       // 0x0010   (0x0010)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	class UClass*                                      PossessedObjectClass;                                       // 0x0030   (0x0008)  
	FGuid                                              ParentGuid;                                                 // 0x0038   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneBinding
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneBinding
{ 
	FGuid                                              ObjectGuid;                                                 // 0x0000   (0x0010)  
	FString                                            BindingName;                                                // 0x0010   (0x0010)  
	TArray<class UMovieSceneTrack*>                    Tracks;                                                     // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneMarkedFrame
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneMarkedFrame
{ 
	FFrameNumber                                       FrameNumber;                                                // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Label;                                                      // 0x0008   (0x0010)  
	bool                                               bIsDeterminismFence;                                        // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieScene
/// Size: 0x00F8 (248 bytes) (0x000050 - 0x000148) align 8 pad: 0x0000
class UMovieScene : public UMovieSceneSignedObject
{ 
public:
	TArray<FMovieSceneSpawnable>                       Spawnables;                                                 // 0x0050   (0x0010)  
	TArray<FMovieScenePossessable>                     Possessables;                                               // 0x0060   (0x0010)  
	TArray<FMovieSceneBinding>                         ObjectBindings;                                             // 0x0070   (0x0010)  
	SDK_UNDEFINED(80,322) /* TMap<FName, FMovieSceneObjectBindingIDs> */ __um(BindingGroups);                      // 0x0080   (0x0050)  
	TArray<class UMovieSceneTrack*>                    MasterTracks;                                               // 0x00D0   (0x0010)  
	class UMovieSceneTrack*                            CameraCutTrack;                                             // 0x00E0   (0x0008)  
	FMovieSceneFrameRange                              SelectionRange;                                             // 0x00E8   (0x0010)  
	FMovieSceneFrameRange                              PlaybackRange;                                              // 0x00F8   (0x0010)  
	FFrameRate                                         TickResolution;                                             // 0x0108   (0x0008)  
	FFrameRate                                         DisplayRate;                                                // 0x0110   (0x0008)  
	EMovieSceneEvaluationType                          EvaluationType;                                             // 0x0118   (0x0001)  
	EUpdateClockSource                                 ClockSource;                                                // 0x0119   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x011A   (0x0006)  MISSED
	FSoftObjectPath                                    CustomClockSourcePath;                                      // 0x0120   (0x0018)  
	TArray<FMovieSceneMarkedFrame>                     MarkedFrames;                                               // 0x0138   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingID
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMovieSceneObjectBindingID
{ 
	FGuid                                              Guid;                                                       // 0x0000   (0x0010)  
	int32_t                                            SequenceID;                                                 // 0x0010   (0x0004)  
	int32_t                                            ResolveParentIndex;                                         // 0x0014   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneBindingOverrideData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align 4 pad: 0x0000
struct FMovieSceneBindingOverrideData
{ 
	FMovieSceneObjectBindingID                         ObjectBindingId;                                            // 0x0000   (0x0018)  
	SDK_UNDEFINED(8,323) /* TWeakObjectPtr<UObject*> */ __um(Object);                                              // 0x0018   (0x0008)  
	bool                                               bOverridesDefault;                                          // 0x0020   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0021   (0x0003)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOverrides
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000090) align 8 pad: 0x0000
class UMovieSceneBindingOverrides : public UObject
{ 
public:
	TArray<FMovieSceneBindingOverrideData>             BindingData;                                                // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x58];                                      // 0x0038   (0x0058)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOwnerInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneBindingOwnerInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBlenderSystem
/// Size: 0x0028 (40 bytes) (0x000040 - 0x000068) align 8 pad: 0x0000
class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0040   (0x0028)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBoolSection
/// Size: 0x0098 (152 bytes) (0x0000E8 - 0x000180) align 8 pad: 0x0000
class UMovieSceneBoolSection : public UMovieSceneSection
{ 
public:
	bool                                               DefaultValue;                                               // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x00E9   (0x0007)  MISSED
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x00F0   (0x0090)  
};

/// Class /Script/MovieScene.MovieSceneEntityInstantiatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneGenericBoundObjectInstantiator
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBoundSceneComponentInstantiator
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSceneComponentImpersonator
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneSceneComponentImpersonator : public UInterface
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplateSerialNumber
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneEvaluationTemplateSerialNumber
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTrackIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackIdentifier
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTemplateGenerationLedger
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align 8 pad: 0x0000
struct FMovieSceneTemplateGenerationLedger
{ 
	FMovieSceneTrackIdentifier                         LastTrackIdentifier;                                        // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	SDK_UNDEFINED(80,324) /* TMap<FGuid, FMovieSceneTrackIdentifier> */ __um(TrackSignatureToTrackIdentifier);     // 0x0008   (0x0050)  
	SDK_UNDEFINED(80,325) /* TMap<FGuid, FMovieSceneFrameRange> */ __um(SubSectionRanges);                         // 0x0058   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplate
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align 8 pad: 0x0000
struct FMovieSceneEvaluationTemplate
{ 
	SDK_UNDEFINED(80,326) /* TMap<FMovieSceneTrackIdentifier, FMovieSceneEvaluationTrack> */ __um(Tracks);         // 0x0000   (0x0050)  
	unsigned char                                      UnknownData00_6[0x50];                                      // 0x0050   (0x0050)  MISSED
	FGuid                                              SequenceSignature;                                          // 0x00A0   (0x0010)  
	FMovieSceneEvaluationTemplateSerialNumber          TemplateSerialNumber;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FMovieSceneTemplateGenerationLedger                TemplateLedger;                                             // 0x00B8   (0x00A8)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceID
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSequenceID
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchyNode
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSequenceHierarchyNode
{ 
	FMovieSceneSequenceID                              ParentID;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FMovieSceneSequenceID>                      Children;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneSubSequenceTree
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchy
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align 8 pad: 0x0000
struct FMovieSceneSequenceHierarchy
{ 
	FMovieSceneSequenceHierarchyNode                   RootNode;                                                   // 0x0000   (0x0018)  
	FMovieSceneSubSequenceTree                         Tree;                                                       // 0x0018   (0x0060)  
	SDK_UNDEFINED(80,327) /* TMap<FMovieSceneSequenceID, FMovieSceneSubSequenceData> */ __um(SubSequences);        // 0x0078   (0x0050)  
	SDK_UNDEFINED(80,328) /* TMap<FMovieSceneSequenceID, FMovieSceneSequenceHierarchyNode> */ __um(Hierarchy);     // 0x00C8   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align 8 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityTree
{ 
	unsigned char                                      UnknownData00_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityKey
{ 
	SDK_UNDEFINED(8,329) /* TWeakObjectPtr<UObject*> */ __um(EntityOwner);                                         // 0x0000   (0x0008)  
	uint32_t                                           EntityID;                                                   // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntity
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldEntity
{ 
	FMovieSceneEvaluationFieldEntityKey                Key;                                                        // 0x0000   (0x000C)  
	int32_t                                            SharedMetaDataIndex;                                        // 0x000C   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityMetaData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvaluationFieldEntityMetaData
{ 
	FString                                            OverrideBoundPropertyPath;                                  // 0x0000   (0x0010)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0010   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	ESectionEvaluationFlags                            Flags;                                                      // 0x0018   (0x0001)  
	bool                                               bEvaluateInSequencePreRoll : 1;                             // 0x0019:0 (0x0001)  
	bool                                               bEvaluateInSequencePostRoll : 1;                            // 0x0019:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{ 
	FGuid                                              ObjectBindingId;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEntityComponentField
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneEntityComponentField
{ 
	FMovieSceneEvaluationFieldEntityTree               PersistentEntityTree;                                       // 0x0000   (0x0060)  
	FMovieSceneEvaluationFieldEntityTree               OneShotEntityTree;                                          // 0x0060   (0x0060)  
	TArray<FMovieSceneEvaluationFieldEntity>           Entities;                                                   // 0x00C0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldEntityMetaData>   EntityMetaData;                                             // 0x00D0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldSharedEntityMetaData> SharedMetaData;                                         // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroupLUTIndex
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneEvaluationGroupLUTIndex
{ 
	int32_t                                            NumInitPtrs;                                                // 0x0000   (0x0004)  
	int32_t                                            NumEvalPtrs;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldTrackPtr
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_EvaluationTrack
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneFieldEntry_EvaluationTrack
{ 
	FMovieSceneEvaluationFieldTrackPtr                 TrackPtr;                                                   // 0x0000   (0x0008)  
	uint16_t                                           NumChildren;                                                // 0x0008   (0x0002)  
	unsigned char                                      UnknownData00_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_ChildTemplate
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneFieldEntry_ChildTemplate
{ 
	uint16_t                                           ChildIndex;                                                 // 0x0000   (0x0002)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0002   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroup
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneEvaluationGroup
{ 
	TArray<FMovieSceneEvaluationGroupLUTIndex>         LUTIndices;                                                 // 0x0000   (0x0010)  
	TArray<FMovieSceneFieldEntry_EvaluationTrack>      TrackLUT;                                                   // 0x0010   (0x0010)  
	TArray<FMovieSceneFieldEntry_ChildTemplate>        SectionLUT;                                                 // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationKey
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
	uint32_t                                           SectionIndex;                                               // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneOrderedEvaluationKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 4 pad: 0x0000
struct FMovieSceneOrderedEvaluationKey
{ 
	FMovieSceneEvaluationKey                           Key;                                                        // 0x0000   (0x000C)  
	uint16_t                                           SetupIndex;                                                 // 0x000C   (0x0002)  
	uint16_t                                           TearDownIndex;                                              // 0x000E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationMetaData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvaluationMetaData
{ 
	TArray<FMovieSceneSequenceID>                      ActiveSequences;                                            // 0x0000   (0x0010)  
	TArray<FMovieSceneOrderedEvaluationKey>            ActiveEntities;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationField
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneEvaluationField
{ 
	TArray<FMovieSceneFrameRange>                      Ranges;                                                     // 0x0000   (0x0010)  
	TArray<FMovieSceneEvaluationGroup>                 Groups;                                                     // 0x0010   (0x0010)  
	TArray<FMovieSceneEvaluationMetaData>              MetaData;                                                   // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceCompilerMaskStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneSequenceCompilerMaskStruct
{ 
	bool                                               bHierarchy : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bEvaluationTemplate : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluationTemplateField : 1;                               // 0x0000:2 (0x0001)  
	bool                                               bEntityComponentField : 1;                                  // 0x0000:3 (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneCompiledData
/// Size: 0x03D0 (976 bytes) (0x000028 - 0x0003F8) align 8 pad: 0x0000
class UMovieSceneCompiledData : public UObject
{ 
public:
	FMovieSceneEvaluationTemplate                      EvaluationTemplate;                                         // 0x0028   (0x0160)  
	FMovieSceneSequenceHierarchy                       Hierarchy;                                                  // 0x0188   (0x0118)  
	FMovieSceneEntityComponentField                    EntityComponentField;                                       // 0x02A0   (0x00F0)  
	FMovieSceneEvaluationField                         TrackTemplateField;                                         // 0x0390   (0x0030)  
	TArray<FFrameTime>                                 DeterminismFences;                                          // 0x03C0   (0x0010)  
	FGuid                                              CompiledSignature;                                          // 0x03D0   (0x0010)  
	FGuid                                              CompilerVersion;                                            // 0x03E0   (0x0010)  
	FMovieSceneSequenceCompilerMaskStruct              AccumulatedMask;                                            // 0x03F0   (0x0001)  
	FMovieSceneSequenceCompilerMaskStruct              AllocatedMask;                                              // 0x03F1   (0x0001)  
	EMovieSceneSequenceFlags                           AccumulatedFlags;                                           // 0x03F2   (0x0001)  
	unsigned char                                      UnknownData00_7[0x5];                                       // 0x03F3   (0x0005)  MISSED
};

/// Class /Script/MovieScene.MovieSceneCompiledDataManager
/// Size: 0x0208 (520 bytes) (0x000028 - 0x000230) align 8 pad: 0x0000
class UMovieSceneCompiledDataManager : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0xB0];                                      // 0x0028   (0x00B0)  MISSED
	SDK_UNDEFINED(80,330) /* TMap<int32_t, FMovieSceneSequenceHierarchy> */ __um(Hierarchies);                     // 0x00D8   (0x0050)  
	SDK_UNDEFINED(80,331) /* TMap<int32_t, FMovieSceneEvaluationTemplate> */ __um(TrackTemplates);                 // 0x0128   (0x0050)  
	SDK_UNDEFINED(80,332) /* TMap<int32_t, FMovieSceneEvaluationField> */ __um(TrackTemplateFields);               // 0x0178   (0x0050)  
	SDK_UNDEFINED(80,333) /* TMap<int32_t, FMovieSceneEntityComponentField> */ __um(EntityComponentFields);        // 0x01C8   (0x0050)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0218   (0x0018)  MISSED
};

/// Class /Script/MovieScene.MovieSceneFloatDecomposer
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneFloatDecomposer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBuiltInEasingFunction
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UMovieSceneBuiltInEasingFunction : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	EMovieSceneBuiltInEasing                           Type;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEasingExternalCurve
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
class UMovieSceneEasingExternalCurve : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UCurveFloat*                                 Curve;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/MovieScene.MovieSceneEasingFunction
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneEasingFunction : public UInterface
{ 
public:


	/// Functions
	// Function /Script/MovieScene.MovieSceneEasingFunction.OnEvaluate
	// float OnEvaluate(float Interp);                                                                                          // [0x24710f0] Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNodes
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraphNodes
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraph
/// Size: 0x0138 (312 bytes) (0x000000 - 0x000138) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraph
{ 
	unsigned char                                      UnknownData00_7[0x80];                                      // 0x0000   (0x0080)  MISSED
	FMovieSceneEntitySystemGraphNodes                  Nodes;                                                      // 0x0080   (0x0038)  
	unsigned char                                      UnknownData01_7[0x80];                                      // 0x00B8   (0x0080)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEntitySystemLinker
/// Size: 0x04C8 (1224 bytes) (0x000028 - 0x0004F0) align 8 pad: 0x0000
class UMovieSceneEntitySystemLinker : public UObject
{ 
public:
	unsigned char                                      UnknownData00_3[0x270];                                     // 0x0028   (0x0270)  MISSED
	FMovieSceneEntitySystemGraph                       SystemGraph;                                                // 0x0298   (0x0138)  
	unsigned char                                      UnknownData01_7[0x120];                                     // 0x03D0   (0x0120)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEvalTimeSystem
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEvaluationHookSystem
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMovieSceneEvaluationHookSystem : public UMovieSceneEntitySystem
{ 
public:
	SDK_UNDEFINED(80,334) /* TMap<FMovieSceneEvaluationInstanceKey, FMovieSceneEvaluationHookEventContainer> */ __um(PendingEventsByRootInstance); // 0x0040   (0x0050)  
};

/// Class /Script/MovieScene.MovieSceneFolder
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000070) align 8 pad: 0x0000
class UMovieSceneFolder : public UObject
{ 
public:
	FName                                              FolderName;                                                 // 0x0028   (0x0008)  
	TArray<class UMovieSceneFolder*>                   ChildFolders;                                               // 0x0030   (0x0010)  
	TArray<class UMovieSceneTrack*>                    ChildMasterTracks;                                          // 0x0040   (0x0010)  
	TArray<FString>                                    ChildObjectBindingStrings;                                  // 0x0050   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneHookSection
/// Size: 0x0018 (24 bytes) (0x0000E8 - 0x000100) align 8 pad: 0x0000
class UMovieSceneHookSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x00E8   (0x0010)  MISSED
	bool                                               bRequiresRangedHook : 1;                                    // 0x00F8:0 (0x0001)  
	bool                                               bRequiresTriggerHooks : 1;                                  // 0x00F8:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00F9   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieSceneKeyProxy
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneKeyProxy : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneMasterInstantiatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePreAnimatedStateSystemInterface
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieScenePreAnimatedStateSystemInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneCachePreAnimatedStateSystem
/// Size: 0x0020 (32 bytes) (0x000040 - 0x000060) align 8 pad: 0x0000
class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x20];                                      // 0x0040   (0x0020)  MISSED
};

/// Class /Script/MovieScene.MovieSceneRestorePreAnimatedStateSystem
/// Size: 0x0010 (16 bytes) (0x000040 - 0x000050) align 8 pad: 0x0000
class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSequenceActor
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneSequenceActor : public UInterface
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneSequenceActorPointers
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSequenceActorPointers
{ 
	class AActor*                                      SequenceActor;                                              // 0x0000   (0x0008)  
	SDK_UNDEFINED(16,335) /* TScriptInterface<Class> */ __um(SequenceActorInterface);                              // 0x0008   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneSequenceTickManager
/// Size: 0x00A8 (168 bytes) (0x000028 - 0x0000D0) align 8 pad: 0x0000
class UMovieSceneSequenceTickManager : public UObject
{ 
public:
	TArray<FMovieSceneSequenceActorPointers>           SequenceActors;                                             // 0x0028   (0x0010)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0038   (0x0008)  
	unsigned char                                      UnknownData00_7[0x90];                                      // 0x0040   (0x0090)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSpawnablesSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSpawnSection
/// Size: 0x0008 (8 bytes) (0x000180 - 0x000188) align 8 pad: 0x0000
class UMovieSceneSpawnSection : public UMovieSceneBoolSection
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x0180   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSpawnTrack
/// Size: 0x0020 (32 bytes) (0x000090 - 0x0000B0) align 8 pad: 0x0000
class UMovieSceneSpawnTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0090   (0x0010)  
	FGuid                                              ObjectGuid;                                                 // 0x00A0   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneTrack
/// Size: 0x0020 (32 bytes) (0x000090 - 0x0000B0) align 8 pad: 0x0000
class UTestMovieSceneTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	bool                                               bHighPassFilter;                                            // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x00A0   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSection
/// Size: 0x0000 (0 bytes) (0x0000E8 - 0x0000E8) align 8 pad: 0x0000
class UTestMovieSceneSection : public UMovieSceneSection
{ 
public:
};

/// Class /Script/MovieScene.TestMovieSceneSequence
/// Size: 0x0008 (8 bytes) (0x000060 - 0x000068) align 8 pad: 0x0000
class UTestMovieSceneSequence : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0060   (0x0008)  
};

/// Class /Script/MovieScene.TestMovieSceneSubTrack
/// Size: 0x0010 (16 bytes) (0x0000A0 - 0x0000B0) align 8 pad: 0x0000
class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x00A0   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSubSection
/// Size: 0x0000 (0 bytes) (0x000168 - 0x000168) align 8 pad: 0x0000
class UTestMovieSceneSubSection : public UMovieSceneSubSection
{ 
public:
};

/// Class /Script/MovieScene.TestMovieSceneEvalHookTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UTestMovieSceneEvalHookTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x0090   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneEvalHookSection
/// Size: 0x0018 (24 bytes) (0x000100 - 0x000118) align 8 pad: 0x0000
class UTestMovieSceneEvalHookSection : public UMovieSceneHookSection
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0100   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceInput
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstance
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000050) align 8 pad: 0x0000
class UMovieSceneTrackInstance : public UObject
{ 
public:
	class UObject*                                     AnimatedObject;                                             // 0x0028   (0x0008)  
	bool                                               bIsMasterTrackInstance;                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0038   (0x0008)  
	TArray<FMovieSceneTrackInstanceInput>              Inputs;                                                     // 0x0040   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceInstantiator
/// Size: 0x00B0 (176 bytes) (0x000040 - 0x0000F0) align 8 pad: 0x0000
class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0xB0];                                      // 0x0040   (0x00B0)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceSystem
/// Size: 0x0008 (8 bytes) (0x000040 - 0x000048) align 8 pad: 0x0000
class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
{ 
public:
	class UMovieSceneTrackInstanceInstantiator*        Instantiator;                                               // 0x0040   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneByteChannel
/// Size: 0x0090 (144 bytes) (0x000008 - 0x000098) align 8 pad: 0x0000
struct FMovieSceneByteChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	char                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData00_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<char>                                       Values;                                                     // 0x0020   (0x0010)  
	class UEnum*                                       Enum;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0038   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneIntegerChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000090) align 8 pad: 0x0000
struct FMovieSceneIntegerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0018   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x001C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	TArray<int32_t>                                    Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementation
/// Size: 0x0000 (0 bytes) (0x000010 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackImplementation : FMovieSceneEvalTemplateBase
{ 
};

/// Struct /Script/MovieScene.MovieScenePropertySectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieScenePropertySectionData
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	FString                                            PropertyPath;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieScenePropertySectionTemplate
/// Size: 0x0018 (24 bytes) (0x000020 - 0x000038) align 8 pad: 0x0000
struct FMovieScenePropertySectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0018)  
};

/// Struct /Script/MovieScene.TrackInstanceInputComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FTrackInstanceInputComponent
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	int32_t                                            OutputIndex;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationHookComponent
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneEvaluationHookComponent
{ 
	SDK_UNDEFINED(16,336) /* TScriptInterface<Class> */ __um(Interface);                                           // 0x0000   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceComponent
{ 
	class UMovieSceneSection*                          Owner;                                                      // 0x0000   (0x0008)  
	class UClass*                                      TrackInstanceClass;                                         // 0x0008   (0x0008)  
};

/// Struct /Script/MovieScene.EasingComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FEasingComponentData
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneDeterminismData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneDeterminismData
{ 
	TArray<FFrameTime>                                 Fences;                                                     // 0x0000   (0x0010)  
	bool                                               bParentSequenceRequiresLowerFence;                          // 0x0010   (0x0001)  
	bool                                               bParentSequenceRequiresUpperFence;                          // 0x0011   (0x0001)  
	unsigned char                                      UnknownData00_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSectionGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneSectionGroup
{ 
	SDK_UNDEFINED(16,337) /* TArray<TWeakObjectPtr<UMovieSceneSection*>> */ __um(Sections);                        // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingIDs
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneObjectBindingIDs
{ 
	TArray<FMovieSceneObjectBindingID>                 IDs;                                                        // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneTrackLabels
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackLabels
{ 
	TArray<FString>                                    Strings;                                                    // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEditorData
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align 8 pad: 0x0000
struct FMovieSceneEditorData
{ 
	SDK_UNDEFINED(80,338) /* TMap<FString, FMovieSceneExpansionState> */ __um(ExpansionStates);                    // 0x0000   (0x0050)  
	TArray<FString>                                    PinnedNodes;                                                // 0x0050   (0x0010)  
	double                                             ViewStart;                                                  // 0x0060   (0x0008)  
	double                                             ViewEnd;                                                    // 0x0068   (0x0008)  
	double                                             WorkStart;                                                  // 0x0070   (0x0008)  
	double                                             WorkEnd;                                                    // 0x0078   (0x0008)  
	SDK_UNDEFINED(80,339) /* TSet<FFrameNumber> */     __um(MarkedFrames);                                         // 0x0080   (0x0050)  
	FFloatRange                                        WorkingRange;                                               // 0x00D0   (0x0010)  
	FFloatRange                                        ViewRange;                                                  // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneExpansionState
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneExpansionState
{ 
	bool                                               bExpanded;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneTimecodeSource
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 4 pad: 0x0000
struct FMovieSceneTimecodeSource
{ 
	FTimecode                                          Timecode;                                                   // 0x0000   (0x0014)  
	FFrameNumber                                       DeltaFrame;                                                 // 0x0014   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneCompiledSequenceFlagStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneCompiledSequenceFlagStruct
{ 
	bool                                               bParentSequenceRequiresLowerFence : 1;                      // 0x0000:0 (0x0001)  
	bool                                               bParentSequenceRequiresUpperFence : 1;                      // 0x0000:1 (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEntitySystemGraphNode
{ 
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	class UMovieSceneEntitySystem*                     System;                                                     // 0x0020   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplatePtr
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEvalTemplatePtr
{ 
	unsigned char                                      UnknownData00_2[0x88];                                      // 0x0000   (0x0088)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEmptyStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align 1 pad: 0x0000
struct FMovieSceneEmptyStruct
{ 
	unsigned char                                      UnknownData00_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegmentIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneSegmentIdentifier
{ 
	int32_t                                            IdentifierIndex;                                            // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSegmentPtr
/// Size: 0x0004 (4 bytes) (0x000008 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneEvaluationFieldSegmentPtr : FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSegmentIdentifier                       SegmentID;                                                  // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationInstanceKey
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 2 pad: 0x0000
struct FMovieSceneEvaluationInstanceKey
{ 
	unsigned char                                      UnknownData00_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationHookEvent
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneEvaluationHookEvent
{ 
	FMovieSceneEvaluationHookComponent                 Hook;                                                       // 0x0000   (0x0020)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0020   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationHookEventContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneEvaluationHookEventContainer
{ 
	TArray<FMovieSceneEvaluationHookEvent>             Events;                                                     // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationOperand
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneEvaluationOperand
{ 
	FGuid                                              ObjectBindingId;                                            // 0x0000   (0x0010)  
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0010   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementationPtr
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneTrackImplementationPtr
{ 
	unsigned char                                      UnknownData00_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTrack
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align 8 pad: 0x0000
struct FMovieSceneEvaluationTrack
{ 
	FGuid                                              ObjectBindingId;                                            // 0x0000   (0x0010)  
	uint16_t                                           EvaluationPriority;                                         // 0x0010   (0x0002)  
	EEvaluationMethod                                  EvaluationMethod;                                           // 0x0012   (0x0001)  
	unsigned char                                      UnknownData00_6[0x1];                                       // 0x0013   (0x0001)  MISSED
	SDK_UNDEFINED(8,340) /* TWeakObjectPtr<UMovieSceneTrack*> */ __um(SourceTrack);                                // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FMovieSceneEvalTemplatePtr>                 ChildTemplates;                                             // 0x0020   (0x0010)  
	FMovieSceneTrackImplementationPtr                  TrackTemplate;                                              // 0x0030   (0x0038)  
	FName                                              EvaluationGroup;                                            // 0x0068   (0x0008)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0070:0 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0070:1 (0x0001)  
	bool                                               bTearDownPriority : 1;                                      // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSectionData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align 4 pad: 0x0000
struct FMovieSceneSubSectionData
{ 
	SDK_UNDEFINED(8,341) /* TWeakObjectPtr<UMovieSceneSubSection*> */ __um(Section);                               // 0x0000   (0x0008)  
	FGuid                                              ObjectBindingId;                                            // 0x0008   (0x0010)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyStruct
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyTimeStruct
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneKeyTimeStruct : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieScene.GeneratedMovieSceneKeyStruct
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align 16 pad: 0x0000
struct FGeneratedMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData00_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannelKeyValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneObjectPathChannelKeyValue
{ 
	SDK_UNDEFINED(40,342) /* TWeakObjectPtr<UObject*> */ __um(SoftPtr);                                            // 0x0000   (0x0028)  
	class UObject*                                     HardPtr;                                                    // 0x0028   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannel
/// Size: 0x00B8 (184 bytes) (0x000008 - 0x0000C0) align 8 pad: 0x0000
struct FMovieSceneObjectPathChannel : FMovieSceneChannel
{ 
	class UClass*                                      PropertyClass;                                              // 0x0008   (0x0008)  
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneObjectPathChannelKeyValue>       Values;                                                     // 0x0020   (0x0010)  
	FMovieSceneObjectPathChannelKeyValue               DefaultValue;                                               // 0x0030   (0x0030)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0060   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegment
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align 8 pad: 0x0000
struct FMovieSceneSegment
{ 
	unsigned char                                      UnknownData00_2[0x58];                                      // 0x0000   (0x0058)  MISSED
};

/// Struct /Script/MovieScene.SectionEvaluationData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FSectionEvaluationData
{ 
	int32_t                                            ImplIndex;                                                  // 0x0000   (0x0004)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0008   (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTimeTransform
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align 4 pad: 0x0000
struct FMovieSceneTimeTransform
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	FFrameTime                                         Offset;                                                     // 0x0004   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneTimeWarping
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 4 pad: 0x0000
struct FMovieSceneTimeWarping
{ 
	FFrameNumber                                       Start;                                                      // 0x0000   (0x0004)  
	FFrameNumber                                       End;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneNestedSequenceTransform
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align 4 pad: 0x0000
struct FMovieSceneNestedSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	FMovieSceneTimeWarping                             Warping;                                                    // 0x000C   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceTransform
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FMovieSceneNestedSequenceTransform>         NestedTransforms;                                           // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceDataPtr
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSequenceInstanceDataPtr
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceData
/// Size: 0x0108 (264 bytes) (0x000000 - 0x000108) align 8 pad: 0x0000
struct FMovieSceneSubSequenceData
{ 
	FSoftObjectPath                                    Sequence;                                                   // 0x0000   (0x0018)  
	FMovieSceneSequenceTransform                       OuterToInnerTransform;                                      // 0x0018   (0x0020)  
	FMovieSceneSequenceTransform                       RootToSequenceTransform;                                    // 0x0038   (0x0020)  
	FFrameRate                                         TickResolution;                                             // 0x0058   (0x0008)  
	FMovieSceneSequenceID                              DeterministicSequenceID;                                    // 0x0060   (0x0004)  
	FMovieSceneFrameRange                              ParentPlayRange;                                            // 0x0064   (0x0010)  
	FFrameNumber                                       ParentStartFrameOffset;                                     // 0x0074   (0x0004)  
	FFrameNumber                                       ParentEndFrameOffset;                                       // 0x0078   (0x0004)  
	FFrameNumber                                       ParentFirstLoopStartFrameOffset;                            // 0x007C   (0x0004)  
	bool                                               bCanLoop;                                                   // 0x0080   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FMovieSceneFrameRange                              PlayRange;                                                  // 0x0084   (0x0010)  
	FMovieSceneFrameRange                              FullPlayRange;                                              // 0x0094   (0x0010)  
	FMovieSceneFrameRange                              UnwarpedPlayRange;                                          // 0x00A4   (0x0010)  
	FMovieSceneFrameRange                              PreRollRange;                                               // 0x00B4   (0x0010)  
	FMovieSceneFrameRange                              PostRollRange;                                              // 0x00C4   (0x0010)  
	int16_t                                            HierarchicalBias;                                           // 0x00D4   (0x0002)  
	bool                                               bHasHierarchicalEasing;                                     // 0x00D6   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x00D7   (0x0001)  MISSED
	FMovieSceneSequenceInstanceDataPtr                 InstanceData;                                               // 0x00D8   (0x0018)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FGuid                                              SubSectionSignature;                                        // 0x00F8   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTreeEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align 8 pad: 0x0000
struct FMovieSceneSubSequenceTreeEntry
{ 
	unsigned char                                      UnknownData00_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FMovieSceneSequenceInstanceData
{ 
	unsigned char                                      UnknownData00_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackParams
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneSequencePlaybackParams
{ 
	FFrameTime                                         Frame;                                                      // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            MarkedFrame;                                                // 0x0010   (0x0010)  
	EMovieScenePositionType                            PositionType;                                               // 0x0020   (0x0001)  
	EUpdatePositionMethod                              UpdateMethod;                                               // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0022   (0x0006)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneWarpCounter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneWarpCounter
{ 
	TArray<uint32_t>                                   WarpCounts;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.TestMovieSceneEvalTemplate
/// Size: 0x0000 (0 bytes) (0x000020 - 0x000020) align 8 pad: 0x0000
struct FTestMovieSceneEvalTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/MovieScene.MovieSceneTrackDisplayOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTrackDisplayOptions
{ 
	bool                                               bShowVerticalFrames : 1;                                    // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneTrackInstanceEntry
{ 
	class UObject*                                     BoundObject;                                                // 0x0000   (0x0008)  
	class UMovieSceneTrackInstance*                    TrackInstance;                                              // 0x0008   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeEvaluator
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneCameraShakeEvaluator : public UObject
{ 
public:
};

/// Class /Script/MovieSceneTracks.ByteChannelEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UByteChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.FloatChannelEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOrigin
/// Size: 0x0000 (0 bytes) (0x000028 - 0x000028) align 8 pad: 0x0000
class UMovieSceneTransformOrigin : public UInterface
{ 
public:


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin
	// FTransform BP_GetTransformOrigin();                                                                                      // [0x24710f0] Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.IntegerChannelEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UIntegerChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintSection
/// Size: 0x0028 (40 bytes) (0x0000E8 - 0x000110) align 8 pad: 0x0000
class UMovieScene3DConstraintSection : public UMovieSceneSection
{ 
public:
	FGuid                                              ConstraintId;                                               // 0x00E8   (0x0010)  
	FMovieSceneObjectBindingID                         ConstraintBindingID;                                        // 0x00F8   (0x0018)  


	/// Functions
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID
	// void SetConstraintBindingID(FMovieSceneObjectBindingID& InConstraintBindingID);                                          // [0x3645e30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.GetConstraintBindingID
	// FMovieSceneObjectBindingID GetConstraintBindingID();                                                                     // [0x3645d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachSection
/// Size: 0x0020 (32 bytes) (0x000110 - 0x000130) align 8 pad: 0x0000
class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0110   (0x0008)  MISSED
	FName                                              AttachSocketName;                                           // 0x0118   (0x0008)  
	FName                                              AttachComponentName;                                        // 0x0120   (0x0008)  
	EAttachmentRule                                    AttachmentLocationRule;                                     // 0x0128   (0x0001)  
	EAttachmentRule                                    AttachmentRotationRule;                                     // 0x0129   (0x0001)  
	EAttachmentRule                                    AttachmentScaleRule;                                        // 0x012A   (0x0001)  
	EDetachmentRule                                    DetachmentLocationRule;                                     // 0x012B   (0x0001)  
	EDetachmentRule                                    DetachmentRotationRule;                                     // 0x012C   (0x0001)  
	EDetachmentRule                                    DetachmentScaleRule;                                        // 0x012D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x012E   (0x0002)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  ConstraintSections;                                         // 0x0090   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachTrack
/// Size: 0x0000 (0 bytes) (0x0000A0 - 0x0000A0) align 8 pad: 0x0000
class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathSection
/// Size: 0x00A8 (168 bytes) (0x000110 - 0x0001B8) align 8 pad: 0x0000
class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
{ 
public:
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0110   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x01B0   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x01B1   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x01B2   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x01B4:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x01B4:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x01B4:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x01B5   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathTrack
/// Size: 0x0008 (8 bytes) (0x0000A0 - 0x0000A8) align 8 pad: 0x0000
class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00A0   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align 4 pad: 0x0000
struct FMovieSceneTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformSection
/// Size: 0x0658 (1624 bytes) (0x0000E8 - 0x000740) align 8 pad: 0x0000
class UMovieScene3DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneTransformMask                           TransformMask;                                              // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x00F8   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x02D8   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x04B8   (0x01E0)  
	FMovieSceneFloatChannel                            ManualWeight;                                               // 0x0698   (0x00A0)  
	bool                                               bUseQuaternionInterpolation;                                // 0x0738   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x0739   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceKey
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 4 pad: 0x0000
struct FMovieSceneActorReferenceKey
{ 
	FMovieSceneObjectBindingID                         Object;                                                     // 0x0000   (0x0018)  
	FName                                              ComponentName;                                              // 0x0018   (0x0008)  
	FName                                              SocketName;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceData
/// Size: 0x00A8 (168 bytes) (0x000008 - 0x0000B0) align 8 pad: 0x0000
struct FMovieSceneActorReferenceData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	FMovieSceneActorReferenceKey                       DefaultValue;                                               // 0x0018   (0x0028)  
	TArray<FMovieSceneActorReferenceKey>               KeyValues;                                                  // 0x0040   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0050   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceSection
/// Size: 0x0140 (320 bytes) (0x0000E8 - 0x000228) align 8 pad: 0x0000
class UMovieSceneActorReferenceSection : public UMovieSceneSection
{ 
public:
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x00E8   (0x00B0)  
	FIntegralCurve                                     ActorGuidIndexCurve;                                        // 0x0198   (0x0080)  
	TArray<FString>                                    ActorGuidStrings;                                           // 0x0218   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioSection
/// Size: 0x0250 (592 bytes) (0x0000E8 - 0x000338) align 8 pad: 0x0000
class UMovieSceneAudioSection : public UMovieSceneSection
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x00E8   (0x0008)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x00F0   (0x0004)  
	float                                              StartOffset;                                                // 0x00F4   (0x0004)  
	float                                              AudioStartTime;                                             // 0x00F8   (0x0004)  
	float                                              AudioDilationFactor;                                        // 0x00FC   (0x0004)  
	float                                              AudioVolume;                                                // 0x0100   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	FMovieSceneFloatChannel                            SoundVolume;                                                // 0x0108   (0x00A0)  
	FMovieSceneFloatChannel                            PitchMultiplier;                                            // 0x01A8   (0x00A0)  
	FMovieSceneActorReferenceData                      AttachActorData;                                            // 0x0248   (0x00B0)  
	bool                                               bLooping;                                                   // 0x02F8   (0x0001)  
	bool                                               bSuppressSubtitles;                                         // 0x02F9   (0x0001)  
	bool                                               bOverrideAttenuation;                                       // 0x02FA   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x02FB   (0x0005)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0300   (0x0008)  
	SDK_UNDEFINED(16,343) /* FDelegateProperty */      __um(OnQueueSubtitles);                                     // 0x0308   (0x0010)  
	SDK_UNDEFINED(16,344) /* FMulticastInlineDelegate */ __um(OnAudioFinished);                                    // 0x0318   (0x0010)  
	SDK_UNDEFINED(16,345) /* FMulticastInlineDelegate */ __um(OnAudioPlaybackPercent);                             // 0x0328   (0x0010)  


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetStartOffset
	// void SetStartOffset(FFrameNumber InStartOffset);                                                                         // [0x3645f80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetSound
	// void SetSound(class USoundBase* InSound);                                                                                // [0x3645ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetStartOffset
	// FFrameNumber GetStartOffset();                                                                                           // [0x3645d50] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetSound
	// class USoundBase* GetSound();                                                                                            // [0x3645d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AudioSections;                                              // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneBoolPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneBoolPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneBoolTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneBytePropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneBytePropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneByteSection
/// Size: 0x00A0 (160 bytes) (0x0000E8 - 0x000188) align 8 pad: 0x0000
class UMovieSceneByteSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneByteChannel                             ByteCurve;                                                  // 0x00F0   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneByteTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneByteTrack : public UMovieScenePropertyTrack
{ 
public:
	class UEnum*                                       Enum;                                                       // 0x00C0   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraAnimSectionData
{ 
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0000   (0x0008)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              PlayScale;                                                  // 0x000C   (0x0004)  
	float                                              BlendInTime;                                                // 0x0010   (0x0004)  
	float                                              BlendoutTime;                                               // 0x0014   (0x0004)  
	bool                                               bLooping;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimSection
/// Size: 0x0040 (64 bytes) (0x0000E8 - 0x000128) align 8 pad: 0x0000
class UMovieSceneCameraAnimSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraAnimSectionData                   AnimData;                                                   // 0x00E8   (0x0020)  
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0108   (0x0008)  
	float                                              PlayRate;                                                   // 0x0110   (0x0004)  
	float                                              PlayScale;                                                  // 0x0114   (0x0004)  
	float                                              BlendInTime;                                                // 0x0118   (0x0004)  
	float                                              BlendoutTime;                                               // 0x011C   (0x0004)  
	bool                                               bLooping;                                                   // 0x0120   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraAnimSections;                                         // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutSection
/// Size: 0x0078 (120 bytes) (0x0000E8 - 0x000160) align 16 pad: 0x0000
class UMovieSceneCameraCutSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	bool                                               bLockPreviousCamera;                                        // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	FGuid                                              CameraGuid;                                                 // 0x00F4   (0x0010)  
	FMovieSceneObjectBindingID                         CameraBindingID;                                            // 0x0104   (0x0018)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	FTransform                                         InitialCameraCutTransform;                                  // 0x0120   (0x0030)  
	bool                                               bHasInitialCameraCutTransform;                              // 0x0150   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0151   (0x000F)  MISSED


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID
	// void SetCameraBindingID(FMovieSceneObjectBindingID& InCameraBindingID);                                                  // [0x3645d70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.GetCameraBindingID
	// FMovieSceneObjectBindingID GetCameraBindingID();                                                                         // [0x3645cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
{ 
public:
	bool                                               bCanBlend;                                                  // 0x0090   (0x0001)  
	unsigned char                                      UnknownData00_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrackInstance
/// Size: 0x0068 (104 bytes) (0x000050 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
{ 
public:
	unsigned char                                      UnknownData00_1[0x68];                                      // 0x0050   (0x0068)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSectionData
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSection
/// Size: 0x0040 (64 bytes) (0x0000E8 - 0x000128) align 8 pad: 0x0000
class UMovieSceneCameraShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00E8   (0x0020)  
	class UClass*                                      ShakeClass;                                                 // 0x0108   (0x0008)  
	float                                              PlayScale;                                                  // 0x0110   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x0114   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x0115   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0118   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0124   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
/// Size: 0x0020 (32 bytes) (0x0000E8 - 0x000108) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00E8   (0x0020)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0098   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTrigger
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData00_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTriggerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
/// Size: 0x0088 (136 bytes) (0x0000E8 - 0x000170) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSourceTriggerChannel         Channel;                                                    // 0x00E8   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotSection
/// Size: 0x0028 (40 bytes) (0x000168 - 0x000190) align 8 pad: 0x0000
class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
{ 
public:
	FString                                            ShotDisplayName;                                            // 0x0168   (0x0010)  
	FText                                              DisplayName;                                                // 0x0178   (0x0018)  


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName
	// void SetShotDisplayName(FString InShotDisplayName);                                                                      // [0x364b990] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.GetShotDisplayName
	// FString GetShotDisplayName();                                                                                            // [0x364b830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotTrack
/// Size: 0x0000 (0 bytes) (0x0000A0 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneColorPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneColorPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneColorSection
/// Size: 0x0288 (648 bytes) (0x0000E8 - 0x000370) align 8 pad: 0x0000
class UMovieSceneColorSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x00F0   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x0190   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0230   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x02D0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneColorTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneColorTrack : public UMovieScenePropertyTrack
{ 
public:
	bool                                               bIsSlateColor;                                              // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentSystem
/// Size: 0x0180 (384 bytes) (0x000040 - 0x0001C0) align 8 pad: 0x0000
class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x180];                                     // 0x0040   (0x0180)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMobilitySystem
/// Size: 0x01E0 (480 bytes) (0x000040 - 0x000220) align 8 pad: 0x0000
class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x1E0];                                     // 0x0040   (0x01E0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentTransformSystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneDeferredComponentMovementSystem
/// Size: 0x0018 (24 bytes) (0x000040 - 0x000058) align 8 pad: 0x0000
class UMovieSceneDeferredComponentMovementSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x18];                                      // 0x0040   (0x0018)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneEnumPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumSection
/// Size: 0x00A0 (160 bytes) (0x0000E8 - 0x000188) align 8 pad: 0x0000
class UMovieSceneEnumSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneByteChannel                             EnumCurve;                                                  // 0x00F0   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
{ 
public:
	class UEnum*                                       Enum;                                                       // 0x00C0   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSectionBase
/// Size: 0x0000 (0 bytes) (0x0000E8 - 0x0000E8) align 8 pad: 0x0000
class UMovieSceneEventSectionBase : public UMovieSceneSection
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPtrs
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEventPtrs
{ 
	class UFunction*                                   Function;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData00_7[0x20];                                      // 0x0008   (0x0020)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEvent
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEvent
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventRepeaterSection
/// Size: 0x0030 (48 bytes) (0x0000E8 - 0x000118) align 8 pad: 0x0000
class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneEvent                                   Event;                                                      // 0x00F0   (0x0028)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventParameters
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneEventParameters
{ 
	unsigned char                                      UnknownData00_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/MovieSceneTracks.EventPayload
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FEventPayload
{ 
	FName                                              EventName;                                                  // 0x0000   (0x0008)  
	FMovieSceneEventParameters                         Parameters;                                                 // 0x0008   (0x0028)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionData
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEventSectionData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FEventPayload>                              KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSection
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x0001E8) align 8 pad: 0x0000
class UMovieSceneEventSection : public UMovieSceneSection
{ 
public:
	FNameCurve                                         Events;                                                     // 0x00E8   (0x0078)  
	FMovieSceneEventSectionData                        EventData;                                                  // 0x0160   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSystem
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMovieSceneEventSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePreSpawnEventSystem
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostSpawnEventSystem
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostEvalEventSystem
/// Size: 0x0000 (0 bytes) (0x000090 - 0x000090) align 8 pad: 0x0000
class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTrack
/// Size: 0x0028 (40 bytes) (0x000090 - 0x0000B8) align 8 pad: 0x0000
class UMovieSceneEventTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x10];                                      // 0x0090   (0x0010)  MISSED
	bool                                               bFireEventsWhenForwards : 1;                                // 0x00A0:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x00A0:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	EFireEventsAtPosition                              EventPosition;                                              // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x00A8   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventChannel
/// Size: 0x0080 (128 bytes) (0x000008 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneEventChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneEvent>                           KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData00_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTriggerSection
/// Size: 0x0090 (144 bytes) (0x0000E8 - 0x000178) align 8 pad: 0x0000
class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneEventChannel                            EventChannel;                                               // 0x00F0   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeSection
/// Size: 0x00B8 (184 bytes) (0x0000E8 - 0x0001A0) align 8 pad: 0x0000
class UMovieSceneFadeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00E8   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x0188   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x0198:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x0199   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatSection
/// Size: 0x00A8 (168 bytes) (0x0000E8 - 0x000190) align 8 pad: 0x0000
class UMovieSceneFloatSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00F0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalBiasSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneInitialValueSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneInitialValueSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneIntegerPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerSection
/// Size: 0x0098 (152 bytes) (0x0000E8 - 0x000180) align 8 pad: 0x0000
class UMovieSceneIntegerSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneIntegerChannel                          IntegerCurve;                                               // 0x00F0   (0x0090)  
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
/// Size: 0x01A8 (424 bytes) (0x000040 - 0x0001E8) align 8 pad: 0x0000
class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x1A8];                                     // 0x0040   (0x01A8)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection
/// Size: 0x0020 (32 bytes) (0x0000E8 - 0x000108) align 8 pad: 0x0000
class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	ELevelVisibility                                   Visibility;                                                 // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	TArray<FName>                                      LevelNames;                                                 // 0x00F8   (0x0010)  


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility
	// void SetVisibility(ELevelVisibility InVisibility);                                                                       // [0x364ba90] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetLevelNames
	// void SetLevelNames(TArray<FName>& InLevelNames);                                                                         // [0x364b8e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetVisibility
	// ELevelVisibility GetVisibility();                                                                                        // [0x364b8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetLevelNames
	// TArray<FName> GetLevelNames();                                                                                           // [0x364b800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySystem
/// Size: 0x0168 (360 bytes) (0x000040 - 0x0001A8) align 8 pad: 0x0000
class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x168];                                     // 0x0040   (0x0168)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilityTrack
/// Size: 0x0010 (16 bytes) (0x000090 - 0x0000A0) align 8 pad: 0x0000
class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0090   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
/// Size: 0x0010 (16 bytes) (0x0000A0 - 0x0000B0) align 8 pad: 0x0000
class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A0   (0x0008)  MISSED
	class UMaterialParameterCollection*                MPC;                                                        // 0x00A8   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMaterialTrack
/// Size: 0x0010 (16 bytes) (0x0000A0 - 0x0000B0) align 8 pad: 0x0000
class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00A0   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneMotionVectorSimulationSystem
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000098) align 8 pad: 0x0000
class UMovieSceneMotionVectorSimulationSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x58];                                      // 0x0040   (0x0058)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertySection
/// Size: 0x00C0 (192 bytes) (0x0000E8 - 0x0001A8) align 8 pad: 0x0000
class UMovieSceneObjectPropertySection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x00E8   (0x00C0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertyTrack
/// Size: 0x0010 (16 bytes) (0x0000C0 - 0x0000D0) align 8 pad: 0x0000
class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00C0   (0x0008)  MISSED
	class UClass*                                      PropertyClass;                                              // 0x00C8   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParameterSection
/// Size: 0x0060 (96 bytes) (0x0000E8 - 0x000148) align 8 pad: 0x0000
class UMovieSceneParameterSection : public UMovieSceneSection
{ 
public:
	TArray<FBoolParameterNameAndCurve>                 BoolParameterNamesAndCurves;                                // 0x00E8   (0x0010)  
	TArray<FScalarParameterNameAndCurve>               ScalarParameterNamesAndCurves;                              // 0x00F8   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2DParameterNamesAndCurves;                            // 0x0108   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              VectorParameterNamesAndCurves;                              // 0x0118   (0x0010)  
	TArray<FColorParameterNameAndCurves>               ColorParameterNamesAndCurves;                               // 0x0128   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           TransformParameterNamesAndCurves;                           // 0x0138   (0x0010)  


	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVectorParameter
	// bool RemoveVectorParameter(FName InParameterName);                                                                       // [0x36512d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVector2DParameter
	// bool RemoveVector2DParameter(FName InParameterName);                                                                     // [0x3651230] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveTransformParameter
	// bool RemoveTransformParameter(FName InParameterName);                                                                    // [0x3651190] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveScalarParameter
	// bool RemoveScalarParameter(FName InParameterName);                                                                       // [0x36510f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveColorParameter
	// bool RemoveColorParameter(FName InParameterName);                                                                        // [0x3651050] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveBoolParameter
	// bool RemoveBoolParameter(FName InParameterName);                                                                         // [0x3650fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.GetParameterNames
	// void GetParameterNames(TSet<FName>& ParameterNames);                                                                     // [0x3650e70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVectorParameterKey
	// void AddVectorParameterKey(FName InParameterName, FFrameNumber InTime, FVector InValue);                                 // [0x3650d50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVector2DParameterKey
	// void AddVector2DParameterKey(FName InParameterName, FFrameNumber InTime, FVector2D InValue);                             // [0x3650c40] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddTransformParameterKey
	// void AddTransformParameterKey(FName InParameterName, FFrameNumber InTime, FTransform& InValue);                          // [0x3650ae0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddScalarParameterKey
	// void AddScalarParameterKey(FName InParameterName, FFrameNumber InTime, float InValue);                                   // [0x36509c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddColorParameterKey
	// void AddColorParameterKey(FName InParameterName, FFrameNumber InTime, FLinearColor InValue);                             // [0x36508a0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddBoolParameterKey
	// void AddBoolParameterKey(FName InParameterName, FFrameNumber InTime, bool InValue);                                      // [0x3650790] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleParameterTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0098   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleChannel
/// Size: 0x0000 (0 bytes) (0x000098 - 0x000098) align 8 pad: 0x0000
struct FMovieSceneParticleChannel : FMovieSceneByteChannel
{ 
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleSection
/// Size: 0x0098 (152 bytes) (0x0000E8 - 0x000180) align 8 pad: 0x0000
class UMovieSceneParticleSection : public UMovieSceneSection
{ 
public:
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x00E8   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleTrack
/// Size: 0x0018 (24 bytes) (0x000090 - 0x0000A8) align 8 pad: 0x0000
class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  ParticleSections;                                           // 0x0098   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseBoolBlenderSystem
/// Size: 0x0028 (40 bytes) (0x000068 - 0x000090) align 8 pad: 0x0000
class UMovieScenePiecewiseBoolBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0068   (0x0028)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseByteBlenderSystem
/// Size: 0x0028 (40 bytes) (0x000068 - 0x000090) align 8 pad: 0x0000
class UMovieScenePiecewiseByteBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0068   (0x0028)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseEnumBlenderSystem
/// Size: 0x0028 (40 bytes) (0x000068 - 0x000090) align 8 pad: 0x0000
class UMovieScenePiecewiseEnumBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x28];                                      // 0x0068   (0x0028)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseFloatBlenderSystem
/// Size: 0x00C0 (192 bytes) (0x000068 - 0x000128) align 8 pad: 0x0000
class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0xC0];                                      // 0x0068   (0x00C0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseIntegerBlenderSystem
/// Size: 0x0048 (72 bytes) (0x000068 - 0x0000B0) align 8 pad: 0x0000
class UMovieScenePiecewiseIntegerBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x48];                                      // 0x0068   (0x0048)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialSection
/// Size: 0x00C0 (192 bytes) (0x0000E8 - 0x0001A8) align 8 pad: 0x0000
class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x00E8   (0x00C0)  
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTrack
/// Size: 0x0010 (16 bytes) (0x0000C0 - 0x0000D0) align 8 pad: 0x0000
class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00C0   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyInstantiatorSystem
/// Size: 0x0208 (520 bytes) (0x000040 - 0x000248) align 8 pad: 0x0000
class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x208];                                     // 0x0040   (0x0208)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
/// Size: 0x0000 (0 bytes) (0x000040 - 0x000040) align 8 pad: 0x0000
class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationParams
/// Size: 0x00D8 (216 bytes) (0x000000 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationParams
{ 
	class UAnimSequenceBase*                           Animation;                                                  // 0x0000   (0x0008)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x0008   (0x0004)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x000C   (0x0004)  
	FFrameNumber                                       EndFrameOffset;                                             // 0x0010   (0x0004)  
	float                                              PlayRate;                                                   // 0x0014   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Weight;                                                     // 0x0028   (0x00A0)  
	bool                                               bSkipAnimNotifiers;                                         // 0x00C8   (0x0001)  
	bool                                               bForceCustomMode;                                           // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x00CA   (0x0002)  MISSED
	float                                              StartOffset;                                                // 0x00CC   (0x0004)  
	float                                              EndOffset;                                                  // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSection
/// Size: 0x0188 (392 bytes) (0x0000E8 - 0x000270) align 16 pad: 0x0000
class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSkeletalAnimationParams                 Params;                                                     // 0x00E8   (0x00D8)  
	class UAnimSequence*                               AnimSequence;                                               // 0x01C0   (0x0008)  
	class UAnimSequenceBase*                           Animation;                                                  // 0x01C8   (0x0008)  
	float                                              StartOffset;                                                // 0x01D0   (0x0004)  
	float                                              EndOffset;                                                  // 0x01D4   (0x0004)  
	float                                              PlayRate;                                                   // 0x01D8   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x01DC:0 (0x0001)  
	unsigned char                                      UnknownData00_5[0x3];                                       // 0x01DD   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x01E0   (0x0008)  
	FVector                                            StartLocationOffset;                                        // 0x01E8   (0x000C)  
	FRotator                                           StartRotationOffset;                                        // 0x01F4   (0x000C)  
	bool                                               bMatchWithPrevious;                                         // 0x0200   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0201   (0x0003)  MISSED
	FName                                              MatchedBoneName;                                            // 0x0204   (0x0008)  
	FVector                                            MatchedLocationOffset;                                      // 0x020C   (0x000C)  
	FRotator                                           MatchedRotationOffset;                                      // 0x0218   (0x000C)  
	bool                                               bMatchTranslation;                                          // 0x0224   (0x0001)  
	bool                                               bMatchIncludeZHeight;                                       // 0x0225   (0x0001)  
	bool                                               bMatchRotationYaw;                                          // 0x0226   (0x0001)  
	bool                                               bMatchRotationPitch;                                        // 0x0227   (0x0001)  
	bool                                               bMatchRotationRoll;                                         // 0x0228   (0x0001)  
	unsigned char                                      UnknownData02_7[0x47];                                      // 0x0229   (0x0047)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{ 
	unsigned char                                      UnknownData00_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationTrack
/// Size: 0x0058 (88 bytes) (0x000090 - 0x0000E8) align 8 pad: 0x0000
class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0090   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0098   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FMovieSceneSkeletalAnimRootMotionTrackParams       RootMotionParams;                                           // 0x00B0   (0x0030)  
	bool                                               bBlendFirstChildOfRoot;                                     // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData02_7[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoSection
/// Size: 0x00A0 (160 bytes) (0x0000E8 - 0x000188) align 8 pad: 0x0000
class UMovieSceneSlomoSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00E8   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringChannel
/// Size: 0x0098 (152 bytes) (0x000008 - 0x0000A0) align 8 pad: 0x0000
struct FMovieSceneStringChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FString>                                    Values;                                                     // 0x0018   (0x0010)  
	FString                                            DefaultValue;                                               // 0x0028   (0x0010)  
	bool                                               bHasDefaultValue;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData00_7[0x67];                                      // 0x0039   (0x0067)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneStringSection
/// Size: 0x00A0 (160 bytes) (0x0000E8 - 0x000188) align 8 pad: 0x0000
class UMovieSceneStringSection : public UMovieSceneSection
{ 
public:
	FMovieSceneStringChannel                           StringCurve;                                                // 0x00E8   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneStringTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneStringTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData00_1[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOriginSystem
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0040   (0x0038)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformTrack
/// Size: 0x0000 (0 bytes) (0x0000C0 - 0x0000C0) align 8 pad: 0x0000
class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorPropertySystem
/// Size: 0x0000 (0 bytes) (0x000058 - 0x000058) align 8 pad: 0x0000
class UMovieSceneVectorPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorSection
/// Size: 0x0290 (656 bytes) (0x0000E8 - 0x000378) align 8 pad: 0x0000
class UMovieSceneVectorSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x00F0   (0x0280)  
	int32_t                                            ChannelsUsed;                                               // 0x0370   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0374   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorTrack
/// Size: 0x0008 (8 bytes) (0x0000C0 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
{ 
public:
	int32_t                                            NumChannelsUsed;                                            // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVisibilityTrack
/// Size: 0x0000 (0 bytes) (0x0000C8 - 0x0000C8) align 8 pad: 0x0000
class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000090) align 8 pad: 0x0000
class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.WeightAndEasingEvaluatorSystem
/// Size: 0x0038 (56 bytes) (0x000040 - 0x000078) align 8 pad: 0x0000
class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData00_1[0x38];                                      // 0x0040   (0x0038)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DPathSectionTemplate
/// Size: 0x00C0 (192 bytes) (0x000020 - 0x0000E0) align 8 pad: 0x0000
struct FMovieScene3DPathSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneObjectBindingID                         PathBindingID;                                              // 0x0020   (0x0018)  
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0038   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x00D8   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x00D9   (0x0001)  
	unsigned char                                      UnknownData00_6[0x2];                                       // 0x00DA   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x00DC:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x00DC:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x00DC:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x00DD   (0x0003)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformKeyStruct
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000048) align 8 pad: 0x0000
struct FMovieScene3DTransformKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	FVector                                            Scale;                                                      // 0x0020   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x002C   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DScaleKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DScaleKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Scale;                                                      // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DRotationKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DRotationKeyStruct : FMovieSceneKeyStruct
{ 
	FRotator                                           Rotation;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DLocationKeyStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000030) align 8 pad: 0x0000
struct FMovieScene3DLocationKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData00_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
/// Size: 0x00C8 (200 bytes) (0x000020 - 0x0000E8) align 8 pad: 0x0000
struct FMovieSceneActorReferenceSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0018)  
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x0038   (0x00B0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneAudioSectionTemplate
/// Size: 0x0008 (8 bytes) (0x000020 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneAudioSectionTemplate : FMovieSceneEvalTemplate
{ 
	class UMovieSceneAudioSection*                     AudioSection;                                               // 0x0020   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraAnimSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneCameraAnimSectionData                   SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x0044   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000040) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FFrameNumber>                               TriggerTimes;                                               // 0x0020   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        TriggerValues;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneCameraShakeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorKeyStruct
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneColorKeyStruct : FMovieSceneKeyStruct
{ 
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x001C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorSectionTemplate
/// Size: 0x0288 (648 bytes) (0x000038 - 0x0002C0) align 8 pad: 0x0000
struct FMovieSceneColorSectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x0038   (0x0280)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x02B9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPayloadVariable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align 8 pad: 0x0000
struct FMovieSceneEventPayloadVariable
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventTriggerData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align 8 pad: 0x0000
struct FMovieSceneEventTriggerData
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
	FGuid                                              ObjectBindingId;                                            // 0x0028   (0x0010)  
	unsigned char                                      UnknownData00_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionTemplate
/// Size: 0x0090 (144 bytes) (0x000020 - 0x0000B0) align 8 pad: 0x0000
struct FMovieSceneEventSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneEventSectionData                        EventData;                                                  // 0x0020   (0x0088)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x00A8:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneFadeSectionTemplate
/// Size: 0x00B8 (184 bytes) (0x000020 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneFadeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            FadeCurve;                                                  // 0x0020   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x00C0   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData00_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneMaterialParameterCollectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	class UMaterialParameterCollection*                MPC;                                                        // 0x0080   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneObjectPropertyTemplate
/// Size: 0x00C0 (192 bytes) (0x000038 - 0x0000F8) align 8 pad: 0x0000
struct FMovieSceneObjectPropertyTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x0038   (0x00C0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
/// Size: 0x0008 (8 bytes) (0x000080 - 0x000088) align 8 pad: 0x0000
struct FMovieSceneComponentMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0080   (0x0004)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
/// Size: 0x0000 (0 bytes) (0x000080 - 0x000080) align 8 pad: 0x0000
struct FMovieSceneParticleParameterSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleSectionTemplate
/// Size: 0x0098 (152 bytes) (0x000020 - 0x0000B8) align 8 pad: 0x0000
struct FMovieSceneParticleSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x0020   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
/// Size: 0x00C8 (200 bytes) (0x000020 - 0x0000E8) align 8 pad: 0x0000
struct FMovieScenePrimitiveMaterialTemplate : FMovieSceneEvalTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0020   (0x0004)  
	unsigned char                                      UnknownData00_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x0028   (0x00C0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringPropertySectionTemplate
/// Size: 0x00A0 (160 bytes) (0x000038 - 0x0000D8) align 8 pad: 0x0000
struct FMovieSceneStringPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneStringChannel                           StringCurve;                                                // 0x0038   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
/// Size: 0x0090 (144 bytes) (0x000038 - 0x0000C8) align 8 pad: 0x0000
struct FMovieSceneBoolPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x0038   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
/// Size: 0x0008 (8 bytes) (0x0000D8 - 0x0000E0) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : FMovieSceneSkeletalAnimationParams
{ 
	FFrameNumber                                       SectionStartTime;                                           // 0x00D8   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x00DC   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
/// Size: 0x00E0 (224 bytes) (0x000020 - 0x000100) align 8 pad: 0x0000
struct FMovieSceneSkeletalAnimationSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneSkeletalAnimationSectionTemplateParameters Params;                                                  // 0x0020   (0x00E0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSlomoSectionTemplate
/// Size: 0x00A0 (160 bytes) (0x000020 - 0x0000C0) align 8 pad: 0x0000
struct FMovieSceneSlomoSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            SlomoCurve;                                                 // 0x0020   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.LevelVisibilityComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align 8 pad: 0x0000
struct FLevelVisibilityComponentData
{ 
	class UMovieSceneLevelVisibilitySection*           Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStructBase
/// Size: 0x0020 (32 bytes) (0x000008 - 0x000028) align 8 pad: 0x0000
struct FMovieSceneVectorKeyStructBase : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData00_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector4KeyStruct
/// Size: 0x0018 (24 bytes) (0x000028 - 0x000040) align 16 pad: 0x0000
struct FMovieSceneVector4KeyStruct : FMovieSceneVectorKeyStructBase
{ 
	unsigned char                                      UnknownData00_3[0x8];                                       // 0x0028   (0x0008)  MISSED
	FVector4                                           Vector;                                                     // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStruct
/// Size: 0x0010 (16 bytes) (0x000028 - 0x000038) align 8 pad: 0x0000
struct FMovieSceneVectorKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector                                            Vector;                                                     // 0x0028   (0x000C)  
	unsigned char                                      UnknownData00_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector2DKeyStruct
/// Size: 0x0008 (8 bytes) (0x000028 - 0x000030) align 8 pad: 0x0000
struct FMovieSceneVector2DKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector2D                                          Vector;                                                     // 0x0028   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVisibilitySectionTemplate
/// Size: 0x0000 (0 bytes) (0x0000C8 - 0x0000C8) align 8 pad: 0x0000
struct FMovieSceneVisibilitySectionTemplate : FMovieSceneBoolPropertySectionTemplate
{ 
};

static_assert(sizeof(FTickFunction) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FActorComponentTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSimpleMemberReference) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UActorComponent) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(USceneComponent) == 0x01F8); // 504 bytes (0x0000B0 - 0x0001F8)
static_assert(sizeof(FKeyHandleMap) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FIndexedCurve) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FRealCurve) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(FRichCurveKey) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FRichCurve) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(FRuntimeFloatCurve) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FBaseAttenuationSettings) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FAttenuationSubmixSendSettings) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FSoundAttenuationPluginSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSoundAttenuationSettings) == 0x03A0); // 928 bytes (0x0000B0 - 0x0003A0)
static_assert(sizeof(FSoundSubmixSendInfo) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FSoundSourceBusSendInfo) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(USynthComponent) == 0x06C0); // 1728 bytes (0x0001F8 - 0x0006C0)
static_assert(sizeof(UAudioGenerator) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UBlueprintFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAudioMixerBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuartzClockHandle) == 0x0190); // 400 bytes (0x000028 - 0x000190)
static_assert(sizeof(USoundEffectPreset) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(USoundEffectSubmixPreset) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FSubmixEffectDynamicProcessorFilterSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSubmixEffectDynamicsProcessorSettings) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(USubmixEffectDynamicsProcessorPreset) == 0x0150); // 336 bytes (0x000068 - 0x000150)
static_assert(sizeof(FSubmixEffectEQBand) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSubmixEffectSubmixEQSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USubmixEffectSubmixEQPreset) == 0x00B0); // 176 bytes (0x000068 - 0x0000B0)
static_assert(sizeof(FSubmixEffectReverbSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(USubmixEffectReverbPreset) == 0x0110); // 272 bytes (0x000068 - 0x000110)
static_assert(sizeof(USubsystem) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWorldSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UTickableWorldSubsystem) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UQuartzSubsystem) == 0x0150); // 336 bytes (0x000040 - 0x000150)
static_assert(sizeof(FSoundConcurrencySettings) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USoundBase) == 0x0170); // 368 bytes (0x000028 - 0x000170)
static_assert(sizeof(FSoundModulationDestinationSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundModulationDefaultSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSoundModulationDefaultRoutingSettings) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FSoundWaveSpectralDataEntry) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundWaveSpectralTimeData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSoundWaveEnvelopeTimeData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSubtitleCue) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundWave) == 0x0370); // 880 bytes (0x000170 - 0x000370)
static_assert(sizeof(USoundWaveProcedural) == 0x03C0); // 960 bytes (0x000370 - 0x0003C0)
static_assert(sizeof(USynthSound) == 0x03E0); // 992 bytes (0x0003C0 - 0x0003E0)
static_assert(sizeof(UPlayer) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(FUniqueNetIdRepl) == 0x0028); // 40 bytes (0x000001 - 0x000028)
static_assert(sizeof(UNetConnection) == 0x1BA8); // 7080 bytes (0x000048 - 0x001BA8)
static_assert(sizeof(FChannelDefinition) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UNetDriver) == 0x0760); // 1888 bytes (0x000028 - 0x000760)
static_assert(sizeof(UBlueprintAsyncActionBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UOnlineBlueprintCallProxyBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FActorTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FRepMovement) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FVector_NetQuantize100) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FRepAttachment) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(AActor) == 0x0220); // 544 bytes (0x000028 - 0x000220)
static_assert(sizeof(UOnlineEngineInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UOnlineSession) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UGameInstance) == 0x01A8); // 424 bytes (0x000028 - 0x0001A8)
static_assert(sizeof(AInfo) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(AGameSession) == 0x0238); // 568 bytes (0x000220 - 0x000238)
static_assert(sizeof(FLightingChannels) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCustomPrimitiveData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCollisionResponseContainer) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FResponseChannel) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCollisionResponse) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FWalkableSlopeOverride) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBodyInstance) == 0x0158); // 344 bytes (0x000018 - 0x000158)
static_assert(sizeof(UPrimitiveComponent) == 0x0450); // 1104 bytes (0x0001F8 - 0x000450)
static_assert(sizeof(UMeshComponent) == 0x0478); // 1144 bytes (0x000450 - 0x000478)
static_assert(sizeof(FVertexOffsetUsage) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSkelMeshComponentLODInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(USkinnedMeshComponent) == 0x06A0); // 1696 bytes (0x000478 - 0x0006A0)
static_assert(sizeof(UStreamableRenderAsset) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FMeshUVChannelInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMaterial) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FBoneMirrorInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPerPlatformFloat) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSkeletalMeshBuildSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMeshOptimizationSettings) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FBoneReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkeletalMeshLODInfo) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPerPlatformInt) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FPerPlatformBool) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSkeletalMeshSamplingRegionMaterialFilter) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSkeletalMeshSamplingRegionBoneFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSkeletalMeshSamplingRegion) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSkeletalMeshSamplingLODBuiltData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSkeletalMeshSamplingRegionBuiltData) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FSkeletalMeshSamplingBuiltData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSkeletalMeshSamplingInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSkinWeightProfileInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USkeletalMesh) == 0x03A0); // 928 bytes (0x000060 - 0x0003A0)
static_assert(sizeof(UAnimNotify) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UReverbEffect) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(USoundEffectSourcePreset) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(UStereoLayerShape) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStereoLayerShapeQuad) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAssetImportData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAssetUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UFXSystemComponent) == 0x0450); // 1104 bytes (0x000450 - 0x000450)
static_assert(sizeof(UFXSystemAsset) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UAnimNotifyState) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FGeomSelection) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(ABrush) == 0x0258); // 600 bytes (0x000220 - 0x000258)
static_assert(sizeof(AVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(USaveGame) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCameraShakePattern) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDynamicSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEngineSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDataAsset) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UMaterialExpression) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FStatColorMapEntry) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FStatColorMapping) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FGameNameRedirect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FClassRedirect) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FPluginRedirect) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStructRedirect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDirectoryPath) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDropNoteInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FNetDriverDefinition) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UEngine) == 0x0D20); // 3360 bytes (0x000028 - 0x000D20)
static_assert(sizeof(UScriptViewportClient) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FDebugDisplayProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UGameViewportClient) == 0x0360); // 864 bytes (0x000038 - 0x000360)
static_assert(sizeof(ULocalPlayer) == 0x0258); // 600 bytes (0x000048 - 0x000258)
static_assert(sizeof(ULocalPlayerSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UGameInstanceSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FSingleAnimationPlayData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USkeletalMeshComponent) == 0x0EC8); // 3784 bytes (0x0006A0 - 0x000EC8)
static_assert(sizeof(FAnimNotifyEventReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimNotifyQueue) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FAnimLinkableElement) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimNotifyEvent) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(UAnimInstance) == 0x02B8); // 696 bytes (0x000028 - 0x0002B8)
static_assert(sizeof(UTimecodeProvider) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UEngineCustomTimeStep) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AGameModeBase) == 0x02C0); // 704 bytes (0x000220 - 0x0002C0)
static_assert(sizeof(UMaterialExpressionTextureBase) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FExpressionInput) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UMaterialExpressionTextureSample) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter2D) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(APawn) == 0x0280); // 640 bytes (0x000220 - 0x000280)
static_assert(sizeof(FBasedMovementInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FRootMotionSourceSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FVector_NetQuantize10) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FRootMotionSourceGroup) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FRootMotionMovementParams) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FRepRootMotionMontage) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FSimulatedRootMotionReplicatedMove) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(ACharacter) == 0x04B8); // 1208 bytes (0x000280 - 0x0004B8)
static_assert(sizeof(FSplineCurves) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(USplineComponent) == 0x0550); // 1360 bytes (0x000450 - 0x000550)
static_assert(sizeof(UCameraShakeBase) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UCommandlet) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(FAudioComponentParam) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAudioComponent) == 0x0860); // 2144 bytes (0x0001F8 - 0x000860)
static_assert(sizeof(UApplicationLifecycleComponent) == 0x0140); // 320 bytes (0x0000B0 - 0x000140)
static_assert(sizeof(AGameMode) == 0x0308); // 776 bytes (0x0002C0 - 0x000308)
static_assert(sizeof(AGameStateBase) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(AGameState) == 0x0290); // 656 bytes (0x000270 - 0x000290)
static_assert(sizeof(AController) == 0x0298); // 664 bytes (0x000220 - 0x000298)
static_assert(sizeof(FActiveForceFeedbackEffect) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(APlayerController) == 0x0580); // 1408 bytes (0x000298 - 0x000580)
static_assert(sizeof(UMovementComponent) == 0x00F0); // 240 bytes (0x0000B0 - 0x0000F0)
static_assert(sizeof(FMovementProperties) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FNavAgentProperties) == 0x0030); // 48 bytes (0x000001 - 0x000030)
static_assert(sizeof(UNavMovementComponent) == 0x0130); // 304 bytes (0x0000F0 - 0x000130)
static_assert(sizeof(UPawnMovementComponent) == 0x0138); // 312 bytes (0x000130 - 0x000138)
static_assert(sizeof(ATriggerBase) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(ATriggerBox) == 0x0228); // 552 bytes (0x000228 - 0x000228)
static_assert(sizeof(UDamageType) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UProjectileMovementComponent) == 0x01D0); // 464 bytes (0x0000F0 - 0x0001D0)
static_assert(sizeof(UPrimaryDataAsset) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FStaticMeshComponentLODInfo) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FStreamingTextureBuildInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLightmassPrimitiveSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UStaticMeshComponent) == 0x04E0); // 1248 bytes (0x000478 - 0x0004E0)
static_assert(sizeof(UArrowComponent) == 0x0468); // 1128 bytes (0x000450 - 0x000468)
static_assert(sizeof(UShapeComponent) == 0x0468); // 1128 bytes (0x000450 - 0x000468)
static_assert(sizeof(UBoxComponent) == 0x0478); // 1144 bytes (0x000468 - 0x000478)
static_assert(sizeof(FDebugTextInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(AHUD) == 0x0310); // 784 bytes (0x000220 - 0x000310)
static_assert(sizeof(FWeightedBlendable) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeightedBlendables) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPostProcessSettings) == 0x0560); // 1376 bytes (0x000000 - 0x000560)
static_assert(sizeof(UPostProcessComponent) == 0x0770); // 1904 bytes (0x0001F8 - 0x000770)
static_assert(sizeof(ANavigationObjectBase) == 0x0248); // 584 bytes (0x000220 - 0x000248)
static_assert(sizeof(APlayerStart) == 0x0250); // 592 bytes (0x000248 - 0x000250)
static_assert(sizeof(ASkeletalMeshActor) == 0x02A8); // 680 bytes (0x000220 - 0x0002A8)
static_assert(sizeof(ATargetPoint) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(UAISystemBase) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(FVector_NetQuantize) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FVector_NetQuantizeNormal) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FHitResult) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FFindFloorResult) == 0x0094); // 148 bytes (0x000000 - 0x000094)
static_assert(sizeof(FNavAvoidanceMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCharacterMovementComponentPostPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCharacterMovementComponent) == 0x0AF0); // 2800 bytes (0x000138 - 0x000AF0)
static_assert(sizeof(UGameUserSettings) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(ALevelScriptActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UNavAreaBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FStreamingLevelsToConsider) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FLevelCollection) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FWorldPSCPool) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UWorld) == 0x0798); // 1944 bytes (0x000028 - 0x000798)
static_assert(sizeof(UNavigationSystemBase) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMinimalViewInfo) == 0x05F0); // 1520 bytes (0x000000 - 0x0005F0)
static_assert(sizeof(FCameraCacheEntry) == 0x0600); // 1536 bytes (0x000000 - 0x000600)
static_assert(sizeof(FTViewTarget) == 0x0610); // 1552 bytes (0x000000 - 0x000610)
static_assert(sizeof(APlayerCameraManager) == 0x2810); // 10256 bytes (0x000220 - 0x002810)
static_assert(sizeof(APlayerState) == 0x0320); // 800 bytes (0x000220 - 0x000320)
static_assert(sizeof(ADefaultPawn) == 0x02A8); // 680 bytes (0x000280 - 0x0002A8)
static_assert(sizeof(ASpectatorPawn) == 0x02A8); // 680 bytes (0x0002A8 - 0x0002A8)
static_assert(sizeof(USpringArmComponent) == 0x0280); // 640 bytes (0x0001F8 - 0x000280)
static_assert(sizeof(UCameraModifier) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(FActiveCameraShakeInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UCameraModifier_CameraShake) == 0x00B0); // 176 bytes (0x000048 - 0x0000B0)
static_assert(sizeof(USoundNode) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(USoundNodeAssetReferencer) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(ASkyLight) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(UTexture) == 0x0178); // 376 bytes (0x000060 - 0x000178)
static_assert(sizeof(UTextureCube) == 0x01D0); // 464 bytes (0x000178 - 0x0001D0)
static_assert(sizeof(FInstancedStaticMeshInstanceData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FInstancedStaticMeshMappingInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInstancedStaticMeshComponent) == 0x0590); // 1424 bytes (0x0004E0 - 0x000590)
static_assert(sizeof(UHierarchicalInstancedStaticMeshComponent) == 0x0678); // 1656 bytes (0x000590 - 0x000678)
static_assert(sizeof(AStaticMeshActor) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(FLightmassMaterialInterfaceSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMaterialTextureInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMaterialInterface) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FMaterialParameterInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FScalarParameterValue) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FVectorParameterValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTextureParameterValue) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRuntimeVirtualTextureParameterValue) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FFontParameterValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMaterialInstanceBasePropertyOverrides) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FStaticParameterBase) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FStaticSwitchParameter) == 0x0028); // 40 bytes (0x000024 - 0x000028)
static_assert(sizeof(FStaticComponentMaskParameter) == 0x0028); // 40 bytes (0x000024 - 0x000028)
static_assert(sizeof(FStaticTerrainLayerWeightParameter) == 0x002C); // 44 bytes (0x000024 - 0x00002C)
static_assert(sizeof(FMaterialLayersFunctions) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FStaticMaterialLayersParameter) == 0x0068); // 104 bytes (0x000024 - 0x000068)
static_assert(sizeof(FStaticParameterSet) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMaterialCachedParameterEntry) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMaterialCachedParameters) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(UMaterialInstance) == 0x0310); // 784 bytes (0x000088 - 0x000310)
static_assert(sizeof(UMaterialInstanceConstant) == 0x0318); // 792 bytes (0x000310 - 0x000318)
static_assert(sizeof(UMaterialExpressionCustomOutput) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UDynamicBlueprintBinding) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBPComponentClassOverride) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBlueprintGeneratedClass) == 0x0328); // 808 bytes (0x000230 - 0x000328)
static_assert(sizeof(ACameraActor) == 0x07B0); // 1968 bytes (0x000220 - 0x0007B0)
static_assert(sizeof(UCameraComponent) == 0x07D0); // 2000 bytes (0x0001F8 - 0x0007D0)
static_assert(sizeof(UBlueprintCore) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UBlueprint) == 0x00A0); // 160 bytes (0x000050 - 0x0000A0)
static_assert(sizeof(UModel) == 0x0258); // 600 bytes (0x000028 - 0x000258)
static_assert(sizeof(UChannel) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(UActorChannel) == 0x0290); // 656 bytes (0x000068 - 0x000290)
static_assert(sizeof(UAnimationAsset) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(FInterpolationParameter) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPerBoneInterpolation) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBlendSample) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEditorElement) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBlendParameter) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UBlendSpaceBase) == 0x0148); // 328 bytes (0x000080 - 0x000148)
static_assert(sizeof(UBlendSpace) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(UAimOffsetBlendSpace) == 0x0150); // 336 bytes (0x000150 - 0x000150)
static_assert(sizeof(UBlendSpace1D) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(UAimOffsetBlendSpace1D) == 0x0150); // 336 bytes (0x000150 - 0x000150)
static_assert(sizeof(AAmbientSound) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(FCustomAttributeSetting) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAnimationSettings) == 0x00D0); // 208 bytes (0x000038 - 0x0000D0)
static_assert(sizeof(FAnimGroupInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UAnimBlueprint) == 0x00C8); // 200 bytes (0x0000A0 - 0x0000C8)
static_assert(sizeof(FBakedStateExitTransition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBakedAnimationState) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FAnimationStateBase) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAnimationTransitionBetweenStates) == 0x0040); // 64 bytes (0x000008 - 0x000040)
static_assert(sizeof(FBakedAnimationStateMachine) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FExposedValueCopyRecord) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FExposedValueHandler) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UAnimBlueprintGeneratedClass) == 0x05B0); // 1456 bytes (0x000328 - 0x0005B0)
static_assert(sizeof(UAnimBoneCompressionCodec) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAnimBoneCompressionSettings) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FAnimBlueprintFunction) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FAnimBlueprintFunctionData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UAnimClassData) == 0x0330); // 816 bytes (0x000028 - 0x000330)
static_assert(sizeof(UAnimClassInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSmartName) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimCurveBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFloatCurve) == 0x0098); // 152 bytes (0x000018 - 0x000098)
static_assert(sizeof(FRawCurveTracks) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimSequenceBase) == 0x00A8); // 168 bytes (0x000080 - 0x0000A8)
static_assert(sizeof(UAnimCompositeBase) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(FAnimSegment) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAnimTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimComposite) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UAnimCompress) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimCompress_BitwiseCompressOnly) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimCompress_LeastDestructive) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimCompress_RemoveLinearKeys) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UAnimCompress_PerTrackCompression) == 0x00D8); // 216 bytes (0x000060 - 0x0000D8)
static_assert(sizeof(UAnimCompress_RemoveEverySecondKey) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimCompress_RemoveTrivialKeys) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimCurveCompressionCodec) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionCodec_CompressedRichCurve) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionCodec_UniformIndexable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionCodec_UniformlySampled) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionSettings) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UAnimLayerInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimMetaData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FAlphaBlend) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimSyncMarker) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMarkerSyncData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCompositeSection) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FSlotAnimationTrack) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBranchingPoint) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FBranchingPointMarker) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FTimeStretchCurveMarker) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTimeStretchCurve) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UAnimMontage) == 0x01D0); // 464 bytes (0x0000A8 - 0x0001D0)
static_assert(sizeof(UAnimNotify_PauseClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_PlayParticleEffect) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UAnimNotify_PlaySound) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UAnimNotify_ResetClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_ResetDynamics) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_ResumeClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_DisableRootMotion) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_TimedParticleEffect) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UAnimNotifyState_Trail) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FTrackToSkeletonMap) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FStringCurveKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStringCurve) == 0x0088); // 136 bytes (0x000068 - 0x000088)
static_assert(sizeof(FBakedStringCustomAttribute) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FIntegralKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FIntegralCurve) == 0x0080); // 128 bytes (0x000068 - 0x000080)
static_assert(sizeof(FBakedIntegerCustomAttribute) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FSimpleCurveKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSimpleCurve) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FBakedFloatCustomAttribute) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FBakedCustomAttributePerBoneData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UAnimSequence) == 0x01C0); // 448 bytes (0x0000A8 - 0x0001C0)
static_assert(sizeof(FAnimSetMeshLinkup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimSet) == 0x00F0); // 240 bytes (0x000028 - 0x0000F0)
static_assert(sizeof(UAnimSingleNodeInstance) == 0x02D0); // 720 bytes (0x0002B8 - 0x0002D0)
static_assert(sizeof(UAnimStateMachineTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimStreamable) == 0x00E0); // 224 bytes (0x0000A8 - 0x0000E0)
static_assert(sizeof(UAssetExportTask) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UAssetManager) == 0x0478); // 1144 bytes (0x000028 - 0x000478)
static_assert(sizeof(FPrimaryAssetRules) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrimaryAssetTypeInfo) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FPrimaryAssetRulesOverride) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPrimaryAssetRulesCustomOverride) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FAssetManagerRedirect) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAssetManagerSettings) == 0x0100); // 256 bytes (0x000038 - 0x000100)
static_assert(sizeof(FAssetMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAssetMappingTable) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAsyncActionHandleSaveGame) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetBase) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UAsyncActionLoadPrimaryAsset) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetClass) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetList) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetClassList) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionChangePrimaryAssetBundles) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(AAtmosphericFog) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(FAtmospherePrecomputeParameters) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(UAtmosphericFogComponent) == 0x0300); // 768 bytes (0x0001F8 - 0x000300)
static_assert(sizeof(UAudioBus) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FAudioQualitySettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSoundDebugEntry) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FDefaultAudioBusSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UAudioSettings) == 0x0198); // 408 bytes (0x000038 - 0x000198)
static_assert(sizeof(FReverbSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FInteriorSettings) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FAudioVolumeSubmixSendSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAudioVolumeSubmixOverrideSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AAudioVolume) == 0x02C8); // 712 bytes (0x000258 - 0x0002C8)
static_assert(sizeof(UAutoDestroySubsystem) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(FEditorMapPerformanceTestDefinition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFilePath) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FImportFactorySettingValues) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FEditorImportWorkflowDefinition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBuildPromotionImportWorkflowSettings) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(FBuildPromotionOpenAssetSettings) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FBuildPromotionNewProjectSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBuildPromotionTestSettings) == 0x01F0); // 496 bytes (0x000000 - 0x0001F0)
static_assert(sizeof(FMaterialEditorPromotionSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FParticleEditorPromotionSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBlueprintEditorPromotionSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FExternalToolDefinition) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FEditorImportExportTestDefinition) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FLaunchOnTestSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAutomationTestSettings) == 0x0340); // 832 bytes (0x000028 - 0x000340)
static_assert(sizeof(UAvoidanceManager) == 0x00E0); // 224 bytes (0x000028 - 0x0000E0)
static_assert(sizeof(FBandwidthTestItem) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBandwidthTestGenerator) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ABandwidthTestActor) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(UBillboardComponent) == 0x0470); // 1136 bytes (0x000450 - 0x000470)
static_assert(sizeof(UBlendableInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBoneNode) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVirtualBone) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSmartNameContainer) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FAnimSlotGroup) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USkeleton) == 0x0390); // 912 bytes (0x000028 - 0x000390)
static_assert(sizeof(FBlendProfileBoneEntry) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UBlendProfile) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ABlockingVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(UBlueprintExtension) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintMapLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintPathsLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPlatformGameInstance) == 0x0278); // 632 bytes (0x0001A8 - 0x000278)
static_assert(sizeof(UBlueprintPlatformLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintSetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FKShapeElem) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FKSphereElem) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FKBoxElem) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FKSphylElem) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FKConvexElem) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FKTaperedCapsuleElem) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FKAggregateGeom) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UBodySetup) == 0x02A0); // 672 bytes (0x000048 - 0x0002A0)
static_assert(sizeof(FBranchFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FInputBlendPose) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBoneMaskFilter) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UBookmarkBase) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBookMark) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UBookMark2D) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UBoundsCopyComponent) == 0x0120); // 288 bytes (0x0000B0 - 0x000120)
static_assert(sizeof(AReflectionCapture) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(ABoxReflectionCapture) == 0x0228); // 552 bytes (0x000228 - 0x000228)
static_assert(sizeof(UReflectionCaptureComponent) == 0x0270); // 624 bytes (0x0001F8 - 0x000270)
static_assert(sizeof(UBoxReflectionCaptureComponent) == 0x0290); // 656 bytes (0x000270 - 0x000290)
static_assert(sizeof(UBreakpoint) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FBuilderPoly) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UBrushBuilder) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UBrushComponent) == 0x0460); // 1120 bytes (0x000450 - 0x000460)
static_assert(sizeof(ABrushShape) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(UButtonStyleAsset) == 0x02A0); // 672 bytes (0x000028 - 0x0002A0)
static_assert(sizeof(UCameraAnim) == 0x05D0); // 1488 bytes (0x000028 - 0x0005D0)
static_assert(sizeof(UCameraAnimInst) == 0x0110); // 272 bytes (0x000028 - 0x000110)
static_assert(sizeof(ACameraBlockingVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(ACameraShakeSourceActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UCameraShakeSourceComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(UCanvas) == 0x02D0); // 720 bytes (0x000028 - 0x0002D0)
static_assert(sizeof(UTextureRenderTarget) == 0x0180); // 384 bytes (0x000178 - 0x000180)
static_assert(sizeof(UTextureRenderTarget2D) == 0x01A8); // 424 bytes (0x000180 - 0x0001A8)
static_assert(sizeof(UCanvasRenderTarget2D) == 0x01D0); // 464 bytes (0x0001A8 - 0x0001D0)
static_assert(sizeof(UCapsuleComponent) == 0x0470); // 1136 bytes (0x000468 - 0x000470)
static_assert(sizeof(UCheatManager) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UCheatManagerExtension) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCheckBoxStyleAsset) == 0x05A8); // 1448 bytes (0x000028 - 0x0005A8)
static_assert(sizeof(UChildActorComponent) == 0x0230); // 560 bytes (0x0001F8 - 0x000230)
static_assert(sizeof(UChildConnection) == 0x1BB0); // 7088 bytes (0x001BA8 - 0x001BB0)
static_assert(sizeof(FDelegateArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPlatformInterfaceBase) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UCloudStorageBase) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FCollisionResponseTemplate) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FCustomChannelSetup) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCustomProfile) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRedirector) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCollisionProfile) == 0x0170); // 368 bytes (0x000038 - 0x000170)
static_assert(sizeof(FBlueprintComponentDelegateBinding) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UComponentDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UActorComponentInstanceDataTransientOuter) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveTable) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UCompositeCurveTable) == 0x00C8); // 200 bytes (0x0000A0 - 0x0000C8)
static_assert(sizeof(UDataTable) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(UCompositeDataTable) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(UConsole) == 0x0130); // 304 bytes (0x000028 - 0x000130)
static_assert(sizeof(UControlChannel) == 0x0080); // 128 bytes (0x000068 - 0x000080)
static_assert(sizeof(UStreamingSettings) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UGarbageCollectionSettings) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FCullDistanceSizePair) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ACullDistanceVolume) == 0x0270); // 624 bytes (0x000258 - 0x000270)
static_assert(sizeof(UCurveBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCurveEdPresetCurve) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveFloat) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(UCurveLinearColor) == 0x0250); // 592 bytes (0x000030 - 0x000250)
static_assert(sizeof(UTexture2D) == 0x01A0); // 416 bytes (0x000178 - 0x0001A0)
static_assert(sizeof(UCurveLinearColorAtlas) == 0x01C0); // 448 bytes (0x0001A0 - 0x0001C0)
static_assert(sizeof(UCurveSourceInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveVector) == 0x01B0); // 432 bytes (0x000030 - 0x0001B0)
static_assert(sizeof(UDataDrivenCVarEngineSubsystem) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FDataDrivenConsoleVariable) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UDataDrivenConsoleVariableSettings) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UDataTableFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADebugCameraController) == 0x0680); // 1664 bytes (0x000580 - 0x000680)
static_assert(sizeof(FDebugCameraControllerSettingsViewModeIndex) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDebugCameraControllerSettings) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(ADebugCameraHUD) == 0x0310); // 784 bytes (0x000310 - 0x000310)
static_assert(sizeof(UDebugDrawService) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADecalActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UDecalComponent) == 0x0240); // 576 bytes (0x0001F8 - 0x000240)
static_assert(sizeof(APhysicsVolume) == 0x0268); // 616 bytes (0x000258 - 0x000268)
static_assert(sizeof(ADefaultPhysicsVolume) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UDemoNetConnection) == 0x1C18); // 7192 bytes (0x001BA8 - 0x001C18)
static_assert(sizeof(FMulticastRecordOptions) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UDemoNetDriver) == 0x12D8); // 4824 bytes (0x000760 - 0x0012D8)
static_assert(sizeof(UPendingNetGame) == 0x00C0); // 192 bytes (0x000028 - 0x0000C0)
static_assert(sizeof(UDemoPendingNetGame) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UDestructibleInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FTextureLODGroup) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UTextureLODSettings) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UDeviceProfile) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(UDeviceProfileFragment) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UDeviceProfileManager) == 0x00C8); // 200 bytes (0x000028 - 0x0000C8)
static_assert(sizeof(UDialogueSoundWaveProxy) == 0x0188); // 392 bytes (0x000170 - 0x000188)
static_assert(sizeof(UDialogueVoice) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FDialogueContext) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDialogueContextMapping) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UDialogueWave) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(ALight) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(ADirectionalLight) == 0x0230); // 560 bytes (0x000230 - 0x000230)
static_assert(sizeof(ULightComponentBase) == 0x0228); // 552 bytes (0x0001F8 - 0x000228)
static_assert(sizeof(ULightComponent) == 0x0328); // 808 bytes (0x000228 - 0x000328)
static_assert(sizeof(FLightmassLightSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLightmassDirectionalLightSettings) == 0x0010); // 16 bytes (0x00000C - 0x000010)
static_assert(sizeof(UDirectionalLightComponent) == 0x03F0); // 1008 bytes (0x000328 - 0x0003F0)
static_assert(sizeof(UDistribution) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UDistributionFloat) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDistributionFloatConstant) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDistributionFloatConstantCurve) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionFloatParameterBase) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UDistributionFloatParticleParameter) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UDistributionFloatUniform) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDistributionFloatUniformCurve) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionVector) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDistributionVectorConstant) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionVectorConstantCurve) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UDistributionVectorParameterBase) == 0x0090); // 144 bytes (0x000050 - 0x000090)
static_assert(sizeof(UDistributionVectorParticleParameter) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UDistributionVectorUniform) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UDistributionVectorUniformCurve) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(ADocumentationActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UDPICustomScalingRule) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDrawFrustumComponent) == 0x0470); // 1136 bytes (0x000450 - 0x000470)
static_assert(sizeof(USphereComponent) == 0x0470); // 1136 bytes (0x000468 - 0x000470)
static_assert(sizeof(UDrawSphereComponent) == 0x0470); // 1136 bytes (0x000470 - 0x000470)
static_assert(sizeof(UEdGraph) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UGraphNodeContextMenuContext) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UEdGraphNode) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(UEdGraphNode_Documentation) == 0x00B8); // 184 bytes (0x000098 - 0x0000B8)
static_assert(sizeof(FEdGraphTerminalType) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FEdGraphPinType) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UEdGraphPin_Deprecated) == 0x0118); // 280 bytes (0x000028 - 0x000118)
static_assert(sizeof(UEdGraphSchema) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AEmitter) == 0x0270); // 624 bytes (0x000220 - 0x000270)
static_assert(sizeof(AEmitterCameraLensEffectBase) == 0x02E0); // 736 bytes (0x000270 - 0x0002E0)
static_assert(sizeof(UViewModeUtils) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineBaseTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineHandlerComponentFactory) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULocalMessage) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineMessage) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UEngineTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AExponentialHeightFog) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(FExponentialHeightFogData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UExponentialHeightFogComponent) == 0x02A0); // 672 bytes (0x0001F8 - 0x0002A0)
static_assert(sizeof(UExporter) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UFloatingPawnMovement) == 0x0150); // 336 bytes (0x000138 - 0x000150)
static_assert(sizeof(FFontCharacter) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFontImportOptionsData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(UFont) == 0x01D0); // 464 bytes (0x000028 - 0x0001D0)
static_assert(sizeof(UFontFace) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UFontImportOptions) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(FForceFeedbackAttenuationSettings) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UForceFeedbackAttenuation) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(UForceFeedbackComponent) == 0x02E0); // 736 bytes (0x0001F8 - 0x0002E0)
static_assert(sizeof(FForceFeedbackChannelDetails) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UForceFeedbackEffect) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UGameEngine) == 0x0D70); // 3440 bytes (0x000D20 - 0x000D70)
static_assert(sizeof(AGameNetworkManager) == 0x02D0); // 720 bytes (0x000220 - 0x0002D0)
static_assert(sizeof(UGameplayStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASpotLight) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(AGeneratedMeshAreaLight) == 0x0238); // 568 bytes (0x000238 - 0x000238)
static_assert(sizeof(UHapticFeedbackEffect_Base) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHapticFeedbackEffect_Buffer) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FHapticFeedbackDetails_Curve) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(UHapticFeedbackEffect_Curve) == 0x0138); // 312 bytes (0x000028 - 0x000138)
static_assert(sizeof(UHapticFeedbackEffect_SoundWave) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UHealthSnapshotBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHLODEngineSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FHLODProxyMesh) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UHLODProxy) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UHLODProxyDesc) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UImportanceSamplingLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UImportantToggleSettingInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInGameAdManager) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FComponentKey) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBlueprintComponentChangedPropertyInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBlueprintCookedComponentInstancingData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FComponentOverrideRecord) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UInheritableComponentHandler) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UInputDelegateBinding) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBlueprintInputDelegateBinding) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FBlueprintInputActionDelegateBinding) == 0x0018); // 24 bytes (0x000004 - 0x000018)
static_assert(sizeof(UInputActionDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FBlueprintInputAxisDelegateBinding) == 0x0014); // 20 bytes (0x000004 - 0x000014)
static_assert(sizeof(UInputAxisDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FBlueprintInputAxisKeyDelegateBinding) == 0x0028); // 40 bytes (0x000004 - 0x000028)
static_assert(sizeof(UInputAxisKeyDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FCachedKeyToActionInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UInputComponent) == 0x0138); // 312 bytes (0x0000B0 - 0x000138)
static_assert(sizeof(FBlueprintInputKeyDelegateBinding) == 0x0038); // 56 bytes (0x000004 - 0x000038)
static_assert(sizeof(UInputKeyDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FInputAxisProperties) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FInputAxisConfigEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FInputActionKeyMapping) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FInputAxisKeyMapping) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FInputActionSpeechMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInputSettings) == 0x0140); // 320 bytes (0x000028 - 0x000140)
static_assert(sizeof(FBlueprintInputTouchDelegateBinding) == 0x0010); // 16 bytes (0x000004 - 0x000010)
static_assert(sizeof(UInputTouchDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInputVectorAxisDelegateBinding) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterface_ActorSubobject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_AssetUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBoneReferenceSkeletonProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_CollisionDataProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_PostProcessVolume) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_PreviewMeshProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FCurveEdEntry) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCurveEdTab) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UInterpCurveEdSetup) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UInterpData) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UInterpFilter) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpFilter_Classes) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterpFilter_Custom) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterpGroup) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UInterpGroupCamera) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpGroupDirector) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UInterpGroupInst) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UInterpGroupInstCamera) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UInterpGroupInstDirector) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(FInterpControlPoint) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UInterpToMovementComponent) == 0x0190); // 400 bytes (0x0000F0 - 0x000190)
static_assert(sizeof(UInterpTrack) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UInterpTrackFloatBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(FAnimControlTrackKey) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInterpTrackAnimControl) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UInterpTrackVectorBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(UInterpTrackAudioMaster) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FBoolTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackBoolProp) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackColorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackColorScale) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FDirectorTrackCut) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UInterpTrackDirector) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FEventTrackKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UInterpTrackEvent) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackFade) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackFloatAnimBPParam) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UInterpTrackFloatMaterialParam) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackFloatParticleParam) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackFloatProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackInst) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstAnimControl) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstAudioMaster) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstProperty) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UInterpTrackInstBoolProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstColorProp) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpTrackInstColorScale) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstDirector) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstEvent) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstFade) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstFloatAnimBPParam) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FPrimitiveMaterialRef) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UInterpTrackInstFloatMaterialParam) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UInterpTrackInstFloatParticleParam) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstFloatProp) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpTrackInstLinearColorProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstMove) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UInterpTrackInstParticleReplay) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstSlomo) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstSound) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpTrackInstToggle) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpTrackInstVectorMaterialParam) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UInterpTrackInstVectorProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstVisibility) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackLinearColorBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(UInterpTrackLinearColorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(FInterpLookupPoint) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FInterpLookupTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInterpTrackMove) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(UInterpTrackMoveAxis) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FParticleReplayTrackKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UInterpTrackParticleReplay) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UInterpTrackSlomo) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FSoundTrackKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UInterpTrackSound) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FToggleTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackToggle) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackVectorMaterialParam) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackVectorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(FVisibilityTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackVisibility) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UIntSerialization) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(AKillZVolume) == 0x0268); // 616 bytes (0x000268 - 0x000268)
static_assert(sizeof(UKismetArrayLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetGuidLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetInputLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetInternationalizationLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetMaterialLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetMathLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetNodeHelperLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetRenderingLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetStringLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetStringTableLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetSystemLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetTextLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FLayerActorStats) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(ULayer) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ULevelPartitionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FReplicatedStaticActorDestructionInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(ULevel) == 0x0298); // 664 bytes (0x000028 - 0x000298)
static_assert(sizeof(ULevelActorContainer) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(ALevelBounds) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(ULevelScriptBlueprint) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(ULevelStreaming) == 0x0148); // 328 bytes (0x000028 - 0x000148)
static_assert(sizeof(ULevelStreamingAlwaysLoaded) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(ULevelStreamingDynamic) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(ULevelStreamingPersistent) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(ALevelStreamingVolume) == 0x0270); // 624 bytes (0x000258 - 0x000270)
static_assert(sizeof(ULightmappedSurfaceCollection) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ULightMapTexture2D) == 0x01B0); // 432 bytes (0x0001A0 - 0x0001B0)
static_assert(sizeof(ULightMapVirtualTexture2D) == 0x01C0); // 448 bytes (0x0001A0 - 0x0001C0)
static_assert(sizeof(ALightmassCharacterIndirectDetailVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(ALightmassImportanceVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(ALightmassPortal) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(ULightmassPortalComponent) == 0x0200); // 512 bytes (0x0001F8 - 0x000200)
static_assert(sizeof(ULightmassPrimitiveSettingsObject) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ULineBatchComponent) == 0x0490); // 1168 bytes (0x000450 - 0x000490)
static_assert(sizeof(FLightmassPointLightSettings) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(ULocalLightComponent) == 0x0340); // 832 bytes (0x000328 - 0x000340)
static_assert(sizeof(ALODActor) == 0x02A8); // 680 bytes (0x000220 - 0x0002A8)
static_assert(sizeof(FComponentSync) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(ULODSyncComponent) == 0x0140); // 320 bytes (0x0000B0 - 0x000140)
static_assert(sizeof(ULODSyncInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMapBuildDataRegistry) == 0x0238); // 568 bytes (0x000028 - 0x000238)
static_assert(sizeof(FMaterialInput) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FScalarMaterialInput) == 0x0014); // 20 bytes (0x000014 - 0x000014)
static_assert(sizeof(FVectorMaterialInput) == 0x0014); // 20 bytes (0x000014 - 0x000014)
static_assert(sizeof(FColorMaterialInput) == 0x0014); // 20 bytes (0x000014 - 0x000014)
static_assert(sizeof(FMaterialShadingModelField) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FMaterialAttributesInput) == 0x0018); // 24 bytes (0x000014 - 0x000018)
static_assert(sizeof(FShadingModelMaterialInput) == 0x0014); // 20 bytes (0x000014 - 0x000014)
static_assert(sizeof(FMaterialFunctionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMaterialParameterCollectionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMaterialCachedExpressionData) == 0x01D8); // 472 bytes (0x000000 - 0x0001D8)
static_assert(sizeof(UMaterial) == 0x0440); // 1088 bytes (0x000088 - 0x000440)
static_assert(sizeof(FMaterialSpriteElement) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UMaterialBillboardComponent) == 0x0460); // 1120 bytes (0x000450 - 0x000460)
static_assert(sizeof(UMaterialExpressionAbs) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionActorPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionAdd) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionAntialiasedTextureMask) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(UMaterialExpressionAppendVector) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArccosine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArccosineFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArcsine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArcsineFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArctangent) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArctangent2) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArctangent2Fast) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArctangentFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionAtmosphericFogColor) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionAtmosphericLightColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionAtmosphericLightVector) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionBentNormalCustomOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBlackBody) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBlendMaterialAttributes) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionBreakMaterialAttributes) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBumpOffset) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionCameraPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCameraVectorWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCeil) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionParameter) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionVectorParameter) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(UMaterialExpressionChannelMaskParameter) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UMaterialExpressionClamp) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionClearCoatNormalCustomOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionCloudSampleAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCollectionParameter) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionComment) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionComponentMask) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionConstant) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionConstant2Vector) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionConstant3Vector) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionConstant4Vector) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionConstantBiasScale) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionCosine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionCrossProduct) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionScalarParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionCurveAtlasRowParameter) == 0x0088); // 136 bytes (0x000060 - 0x000088)
static_assert(sizeof(FCustomInput) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCustomOutput) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCustomDefine) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMaterialExpressionCustom) == 0x00A8); // 168 bytes (0x000040 - 0x0000A8)
static_assert(sizeof(UMaterialExpressionDDX) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDDY) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDecalDerivative) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDecalLifetimeOpacity) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDecalMipmapLevel) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionDeltaTime) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDepthFade) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionDepthOfFieldFunction) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDeriveNormalZ) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDesaturation) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionDistance) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionDistanceCullFade) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDistanceFieldGradient) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDistanceFieldsRenderingSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionDistanceToNearestSurface) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDivide) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionDotProduct) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionDynamicParameter) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionEyeAdaptation) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionFeatureLevelSwitch) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFloor) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFmod) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionFontSample) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionFontSampleParameter) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(UMaterialExpressionFrac) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFresnel) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionFunctionInput) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(UMaterialExpressionFunctionOutput) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionGetMaterialAttributes) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionGIReplace) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionHairAttributes) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionHairColor) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionIf) == 0x00B0); // 176 bytes (0x000040 - 0x0000B0)
static_assert(sizeof(UMaterialExpressionInverseLinearInterpolate) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionLightmapUVs) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionLightmassReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionLightVector) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionLinearInterpolate) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionLogarithm10) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionLogarithm2) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMakeMaterialAttributes) == 0x0270); // 624 bytes (0x000040 - 0x000270)
static_assert(sizeof(UMaterialExpressionMapARPassthroughCameraUV) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMaterialAttributeLayers) == 0x00E8); // 232 bytes (0x000040 - 0x0000E8)
static_assert(sizeof(UMaterialExpressionMaterialFunctionCall) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMaterialLayerOutput) == 0x0088); // 136 bytes (0x000088 - 0x000088)
static_assert(sizeof(UMaterialExpressionMaterialProxyReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionMax) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionMin) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionMultiply) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionRerouteBase) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionNamedRerouteBase) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionNamedRerouteDeclaration) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionNamedRerouteUsage) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionNoise) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionNormalize) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionObjectBounds) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectOrientation) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectRadius) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionOneMinus) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionPanner) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionParticleColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleDirection) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleMacroUV) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleMotionBlurFade) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticlePositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRadius) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRandom) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRelativeTime) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSpeed) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSubUV) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UMaterialExpressionParticleSubUVProperties) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPerInstanceCustomData) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionPerInstanceFadeAmount) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPerInstanceRandom) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPixelDepth) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPixelNormalWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPower) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionPrecomputedAOMask) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedLocalBounds) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedNormal) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedPosition) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreviousFrameSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionQualitySwitch) == 0x00A8); // 168 bytes (0x000040 - 0x0000A8)
static_assert(sizeof(UMaterialExpressionRayTracingQualitySwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionReflectionCapturePassSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionReflectionVectorWS) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionReroute) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionRotateAboutAxis) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UMaterialExpressionRotator) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionRound) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureOutput) == 0x00D0); // 208 bytes (0x000040 - 0x0000D0)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureSample) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureSampleParameter) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UMaterialExpressionSamplePhysicsVectorField) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSamplePhysicsScalarField) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSamplePhysicsIntegerField) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSaturate) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSceneColor) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionSceneDepth) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionSceneDepthWithoutWater) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionSceneTexelSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSceneTexture) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionScreenPosition) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSetMaterialAttributes) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionShaderStageSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionShadingModel) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionShadingPathSwitch) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionShadowReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionSign) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSingleLayerWaterMaterialOutput) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionSkinningVertexOffsets) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightDirection) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightIlluminance) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightDiskLuminance) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereAerialPerspective) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereViewLuminance) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSmoothStep) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionSobol) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionSpeedTree) == 0x00A0); // 160 bytes (0x000040 - 0x0000A0)
static_assert(sizeof(UMaterialExpressionSphereMask) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UMaterialExpressionSphericalParticleOpacity) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSquareRoot) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionStaticBool) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionStaticBoolParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionStaticComponentMaskParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionStaticSwitch) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionStaticSwitchParameter) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMaterialExpressionStep) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionSubtract) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionTangent) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTangentOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTemporalSobol) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionTextureCoordinate) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionTextureObject) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UMaterialExpressionTextureObjectParameter) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureProperty) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter2DArray) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterCube) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterSubUV) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterVolume) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionThinTranslucentMaterialOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTime) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionTransform) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTransformPosition) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTruncate) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTwoSidedSign) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVectorNoise) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionVertexColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVertexInterpolator) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionVertexNormalWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVertexTangentWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionViewProperty) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionViewSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVirtualTextureFeatureSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionVolumetricAdvancedMaterialInput) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVolumetricAdvancedMaterialOutput) == 0x00F0); // 240 bytes (0x000040 - 0x0000F0)
static_assert(sizeof(UMaterialExpressionWorldPosition) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialFunctionInterface) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UMaterialFunction) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialFunctionInstance) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(UMaterialFunctionMaterialLayer) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMaterialFunctionMaterialLayerInstance) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMaterialFunctionMaterialLayerBlend) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMaterialFunctionMaterialLayerBlendInstance) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(AMaterialInstanceActor) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(UMaterialInstanceDynamic) == 0x0360); // 864 bytes (0x000310 - 0x000360)
static_assert(sizeof(FCollectionParameterBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCollectionScalarParameter) == 0x001C); // 28 bytes (0x000018 - 0x00001C)
static_assert(sizeof(FCollectionVectorParameter) == 0x0028); // 40 bytes (0x000018 - 0x000028)
static_assert(sizeof(UMaterialParameterCollection) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UMaterialParameterCollectionInstance) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(FInterpGroupActorInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCameraCutInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AMatineeActor) == 0x02C8); // 712 bytes (0x000220 - 0x0002C8)
static_assert(sizeof(AMatineeActorCameraAnim) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UMatineeAnimInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMatineeInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AMeshMergeCullingVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(UMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UMeshVertexPainterKismetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPurchaseInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UMicroTransactionBase) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UModelComponent) == 0x0490); // 1168 bytes (0x000450 - 0x000490)
static_assert(sizeof(UMorphTarget) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UNavAgentInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavCollisionBase) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UNavEdgeProviderInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavigationDataChunk) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UNavigationDataInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FNavAgentSelector) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UNavigationSystemConfig) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UNullNavSysConfig) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(FNavigationLinkBase) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FNavigationLink) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FNavigationSegmentLink) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UNavLinkDefinition) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UNavPathObserverInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavRelevantInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USimulatedClientNetConnection) == 0x1BA8); // 7080 bytes (0x001BA8 - 0x001BA8)
static_assert(sizeof(UNetPushModelHelpers) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNetworkPredictionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FNetworkEmulationProfileDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UNetworkSettings) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UNodeMappingContainer) == 0x0168); // 360 bytes (0x000028 - 0x000168)
static_assert(sizeof(UNodeMappingProviderInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ANote) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(UObjectLibrary) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UObjectReferencer) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UObjectTraceWorldSubsystem) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPackageMapClient) == 0x0408); // 1032 bytes (0x0000E0 - 0x000408)
static_assert(sizeof(APainCausingVolume) == 0x0290); // 656 bytes (0x000268 - 0x000290)
static_assert(sizeof(UParticleEmitter) == 0x01B8); // 440 bytes (0x000028 - 0x0001B8)
static_assert(sizeof(AParticleEventManager) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(UParticleLODLevel) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(FParticleSystemLOD) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FLODSoloTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FNamedEmitterMaterial) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UParticleSystem) == 0x0110); // 272 bytes (0x000030 - 0x000110)
static_assert(sizeof(UParticleModule) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UParticleModuleAccelerationBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FDistributionLookupTable) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawDistributionVector) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(UParticleModuleAcceleration) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UParticleModuleAccelerationConstant) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FRawDistributionFloat) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(UParticleModuleAccelerationDrag) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UParticleModuleAccelerationDragScaleOverLife) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UParticleModuleAccelerationOverLifetime) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UParticleModuleAttractorBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleAttractorLine) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UParticleModuleAttractorParticle) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleAttractorPoint) == 0x00E0); // 224 bytes (0x000030 - 0x0000E0)
static_assert(sizeof(UParticleModuleAttractorPointGravity) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleBeamBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FBeamModifierOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UParticleModuleBeamModifier) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UParticleModuleBeamNoise) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(UParticleModuleBeamSource) == 0x0118); // 280 bytes (0x000030 - 0x000118)
static_assert(sizeof(UParticleModuleBeamTarget) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UParticleModuleCameraBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleCameraOffset) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleCollisionBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleCollision) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(UParticleModuleCollisionGPU) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UParticleModuleColorBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleColor) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FParticleRandomSeedInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UParticleModuleColor_Seeded) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UParticleModuleColorOverLife) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleColorScaleOverLife) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleEventBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FParticleEvent_GenerateInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UParticleModuleEventGenerator) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleEventReceiverBase) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleEventReceiverKillParticles) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UParticleModuleEventReceiverSpawn) == 0x00D8); // 216 bytes (0x000040 - 0x0000D8)
static_assert(sizeof(UParticleModuleEventSendToGame) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UParticleModuleKillBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleKillBox) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UParticleModuleKillHeight) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleLifetimeBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLifetime) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleLifetime_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleLightBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLight) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UParticleModuleLight_Seeded) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UParticleModuleLocationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLocation) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleLocation_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(FLocationBoneSocketInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UParticleModuleLocationBoneSocket) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UParticleModuleLocationDirect) == 0x0150); // 336 bytes (0x000030 - 0x000150)
static_assert(sizeof(UParticleModuleLocationEmitter) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UParticleModuleLocationEmitterDirect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleLocationPrimitiveBase) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleLocationPrimitiveCylinder) == 0x0120); // 288 bytes (0x0000B0 - 0x000120)
static_assert(sizeof(UParticleModuleLocationPrimitiveCylinder_Seeded) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UParticleModuleLocationPrimitiveSphere) == 0x00E0); // 224 bytes (0x0000B0 - 0x0000E0)
static_assert(sizeof(UParticleModuleLocationPrimitiveSphere_Seeded) == 0x0100); // 256 bytes (0x0000E0 - 0x000100)
static_assert(sizeof(UParticleModuleLocationPrimitiveTriangle) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UParticleModuleLocationSkelVertSurface) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UParticleModuleLocationWorldOffset) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UParticleModuleLocationWorldOffset_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(UParticleModuleMaterialBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshMaterial) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleRotationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshRotation) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleMeshRotation_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(UParticleModuleRotationRateBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshRotationRate) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleMeshRotationRate_Seeded) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UParticleModuleMeshRotationRateMultiplyLife) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleMeshRotationRateOverLife) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleOrbitBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FOrbitOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UParticleModuleOrbit) == 0x0130); // 304 bytes (0x000038 - 0x000130)
static_assert(sizeof(UParticleModuleOrientationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleOrientationAxisLock) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleParameterBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FEmitterDynamicParameter) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UParticleModuleParameterDynamic) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleParameterDynamic_Seeded) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(UParticleModulePivotOffset) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FParticleBurst) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UParticleModuleRequired) == 0x0140); // 320 bytes (0x000030 - 0x000140)
static_assert(sizeof(UParticleModuleRotation) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleRotation_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleRotationOverLifetime) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleRotationRate) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleRotationRate_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleRotationRateMultiplyLife) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleSizeBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleSize) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleSize_Seeded) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UParticleModuleSizeMultiplyLife) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleSizeScale) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleSizeScaleBySpeed) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleSourceMovement) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleSpawnBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleSpawn) == 0x00E8); // 232 bytes (0x000038 - 0x0000E8)
static_assert(sizeof(UParticleModuleSpawnPerUnit) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UParticleModuleSubUVBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleSubUV) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UParticleModuleSubUVMovie) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(UParticleModuleTrailBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleTrailSource) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UParticleModuleTypeDataBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleTypeDataAnimTrail) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleTypeDataBeam2) == 0x0150); // 336 bytes (0x000030 - 0x000150)
static_assert(sizeof(FGPUSpriteLocalVectorFieldInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FFloatDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FGPUSpriteEmitterInfo) == 0x0280); // 640 bytes (0x000000 - 0x000280)
static_assert(sizeof(FGPUSpriteResourceData) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(UParticleModuleTypeDataGpu) == 0x0420); // 1056 bytes (0x000030 - 0x000420)
static_assert(sizeof(UParticleModuleTypeDataMesh) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UParticleModuleTypeDataRibbon) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleVectorFieldBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleVectorFieldGlobal) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleVectorFieldLocal) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVectorFieldRotation) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleVectorFieldRotationRate) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleVectorFieldScale) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVectorFieldScaleOverLife) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVelocityBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleVelocity) == 0x00B0); // 176 bytes (0x000038 - 0x0000B0)
static_assert(sizeof(UParticleModuleVelocity_Seeded) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UParticleModuleVelocityCone) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(UParticleModuleVelocityInheritParent) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UParticleModuleVelocityOverLifetime) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UParticleSpriteEmitter) == 0x01B8); // 440 bytes (0x0001B8 - 0x0001B8)
static_assert(sizeof(FParticleSysParam) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UParticleSystemComponent) == 0x06B0); // 1712 bytes (0x000450 - 0x0006B0)
static_assert(sizeof(UParticleSystemReplay) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UPathFollowingAgentInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPawnNoiseEmitterComponent) == 0x00D8); // 216 bytes (0x0000B0 - 0x0000D8)
static_assert(sizeof(UPhysicalAnimationComponent) == 0x00F0); // 240 bytes (0x0000B0 - 0x0000F0)
static_assert(sizeof(UPhysicalMaterialMask) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSolverIterations) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UPhysicsAsset) == 0x0138); // 312 bytes (0x000028 - 0x000138)
static_assert(sizeof(FPhysicalAnimationData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FPhysicalAnimationProfile) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(USkeletalBodySetup) == 0x02B8); // 696 bytes (0x0002A0 - 0x0002B8)
static_assert(sizeof(UPhysicsCollisionHandler) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ARigidBodyBase) == 0x0220); // 544 bytes (0x000220 - 0x000220)
static_assert(sizeof(APhysicsConstraintActor) == 0x0240); // 576 bytes (0x000220 - 0x000240)
static_assert(sizeof(FConstrainComponentPropName) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FConstraintInstanceBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FConstraintBaseParams) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FLinearConstraint) == 0x001C); // 28 bytes (0x000014 - 0x00001C)
static_assert(sizeof(FConeConstraint) == 0x0020); // 32 bytes (0x000014 - 0x000020)
static_assert(sizeof(FTwistConstraint) == 0x001C); // 28 bytes (0x000014 - 0x00001C)
static_assert(sizeof(FConstraintDrive) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLinearDriveConstraint) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(FAngularDriveConstraint) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(FConstraintProfileProperties) == 0x0114); // 276 bytes (0x000000 - 0x000114)
static_assert(sizeof(FConstraintInstance) == 0x01C8); // 456 bytes (0x000018 - 0x0001C8)
static_assert(sizeof(UPhysicsConstraintComponent) == 0x0410); // 1040 bytes (0x0001F8 - 0x000410)
static_assert(sizeof(FPhysicsConstraintProfileHandle) == 0x011C); // 284 bytes (0x000000 - 0x00011C)
static_assert(sizeof(UPhysicsConstraintTemplate) == 0x0318); // 792 bytes (0x000028 - 0x000318)
static_assert(sizeof(UPhysicsFieldComponent) == 0x0270); // 624 bytes (0x0001F8 - 0x000270)
static_assert(sizeof(UPhysicsHandleComponent) == 0x0160); // 352 bytes (0x0000B0 - 0x000160)
static_assert(sizeof(FRigidBodyErrorCorrection) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FPhysicalSurfaceName) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FBroadphaseSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FChaosPhysicsSettings) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(UPhysicsSettings) == 0x01A0); // 416 bytes (0x0000E0 - 0x0001A0)
static_assert(sizeof(UPhysicsSpringComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(APhysicsThruster) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UPhysicsThrusterComponent) == 0x0200); // 512 bytes (0x0001F8 - 0x000200)
static_assert(sizeof(ASceneCapture) == 0x0230); // 560 bytes (0x000220 - 0x000230)
static_assert(sizeof(APlanarReflection) == 0x0240); // 576 bytes (0x000230 - 0x000240)
static_assert(sizeof(FEngineShowFlagsSetting) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USceneCaptureComponent) == 0x02B0); // 688 bytes (0x0001F8 - 0x0002B0)
static_assert(sizeof(UPlanarReflectionComponent) == 0x03A0); // 928 bytes (0x0002B0 - 0x0003A0)
static_assert(sizeof(APlaneReflectionCapture) == 0x0228); // 552 bytes (0x000228 - 0x000228)
static_assert(sizeof(UPlaneReflectionCaptureComponent) == 0x0290); // 656 bytes (0x000270 - 0x000290)
static_assert(sizeof(UPlatformEventsComponent) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UPlatformInterfaceWebResponse) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(FKeyBind) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UPlayerInput) == 0x03A8); // 936 bytes (0x000028 - 0x0003A8)
static_assert(sizeof(APlayerStartPIE) == 0x0250); // 592 bytes (0x000250 - 0x000250)
static_assert(sizeof(UPluginCommandlet) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(APointLight) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(UPointLightComponent) == 0x0358); // 856 bytes (0x000340 - 0x000358)
static_assert(sizeof(UPolys) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPoseableMeshComponent) == 0x0800); // 2048 bytes (0x0006A0 - 0x000800)
static_assert(sizeof(FPoseData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FPoseDataContainer) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UPoseAsset) == 0x0130); // 304 bytes (0x000080 - 0x000130)
static_assert(sizeof(UPoseWatch) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(APostProcessVolume) == 0x07D0); // 2000 bytes (0x000258 - 0x0007D0)
static_assert(sizeof(APrecomputedVisibilityOverrideVolume) == 0x0288); // 648 bytes (0x000258 - 0x000288)
static_assert(sizeof(APrecomputedVisibilityVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(UPreviewCollectionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPreviewMeshCollectionEntry) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UPreviewMeshCollection) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FCollectionReference) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UPrimaryAssetLabel) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UProxyLODMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(ARadialForceActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(URadialForceComponent) == 0x0230); // 560 bytes (0x0001F8 - 0x000230)
static_assert(sizeof(ARectLight) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(URectLightComponent) == 0x0360); // 864 bytes (0x000340 - 0x000360)
static_assert(sizeof(URendererSettings) == 0x0148); // 328 bytes (0x000038 - 0x000148)
static_assert(sizeof(URendererOverrideSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UReplayNetConnection) == 0x23A8); // 9128 bytes (0x001BA8 - 0x0023A8)
static_assert(sizeof(UReplaySubsystem) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UReplicationDriver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UReplicationConnectionDriver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UReporterBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UReporterGraph) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(FRigTransformConstraint) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTransformBaseConstraint) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTransformBase) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FNode) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(URig) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(URotatingMovementComponent) == 0x0110); // 272 bytes (0x0000F0 - 0x000110)
static_assert(sizeof(URuntimeOptionsBase) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(URuntimeVirtualTexture) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(URuntimeVirtualTextureComponent) == 0x0270); // 624 bytes (0x0001F8 - 0x000270)
static_assert(sizeof(ARuntimeVirtualTextureVolume) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(URVOAvoidanceInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UScene) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASceneCapture2D) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(USceneCaptureComponent2D) == 0x08C0); // 2240 bytes (0x0002B0 - 0x0008C0)
static_assert(sizeof(USceneCaptureComponentCube) == 0x02E0); // 736 bytes (0x0002B0 - 0x0002E0)
static_assert(sizeof(ASceneCaptureCube) == 0x0238); // 568 bytes (0x000230 - 0x000238)
static_assert(sizeof(FBPVariableMetaDataEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USCS_Node) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(USelection) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(AServerStatReplicator) == 0x02E8); // 744 bytes (0x000220 - 0x0002E8)
static_assert(sizeof(UShadowMapTexture2D) == 0x01B0); // 432 bytes (0x0001A0 - 0x0001B0)
static_assert(sizeof(USimpleConstructionScript) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(USkeletalMeshEditorData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBoneFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSkeletalMeshLODGroupSettings) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(USkeletalMeshLODSettings) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(USkeletalMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USkeletalMeshSocket) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FTentDistribution) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USkyAtmosphereComponent) == 0x02D0); // 720 bytes (0x0001F8 - 0x0002D0)
static_assert(sizeof(ASkyAtmosphere) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(USkyLightComponent) == 0x0400); // 1024 bytes (0x000228 - 0x000400)
static_assert(sizeof(USlateBrushAsset) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(USlateTextureAtlasInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USmokeTestCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(USoundAttenuation) == 0x03C8); // 968 bytes (0x000028 - 0x0003C8)
static_assert(sizeof(FSoundClassProperties) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FPassiveSoundMixModifier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USoundClass) == 0x00C8); // 200 bytes (0x000028 - 0x0000C8)
static_assert(sizeof(USoundConcurrency) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(USoundCue) == 0x0548); // 1352 bytes (0x000170 - 0x000548)
static_assert(sizeof(FSourceEffectChainEntry) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USoundEffectSourcePresetChain) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FSoundGroup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundGroups) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FAudioEffectParameters) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAudioEQEffect) == 0x0040); // 64 bytes (0x000008 - 0x000040)
static_assert(sizeof(FSoundClassAdjuster) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundMix) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(USoundNodeAttenuation) == 0x03F8); // 1016 bytes (0x000048 - 0x0003F8)
static_assert(sizeof(USoundNodeBranch) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeConcatenator) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeDelay) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(FDialogueWaveParameter) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundNodeDialoguePlayer) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(FDistanceDatum) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(USoundNodeDistanceCrossFade) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeDoppler) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeEnveloper) == 0x0190); // 400 bytes (0x000048 - 0x000190)
static_assert(sizeof(USoundNodeGroupControl) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeLooping) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeMature) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(USoundNodeMixer) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeModulator) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(FModulatorContinuousParams) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundNodeModulatorContinuous) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(USoundNodeOscillator) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(USoundNodeParamCrossFade) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(USoundNodeQualityLevel) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeRandom) == 0x0078); // 120 bytes (0x000048 - 0x000078)
static_assert(sizeof(USoundNodeSoundClass) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeSwitch) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeWaveParam) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeWavePlayer) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(USoundSourceBus) == 0x0388); // 904 bytes (0x000370 - 0x000388)
static_assert(sizeof(USoundSubmixBase) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(USoundSubmixWithParentBase) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USoundSubmix) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(USoundfieldSubmix) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UEndpointSubmix) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(USoundfieldEndpointSubmix) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(USpectatorPawnMovement) == 0x0158); // 344 bytes (0x000150 - 0x000158)
static_assert(sizeof(ASphereReflectionCapture) == 0x0230); // 560 bytes (0x000228 - 0x000230)
static_assert(sizeof(USphereReflectionCaptureComponent) == 0x0280); // 640 bytes (0x000270 - 0x000280)
static_assert(sizeof(USplineMetadata) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASplineMeshActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(FSplineMeshParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(USplineMeshComponent) == 0x0580); // 1408 bytes (0x0004E0 - 0x000580)
static_assert(sizeof(USpotLightComponent) == 0x0360); // 864 bytes (0x000358 - 0x000360)
static_assert(sizeof(FStaticMaterial) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UStaticMesh) == 0x0150); // 336 bytes (0x000060 - 0x000150)
static_assert(sizeof(UStaticMeshSocket) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(UStereoLayerShapeCylinder) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UStereoLayerShapeCubemap) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStereoLayerShapeEquirect) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(FEquirectProps) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UStereoLayerComponent) == 0x02E0); // 736 bytes (0x0001F8 - 0x0002E0)
static_assert(sizeof(UStereoLayerFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStringTable) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FSubsurfaceProfileStruct) == 0x008C); // 140 bytes (0x000000 - 0x00008C)
static_assert(sizeof(USubsurfaceProfile) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(USubsystemBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USubUVAnimation) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(USystemTimeTimecodeProvider) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UTextPropertyTestObject) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(ATextRenderActor) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UTextRenderComponent) == 0x04A0); // 1184 bytes (0x000450 - 0x0004A0)
static_assert(sizeof(UTexture2DArray) == 0x01E0); // 480 bytes (0x000178 - 0x0001E0)
static_assert(sizeof(UTexture2DDynamic) == 0x0190); // 400 bytes (0x000178 - 0x000190)
static_assert(sizeof(UTextureLightProfile) == 0x01B0); // 432 bytes (0x0001A0 - 0x0001B0)
static_assert(sizeof(UTextureMipDataProviderFactory) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTextureRenderTarget2DArray) == 0x01A0); // 416 bytes (0x000180 - 0x0001A0)
static_assert(sizeof(UTextureRenderTargetCube) == 0x01A0); // 416 bytes (0x000180 - 0x0001A0)
static_assert(sizeof(UTextureRenderTargetVolume) == 0x01A0); // 416 bytes (0x000180 - 0x0001A0)
static_assert(sizeof(UThumbnailInfo) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FTimelineEventEntry) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FTimelineVectorTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimelineFloatTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimelineLinearColorTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimeline) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UTimelineComponent) == 0x0150); // 336 bytes (0x0000B0 - 0x000150)
static_assert(sizeof(FTTTrackBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTTEventTrack) == 0x0028); // 40 bytes (0x000018 - 0x000028)
static_assert(sizeof(FTTPropertyTrack) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FTTFloatTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FTTVectorTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FTTLinearColorTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(UTimelineTemplate) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UTireType) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FTouchInputControl) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UTouchInterface) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(ATriggerCapsule) == 0x0228); // 552 bytes (0x000228 - 0x000228)
static_assert(sizeof(ATriggerSphere) == 0x0228); // 552 bytes (0x000228 - 0x000228)
static_assert(sizeof(ATriggerVolume) == 0x0258); // 600 bytes (0x000258 - 0x000258)
static_assert(sizeof(UTwitterIntegrationBase) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UUserDefinedEnum) == 0x00B0); // 176 bytes (0x000060 - 0x0000B0)
static_assert(sizeof(UUserDefinedStruct) == 0x0108); // 264 bytes (0x0000C0 - 0x000108)
static_assert(sizeof(UUserInterfaceSettings) == 0x0270); // 624 bytes (0x000038 - 0x000270)
static_assert(sizeof(UVectorField) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UVectorFieldAnimated) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(UVectorFieldComponent) == 0x0480); // 1152 bytes (0x000450 - 0x000480)
static_assert(sizeof(UVectorFieldStatic) == 0x0098); // 152 bytes (0x000048 - 0x000098)
static_assert(sizeof(AVectorFieldVolume) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UViewportStatsSubsystem) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UVirtualTexture) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULightMapVirtualTexture) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(URuntimeVirtualTextureStreamingProxy) == 0x01A0); // 416 bytes (0x0001A0 - 0x0001A0)
static_assert(sizeof(FVirtualTextureBuildSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UVirtualTexture2D) == 0x01B0); // 432 bytes (0x0001A0 - 0x0001B0)
static_assert(sizeof(UVirtualTextureBuilder) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FVirtualTextureSpacePoolConfig) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UVirtualTexturePoolConfig) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UVisualLoggerAutomationTests) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVisualLoggerDebugSnapshotInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVisualLoggerKismetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVoiceChannel) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(FVoiceSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UVOIPTalker) == 0x00E8); // 232 bytes (0x0000B0 - 0x0000E8)
static_assert(sizeof(UVOIPStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVolumeTexture) == 0x01D0); // 464 bytes (0x000178 - 0x0001D0)
static_assert(sizeof(UVolumetricCloudComponent) == 0x0240); // 576 bytes (0x0001F8 - 0x000240)
static_assert(sizeof(AVolumetricCloud) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(AVolumetricLightmapDensityVolume) == 0x0260); // 608 bytes (0x000258 - 0x000260)
static_assert(sizeof(AWindDirectionalSource) == 0x0228); // 552 bytes (0x000220 - 0x000228)
static_assert(sizeof(UWindDirectionalSourceComponent) == 0x0220); // 544 bytes (0x0001F8 - 0x000220)
static_assert(sizeof(UWorldComposition) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(FMaterialProxySettings) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FMeshProxySettings) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMeshMergingSettings) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FHierarchicalSimplification) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(UHierarchicalLODSetup) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FNetViewer) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(AWorldSettings) == 0x03A0); // 928 bytes (0x000220 - 0x0003A0)
static_assert(sizeof(FVectorDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FVector4Distribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFloatRK4SpringInterpolator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FVectorRK4SpringInterpolator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFormatArgumentData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FExpressionOutput) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FVector2MaterialInput) == 0x0014); // 20 bytes (0x000014 - 0x000014)
static_assert(sizeof(FBranchingPointNotifyPayload) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPlatformInterfaceData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPlatformInterfaceDelegateResult) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FDebugFloatHistory) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLatentActionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTimerHandle) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCollisionProfileName) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FGenericStruct) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FUserActivity) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDataTableRowHandle) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTableRowBase) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDamageEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFastArraySerializerItem) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FFastArraySerializer) == 0x0108); // 264 bytes (0x000000 - 0x000108)
static_assert(sizeof(FCharacterNetworkSerializationPackedBits) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FCharacterMoveResponsePackedBits) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(FCharacterServerMovePackedBits) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(FPointDamageEvent) == 0x00A8); // 168 bytes (0x000010 - 0x0000A8)
static_assert(sizeof(FForceFeedbackParameters) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FViewTargetTransitionParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FUpdateLevelStreamingLevelStatus) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FUpdateLevelVisibilityLevelInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FAnimNode_Base) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimNode_AssetPlayerBase) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FInputRange) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInputScaleBiasClamp) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FInputAlphaBoolBlend) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FInputScaleBias) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPoseLinkBase) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FComponentSpacePoseLink) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FKeyHandleLookupTable) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FPoseLink) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FComponentReference) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FAnimInstanceProxy) == 0x0770); // 1904 bytes (0x000000 - 0x000770)
static_assert(sizeof(FRuntimeCurveLinearColor) == 0x0208); // 520 bytes (0x000000 - 0x000208)
static_assert(sizeof(FPerBoneBlendWeight) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPoseSnapshot) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FAnimNode_Root) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FAnimCurveParam) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FActorComponentDuplicatedObjectData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FActorComponentInstanceData) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSceneComponentInstanceData) == 0x00B8); // 184 bytes (0x000068 - 0x0000B8)
static_assert(sizeof(FAnimationGroupReference) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimGroupInstance) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FAnimTickRecord) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMarkerSyncAnimPosition) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBlendFilter) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FBlendSampleData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FAnimationRecordingSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FComponentSpacePose) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLocalSpacePose) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FNamedTransform) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FNamedColor) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNamedVector) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FNamedFloat) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimParentNodeAssetOverride) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAnimBlueprintDebugData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAnimationFrameSnapshot) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FStateMachineDebugData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FStateMachineStateDebugData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimGraphBlendOptions) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FGraphAssetPlayerInformation) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCachedPoseIndices) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRootMotionExtractionStep) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationErrorStats) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVectorCurve) == 0x0198); // 408 bytes (0x000018 - 0x000198)
static_assert(sizeof(FTransformCurve) == 0x04E0); // 1248 bytes (0x000018 - 0x0004E0)
static_assert(sizeof(FSlotEvaluationPose) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(FA2Pose) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FA2CSPose) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FQueuedDrawDebugItem) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FAnimInstanceSubsystemData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAnimMontageInstance) == 0x01B0); // 432 bytes (0x000000 - 0x0001B0)
static_assert(sizeof(FAnimNode_ApplyMeshSpaceAdditive) == 0x00D0); // 208 bytes (0x000010 - 0x0000D0)
static_assert(sizeof(FAnimNode_CustomProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FAnimNode_Inertialization) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FInertializationPoseDiff) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FInertializationCurveDiff) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInertializationBoneDiff) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FInertializationPose) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FAnimNode_LinkedAnimGraph) == 0x00A0); // 160 bytes (0x000058 - 0x0000A0)
static_assert(sizeof(FAnimNode_LinkedAnimLayer) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(FAnimNode_LinkedInputPose) == 0x0118); // 280 bytes (0x000010 - 0x000118)
static_assert(sizeof(FAnimNode_SaveCachedPose) == 0x0158); // 344 bytes (0x000010 - 0x000158)
static_assert(sizeof(FAnimNode_SequencePlayer) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(FAnimNode_StateMachine) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FAnimationPotentialTransition) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimationActiveTransitionEntry) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FAnimNode_TransitionPoseEvaluator) == 0x00F8); // 248 bytes (0x000010 - 0x0000F8)
static_assert(sizeof(FAnimNode_TransitionResult) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FAnimNode_UseCachedPose) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FAnimNode_ConvertLocalToComponentSpace) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FAnimNode_ConvertComponentToLocalSpace) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FAnimNotifyArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCompressedTrack) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCurveTrack) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FScaleTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRotationTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FTranslationTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawAnimSequenceTrack) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimSequenceTrackContainer) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAnimSingleNodeInstanceProxy) == 0x08C0); // 2240 bytes (0x000770 - 0x0008C0)
static_assert(sizeof(FAnimNode_SingleNode) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FAnimationTransitionRule) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationState) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FAnimNotifyTrack) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPerBoneBlendWeights) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAssetImportInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAssetManagerSearchRules) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FAtmospherePrecomputeInstanceData) == 0x0160); // 352 bytes (0x0000B8 - 0x000160)
static_assert(sizeof(FAudioReverbEffect) == 0x0048); // 72 bytes (0x000008 - 0x000048)
static_assert(sizeof(FNavAvoidanceData) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FGridBlendSample) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FBPEditorBookmarkNode) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FEditedDocumentInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FBPInterfaceDescription) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBPVariableDescription) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(FBlueprintMacroCosmeticInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCompilerNativizationOptions) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FEventGraphFastCallPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBlueprintDebugData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FPointerToUberGraphFrame) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDebuggingInfoForSingleFunction) == 0x0190); // 400 bytes (0x000000 - 0x000190)
static_assert(sizeof(FNodeToCodeAssociation) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FAnimCurveType) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FBookmarkBaseJumpToSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FBookmarkJumpToSettings) == 0x0001); // 1 bytes (0x000001 - 0x000001)
static_assert(sizeof(FBookmark2DJumpToSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCachedAnimTransitionData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FCachedAnimRelevancyData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCachedAnimAssetPlayerData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCachedAnimStateData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCachedAnimStateArray) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FPooledCameraShakes) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCameraShakeDuration) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCameraShakeInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCameraShakeStopParams) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCameraShakeUpdateResult) == 0x0590); // 1424 bytes (0x000000 - 0x000590)
static_assert(sizeof(FCameraShakeScrubParams) == 0x0600); // 1536 bytes (0x000000 - 0x000600)
static_assert(sizeof(FCameraShakeUpdateParams) == 0x0600); // 1536 bytes (0x000000 - 0x000600)
static_assert(sizeof(FCameraShakeStartParams) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FDummySpacerCameraTypes) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCanvasIcon) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWrappedStringElement) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTextSizingParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FChildActorAttachedActorInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FChildActorComponentInstanceData) == 0x00E8); // 232 bytes (0x0000B8 - 0x0000E8)
static_assert(sizeof(FAutoCompleteNode) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCurveAtlasColorAdjustments) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FNamedCurveValue) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCurveTableRowHandle) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCustomAttribute) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCustomAttributePerBoneData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDataTableCategoryHandle) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRollbackNetStartupActorInfo) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FGraphReference) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FEdGraphPinReference) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEdGraphSchemaAction) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(FEdGraphSchemaAction_NewNode) == 0x0108); // 264 bytes (0x000100 - 0x000108)
static_assert(sizeof(FScreenMessageString) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FURL) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FFullyLoadedPackagesInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FLevelStreamingStatus) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FNamedNetDriver) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWorldContext) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FExposureSettings) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTickPrerequisite) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCanvasUVTri) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FDepthFieldGlowInfo) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FFontRenderInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRadialDamageParams) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FRadialDamageEvent) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FMeshBuildSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPOV) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FAnimUpdateRateParameters) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FAnimSlotDesc) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimSlotInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMTDResult) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FOverlapResult) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSwarmDebugOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FLightmassDebugOptions) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBasedPosition) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FFractureEffect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRigidBodyContactInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCollisionImpactData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FRigidBodyState) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FPredictProjectilePathPointData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPredictProjectilePathResult) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPredictProjectilePathParams) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FActiveHapticFeedbackEffect) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FClusterNode) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FClusterNode_DEPRECATED) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FHLODISMComponentDesc) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FImportanceTexture) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FInstancedStaticMeshLightMapInstanceData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FInstancedStaticMeshComponentInstanceData) == 0x0150); // 336 bytes (0x0000B8 - 0x000150)
static_assert(sizeof(FInterpEdSelKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCameraPreviewInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSubTrackGroup) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSupportedSubTrackInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FVectorSpringState) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFloatSpringState) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDrawToRenderTargetContext) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLatentActionManager) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FLevelSimplificationDetails) == 0x012C); // 300 bytes (0x000000 - 0x00012C)
static_assert(sizeof(FStreamableTextureInstance) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FDynamicTextureInstance) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FPrecomputedLightInstanceData) == 0x0110); // 272 bytes (0x0000B8 - 0x000110)
static_assert(sizeof(FBatchedPoint) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FBatchedLine) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FClientReceiveData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FHLODInstancingKey) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLODMappingData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FParameterGroupData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStaticComponentMaskValue) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FParameterChannelNames) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FFunctionExpressionOutput) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFunctionExpressionInput) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FScalarParameterAtlasInstanceData) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FMemberReference) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMeshInstancingSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMeshReductionSettings) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FNameCurveKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNameCurve) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(FNavDataConfig) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(FPacketSimulationSettings) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FNodeItem) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FParticleCurvePair) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBeamTargetData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FParticleSystemWorldManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FParticleSystemReplayFrame) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FParticleEmitterReplayFrame) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFreezablePerPlatformInt) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FPlayerMuteList) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPreviewAttachedObjectPair) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPreviewAssetAttachContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrimitiveComponentInstanceData) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(FSpriteCategoryInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FQuartzPulseOverrideStep) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FQuartzTimeSignature) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FQuartzClockSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FQuartzQuantizationBoundary) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FQuartzTransportTimeStamp) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLevelNameAndTime) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCompressedRichCurve) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRootMotionSourceStatus) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FRootMotionFinishVelocitySettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FRootMotionSource) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FRootMotionSource_JumpForce) == 0x00D0); // 208 bytes (0x000098 - 0x0000D0)
static_assert(sizeof(FRootMotionSource_MoveToDynamicForce) == 0x00D0); // 208 bytes (0x000098 - 0x0000D0)
static_assert(sizeof(FRootMotionSource_MoveToForce) == 0x00C0); // 192 bytes (0x000098 - 0x0000C0)
static_assert(sizeof(FRootMotionSource_RadialForce) == 0x00E0); // 224 bytes (0x000098 - 0x0000E0)
static_assert(sizeof(FRootMotionSource_ConstantForce) == 0x00B0); // 176 bytes (0x000098 - 0x0000B0)
static_assert(sizeof(FCameraExposureSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FGaussianSumBloomSettings) == 0x0084); // 132 bytes (0x000000 - 0x000084)
static_assert(sizeof(FConvolutionBloomSettings) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FLensBloomSettings) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FLensImperfectionSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLensSettings) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(FFilmStockSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FColorGradePerRangeSettings) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FColorGradingSettings) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(FSceneViewExtensionIsActiveFunctor) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FClothPhysicsProperties_Legacy) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FClothingAssetData_Legacy) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FSkeletalMeshClothBuildParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FBoneMirrorExport) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMeshComponentClothTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSkeletalMeshComponentEndPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FNameMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRigConfiguration) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBoneReductionSetting) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FReferencePose) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSkeletonToMeshLinkup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSkelMeshSkinWeightInfo) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FSkinWeightProfileManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FPrecomputedSkyLightInstanceData) == 0x0170); // 368 bytes (0x0000B8 - 0x000170)
static_assert(sizeof(FSmartNameMapping) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FCurveMetaData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSoundClassEditorData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundNodeEditorData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundSubmixSpectralAnalysisBandSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundWaveEnvelopeDataPerSound) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundWaveSpectralData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSoundWaveSpectralDataPerSound) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStreamedAudioPlatformData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSplineInstanceData) == 0x01A0); // 416 bytes (0x0000B8 - 0x0001A0)
static_assert(sizeof(FSplinePoint) == 0x0044); // 68 bytes (0x000000 - 0x000044)
static_assert(sizeof(FSplineMeshInstanceData) == 0x00E8); // 232 bytes (0x0000B8 - 0x0000E8)
static_assert(sizeof(FMaterialRemapIndex) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAssetEditorOrbitCameraPosition) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMeshSectionInfoMap) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FMeshSectionInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FStaticMeshSourceModel) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FStaticMeshOptimizationSettings) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPaintedVertex) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStaticMeshVertexColorLODData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FStaticMeshComponentInstanceData) == 0x0140); // 320 bytes (0x000100 - 0x000140)
static_assert(sizeof(FTextureFormatSettings) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FTexturePlatformData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTextureSource) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FTextureSourceBlock) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStreamingRenderAssetPrimitiveInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTTTrackId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTimeStretchCurveInstance) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FHardwareCursorReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEndPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FStartPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FLevelViewportInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPSCPoolElem) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPSCPool) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLightmassWorldInfoSettings) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(UVisual) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWidgetTransform) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UWidget) == 0x0108); // 264 bytes (0x000028 - 0x000108)
static_assert(sizeof(FNamedSlotBinding) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationEventBinding) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UUserWidget) == 0x0260); // 608 bytes (0x000108 - 0x000260)
static_assert(sizeof(UPanelWidget) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(UContentWidget) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UBorder) == 0x0270); // 624 bytes (0x000120 - 0x000270)
static_assert(sizeof(UButton) == 0x0428); // 1064 bytes (0x000120 - 0x000428)
static_assert(sizeof(UCheckBox) == 0x0770); // 1904 bytes (0x000120 - 0x000770)
static_assert(sizeof(UComboBox) == 0x0140); // 320 bytes (0x000108 - 0x000140)
static_assert(sizeof(UComboBoxString) == 0x0E00); // 3584 bytes (0x000108 - 0x000E00)
static_assert(sizeof(UOverlay) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UPanelSlot) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UOverlaySlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FShapedTextOptions) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(UEditableText) == 0x0460); // 1120 bytes (0x000108 - 0x000460)
static_assert(sizeof(UEditableTextBox) == 0x0A38); // 2616 bytes (0x000108 - 0x000A38)
static_assert(sizeof(UGridPanel) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(UImage) == 0x0210); // 528 bytes (0x000108 - 0x000210)
static_assert(sizeof(FUserWidgetPool) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UListViewBase) == 0x0218); // 536 bytes (0x000108 - 0x000218)
static_assert(sizeof(UListView) == 0x0368); // 872 bytes (0x000218 - 0x000368)
static_assert(sizeof(UTextLayoutWidget) == 0x0128); // 296 bytes (0x000108 - 0x000128)
static_assert(sizeof(UMultiLineEditableTextBox) == 0x0C98); // 3224 bytes (0x000128 - 0x000C98)
static_assert(sizeof(UMenuAnchor) == 0x0170); // 368 bytes (0x000120 - 0x000170)
static_assert(sizeof(UProgressBar) == 0x0318); // 792 bytes (0x000108 - 0x000318)
static_assert(sizeof(URetainerBox) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(URichTextBlock) == 0x0678); // 1656 bytes (0x000128 - 0x000678)
static_assert(sizeof(URichTextBlockDecorator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UScrollBox) == 0x0880); // 2176 bytes (0x000120 - 0x000880)
static_assert(sizeof(USizeBox) == 0x0158); // 344 bytes (0x000120 - 0x000158)
static_assert(sizeof(UWrapBox) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UTextBlock) == 0x02C0); // 704 bytes (0x000128 - 0x0002C0)
static_assert(sizeof(UTileView) == 0x0388); // 904 bytes (0x000368 - 0x000388)
static_assert(sizeof(UTreeView) == 0x03C0); // 960 bytes (0x000368 - 0x0003C0)
static_assert(sizeof(UUniformGridPanel) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UWidgetSwitcher) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(USlider) == 0x04F8); // 1272 bytes (0x000108 - 0x0004F8)
static_assert(sizeof(FSlateChildSize) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRadialBoxSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDynamicEntryBoxBase) == 0x01D8); // 472 bytes (0x000108 - 0x0001D8)
static_assert(sizeof(URichTextBlockImageDecorator) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWidgetComponent) == 0x05A0); // 1440 bytes (0x000478 - 0x0005A0)
static_assert(sizeof(UAsyncTaskDownloadImage) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UBackgroundBlur) == 0x01D8); // 472 bytes (0x000120 - 0x0001D8)
static_assert(sizeof(UBackgroundBlurSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FDynamicPropertyPath) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPropertyBinding) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UBoolBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UBorderSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UBrushBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UButtonSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UCanvasPanel) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(FAnchorData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UCanvasPanelSlot) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UCheckedStateBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UCircularThrobber) == 0x01C0); // 448 bytes (0x000108 - 0x0001C0)
static_assert(sizeof(UColorBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UDragDropOperation) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UDynamicEntryBox) == 0x01E0); // 480 bytes (0x0001D8 - 0x0001E0)
static_assert(sizeof(UExpandableArea) == 0x0338); // 824 bytes (0x000108 - 0x000338)
static_assert(sizeof(UFloatBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UGridSlot) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UHorizontalBox) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UHorizontalBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UInputKeySelector) == 0x0700); // 1792 bytes (0x000108 - 0x000700)
static_assert(sizeof(UInt32Binding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UInvalidationBox) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UUserListEntry) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserListEntryLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserObjectListEntry) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserObjectListEntryLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UListViewDesignerPreviewItem) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMouseCursorBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMovieSceneEntitySystem) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UMovieScenePropertySystem) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMovieScene2DTransformPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneSignedObject) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(FMovieSceneSectionEvalOptions) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FMovieSceneEasingSettings) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneFrameRange) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FOptionalMovieSceneBlendType) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(UMovieSceneSection) == 0x00E8); // 232 bytes (0x000050 - 0x0000E8)
static_assert(sizeof(FMovieScene2DTransformMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneChannel) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneTangentData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneFloatValue) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FMovieSceneKeyHandleMap) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(FMovieSceneFloatChannel) == 0x00A0); // 160 bytes (0x000008 - 0x0000A0)
static_assert(sizeof(UMovieScene2DTransformSection) == 0x0558); // 1368 bytes (0x0000E8 - 0x000558)
static_assert(sizeof(FMovieSceneTrackEvalOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTrackEvaluationFieldEntry) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneTrackEvaluationField) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneTrack) == 0x0090); // 144 bytes (0x000050 - 0x000090)
static_assert(sizeof(UMovieSceneNameableTrack) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FMovieScenePropertyBinding) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UMovieScenePropertyTrack) == 0x00C0); // 192 bytes (0x000090 - 0x0000C0)
static_assert(sizeof(UMovieScene2DTransformTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneMarginPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneMarginSection) == 0x0370); // 880 bytes (0x0000E8 - 0x000370)
static_assert(sizeof(UMovieSceneMarginTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneMaterialTrack) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UMovieSceneWidgetMaterialTrack) == 0x00C0); // 192 bytes (0x0000A0 - 0x0000C0)
static_assert(sizeof(UMultiLineEditableText) == 0x0470); // 1136 bytes (0x000128 - 0x000470)
static_assert(sizeof(UNamedSlot) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UNamedSlotInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNativeWidgetHost) == 0x0118); // 280 bytes (0x000108 - 0x000118)
static_assert(sizeof(USafeZone) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(USafeZoneSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UScaleBox) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UScaleBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UScrollBar) == 0x0610); // 1552 bytes (0x000108 - 0x000610)
static_assert(sizeof(UScrollBoxSlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(USizeBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(USlateBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSlateMeshVertex) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(USlateVectorArtData) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(USlateAccessibleWidgetData) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(USpacer) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(USpinBox) == 0x0520); // 1312 bytes (0x000108 - 0x000520)
static_assert(sizeof(UTextBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UThrobber) == 0x01B0); // 432 bytes (0x000108 - 0x0001B0)
static_assert(sizeof(FMovieSceneRootEvaluationTemplateInstance) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(UUMGSequencePlayer) == 0x03C8); // 968 bytes (0x000028 - 0x0003C8)
static_assert(sizeof(UUMGSequenceTickManager) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(UUniformGridSlot) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UVerticalBox) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UVerticalBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UViewport) == 0x0168); // 360 bytes (0x000120 - 0x000168)
static_assert(sizeof(UVisibilityBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMovieSceneSequence) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(FWidgetAnimationBinding) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UWidgetAnimation) == 0x0090); // 144 bytes (0x000060 - 0x000090)
static_assert(sizeof(FBlueprintWidgetAnimationDelegateBinding) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UWidgetAnimationDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UWidgetAnimationPlayCallbackProxy) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UWidgetBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(FDelegateRuntimeBinding) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UWidgetBlueprintGeneratedClass) == 0x0368); // 872 bytes (0x000328 - 0x000368)
static_assert(sizeof(UWidgetBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWidgetInteractionComponent) == 0x03F0); // 1008 bytes (0x0001F8 - 0x0003F0)
static_assert(sizeof(UWidgetLayoutLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWidgetNavigationData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UWidgetNavigation) == 0x0100); // 256 bytes (0x000028 - 0x000100)
static_assert(sizeof(UWidgetSwitcherSlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UWidgetTree) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWindowTitleBarArea) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UWindowTitleBarAreaSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UWrapBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FEventReply) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPaintContext) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEvalTemplateBase) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvalTemplate) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FScalarParameterNameAndCurve) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMovieSceneBoolChannel) == 0x0090); // 144 bytes (0x000008 - 0x000090)
static_assert(sizeof(FBoolParameterNameAndCurve) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FVector2DParameterNameAndCurves) == 0x0148); // 328 bytes (0x000000 - 0x000148)
static_assert(sizeof(FVectorParameterNameAndCurves) == 0x01E8); // 488 bytes (0x000000 - 0x0001E8)
static_assert(sizeof(FColorParameterNameAndCurves) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FTransformParameterNameAndCurves) == 0x05A8); // 1448 bytes (0x000000 - 0x0005A8)
static_assert(sizeof(FMovieSceneParameterSectionTemplate) == 0x0080); // 128 bytes (0x000020 - 0x000080)
static_assert(sizeof(FMovieSceneWidgetMaterialSectionTemplate) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(FRichTextStyleRow) == 0x0278); // 632 bytes (0x000008 - 0x000278)
static_assert(sizeof(FRichImageRow) == 0x0090); // 144 bytes (0x000008 - 0x000090)
static_assert(sizeof(FWidgetComponentInstanceData) == 0x00C8); // 200 bytes (0x0000B8 - 0x0000C8)
static_assert(sizeof(FMovieSceneSequenceLoopCount) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneSequencePlaybackSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneSequenceReplProperties) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneSequencePlayer) == 0x04E8); // 1256 bytes (0x000028 - 0x0004E8)
static_assert(sizeof(FMovieSceneSectionParameters) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UMovieSceneSubSection) == 0x0168); // 360 bytes (0x0000E8 - 0x000168)
static_assert(sizeof(UMovieSceneSubTrack) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UMovieSceneCustomClockSource) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneDeterminismSource) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneEntityProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneEvaluationHook) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieScenePlaybackClient) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneTrackTemplateProducer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNodeAndChannelMappings) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneNodeGroup) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneNodeGroupCollection) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneSpawnable) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FMovieScenePossessable) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMovieSceneBinding) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneMarkedFrame) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMovieScene) == 0x0148); // 328 bytes (0x000050 - 0x000148)
static_assert(sizeof(FMovieSceneObjectBindingID) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneBindingOverrideData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UMovieSceneBindingOverrides) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UMovieSceneBindingOwnerInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneBlenderSystem) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMovieSceneBoolSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneEntityInstantiatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneGenericBoundObjectInstantiator) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneBoundSceneComponentInstantiator) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneSceneComponentImpersonator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneEvaluationTemplateSerialNumber) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTrackIdentifier) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTemplateGenerationLedger) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMovieSceneEvaluationTemplate) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(FMovieSceneSequenceID) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneSequenceHierarchyNode) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSubSequenceTree) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FMovieSceneSequenceHierarchy) == 0x0118); // 280 bytes (0x000000 - 0x000118)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityTree) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneEvaluationFieldEntity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityMetaData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneEvaluationFieldSharedEntityMetaData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEntityComponentField) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FMovieSceneEvaluationGroupLUTIndex) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneEvaluationFieldTrackPtr) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneFieldEntry_EvaluationTrack) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneFieldEntry_ChildTemplate) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneEvaluationGroup) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEvaluationKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneOrderedEvaluationKey) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationMetaData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneEvaluationField) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneSequenceCompilerMaskStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(UMovieSceneCompiledData) == 0x03F8); // 1016 bytes (0x000028 - 0x0003F8)
static_assert(sizeof(UMovieSceneCompiledDataManager) == 0x0230); // 560 bytes (0x000028 - 0x000230)
static_assert(sizeof(UMovieSceneFloatDecomposer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneBuiltInEasingFunction) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UMovieSceneEasingExternalCurve) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UMovieSceneEasingFunction) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneEntitySystemGraphNodes) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneEntitySystemGraph) == 0x0138); // 312 bytes (0x000000 - 0x000138)
static_assert(sizeof(UMovieSceneEntitySystemLinker) == 0x04F0); // 1264 bytes (0x000028 - 0x0004F0)
static_assert(sizeof(UMovieSceneEvalTimeSystem) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMovieSceneEvaluationHookSystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMovieSceneFolder) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UMovieSceneHookSection) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(UMovieSceneKeyProxy) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneMasterInstantiatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieScenePreAnimatedStateSystemInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneCachePreAnimatedStateSystem) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMovieSceneRestorePreAnimatedStateSystem) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMovieSceneSequenceActor) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneSequenceActorPointers) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UMovieSceneSequenceTickManager) == 0x00D0); // 208 bytes (0x000028 - 0x0000D0)
static_assert(sizeof(UMovieSceneSpawnablesSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneSpawnSection) == 0x0188); // 392 bytes (0x000180 - 0x000188)
static_assert(sizeof(UMovieSceneSpawnTrack) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UTestMovieSceneTrack) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UTestMovieSceneSection) == 0x00E8); // 232 bytes (0x0000E8 - 0x0000E8)
static_assert(sizeof(UTestMovieSceneSequence) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UTestMovieSceneSubTrack) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UTestMovieSceneSubSection) == 0x0168); // 360 bytes (0x000168 - 0x000168)
static_assert(sizeof(UTestMovieSceneEvalHookTrack) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UTestMovieSceneEvalHookSection) == 0x0118); // 280 bytes (0x000100 - 0x000118)
static_assert(sizeof(FMovieSceneTrackInstanceInput) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneTrackInstance) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UMovieSceneTrackInstanceInstantiator) == 0x00F0); // 240 bytes (0x000040 - 0x0000F0)
static_assert(sizeof(UMovieSceneTrackInstanceSystem) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FMovieSceneByteChannel) == 0x0098); // 152 bytes (0x000008 - 0x000098)
static_assert(sizeof(FMovieSceneIntegerChannel) == 0x0090); // 144 bytes (0x000008 - 0x000090)
static_assert(sizeof(FMovieSceneTrackImplementation) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FMovieScenePropertySectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieScenePropertySectionTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FTrackInstanceInputComponent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationHookComponent) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneTrackInstanceComponent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEasingComponentData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneDeterminismData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSectionGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneObjectBindingIDs) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneTrackLabels) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEditorData) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FMovieSceneExpansionState) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FMovieSceneTimecodeSource) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneCompiledSequenceFlagStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FMovieSceneEntitySystemGraphNode) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneEvalTemplatePtr) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FMovieSceneEmptyStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FMovieSceneSegmentIdentifier) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneEvaluationFieldSegmentPtr) == 0x000C); // 12 bytes (0x000008 - 0x00000C)
static_assert(sizeof(FMovieSceneEvaluationInstanceKey) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneEvaluationHookEvent) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneEvaluationHookEventContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationOperand) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneTrackImplementationPtr) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneEvaluationTrack) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FMovieSceneSubSectionData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FMovieSceneKeyStruct) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneKeyTimeStruct) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FGeneratedMovieSceneKeyStruct) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FMovieSceneObjectPathChannelKeyValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneObjectPathChannel) == 0x00C0); // 192 bytes (0x000008 - 0x0000C0)
static_assert(sizeof(FMovieSceneSegment) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSectionEvaluationData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneTimeTransform) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneTimeWarping) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneNestedSequenceTransform) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneSequenceTransform) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneSequenceInstanceDataPtr) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSubSequenceData) == 0x0108); // 264 bytes (0x000000 - 0x000108)
static_assert(sizeof(FMovieSceneSubSequenceTreeEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSequenceInstanceData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneSequencePlaybackParams) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneWarpCounter) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTestMovieSceneEvalTemplate) == 0x0020); // 32 bytes (0x000020 - 0x000020)
static_assert(sizeof(FMovieSceneTrackDisplayOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTrackInstanceEntry) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneCameraShakeEvaluator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UByteChannelEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UFloatChannelEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneTransformOrigin) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UIntegerChannelEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieScene3DConstraintSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(UMovieScene3DAttachSection) == 0x0130); // 304 bytes (0x000110 - 0x000130)
static_assert(sizeof(UMovieScene3DConstraintTrack) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UMovieScene3DAttachTrack) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UMovieScene3DPathSection) == 0x01B8); // 440 bytes (0x000110 - 0x0001B8)
static_assert(sizeof(UMovieScene3DPathTrack) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(UMovieScene3DTransformPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(FMovieSceneTransformMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UMovieScene3DTransformSection) == 0x0740); // 1856 bytes (0x0000E8 - 0x000740)
static_assert(sizeof(UMovieScene3DTransformTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(FMovieSceneActorReferenceKey) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneActorReferenceData) == 0x00B0); // 176 bytes (0x000008 - 0x0000B0)
static_assert(sizeof(UMovieSceneActorReferenceSection) == 0x0228); // 552 bytes (0x0000E8 - 0x000228)
static_assert(sizeof(UMovieSceneActorReferenceTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneAudioSection) == 0x0338); // 824 bytes (0x0000E8 - 0x000338)
static_assert(sizeof(UMovieSceneAudioTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieSceneBaseValueEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneBoolPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneBoolTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneBytePropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneByteSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(UMovieSceneByteTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(FMovieSceneCameraAnimSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMovieSceneCameraAnimSection) == 0x0128); // 296 bytes (0x0000E8 - 0x000128)
static_assert(sizeof(UMovieSceneCameraAnimTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieSceneCameraCutSection) == 0x0160); // 352 bytes (0x0000E8 - 0x000160)
static_assert(sizeof(UMovieSceneCameraCutTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieSceneCameraCutTrackInstance) == 0x00B8); // 184 bytes (0x000050 - 0x0000B8)
static_assert(sizeof(FMovieSceneCameraShakeSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMovieSceneCameraShakeSection) == 0x0128); // 296 bytes (0x0000E8 - 0x000128)
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeSection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FMovieSceneCameraShakeSourceTrigger) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneCameraShakeSourceTriggerChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerSection) == 0x0170); // 368 bytes (0x0000E8 - 0x000170)
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieSceneCameraShakeTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieSceneCinematicShotSection) == 0x0190); // 400 bytes (0x000168 - 0x000190)
static_assert(sizeof(UMovieSceneCinematicShotTrack) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(UMovieSceneColorPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneColorSection) == 0x0370); // 880 bytes (0x0000E8 - 0x000370)
static_assert(sizeof(UMovieSceneColorTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneComponentAttachmentInvalidatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneComponentAttachmentSystem) == 0x01C0); // 448 bytes (0x000040 - 0x0001C0)
static_assert(sizeof(UMovieSceneComponentMobilitySystem) == 0x0220); // 544 bytes (0x000040 - 0x000220)
static_assert(sizeof(UMovieSceneComponentTransformSystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneDeferredComponentMovementSystem) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMovieSceneEnumPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneEnumSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(UMovieSceneEnumTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneEulerTransformPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneEulerTransformTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneEventSectionBase) == 0x00E8); // 232 bytes (0x0000E8 - 0x0000E8)
static_assert(sizeof(FMovieSceneEventPtrs) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneEvent) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UMovieSceneEventRepeaterSection) == 0x0118); // 280 bytes (0x0000E8 - 0x000118)
static_assert(sizeof(FMovieSceneEventParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FEventPayload) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEventSectionData) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneEventSection) == 0x01E8); // 488 bytes (0x0000E8 - 0x0001E8)
static_assert(sizeof(UMovieSceneEventSystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMovieScenePreSpawnEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieScenePostSpawnEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieScenePostEvalEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieSceneEventTrack) == 0x00B8); // 184 bytes (0x000090 - 0x0000B8)
static_assert(sizeof(FMovieSceneEventChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneEventTriggerSection) == 0x0178); // 376 bytes (0x0000E8 - 0x000178)
static_assert(sizeof(UMovieSceneFadeSection) == 0x01A0); // 416 bytes (0x0000E8 - 0x0001A0)
static_assert(sizeof(UMovieSceneFloatTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneFadeTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneFloatPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneFloatSection) == 0x0190); // 400 bytes (0x0000E8 - 0x000190)
static_assert(sizeof(UMovieSceneHierarchicalBiasSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneInitialValueSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneIntegerPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneIntegerSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneIntegerTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneInterrogatedPropertyInstantiatorSystem) == 0x01E8); // 488 bytes (0x000040 - 0x0001E8)
static_assert(sizeof(UMovieSceneLevelVisibilitySection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UMovieSceneLevelVisibilitySystem) == 0x01A8); // 424 bytes (0x000040 - 0x0001A8)
static_assert(sizeof(UMovieSceneLevelVisibilityTrack) == 0x00A0); // 160 bytes (0x000090 - 0x0000A0)
static_assert(sizeof(UMovieSceneMaterialParameterCollectionTrack) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UMovieSceneComponentMaterialTrack) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(UMovieSceneMotionVectorSimulationSystem) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UMovieSceneObjectPropertySection) == 0x01A8); // 424 bytes (0x0000E8 - 0x0001A8)
static_assert(sizeof(UMovieSceneObjectPropertyTrack) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UMovieSceneParameterSection) == 0x0148); // 328 bytes (0x0000E8 - 0x000148)
static_assert(sizeof(UMovieSceneParticleParameterTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FMovieSceneParticleChannel) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(UMovieSceneParticleSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneParticleTrack) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UMovieScenePiecewiseBoolBlenderSystem) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(UMovieScenePiecewiseByteBlenderSystem) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(UMovieScenePiecewiseEnumBlenderSystem) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(UMovieScenePiecewiseFloatBlenderSystem) == 0x0128); // 296 bytes (0x000068 - 0x000128)
static_assert(sizeof(UMovieScenePiecewiseIntegerBlenderSystem) == 0x00B0); // 176 bytes (0x000068 - 0x0000B0)
static_assert(sizeof(UMovieScenePrimitiveMaterialSection) == 0x01A8); // 424 bytes (0x0000E8 - 0x0001A8)
static_assert(sizeof(UMovieScenePrimitiveMaterialTrack) == 0x00D0); // 208 bytes (0x0000C0 - 0x0000D0)
static_assert(sizeof(UMovieScenePropertyInstantiatorSystem) == 0x0248); // 584 bytes (0x000040 - 0x000248)
static_assert(sizeof(UMovieSceneQuaternionInterpolationRotationSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(FMovieSceneSkeletalAnimationParams) == 0x00D8); // 216 bytes (0x000000 - 0x0000D8)
static_assert(sizeof(UMovieSceneSkeletalAnimationSection) == 0x0270); // 624 bytes (0x0000E8 - 0x000270)
static_assert(sizeof(FMovieSceneSkeletalAnimRootMotionTrackParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UMovieSceneSkeletalAnimationTrack) == 0x00E8); // 232 bytes (0x000090 - 0x0000E8)
static_assert(sizeof(UMovieSceneSlomoSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(UMovieSceneSlomoTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(FMovieSceneStringChannel) == 0x00A0); // 160 bytes (0x000008 - 0x0000A0)
static_assert(sizeof(UMovieSceneStringSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(UMovieSceneStringTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneTransformOriginSystem) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMovieSceneTransformTrack) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMovieSceneVectorPropertySystem) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMovieSceneVectorSection) == 0x0378); // 888 bytes (0x0000E8 - 0x000378)
static_assert(sizeof(UMovieSceneVectorTrack) == 0x00C8); // 200 bytes (0x0000C0 - 0x0000C8)
static_assert(sizeof(UMovieSceneVisibilityTrack) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(sizeof(UMovieSceneHierarchicalEasingInstantiatorSystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UWeightAndEasingEvaluatorSystem) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(FMovieScene3DPathSectionTemplate) == 0x00E0); // 224 bytes (0x000020 - 0x0000E0)
static_assert(sizeof(FMovieScene3DTransformKeyStruct) == 0x0048); // 72 bytes (0x000008 - 0x000048)
static_assert(sizeof(FMovieScene3DScaleKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieScene3DRotationKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieScene3DLocationKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieSceneActorReferenceSectionTemplate) == 0x00E8); // 232 bytes (0x000020 - 0x0000E8)
static_assert(sizeof(FMovieSceneAudioSectionTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FMovieSceneCameraAnimSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneCameraShakeSourceShakeSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneCameraShakeSourceTriggerSectionTemplate) == 0x0040); // 64 bytes (0x000020 - 0x000040)
static_assert(sizeof(FMovieSceneCameraShakeSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneColorKeyStruct) == 0x0038); // 56 bytes (0x000008 - 0x000038)
static_assert(sizeof(FMovieSceneColorSectionTemplate) == 0x02C0); // 704 bytes (0x000038 - 0x0002C0)
static_assert(sizeof(FMovieSceneEventPayloadVariable) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEventTriggerData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMovieSceneEventSectionTemplate) == 0x00B0); // 176 bytes (0x000020 - 0x0000B0)
static_assert(sizeof(FMovieSceneFadeSectionTemplate) == 0x00D8); // 216 bytes (0x000020 - 0x0000D8)
static_assert(sizeof(FMovieSceneMaterialParameterCollectionTemplate) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(FMovieSceneObjectPropertyTemplate) == 0x00F8); // 248 bytes (0x000038 - 0x0000F8)
static_assert(sizeof(FMovieSceneComponentMaterialSectionTemplate) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(FMovieSceneParticleParameterSectionTemplate) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FMovieSceneParticleSectionTemplate) == 0x00B8); // 184 bytes (0x000020 - 0x0000B8)
static_assert(sizeof(FMovieScenePrimitiveMaterialTemplate) == 0x00E8); // 232 bytes (0x000020 - 0x0000E8)
static_assert(sizeof(FMovieSceneStringPropertySectionTemplate) == 0x00D8); // 216 bytes (0x000038 - 0x0000D8)
static_assert(sizeof(FMovieSceneBoolPropertySectionTemplate) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplateParameters) == 0x00E0); // 224 bytes (0x0000D8 - 0x0000E0)
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplate) == 0x0100); // 256 bytes (0x000020 - 0x000100)
static_assert(sizeof(FMovieSceneSlomoSectionTemplate) == 0x00C0); // 192 bytes (0x000020 - 0x0000C0)
static_assert(sizeof(FLevelVisibilityComponentData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneVectorKeyStructBase) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FMovieSceneVector4KeyStruct) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FMovieSceneVectorKeyStruct) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FMovieSceneVector2DKeyStruct) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FMovieSceneVisibilitySectionTemplate) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(offsetof(FTickFunction, TickGroup) == 0x0008);
static_assert(offsetof(FTickFunction, EndTickGroup) == 0x0009);
static_assert(offsetof(FSimpleMemberReference, MemberParent) == 0x0000);
static_assert(offsetof(FSimpleMemberReference, MemberName) == 0x0008);
static_assert(offsetof(FSimpleMemberReference, MemberGuid) == 0x0010);
static_assert(offsetof(UActorComponent, PrimaryComponentTick) == 0x0030);
static_assert(offsetof(UActorComponent, ComponentTags) == 0x0060);
static_assert(offsetof(UActorComponent, AssetUserData) == 0x0070);
static_assert(offsetof(UActorComponent, CreationMethod) == 0x008C);
static_assert(offsetof(UActorComponent, UCSModifiedProperties) == 0x0090);
static_assert(offsetof(USceneComponent, AttachParent) == 0x00C0);
static_assert(offsetof(USceneComponent, AttachSocketName) == 0x00C8);
static_assert(offsetof(USceneComponent, AttachChildren) == 0x00D0);
static_assert(offsetof(USceneComponent, ClientAttachedChildren) == 0x00E0);
static_assert(offsetof(USceneComponent, RelativeLocation) == 0x011C);
static_assert(offsetof(USceneComponent, RelativeRotation) == 0x0128);
static_assert(offsetof(USceneComponent, RelativeScale3D) == 0x0134);
static_assert(offsetof(USceneComponent, ComponentVelocity) == 0x0140);
static_assert(offsetof(USceneComponent, Mobility) == 0x014F);
static_assert(offsetof(USceneComponent, DetailMode) == 0x0150);
static_assert(offsetof(FIndexedCurve, KeyHandlesToIndices) == 0x0008);
static_assert(offsetof(FRealCurve, PreInfinityExtrap) == 0x006C);
static_assert(offsetof(FRealCurve, PostInfinityExtrap) == 0x006D);
static_assert(offsetof(FRichCurveKey, InterpMode) == 0x0000);
static_assert(offsetof(FRichCurveKey, TangentMode) == 0x0001);
static_assert(offsetof(FRichCurveKey, TangentWeightMode) == 0x0002);
static_assert(offsetof(FRichCurve, Keys) == 0x0070);
static_assert(offsetof(FRuntimeFloatCurve, EditorCurveData) == 0x0000);
static_assert(offsetof(FRuntimeFloatCurve, ExternalCurve) == 0x0080);
static_assert(offsetof(FBaseAttenuationSettings, DistanceAlgorithm) == 0x0008);
static_assert(offsetof(FBaseAttenuationSettings, AttenuationShape) == 0x0009);
static_assert(offsetof(FBaseAttenuationSettings, FalloffMode) == 0x0010);
static_assert(offsetof(FBaseAttenuationSettings, AttenuationShapeExtents) == 0x0014);
static_assert(offsetof(FBaseAttenuationSettings, CustomAttenuationCurve) == 0x0028);
static_assert(offsetof(FAttenuationSubmixSendSettings, Submix) == 0x0000);
static_assert(offsetof(FAttenuationSubmixSendSettings, SubmixSendMethod) == 0x0008);
static_assert(offsetof(FAttenuationSubmixSendSettings, CustomSubmixSendCurve) == 0x0020);
static_assert(offsetof(FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray) == 0x0000);
static_assert(offsetof(FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray) == 0x0010);
static_assert(offsetof(FSoundAttenuationPluginSettings, ReverbPluginSettingsArray) == 0x0020);
static_assert(offsetof(FSoundAttenuationSettings, SpatializationAlgorithm) == 0x00B2);
static_assert(offsetof(FSoundAttenuationSettings, AbsorptionMethod) == 0x00B8);
static_assert(offsetof(FSoundAttenuationSettings, OcclusionTraceChannel) == 0x00B9);
static_assert(offsetof(FSoundAttenuationSettings, ReverbSendMethod) == 0x00BA);
static_assert(offsetof(FSoundAttenuationSettings, PriorityAttenuationMethod) == 0x00BB);
static_assert(offsetof(FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve) == 0x00D0);
static_assert(offsetof(FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve) == 0x0158);
static_assert(offsetof(FSoundAttenuationSettings, CustomReverbSendCurve) == 0x0238);
static_assert(offsetof(FSoundAttenuationSettings, SubmixSendSettings) == 0x02C0);
static_assert(offsetof(FSoundAttenuationSettings, CustomPriorityAttenuationCurve) == 0x02E8);
static_assert(offsetof(FSoundAttenuationSettings, PluginSettings) == 0x0370);
static_assert(offsetof(FSoundSubmixSendInfo, SendLevelControlMethod) == 0x0000);
static_assert(offsetof(FSoundSubmixSendInfo, SendStage) == 0x0001);
static_assert(offsetof(FSoundSubmixSendInfo, SoundSubmix) == 0x0008);
static_assert(offsetof(FSoundSubmixSendInfo, CustomSendLevelCurve) == 0x0028);
static_assert(offsetof(FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod) == 0x0000);
static_assert(offsetof(FSoundSourceBusSendInfo, SoundSourceBus) == 0x0008);
static_assert(offsetof(FSoundSourceBusSendInfo, AudioBus) == 0x0010);
static_assert(offsetof(FSoundSourceBusSendInfo, CustomSendLevelCurve) == 0x0030);
static_assert(offsetof(USynthComponent, AttenuationSettings) == 0x0200);
static_assert(offsetof(USynthComponent, AttenuationOverrides) == 0x0208);
static_assert(offsetof(USynthComponent, ConcurrencySettings) == 0x05A8);
static_assert(offsetof(USynthComponent, SoundClass) == 0x0600);
static_assert(offsetof(USynthComponent, SourceEffectChain) == 0x0608);
static_assert(offsetof(USynthComponent, SoundSubmix) == 0x0610);
static_assert(offsetof(USynthComponent, SoundSubmixSends) == 0x0618);
static_assert(offsetof(USynthComponent, BusSends) == 0x0628);
static_assert(offsetof(USynthComponent, PreEffectBusSends) == 0x0638);
static_assert(offsetof(USynthComponent, Synth) == 0x0688);
static_assert(offsetof(USynthComponent, AudioComponent) == 0x0690);
static_assert(offsetof(UQuartzClockHandle, QuartzSubsystem) == 0x0168);
static_assert(offsetof(UQuartzClockHandle, WorldPtr) == 0x0188);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType) == 0x0000);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, PeakMode) == 0x0001);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, LinkMode) == 0x0002);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeySource) == 0x0020);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ExternalAudioBus) == 0x0028);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ExternalSubmix) == 0x0030);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyHighshelf) == 0x0044);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyLowshelf) == 0x0050);
static_assert(offsetof(USubmixEffectDynamicsProcessorPreset, Settings) == 0x00F0);
static_assert(offsetof(FSubmixEffectSubmixEQSettings, EQBands) == 0x0000);
static_assert(offsetof(USubmixEffectSubmixEQPreset, Settings) == 0x00A0);
static_assert(offsetof(USubmixEffectReverbPreset, Settings) == 0x00D0);
static_assert(offsetof(FSoundConcurrencySettings, ResolutionRule) == 0x0008);
static_assert(offsetof(FSoundConcurrencySettings, VolumeScaleMode) == 0x0014);
static_assert(offsetof(USoundBase, SoundClassObject) == 0x0030);
static_assert(offsetof(USoundBase, VirtualizationMode) == 0x0039);
static_assert(offsetof(USoundBase, ConcurrencyOverrides) == 0x00E0);
static_assert(offsetof(USoundBase, AttenuationSettings) == 0x0118);
static_assert(offsetof(USoundBase, SoundSubmixObject) == 0x0120);
static_assert(offsetof(USoundBase, SoundSubmixSends) == 0x0128);
static_assert(offsetof(USoundBase, SourceEffectChain) == 0x0138);
static_assert(offsetof(USoundBase, BusSends) == 0x0140);
static_assert(offsetof(USoundBase, PreEffectBusSends) == 0x0150);
static_assert(offsetof(USoundBase, AssetUserData) == 0x0160);
static_assert(offsetof(FSoundModulationDestinationSettings, Modulator) == 0x0008);
static_assert(offsetof(FSoundModulationDefaultSettings, VolumeModulationDestination) == 0x0000);
static_assert(offsetof(FSoundModulationDefaultSettings, PitchModulationDestination) == 0x0010);
static_assert(offsetof(FSoundModulationDefaultSettings, HighpassModulationDestination) == 0x0020);
static_assert(offsetof(FSoundModulationDefaultSettings, LowpassModulationDestination) == 0x0030);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, VolumeRouting) == 0x0040);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, PitchRouting) == 0x0041);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, HighpassRouting) == 0x0042);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, LowpassRouting) == 0x0043);
static_assert(offsetof(FSoundWaveSpectralTimeData, Data) == 0x0000);
static_assert(offsetof(FSubtitleCue, Text) == 0x0000);
static_assert(offsetof(USoundWave, SampleRateQuality) == 0x0178);
static_assert(offsetof(USoundWave, SoundGroup) == 0x017A);
static_assert(offsetof(USoundWave, LoadingBehavior) == 0x017C);
static_assert(offsetof(USoundWave, ModulationSettings) == 0x0180);
static_assert(offsetof(USoundWave, FrequenciesToAnalyze) == 0x01C8);
static_assert(offsetof(USoundWave, CookedSpectralTimeData) == 0x01D8);
static_assert(offsetof(USoundWave, CookedEnvelopeTimeData) == 0x01E8);
static_assert(offsetof(USoundWave, SpokenText) == 0x0240);
static_assert(offsetof(USoundWave, Subtitles) == 0x0270);
static_assert(offsetof(USoundWave, Curves) == 0x0280);
static_assert(offsetof(USoundWave, InternalCurves) == 0x0288);
static_assert(offsetof(USynthSound, OwningSynthComponent) == 0x03C0);
static_assert(offsetof(UPlayer, PlayerController) == 0x0030);
static_assert(offsetof(FUniqueNetIdRepl, ReplicationBytes) == 0x0018);
static_assert(offsetof(UNetConnection, Children) == 0x0048);
static_assert(offsetof(UNetConnection, Driver) == 0x0058);
static_assert(offsetof(UNetConnection, PackageMapClass) == 0x0060);
static_assert(offsetof(UNetConnection, PackageMap) == 0x0068);
static_assert(offsetof(UNetConnection, OpenChannels) == 0x0070);
static_assert(offsetof(UNetConnection, SentTemporaries) == 0x0080);
static_assert(offsetof(UNetConnection, ViewTarget) == 0x0090);
static_assert(offsetof(UNetConnection, OwningActor) == 0x0098);
static_assert(offsetof(UNetConnection, PlayerId) == 0x0160);
static_assert(offsetof(UNetConnection, ChannelsToTick) == 0x1510);
static_assert(offsetof(FChannelDefinition, ChannelName) == 0x0000);
static_assert(offsetof(FChannelDefinition, ClassName) == 0x0008);
static_assert(offsetof(FChannelDefinition, ChannelClass) == 0x0010);
static_assert(offsetof(UNetDriver, NetConnectionClassName) == 0x0030);
static_assert(offsetof(UNetDriver, ReplicationDriverClassName) == 0x0040);
static_assert(offsetof(UNetDriver, ServerConnection) == 0x0088);
static_assert(offsetof(UNetDriver, ClientConnections) == 0x0090);
static_assert(offsetof(UNetDriver, World) == 0x0140);
static_assert(offsetof(UNetDriver, WorldPackage) == 0x0148);
static_assert(offsetof(UNetDriver, NetConnectionClass) == 0x0170);
static_assert(offsetof(UNetDriver, ReplicationDriverClass) == 0x0178);
static_assert(offsetof(UNetDriver, NetDriverName) == 0x0190);
static_assert(offsetof(UNetDriver, ChannelDefinitions) == 0x0198);
static_assert(offsetof(UNetDriver, ActorChannelPool) == 0x01F8);
static_assert(offsetof(UNetDriver, ReplicationDriver) == 0x0700);
static_assert(offsetof(FRepMovement, LinearVelocity) == 0x0000);
static_assert(offsetof(FRepMovement, AngularVelocity) == 0x000C);
static_assert(offsetof(FRepMovement, Location) == 0x0018);
static_assert(offsetof(FRepMovement, Rotation) == 0x0024);
static_assert(offsetof(FRepMovement, LocationQuantizationLevel) == 0x0031);
static_assert(offsetof(FRepMovement, VelocityQuantizationLevel) == 0x0032);
static_assert(offsetof(FRepMovement, RotationQuantizationLevel) == 0x0033);
static_assert(offsetof(FRepAttachment, AttachParent) == 0x0000);
static_assert(offsetof(FRepAttachment, LocationOffset) == 0x0008);
static_assert(offsetof(FRepAttachment, RelativeScale3D) == 0x0014);
static_assert(offsetof(FRepAttachment, RotationOffset) == 0x0020);
static_assert(offsetof(FRepAttachment, AttachSocket) == 0x002C);
static_assert(offsetof(FRepAttachment, AttachComponent) == 0x0038);
static_assert(offsetof(AActor, PrimaryActorTick) == 0x0028);
static_assert(offsetof(AActor, UpdateOverlapsMethodDuringLevelStreaming) == 0x005D);
static_assert(offsetof(AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming) == 0x005E);
static_assert(offsetof(AActor, RemoteRole) == 0x005F);
static_assert(offsetof(AActor, ReplicatedMovement) == 0x0060);
static_assert(offsetof(AActor, AttachmentReplication) == 0x00A0);
static_assert(offsetof(AActor, Owner) == 0x00E0);
static_assert(offsetof(AActor, NetDriverName) == 0x00E8);
static_assert(offsetof(AActor, Role) == 0x00F0);
static_assert(offsetof(AActor, NetDormancy) == 0x00F1);
static_assert(offsetof(AActor, SpawnCollisionHandlingMethod) == 0x00F2);
static_assert(offsetof(AActor, AutoReceiveInput) == 0x00F3);
static_assert(offsetof(AActor, InputComponent) == 0x00F8);
static_assert(offsetof(AActor, Instigator) == 0x0118);
static_assert(offsetof(AActor, Children) == 0x0120);
static_assert(offsetof(AActor, RootComponent) == 0x0130);
static_assert(offsetof(AActor, ControllingMatineeActors) == 0x0138);
static_assert(offsetof(AActor, Layers) == 0x0150);
static_assert(offsetof(AActor, Tags) == 0x0170);
static_assert(offsetof(AActor, InstanceComponents) == 0x01F0);
static_assert(offsetof(AActor, BlueprintCreatedComponents) == 0x0200);
static_assert(offsetof(UGameInstance, LocalPlayers) == 0x0038);
static_assert(offsetof(UGameInstance, OnlineSession) == 0x0048);
static_assert(offsetof(UGameInstance, ReferencedObjects) == 0x0050);
static_assert(offsetof(AGameSession, SessionName) == 0x0230);
static_assert(offsetof(FCustomPrimitiveData, Data) == 0x0000);
static_assert(offsetof(FCollisionResponseContainer, WorldStatic) == 0x0000);
static_assert(offsetof(FCollisionResponseContainer, WorldDynamic) == 0x0001);
static_assert(offsetof(FCollisionResponseContainer, Pawn) == 0x0002);
static_assert(offsetof(FCollisionResponseContainer, Visibility) == 0x0003);
static_assert(offsetof(FCollisionResponseContainer, Camera) == 0x0004);
static_assert(offsetof(FCollisionResponseContainer, PhysicsBody) == 0x0005);
static_assert(offsetof(FCollisionResponseContainer, Vehicle) == 0x0006);
static_assert(offsetof(FCollisionResponseContainer, Destructible) == 0x0007);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel1) == 0x0008);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel2) == 0x0009);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel3) == 0x000A);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel4) == 0x000B);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel5) == 0x000C);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel6) == 0x000D);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel1) == 0x000E);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel2) == 0x000F);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel3) == 0x0010);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel4) == 0x0011);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel5) == 0x0012);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel6) == 0x0013);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel7) == 0x0014);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel8) == 0x0015);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel9) == 0x0016);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel10) == 0x0017);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel11) == 0x0018);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel12) == 0x0019);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel13) == 0x001A);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel14) == 0x001B);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel15) == 0x001C);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel16) == 0x001D);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel17) == 0x001E);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel18) == 0x001F);
static_assert(offsetof(FResponseChannel, Channel) == 0x0000);
static_assert(offsetof(FResponseChannel, Response) == 0x0008);
static_assert(offsetof(FCollisionResponse, ResponseToChannels) == 0x0000);
static_assert(offsetof(FCollisionResponse, ResponseArray) == 0x0020);
static_assert(offsetof(FWalkableSlopeOverride, WalkableSlopeBehavior) == 0x0000);
static_assert(offsetof(FBodyInstance, ObjectType) == 0x001E);
static_assert(offsetof(FBodyInstance, CollisionEnabled) == 0x0020);
static_assert(offsetof(FBodyInstance, SleepFamily) == 0x0059);
static_assert(offsetof(FBodyInstance, DOFMode) == 0x005A);
static_assert(offsetof(FBodyInstance, CollisionProfileName) == 0x006C);
static_assert(offsetof(FBodyInstance, CollisionResponses) == 0x0078);
static_assert(offsetof(FBodyInstance, CustomDOFPlaneNormal) == 0x00C0);
static_assert(offsetof(FBodyInstance, COMNudge) == 0x00CC);
static_assert(offsetof(FBodyInstance, InertiaTensorScale) == 0x00DC);
static_assert(offsetof(FBodyInstance, WalkableSlopeOverride) == 0x00F8);
static_assert(offsetof(FBodyInstance, PhysMaterialOverride) == 0x0108);
static_assert(offsetof(UPrimitiveComponent, DepthPriorityGroup) == 0x020C);
static_assert(offsetof(UPrimitiveComponent, ViewOwnerDepthPriorityGroup) == 0x020D);
static_assert(offsetof(UPrimitiveComponent, IndirectLightingCacheQuality) == 0x020E);
static_assert(offsetof(UPrimitiveComponent, LightmapType) == 0x020F);
static_assert(offsetof(UPrimitiveComponent, bHasCustomNavigableGeometry) == 0x0218);
static_assert(offsetof(UPrimitiveComponent, CanCharacterStepUpOn) == 0x021A);
static_assert(offsetof(UPrimitiveComponent, LightingChannels) == 0x021B);
static_assert(offsetof(UPrimitiveComponent, CustomDepthStencilWriteMask) == 0x021C);
static_assert(offsetof(UPrimitiveComponent, CustomPrimitiveData) == 0x0228);
static_assert(offsetof(UPrimitiveComponent, CustomPrimitiveDataInternal) == 0x0238);
static_assert(offsetof(UPrimitiveComponent, RuntimeVirtualTextures) == 0x0260);
static_assert(offsetof(UPrimitiveComponent, VirtualTextureRenderPassType) == 0x0273);
static_assert(offsetof(UPrimitiveComponent, MoveIgnoreActors) == 0x0298);
static_assert(offsetof(UPrimitiveComponent, MoveIgnoreComponents) == 0x02A8);
static_assert(offsetof(UPrimitiveComponent, BodyInstance) == 0x02C8);
static_assert(offsetof(UPrimitiveComponent, LODParentPrimitive) == 0x0448);
static_assert(offsetof(UMeshComponent, OverrideMaterials) == 0x0450);
static_assert(offsetof(FSkelMeshComponentLODInfo, HiddenMaterials) == 0x0000);
static_assert(offsetof(USkinnedMeshComponent, SkeletalMesh) == 0x0480);
static_assert(offsetof(USkinnedMeshComponent, SkinCacheUsage) == 0x0490);
static_assert(offsetof(USkinnedMeshComponent, VertexOffsetUsage) == 0x04A0);
static_assert(offsetof(USkinnedMeshComponent, PhysicsAssetOverride) == 0x05A8);
static_assert(offsetof(USkinnedMeshComponent, LODInfo) == 0x05D0);
static_assert(offsetof(USkinnedMeshComponent, VisibilityBasedAnimTickOption) == 0x0604);
static_assert(offsetof(USkinnedMeshComponent, CachedWorldSpaceBounds) == 0x0620);
static_assert(offsetof(USkinnedMeshComponent, CachedWorldToLocalTransform) == 0x0640);
static_assert(offsetof(FSkeletalMaterial, MaterialInterface) == 0x0000);
static_assert(offsetof(FSkeletalMaterial, MaterialSlotName) == 0x0008);
static_assert(offsetof(FSkeletalMaterial, UVChannelData) == 0x0010);
static_assert(offsetof(FBoneMirrorInfo, BoneFlipAxis) == 0x0004);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, TerminationCriterion) == 0x0000);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, ReductionMethod) == 0x0018);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, SilhouetteImportance) == 0x0019);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, TextureImportance) == 0x001A);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, ShadingImportance) == 0x001B);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, SkinningImportance) == 0x001C);
static_assert(offsetof(FBoneReference, BoneName) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODInfo, ScreenSize) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODInfo, LODMaterialMap) == 0x0008);
static_assert(offsetof(FSkeletalMeshLODInfo, BuildSettings) == 0x0018);
static_assert(offsetof(FSkeletalMeshLODInfo, ReductionSettings) == 0x002C);
static_assert(offsetof(FSkeletalMeshLODInfo, BonesToRemove) == 0x0068);
static_assert(offsetof(FSkeletalMeshLODInfo, BonesToPrioritize) == 0x0078);
static_assert(offsetof(FSkeletalMeshLODInfo, BakePose) == 0x0090);
static_assert(offsetof(FSkeletalMeshLODInfo, BakePoseOverride) == 0x0098);
static_assert(offsetof(FSkeletalMeshLODInfo, SourceImportFilename) == 0x00A0);
static_assert(offsetof(FSkeletalMeshLODInfo, SkinCacheUsage) == 0x00B0);
static_assert(offsetof(FSkeletalMeshSamplingRegionMaterialFilter, MaterialName) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegionBoneFilter, BoneName) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegion, Name) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegion, MaterialFilters) == 0x0010);
static_assert(offsetof(FSkeletalMeshSamplingRegion, BoneFilters) == 0x0020);
static_assert(offsetof(FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingBuiltData, RegionBuiltData) == 0x0010);
static_assert(offsetof(FSkeletalMeshSamplingInfo, Regions) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingInfo, BuiltData) == 0x0010);
static_assert(offsetof(FSkinWeightProfileInfo, Name) == 0x0000);
static_assert(offsetof(FSkinWeightProfileInfo, DefaultProfile) == 0x0008);
static_assert(offsetof(FSkinWeightProfileInfo, DefaultProfileFromLODIndex) == 0x000C);
static_assert(offsetof(USkeletalMesh, Skeleton) == 0x0080);
static_assert(offsetof(USkeletalMesh, ImportedBounds) == 0x0088);
static_assert(offsetof(USkeletalMesh, ExtendedBounds) == 0x00A4);
static_assert(offsetof(USkeletalMesh, PositiveBoundsExtension) == 0x00C0);
static_assert(offsetof(USkeletalMesh, NegativeBoundsExtension) == 0x00CC);
static_assert(offsetof(USkeletalMesh, Materials) == 0x00D8);
static_assert(offsetof(USkeletalMesh, SkelMirrorTable) == 0x00E8);
static_assert(offsetof(USkeletalMesh, LODInfo) == 0x00F8);
static_assert(offsetof(USkeletalMesh, MinLOD) == 0x0158);
static_assert(offsetof(USkeletalMesh, DisableBelowMinLodStripping) == 0x015C);
static_assert(offsetof(USkeletalMesh, SkelMirrorAxis) == 0x015D);
static_assert(offsetof(USkeletalMesh, SkelMirrorFlipAxis) == 0x015E);
static_assert(offsetof(USkeletalMesh, BodySetup) == 0x0160);
static_assert(offsetof(USkeletalMesh, PhysicsAsset) == 0x0168);
static_assert(offsetof(USkeletalMesh, ShadowPhysicsAsset) == 0x0170);
static_assert(offsetof(USkeletalMesh, NodeMappingData) == 0x0178);
static_assert(offsetof(USkeletalMesh, MorphTargets) == 0x0190);
static_assert(offsetof(USkeletalMesh, PostProcessAnimBlueprint) == 0x0318);
static_assert(offsetof(USkeletalMesh, MeshClothingAssets) == 0x0320);
static_assert(offsetof(USkeletalMesh, SamplingInfo) == 0x0330);
static_assert(offsetof(USkeletalMesh, AssetUserData) == 0x0360);
static_assert(offsetof(USkeletalMesh, Sockets) == 0x0370);
static_assert(offsetof(USkeletalMesh, SkinWeightProfiles) == 0x0390);
static_assert(offsetof(ABrush, BrushType) == 0x0220);
static_assert(offsetof(ABrush, BrushColor) == 0x0224);
static_assert(offsetof(ABrush, Brush) == 0x0230);
static_assert(offsetof(ABrush, BrushComponent) == 0x0238);
static_assert(offsetof(ABrush, SavedSelections) == 0x0248);
static_assert(offsetof(UDataAsset, NativeClass) == 0x0028);
static_assert(offsetof(UMaterialExpression, Material) == 0x0028);
static_assert(offsetof(UMaterialExpression, Function) == 0x0030);
static_assert(offsetof(FStatColorMapEntry, Out) == 0x0004);
static_assert(offsetof(FStatColorMapping, StatName) == 0x0000);
static_assert(offsetof(FStatColorMapping, ColorMap) == 0x0010);
static_assert(offsetof(FGameNameRedirect, OldGameName) == 0x0000);
static_assert(offsetof(FGameNameRedirect, NewGameName) == 0x0008);
static_assert(offsetof(FClassRedirect, ObjectName) == 0x0000);
static_assert(offsetof(FClassRedirect, OldClassName) == 0x0008);
static_assert(offsetof(FClassRedirect, NewClassName) == 0x0010);
static_assert(offsetof(FClassRedirect, OldSubobjName) == 0x0018);
static_assert(offsetof(FClassRedirect, NewSubobjName) == 0x0020);
static_assert(offsetof(FClassRedirect, NewClassClass) == 0x0028);
static_assert(offsetof(FClassRedirect, NewClassPackage) == 0x0030);
static_assert(offsetof(FPluginRedirect, OldPluginName) == 0x0000);
static_assert(offsetof(FPluginRedirect, NewPluginName) == 0x0010);
static_assert(offsetof(FStructRedirect, OldStructName) == 0x0000);
static_assert(offsetof(FStructRedirect, NewStructName) == 0x0008);
static_assert(offsetof(FDirectoryPath, Path) == 0x0000);
static_assert(offsetof(FDropNoteInfo, Location) == 0x0000);
static_assert(offsetof(FDropNoteInfo, Rotation) == 0x000C);
static_assert(offsetof(FDropNoteInfo, Comment) == 0x0018);
static_assert(offsetof(FNetDriverDefinition, DefName) == 0x0000);
static_assert(offsetof(FNetDriverDefinition, DriverClassName) == 0x0008);
static_assert(offsetof(FNetDriverDefinition, DriverClassNameFallback) == 0x0010);
static_assert(offsetof(UEngine, TinyFont) == 0x0030);
static_assert(offsetof(UEngine, TinyFontName) == 0x0038);
static_assert(offsetof(UEngine, SmallFont) == 0x0050);
static_assert(offsetof(UEngine, SmallFontName) == 0x0058);
static_assert(offsetof(UEngine, MediumFont) == 0x0070);
static_assert(offsetof(UEngine, MediumFontName) == 0x0078);
static_assert(offsetof(UEngine, LargeFont) == 0x0090);
static_assert(offsetof(UEngine, LargeFontName) == 0x0098);
static_assert(offsetof(UEngine, SubtitleFont) == 0x00B0);
static_assert(offsetof(UEngine, SubtitleFontName) == 0x00B8);
static_assert(offsetof(UEngine, AdditionalFonts) == 0x00D0);
static_assert(offsetof(UEngine, AdditionalFontNames) == 0x00E0);
static_assert(offsetof(UEngine, ConsoleClass) == 0x00F0);
static_assert(offsetof(UEngine, ConsoleClassName) == 0x00F8);
static_assert(offsetof(UEngine, GameViewportClientClass) == 0x0110);
static_assert(offsetof(UEngine, GameViewportClientClassName) == 0x0118);
static_assert(offsetof(UEngine, LocalPlayerClass) == 0x0130);
static_assert(offsetof(UEngine, LocalPlayerClassName) == 0x0138);
static_assert(offsetof(UEngine, WorldSettingsClass) == 0x0150);
static_assert(offsetof(UEngine, WorldSettingsClassName) == 0x0158);
static_assert(offsetof(UEngine, NavigationSystemClassName) == 0x0170);
static_assert(offsetof(UEngine, NavigationSystemClass) == 0x0188);
static_assert(offsetof(UEngine, NavigationSystemConfigClassName) == 0x0190);
static_assert(offsetof(UEngine, NavigationSystemConfigClass) == 0x01A8);
static_assert(offsetof(UEngine, AvoidanceManagerClassName) == 0x01B0);
static_assert(offsetof(UEngine, AvoidanceManagerClass) == 0x01C8);
static_assert(offsetof(UEngine, AIControllerClassName) == 0x01D0);
static_assert(offsetof(UEngine, PhysicsCollisionHandlerClass) == 0x01E8);
static_assert(offsetof(UEngine, PhysicsCollisionHandlerClassName) == 0x01F0);
static_assert(offsetof(UEngine, GameUserSettingsClassName) == 0x0208);
static_assert(offsetof(UEngine, GameUserSettingsClass) == 0x0220);
static_assert(offsetof(UEngine, GameUserSettings) == 0x0228);
static_assert(offsetof(UEngine, LevelScriptActorClass) == 0x0230);
static_assert(offsetof(UEngine, LevelScriptActorClassName) == 0x0238);
static_assert(offsetof(UEngine, DefaultBlueprintBaseClassName) == 0x0250);
static_assert(offsetof(UEngine, GameSingletonClassName) == 0x0268);
static_assert(offsetof(UEngine, GameSingleton) == 0x0280);
static_assert(offsetof(UEngine, AssetManagerClassName) == 0x0288);
static_assert(offsetof(UEngine, AssetManager) == 0x02A0);
static_assert(offsetof(UEngine, DefaultTexture) == 0x02A8);
static_assert(offsetof(UEngine, DefaultTextureName) == 0x02B0);
static_assert(offsetof(UEngine, DefaultDiffuseTexture) == 0x02C8);
static_assert(offsetof(UEngine, DefaultDiffuseTextureName) == 0x02D0);
static_assert(offsetof(UEngine, DefaultBSPVertexTexture) == 0x02E8);
static_assert(offsetof(UEngine, DefaultBSPVertexTextureName) == 0x02F0);
static_assert(offsetof(UEngine, HighFrequencyNoiseTexture) == 0x0308);
static_assert(offsetof(UEngine, HighFrequencyNoiseTextureName) == 0x0310);
static_assert(offsetof(UEngine, DefaultBokehTexture) == 0x0328);
static_assert(offsetof(UEngine, DefaultBokehTextureName) == 0x0330);
static_assert(offsetof(UEngine, DefaultBloomKernelTexture) == 0x0348);
static_assert(offsetof(UEngine, DefaultBloomKernelTextureName) == 0x0350);
static_assert(offsetof(UEngine, WireframeMaterial) == 0x0368);
static_assert(offsetof(UEngine, WireframeMaterialName) == 0x0370);
static_assert(offsetof(UEngine, DebugMeshMaterial) == 0x0380);
static_assert(offsetof(UEngine, DebugMeshMaterialName) == 0x0388);
static_assert(offsetof(UEngine, EmissiveMeshMaterial) == 0x03A0);
static_assert(offsetof(UEngine, EmissiveMeshMaterialName) == 0x03A8);
static_assert(offsetof(UEngine, LevelColorationLitMaterial) == 0x03C0);
static_assert(offsetof(UEngine, LevelColorationLitMaterialName) == 0x03C8);
static_assert(offsetof(UEngine, LevelColorationUnlitMaterial) == 0x03D8);
static_assert(offsetof(UEngine, LevelColorationUnlitMaterialName) == 0x03E0);
static_assert(offsetof(UEngine, LightingTexelDensityMaterial) == 0x03F0);
static_assert(offsetof(UEngine, LightingTexelDensityName) == 0x03F8);
static_assert(offsetof(UEngine, ShadedLevelColorationLitMaterial) == 0x0408);
static_assert(offsetof(UEngine, ShadedLevelColorationLitMaterialName) == 0x0410);
static_assert(offsetof(UEngine, ShadedLevelColorationUnlitMaterial) == 0x0420);
static_assert(offsetof(UEngine, ShadedLevelColorationUnlitMaterialName) == 0x0428);
static_assert(offsetof(UEngine, RemoveSurfaceMaterial) == 0x0438);
static_assert(offsetof(UEngine, RemoveSurfaceMaterialName) == 0x0440);
static_assert(offsetof(UEngine, VertexColorMaterial) == 0x0458);
static_assert(offsetof(UEngine, VertexColorMaterialName) == 0x0460);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_ColorOnly) == 0x0470);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_ColorOnly) == 0x0478);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_AlphaAsColor) == 0x0488);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_AlphaAsColor) == 0x0490);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_RedOnly) == 0x04A0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_RedOnly) == 0x04A8);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_GreenOnly) == 0x04B8);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_GreenOnly) == 0x04C0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_BlueOnly) == 0x04D0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_BlueOnly) == 0x04D8);
static_assert(offsetof(UEngine, DebugEditorMaterialName) == 0x04E8);
static_assert(offsetof(UEngine, ConstraintLimitMaterial) == 0x0500);
static_assert(offsetof(UEngine, ConstraintLimitMaterialX) == 0x0508);
static_assert(offsetof(UEngine, ConstraintLimitMaterialXAxis) == 0x0510);
static_assert(offsetof(UEngine, ConstraintLimitMaterialY) == 0x0518);
static_assert(offsetof(UEngine, ConstraintLimitMaterialYAxis) == 0x0520);
static_assert(offsetof(UEngine, ConstraintLimitMaterialZ) == 0x0528);
static_assert(offsetof(UEngine, ConstraintLimitMaterialZAxis) == 0x0530);
static_assert(offsetof(UEngine, ConstraintLimitMaterialPrismatic) == 0x0538);
static_assert(offsetof(UEngine, InvalidLightmapSettingsMaterial) == 0x0540);
static_assert(offsetof(UEngine, InvalidLightmapSettingsMaterialName) == 0x0548);
static_assert(offsetof(UEngine, PreviewShadowsIndicatorMaterial) == 0x0560);
static_assert(offsetof(UEngine, PreviewShadowsIndicatorMaterialName) == 0x0568);
static_assert(offsetof(UEngine, ArrowMaterial) == 0x0580);
static_assert(offsetof(UEngine, ArrowMaterialYellow) == 0x0588);
static_assert(offsetof(UEngine, ArrowMaterialName) == 0x0590);
static_assert(offsetof(UEngine, LightingOnlyBrightness) == 0x05A8);
static_assert(offsetof(UEngine, ShaderComplexityColors) == 0x05B8);
static_assert(offsetof(UEngine, QuadComplexityColors) == 0x05C8);
static_assert(offsetof(UEngine, LightComplexityColors) == 0x05D8);
static_assert(offsetof(UEngine, StationaryLightOverlapColors) == 0x05E8);
static_assert(offsetof(UEngine, LODColorationColors) == 0x05F8);
static_assert(offsetof(UEngine, HLODColorationColors) == 0x0608);
static_assert(offsetof(UEngine, StreamingAccuracyColors) == 0x0618);
static_assert(offsetof(UEngine, LightMapDensityVertexMappedColor) == 0x0648);
static_assert(offsetof(UEngine, LightMapDensitySelectedColor) == 0x0658);
static_assert(offsetof(UEngine, StatColorMappings) == 0x0668);
static_assert(offsetof(UEngine, DefaultPhysMaterial) == 0x0678);
static_assert(offsetof(UEngine, DefaultPhysMaterialName) == 0x0680);
static_assert(offsetof(UEngine, ActiveGameNameRedirects) == 0x0698);
static_assert(offsetof(UEngine, ActiveClassRedirects) == 0x06A8);
static_assert(offsetof(UEngine, ActivePluginRedirects) == 0x06B8);
static_assert(offsetof(UEngine, ActiveStructRedirects) == 0x06C8);
static_assert(offsetof(UEngine, PreIntegratedSkinBRDFTexture) == 0x06D8);
static_assert(offsetof(UEngine, PreIntegratedSkinBRDFTextureName) == 0x06E0);
static_assert(offsetof(UEngine, BlueNoiseTexture) == 0x06F8);
static_assert(offsetof(UEngine, BlueNoiseTextureName) == 0x0700);
static_assert(offsetof(UEngine, MiniFontTexture) == 0x0718);
static_assert(offsetof(UEngine, MiniFontTextureName) == 0x0720);
static_assert(offsetof(UEngine, WeightMapPlaceholderTexture) == 0x0738);
static_assert(offsetof(UEngine, WeightMapPlaceholderTextureName) == 0x0740);
static_assert(offsetof(UEngine, LightMapDensityTexture) == 0x0758);
static_assert(offsetof(UEngine, LightMapDensityTextureName) == 0x0760);
static_assert(offsetof(UEngine, GameViewport) == 0x0780);
static_assert(offsetof(UEngine, DeferredCommands) == 0x0788);
static_assert(offsetof(UEngine, SmoothedFrameRateRange) == 0x07AC);
static_assert(offsetof(UEngine, CustomTimeStep) == 0x07C0);
static_assert(offsetof(UEngine, CustomTimeStepClassName) == 0x07E8);
static_assert(offsetof(UEngine, TimecodeProvider) == 0x0800);
static_assert(offsetof(UEngine, TimecodeProviderClassName) == 0x0828);
static_assert(offsetof(UEngine, GenerateDefaultTimecodeFrameRate) == 0x0844);
static_assert(offsetof(UEngine, C_WorldBox) == 0x085C);
static_assert(offsetof(UEngine, C_BrushWire) == 0x0860);
static_assert(offsetof(UEngine, C_AddWire) == 0x0864);
static_assert(offsetof(UEngine, C_SubtractWire) == 0x0868);
static_assert(offsetof(UEngine, C_SemiSolidWire) == 0x086C);
static_assert(offsetof(UEngine, C_NonSolidWire) == 0x0870);
static_assert(offsetof(UEngine, C_WireBackground) == 0x0874);
static_assert(offsetof(UEngine, C_ScaleBoxHi) == 0x0878);
static_assert(offsetof(UEngine, C_VolumeCollision) == 0x087C);
static_assert(offsetof(UEngine, C_BSPCollision) == 0x0880);
static_assert(offsetof(UEngine, C_OrthoBackground) == 0x0884);
static_assert(offsetof(UEngine, C_Volume) == 0x0888);
static_assert(offsetof(UEngine, C_BrushShape) == 0x088C);
static_assert(offsetof(UEngine, GameScreenshotSaveDirectory) == 0x0898);
static_assert(offsetof(UEngine, TransitionType) == 0x08A8);
static_assert(offsetof(UEngine, TransitionDescription) == 0x08B0);
static_assert(offsetof(UEngine, TransitionGameMode) == 0x08C0);
static_assert(offsetof(UEngine, PendingDroppedNotes) == 0x08F0);
static_assert(offsetof(UEngine, DefaultSelectedMaterialColor) == 0x090C);
static_assert(offsetof(UEngine, SelectedMaterialColor) == 0x091C);
static_assert(offsetof(UEngine, SelectionOutlineColor) == 0x092C);
static_assert(offsetof(UEngine, SubduedSelectionOutlineColor) == 0x093C);
static_assert(offsetof(UEngine, SelectedMaterialColorOverride) == 0x094C);
static_assert(offsetof(UEngine, ParticleEventManagerClassPath) == 0x0970);
static_assert(offsetof(UEngine, NetDriverDefinitions) == 0x0BF8);
static_assert(offsetof(UEngine, ServerActors) == 0x0C08);
static_assert(offsetof(UEngine, RuntimeServerActors) == 0x0C18);
static_assert(offsetof(FDebugDisplayProperty, Obj) == 0x0000);
static_assert(offsetof(FDebugDisplayProperty, WithinClass) == 0x0008);
static_assert(offsetof(UGameViewportClient, ViewportConsole) == 0x0040);
static_assert(offsetof(UGameViewportClient, DebugProperties) == 0x0048);
static_assert(offsetof(UGameViewportClient, World) == 0x0078);
static_assert(offsetof(UGameViewportClient, GameInstance) == 0x0080);
static_assert(offsetof(ULocalPlayer, ViewportClient) == 0x0070);
static_assert(offsetof(ULocalPlayer, AspectRatioAxisConstraint) == 0x0094);
static_assert(offsetof(ULocalPlayer, PendingLevelPlayerControllerClass) == 0x0098);
static_assert(offsetof(FSingleAnimationPlayData, AnimToPlay) == 0x0000);
static_assert(offsetof(USkeletalMeshComponent, AnimBlueprintGeneratedClass) == 0x06A0);
static_assert(offsetof(USkeletalMeshComponent, AnimClass) == 0x06A8);
static_assert(offsetof(USkeletalMeshComponent, AnimScriptInstance) == 0x06B0);
static_assert(offsetof(USkeletalMeshComponent, PostProcessAnimInstance) == 0x06B8);
static_assert(offsetof(USkeletalMeshComponent, AnimationData) == 0x06C0);
static_assert(offsetof(USkeletalMeshComponent, RootBoneTranslation) == 0x06E8);
static_assert(offsetof(USkeletalMeshComponent, LineCheckBoundsScale) == 0x06F4);
static_assert(offsetof(USkeletalMeshComponent, LinkedInstances) == 0x0730);
static_assert(offsetof(USkeletalMeshComponent, CachedBoneSpaceTransforms) == 0x0740);
static_assert(offsetof(USkeletalMeshComponent, CachedComponentSpaceTransforms) == 0x0750);
static_assert(offsetof(USkeletalMeshComponent, KinematicBonesUpdateType) == 0x08B4);
static_assert(offsetof(USkeletalMeshComponent, PhysicsTransformUpdateMode) == 0x08B5);
static_assert(offsetof(USkeletalMeshComponent, AnimationMode) == 0x08B7);
static_assert(offsetof(USkeletalMeshComponent, DisallowedAnimCurves) == 0x08D0);
static_assert(offsetof(USkeletalMeshComponent, BodySetup) == 0x08E0);
static_assert(offsetof(USkeletalMeshComponent, ClothingSimulationFactory) == 0x0900);
static_assert(offsetof(USkeletalMeshComponent, ClothingInteractor) == 0x0A40);
static_assert(offsetof(FAnimNotifyEventReference, NotifySource) == 0x0008);
static_assert(offsetof(FAnimNotifyQueue, AnimNotifies) == 0x0010);
static_assert(offsetof(FAnimLinkableElement, LinkedMontage) == 0x0008);
static_assert(offsetof(FAnimLinkableElement, LinkMethod) == 0x0018);
static_assert(offsetof(FAnimLinkableElement, CachedLinkMethod) == 0x0019);
static_assert(offsetof(FAnimLinkableElement, LinkedSequence) == 0x0028);
static_assert(offsetof(FAnimNotifyEvent, NotifyName) == 0x0040);
static_assert(offsetof(FAnimNotifyEvent, Notify) == 0x0048);
static_assert(offsetof(FAnimNotifyEvent, NotifyStateClass) == 0x0050);
static_assert(offsetof(FAnimNotifyEvent, EndLink) == 0x0060);
static_assert(offsetof(FAnimNotifyEvent, MontageTickType) == 0x0091);
static_assert(offsetof(FAnimNotifyEvent, NotifyFilterType) == 0x0098);
static_assert(offsetof(UAnimInstance, CurrentSkeleton) == 0x0028);
static_assert(offsetof(UAnimInstance, RootMotionMode) == 0x0030);
static_assert(offsetof(UAnimInstance, NotifyQueue) == 0x0100);
static_assert(offsetof(UAnimInstance, ActiveAnimNotifyState) == 0x0170);
static_assert(offsetof(AGameModeBase, OptionsString) == 0x0220);
static_assert(offsetof(AGameModeBase, GameSessionClass) == 0x0230);
static_assert(offsetof(AGameModeBase, GameStateClass) == 0x0238);
static_assert(offsetof(AGameModeBase, PlayerControllerClass) == 0x0240);
static_assert(offsetof(AGameModeBase, PlayerStateClass) == 0x0248);
static_assert(offsetof(AGameModeBase, HUDClass) == 0x0250);
static_assert(offsetof(AGameModeBase, DefaultPawnClass) == 0x0258);
static_assert(offsetof(AGameModeBase, SpectatorClass) == 0x0260);
static_assert(offsetof(AGameModeBase, ReplaySpectatorPlayerControllerClass) == 0x0268);
static_assert(offsetof(AGameModeBase, ServerStatReplicatorClass) == 0x0270);
static_assert(offsetof(AGameModeBase, GameSession) == 0x0278);
static_assert(offsetof(AGameModeBase, GameState) == 0x0280);
static_assert(offsetof(AGameModeBase, ServerStatReplicator) == 0x0288);
static_assert(offsetof(AGameModeBase, DefaultPlayerName) == 0x0290);
static_assert(offsetof(UMaterialExpressionTextureBase, Texture) == 0x0040);
static_assert(offsetof(FExpressionInput, InputName) == 0x0004);
static_assert(offsetof(FExpressionInput, ExpressionName) == 0x000C);
static_assert(offsetof(UMaterialExpressionTextureSample, Coordinates) == 0x0048);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, ParameterName) == 0x0060);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, ExpressionGUID) == 0x0068);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, Group) == 0x0078);
static_assert(offsetof(APawn, AutoPossessPlayer) == 0x0230);
static_assert(offsetof(APawn, AutoPossessAI) == 0x0231);
static_assert(offsetof(APawn, AIControllerClass) == 0x0238);
static_assert(offsetof(APawn, PlayerState) == 0x0240);
static_assert(offsetof(APawn, LastHitBy) == 0x0250);
static_assert(offsetof(APawn, Controller) == 0x0258);
static_assert(offsetof(APawn, ControlInputVector) == 0x0264);
static_assert(offsetof(APawn, LastControlInputVector) == 0x0270);
static_assert(offsetof(FBasedMovementInfo, MovementBase) == 0x0000);
static_assert(offsetof(FBasedMovementInfo, BoneName) == 0x0008);
static_assert(offsetof(FBasedMovementInfo, Location) == 0x0010);
static_assert(offsetof(FBasedMovementInfo, Rotation) == 0x001C);
static_assert(offsetof(FRootMotionSourceGroup, LastAccumulatedSettings) == 0x0029);
static_assert(offsetof(FRootMotionSourceGroup, LastPreAdditiveVelocity) == 0x002C);
static_assert(offsetof(FRootMotionMovementParams, RootMotionTransform) == 0x0010);
static_assert(offsetof(FRepRootMotionMontage, AnimMontage) == 0x0008);
static_assert(offsetof(FRepRootMotionMontage, Location) == 0x0014);
static_assert(offsetof(FRepRootMotionMontage, Rotation) == 0x0020);
static_assert(offsetof(FRepRootMotionMontage, MovementBase) == 0x0030);
static_assert(offsetof(FRepRootMotionMontage, MovementBaseBoneName) == 0x0038);
static_assert(offsetof(FRepRootMotionMontage, AuthoritativeRootMotion) == 0x0048);
static_assert(offsetof(FRepRootMotionMontage, Acceleration) == 0x0080);
static_assert(offsetof(FRepRootMotionMontage, LinearVelocity) == 0x008C);
static_assert(offsetof(FSimulatedRootMotionReplicatedMove, RootMotion) == 0x0008);
static_assert(offsetof(ACharacter, Mesh) == 0x0280);
static_assert(offsetof(ACharacter, CharacterMovement) == 0x0288);
static_assert(offsetof(ACharacter, CapsuleComponent) == 0x0290);
static_assert(offsetof(ACharacter, BasedMovement) == 0x0298);
static_assert(offsetof(ACharacter, ReplicatedBasedMovement) == 0x02C8);
static_assert(offsetof(ACharacter, BaseTranslationOffset) == 0x02FC);
static_assert(offsetof(ACharacter, BaseRotationOffset) == 0x0310);
static_assert(offsetof(ACharacter, SavedRootMotion) == 0x0398);
static_assert(offsetof(ACharacter, ClientRootMotionParams) == 0x03D0);
static_assert(offsetof(ACharacter, RootMotionRepMoves) == 0x0410);
static_assert(offsetof(ACharacter, RepRootMotion) == 0x0420);
static_assert(offsetof(FSplineCurves, position) == 0x0000);
static_assert(offsetof(FSplineCurves, Rotation) == 0x0018);
static_assert(offsetof(FSplineCurves, Scale) == 0x0030);
static_assert(offsetof(FSplineCurves, ReparamTable) == 0x0048);
static_assert(offsetof(FSplineCurves, MetaData) == 0x0060);
static_assert(offsetof(USplineComponent, SplineCurves) == 0x0450);
static_assert(offsetof(USplineComponent, SplineInfo) == 0x04C0);
static_assert(offsetof(USplineComponent, SplineRotInfo) == 0x04D8);
static_assert(offsetof(USplineComponent, SplineScaleInfo) == 0x04F0);
static_assert(offsetof(USplineComponent, SplineReparamTable) == 0x0508);
static_assert(offsetof(USplineComponent, DefaultUpVector) == 0x0538);
static_assert(offsetof(UCameraShakeBase, RootShakePattern) == 0x0030);
static_assert(offsetof(UCameraShakeBase, CameraManager) == 0x0038);
static_assert(offsetof(UCommandlet, HelpDescription) == 0x0028);
static_assert(offsetof(UCommandlet, HelpUsage) == 0x0038);
static_assert(offsetof(UCommandlet, HelpWebLink) == 0x0048);
static_assert(offsetof(UCommandlet, HelpParamNames) == 0x0058);
static_assert(offsetof(UCommandlet, HelpParamDescriptions) == 0x0068);
static_assert(offsetof(FAudioComponentParam, paramName) == 0x0000);
static_assert(offsetof(FAudioComponentParam, SoundWaveParam) == 0x0018);
static_assert(offsetof(UAudioComponent, Sound) == 0x01F8);
static_assert(offsetof(UAudioComponent, InstanceParameters) == 0x0200);
static_assert(offsetof(UAudioComponent, SoundClassOverride) == 0x0210);
static_assert(offsetof(UAudioComponent, AudioComponentUserID) == 0x0220);
static_assert(offsetof(UAudioComponent, SourceEffectChain) == 0x0250);
static_assert(offsetof(UAudioComponent, AttenuationSettings) == 0x0268);
static_assert(offsetof(UAudioComponent, AttenuationOverrides) == 0x0270);
static_assert(offsetof(UAudioComponent, ConcurrencySettings) == 0x0610);
static_assert(offsetof(UAudioComponent, AutoAttachLocationRule) == 0x0674);
static_assert(offsetof(UAudioComponent, AutoAttachRotationRule) == 0x0675);
static_assert(offsetof(UAudioComponent, AutoAttachScaleRule) == 0x0676);
static_assert(offsetof(UAudioComponent, ModulationRouting) == 0x0678);
static_assert(offsetof(UAudioComponent, AutoAttachSocketName) == 0x07C8);
static_assert(offsetof(AGameMode, MatchState) == 0x02C0);
static_assert(offsetof(AGameMode, EngineMessageClass) == 0x02E0);
static_assert(offsetof(AGameMode, InactivePlayerArray) == 0x02E8);
static_assert(offsetof(AGameStateBase, GameModeClass) == 0x0220);
static_assert(offsetof(AGameStateBase, AuthorityGameMode) == 0x0228);
static_assert(offsetof(AGameStateBase, SpectatorClass) == 0x0230);
static_assert(offsetof(AGameStateBase, PlayerArray) == 0x0238);
static_assert(offsetof(AGameState, MatchState) == 0x0270);
static_assert(offsetof(AGameState, PreviousMatchState) == 0x0278);
static_assert(offsetof(AController, PlayerState) == 0x0228);
static_assert(offsetof(AController, StateName) == 0x0248);
static_assert(offsetof(AController, Pawn) == 0x0250);
static_assert(offsetof(AController, Character) == 0x0260);
static_assert(offsetof(AController, TransformComponent) == 0x0268);
static_assert(offsetof(AController, ControlRotation) == 0x0288);
static_assert(offsetof(FActiveForceFeedbackEffect, ForceFeedbackEffect) == 0x0000);
static_assert(offsetof(APlayerController, Player) == 0x0298);
static_assert(offsetof(APlayerController, AcknowledgedPawn) == 0x02A0);
static_assert(offsetof(APlayerController, ControllingDirTrackInst) == 0x02A8);
static_assert(offsetof(APlayerController, MyHUD) == 0x02B0);
static_assert(offsetof(APlayerController, PlayerCameraManager) == 0x02B8);
static_assert(offsetof(APlayerController, PlayerCameraManagerClass) == 0x02C0);
static_assert(offsetof(APlayerController, TargetViewRotation) == 0x02CC);
static_assert(offsetof(APlayerController, HiddenActors) == 0x02F0);
static_assert(offsetof(APlayerController, LastSpectatorSyncLocation) == 0x0318);
static_assert(offsetof(APlayerController, LastSpectatorSyncRotation) == 0x0324);
static_assert(offsetof(APlayerController, CheatManager) == 0x0338);
static_assert(offsetof(APlayerController, CheatClass) == 0x0340);
static_assert(offsetof(APlayerController, PlayerInput) == 0x0348);
static_assert(offsetof(APlayerController, ActiveForceFeedbackEffects) == 0x0350);
static_assert(offsetof(APlayerController, PendingSwapConnection) == 0x0420);
static_assert(offsetof(APlayerController, NetConnection) == 0x0428);
static_assert(offsetof(APlayerController, ClickEventKeys) == 0x0450);
static_assert(offsetof(APlayerController, DefaultMouseCursor) == 0x0460);
static_assert(offsetof(APlayerController, CurrentMouseCursor) == 0x0461);
static_assert(offsetof(APlayerController, DefaultClickTraceChannel) == 0x0462);
static_assert(offsetof(APlayerController, CurrentClickTraceChannel) == 0x0463);
static_assert(offsetof(APlayerController, InactiveStateInputComponent) == 0x04E0);
static_assert(offsetof(APlayerController, CurrentTouchInterface) == 0x0500);
static_assert(offsetof(APlayerController, SpectatorPawn) == 0x0558);
static_assert(offsetof(APlayerController, SpawnLocation) == 0x0568);
static_assert(offsetof(UMovementComponent, UpdatedComponent) == 0x00B0);
static_assert(offsetof(UMovementComponent, UpdatedPrimitive) == 0x00B8);
static_assert(offsetof(UMovementComponent, Velocity) == 0x00C4);
static_assert(offsetof(UMovementComponent, PlaneConstraintNormal) == 0x00D0);
static_assert(offsetof(UMovementComponent, PlaneConstraintOrigin) == 0x00DC);
static_assert(offsetof(UMovementComponent, PlaneConstraintAxisSetting) == 0x00EB);
static_assert(offsetof(FNavAgentProperties, PreferredNavData) == 0x0018);
static_assert(offsetof(UNavMovementComponent, NavAgentProps) == 0x00F0);
static_assert(offsetof(UNavMovementComponent, MovementState) == 0x0125);
static_assert(offsetof(UNavMovementComponent, PathFollowingComp) == 0x0128);
static_assert(offsetof(UPawnMovementComponent, PawnOwner) == 0x0130);
static_assert(offsetof(ATriggerBase, CollisionComponent) == 0x0220);
static_assert(offsetof(UProjectileMovementComponent, PreviousHitNormal) == 0x0100);
static_assert(offsetof(UStaticMeshComponent, StaticMesh) == 0x0488);
static_assert(offsetof(UStaticMeshComponent, WireframeColorOverride) == 0x0490);
static_assert(offsetof(UStaticMeshComponent, LODData) == 0x04A8);
static_assert(offsetof(UStaticMeshComponent, StreamingTextureData) == 0x04B8);
static_assert(offsetof(UStaticMeshComponent, LightmassSettings) == 0x04C8);
static_assert(offsetof(UArrowComponent, ArrowColor) == 0x0450);
static_assert(offsetof(UShapeComponent, ShapeBodySetup) == 0x0450);
static_assert(offsetof(UShapeComponent, AreaClass) == 0x0458);
static_assert(offsetof(UShapeComponent, ShapeColor) == 0x0460);
static_assert(offsetof(UBoxComponent, BoxExtent) == 0x0468);
static_assert(offsetof(FDebugTextInfo, SrcActor) == 0x0000);
static_assert(offsetof(FDebugTextInfo, SrcActorOffset) == 0x0008);
static_assert(offsetof(FDebugTextInfo, SrcActorDesiredOffset) == 0x0014);
static_assert(offsetof(FDebugTextInfo, DebugText) == 0x0020);
static_assert(offsetof(FDebugTextInfo, TextColor) == 0x0038);
static_assert(offsetof(FDebugTextInfo, OrigActorLocation) == 0x0040);
static_assert(offsetof(FDebugTextInfo, Font) == 0x0050);
static_assert(offsetof(AHUD, PlayerOwner) == 0x0220);
static_assert(offsetof(AHUD, PostRenderedActors) == 0x0238);
static_assert(offsetof(AHUD, DebugDisplay) == 0x0250);
static_assert(offsetof(AHUD, ToggledDebugCategories) == 0x0260);
static_assert(offsetof(AHUD, Canvas) == 0x0270);
static_assert(offsetof(AHUD, DebugCanvas) == 0x0278);
static_assert(offsetof(AHUD, DebugTextList) == 0x0280);
static_assert(offsetof(AHUD, ShowDebugTargetDesiredClass) == 0x0290);
static_assert(offsetof(AHUD, ShowDebugTargetActor) == 0x0298);
static_assert(offsetof(FWeightedBlendable, Object) == 0x0008);
static_assert(offsetof(FWeightedBlendables, Array) == 0x0000);
static_assert(offsetof(FPostProcessSettings, BloomMethod) == 0x0021);
static_assert(offsetof(FPostProcessSettings, AutoExposureMethod) == 0x0022);
static_assert(offsetof(FPostProcessSettings, TemperatureType) == 0x0023);
static_assert(offsetof(FPostProcessSettings, ColorSaturation) == 0x0030);
static_assert(offsetof(FPostProcessSettings, ColorContrast) == 0x0040);
static_assert(offsetof(FPostProcessSettings, ColorGamma) == 0x0050);
static_assert(offsetof(FPostProcessSettings, ColorGain) == 0x0060);
static_assert(offsetof(FPostProcessSettings, ColorOffset) == 0x0070);
static_assert(offsetof(FPostProcessSettings, ColorSaturationShadows) == 0x0080);
static_assert(offsetof(FPostProcessSettings, ColorContrastShadows) == 0x0090);
static_assert(offsetof(FPostProcessSettings, ColorGammaShadows) == 0x00A0);
static_assert(offsetof(FPostProcessSettings, ColorGainShadows) == 0x00B0);
static_assert(offsetof(FPostProcessSettings, ColorOffsetShadows) == 0x00C0);
static_assert(offsetof(FPostProcessSettings, ColorSaturationMidtones) == 0x00D0);
static_assert(offsetof(FPostProcessSettings, ColorContrastMidtones) == 0x00E0);
static_assert(offsetof(FPostProcessSettings, ColorGammaMidtones) == 0x00F0);
static_assert(offsetof(FPostProcessSettings, ColorGainMidtones) == 0x0100);
static_assert(offsetof(FPostProcessSettings, ColorOffsetMidtones) == 0x0110);
static_assert(offsetof(FPostProcessSettings, ColorSaturationHighlights) == 0x0120);
static_assert(offsetof(FPostProcessSettings, ColorContrastHighlights) == 0x0130);
static_assert(offsetof(FPostProcessSettings, ColorGammaHighlights) == 0x0140);
static_assert(offsetof(FPostProcessSettings, ColorGainHighlights) == 0x0150);
static_assert(offsetof(FPostProcessSettings, ColorOffsetHighlights) == 0x0160);
static_assert(offsetof(FPostProcessSettings, FilmWhitePoint) == 0x0198);
static_assert(offsetof(FPostProcessSettings, FilmShadowTint) == 0x01A8);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerRed) == 0x01C4);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerGreen) == 0x01D4);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerBlue) == 0x01E4);
static_assert(offsetof(FPostProcessSettings, SceneColorTint) == 0x0204);
static_assert(offsetof(FPostProcessSettings, Bloom1Tint) == 0x0240);
static_assert(offsetof(FPostProcessSettings, Bloom2Tint) == 0x0250);
static_assert(offsetof(FPostProcessSettings, Bloom3Tint) == 0x0260);
static_assert(offsetof(FPostProcessSettings, Bloom4Tint) == 0x0270);
static_assert(offsetof(FPostProcessSettings, Bloom5Tint) == 0x0280);
static_assert(offsetof(FPostProcessSettings, Bloom6Tint) == 0x0290);
static_assert(offsetof(FPostProcessSettings, BloomConvolutionTexture) == 0x02A8);
static_assert(offsetof(FPostProcessSettings, BloomConvolutionCenterUV) == 0x02B0);
static_assert(offsetof(FPostProcessSettings, BloomDirtMask) == 0x02C8);
static_assert(offsetof(FPostProcessSettings, BloomDirtMaskTint) == 0x02D4);
static_assert(offsetof(FPostProcessSettings, AmbientCubemapTint) == 0x02E4);
static_assert(offsetof(FPostProcessSettings, AmbientCubemap) == 0x02F8);
static_assert(offsetof(FPostProcessSettings, AutoExposureBiasCurve) == 0x0328);
static_assert(offsetof(FPostProcessSettings, AutoExposureMeterMask) == 0x0330);
static_assert(offsetof(FPostProcessSettings, LensFlareTint) == 0x0360);
static_assert(offsetof(FPostProcessSettings, LensFlareBokehShape) == 0x0378);
static_assert(offsetof(FPostProcessSettings, LensFlareTints) == 0x0380);
static_assert(offsetof(FPostProcessSettings, IndirectLightingColor) == 0x0454);
static_assert(offsetof(FPostProcessSettings, RayTracingGIType) == 0x0468);
static_assert(offsetof(FPostProcessSettings, ColorGradingLUT) == 0x0478);
static_assert(offsetof(FPostProcessSettings, ReflectionsType) == 0x04F8);
static_assert(offsetof(FPostProcessSettings, RayTracingReflectionsShadows) == 0x0514);
static_assert(offsetof(FPostProcessSettings, TranslucencyType) == 0x0516);
static_assert(offsetof(FPostProcessSettings, RayTracingTranslucencyShadows) == 0x0524);
static_assert(offsetof(FPostProcessSettings, WeightedBlendables) == 0x0550);
static_assert(offsetof(UPostProcessComponent, Settings) == 0x0200);
static_assert(offsetof(ANavigationObjectBase, CapsuleComponent) == 0x0228);
static_assert(offsetof(ANavigationObjectBase, GoodSprite) == 0x0230);
static_assert(offsetof(ANavigationObjectBase, BadSprite) == 0x0238);
static_assert(offsetof(APlayerStart, PlayerStartTag) == 0x0248);
static_assert(offsetof(ASkeletalMeshActor, SkeletalMeshComponent) == 0x0230);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMesh) == 0x0238);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedPhysAsset) == 0x0240);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMaterial0) == 0x0248);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMaterial1) == 0x0250);
static_assert(offsetof(UAISystemBase, AISystemClassName) == 0x0028);
static_assert(offsetof(UAISystemBase, AISystemModuleName) == 0x0040);
static_assert(offsetof(FHitResult, Location) == 0x000C);
static_assert(offsetof(FHitResult, ImpactPoint) == 0x0018);
static_assert(offsetof(FHitResult, Normal) == 0x0024);
static_assert(offsetof(FHitResult, ImpactNormal) == 0x0030);
static_assert(offsetof(FHitResult, TraceStart) == 0x003C);
static_assert(offsetof(FHitResult, TraceEnd) == 0x0048);
static_assert(offsetof(FHitResult, BoneName) == 0x0078);
static_assert(offsetof(FHitResult, MyBoneName) == 0x0080);
static_assert(offsetof(FFindFloorResult, HitResult) == 0x000C);
static_assert(offsetof(UCharacterMovementComponent, CharacterOwner) == 0x0148);
static_assert(offsetof(UCharacterMovementComponent, MovementMode) == 0x0168);
static_assert(offsetof(UCharacterMovementComponent, NetworkSmoothingMode) == 0x016A);
static_assert(offsetof(UCharacterMovementComponent, RotationRate) == 0x01E4);
static_assert(offsetof(UCharacterMovementComponent, DeferredUpdatedMoveComponent) == 0x01F8);
static_assert(offsetof(UCharacterMovementComponent, Acceleration) == 0x022C);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateRotation) == 0x0240);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateLocation) == 0x0250);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateVelocity) == 0x025C);
static_assert(offsetof(UCharacterMovementComponent, PendingImpulseToApply) == 0x0274);
static_assert(offsetof(UCharacterMovementComponent, PendingForceToApply) == 0x0280);
static_assert(offsetof(UCharacterMovementComponent, currentFloor) == 0x02F0);
static_assert(offsetof(UCharacterMovementComponent, DefaultLandMovementMode) == 0x0384);
static_assert(offsetof(UCharacterMovementComponent, DefaultWaterMovementMode) == 0x0385);
static_assert(offsetof(UCharacterMovementComponent, GroundMovementMode) == 0x0386);
static_assert(offsetof(UCharacterMovementComponent, RequestedVelocity) == 0x03A0);
static_assert(offsetof(UCharacterMovementComponent, AvoidanceGroup) == 0x03B0);
static_assert(offsetof(UCharacterMovementComponent, GroupsToAvoid) == 0x03B4);
static_assert(offsetof(UCharacterMovementComponent, GroupsToIgnore) == 0x03B8);
static_assert(offsetof(UCharacterMovementComponent, PendingLaunchVelocity) == 0x03C0);
static_assert(offsetof(UCharacterMovementComponent, PostPhysicsTickFunction) == 0x0488);
static_assert(offsetof(UCharacterMovementComponent, CurrentRootMotion) == 0x0980);
static_assert(offsetof(UCharacterMovementComponent, ServerCorrectionRootMotion) == 0x09B8);
static_assert(offsetof(UCharacterMovementComponent, RootMotionParams) == 0x0A80);
static_assert(offsetof(UCharacterMovementComponent, AnimRootMotionVelocity) == 0x0AC0);
static_assert(offsetof(UGameUserSettings, LastCPUBenchmarkSteps) == 0x00E0);
static_assert(offsetof(UGameUserSettings, LastGPUBenchmarkSteps) == 0x00F0);
static_assert(offsetof(FStreamingLevelsToConsider, StreamingLevels) == 0x0000);
static_assert(offsetof(FLevelCollection, GameState) == 0x0008);
static_assert(offsetof(FLevelCollection, NetDriver) == 0x0010);
static_assert(offsetof(FLevelCollection, DemoNetDriver) == 0x0018);
static_assert(offsetof(FLevelCollection, PersistentLevel) == 0x0020);
static_assert(offsetof(UWorld, PersistentLevel) == 0x0030);
static_assert(offsetof(UWorld, NetDriver) == 0x0038);
static_assert(offsetof(UWorld, LineBatcher) == 0x0040);
static_assert(offsetof(UWorld, PersistentLineBatcher) == 0x0048);
static_assert(offsetof(UWorld, ForegroundLineBatcher) == 0x0050);
static_assert(offsetof(UWorld, NetworkManager) == 0x0058);
static_assert(offsetof(UWorld, PhysicsCollisionHandler) == 0x0060);
static_assert(offsetof(UWorld, ExtraReferencedObjects) == 0x0068);
static_assert(offsetof(UWorld, PerModuleDataObjects) == 0x0078);
static_assert(offsetof(UWorld, StreamingLevels) == 0x0088);
static_assert(offsetof(UWorld, StreamingLevelsToConsider) == 0x0098);
static_assert(offsetof(UWorld, StreamingLevelsPrefix) == 0x00C0);
static_assert(offsetof(UWorld, CurrentLevelPendingVisibility) == 0x00D0);
static_assert(offsetof(UWorld, CurrentLevelPendingInvisibility) == 0x00D8);
static_assert(offsetof(UWorld, DemoNetDriver) == 0x00E0);
static_assert(offsetof(UWorld, MyParticleEventManager) == 0x00E8);
static_assert(offsetof(UWorld, DefaultPhysicsVolume) == 0x00F0);
static_assert(offsetof(UWorld, NavigationSystem) == 0x0110);
static_assert(offsetof(UWorld, AuthorityGameMode) == 0x0118);
static_assert(offsetof(UWorld, GameState) == 0x0120);
static_assert(offsetof(UWorld, AISystem) == 0x0128);
static_assert(offsetof(UWorld, AvoidanceManager) == 0x0130);
static_assert(offsetof(UWorld, Levels) == 0x0138);
static_assert(offsetof(UWorld, LevelCollections) == 0x0148);
static_assert(offsetof(UWorld, OwningGameInstance) == 0x0180);
static_assert(offsetof(UWorld, ParameterCollectionInstances) == 0x0188);
static_assert(offsetof(UWorld, CanvasForRenderingToTarget) == 0x0198);
static_assert(offsetof(UWorld, CanvasForDrawMaterialToRenderTarget) == 0x01A0);
static_assert(offsetof(UWorld, PhysicsField) == 0x01F8);
static_assert(offsetof(UWorld, ComponentsThatNeedEndOfFrameUpdate) == 0x0250);
static_assert(offsetof(UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread) == 0x0260);
static_assert(offsetof(UWorld, WorldComposition) == 0x05E0);
static_assert(offsetof(UWorld, PSCPool) == 0x0678);
static_assert(offsetof(FMinimalViewInfo, Location) == 0x0000);
static_assert(offsetof(FMinimalViewInfo, Rotation) == 0x000C);
static_assert(offsetof(FMinimalViewInfo, ProjectionMode) == 0x0034);
static_assert(offsetof(FMinimalViewInfo, PostProcessSettings) == 0x0040);
static_assert(offsetof(FMinimalViewInfo, OffCenterProjectionOffset) == 0x05A0);
static_assert(offsetof(FCameraCacheEntry, POV) == 0x0010);
static_assert(offsetof(FTViewTarget, Target) == 0x0000);
static_assert(offsetof(FTViewTarget, POV) == 0x0010);
static_assert(offsetof(FTViewTarget, PlayerState) == 0x0600);
static_assert(offsetof(APlayerCameraManager, PCOwner) == 0x0220);
static_assert(offsetof(APlayerCameraManager, TransformComponent) == 0x0228);
static_assert(offsetof(APlayerCameraManager, CameraCache) == 0x0290);
static_assert(offsetof(APlayerCameraManager, LastFrameCameraCache) == 0x0890);
static_assert(offsetof(APlayerCameraManager, ViewTarget) == 0x0E90);
static_assert(offsetof(APlayerCameraManager, PendingViewTarget) == 0x14A0);
static_assert(offsetof(APlayerCameraManager, CameraCachePrivate) == 0x1AE0);
static_assert(offsetof(APlayerCameraManager, LastFrameCameraCachePrivate) == 0x20E0);
static_assert(offsetof(APlayerCameraManager, ModifierList) == 0x26E0);
static_assert(offsetof(APlayerCameraManager, DefaultModifiers) == 0x26F0);
static_assert(offsetof(APlayerCameraManager, FreeCamOffset) == 0x2704);
static_assert(offsetof(APlayerCameraManager, ViewTargetOffset) == 0x2710);
static_assert(offsetof(APlayerCameraManager, CameraLensEffects) == 0x2740);
static_assert(offsetof(APlayerCameraManager, CachedCameraShakeMod) == 0x2750);
static_assert(offsetof(APlayerCameraManager, AnimInstPool) == 0x2758);
static_assert(offsetof(APlayerCameraManager, PostProcessBlendCache) == 0x2798);
static_assert(offsetof(APlayerCameraManager, ActiveAnims) == 0x27B8);
static_assert(offsetof(APlayerCameraManager, FreeAnims) == 0x27C8);
static_assert(offsetof(APlayerCameraManager, AnimCameraActor) == 0x27D8);
static_assert(offsetof(APlayerState, EngineMessageClass) == 0x0230);
static_assert(offsetof(APlayerState, SavedNetworkAddress) == 0x0240);
static_assert(offsetof(APlayerState, UniqueId) == 0x0250);
static_assert(offsetof(APlayerState, PawnPrivate) == 0x0280);
static_assert(offsetof(APlayerState, PlayerNamePrivate) == 0x0300);
static_assert(offsetof(ADefaultPawn, MovementComponent) == 0x0288);
static_assert(offsetof(ADefaultPawn, CollisionComponent) == 0x0290);
static_assert(offsetof(ADefaultPawn, MeshComponent) == 0x0298);
static_assert(offsetof(USpringArmComponent, SocketOffset) == 0x01FC);
static_assert(offsetof(USpringArmComponent, TargetOffset) == 0x0208);
static_assert(offsetof(USpringArmComponent, ProbeChannel) == 0x0218);
static_assert(offsetof(UCameraModifier, CameraOwner) == 0x0030);
static_assert(offsetof(FActiveCameraShakeInfo, ShakeInstance) == 0x0000);
static_assert(offsetof(UCameraModifier_CameraShake, ActiveShakes) == 0x0048);
static_assert(offsetof(USoundNode, ChildNodes) == 0x0028);
static_assert(offsetof(ASkyLight, LightComponent) == 0x0220);
static_assert(offsetof(UTexture, LightingGuid) == 0x0068);
static_assert(offsetof(UTexture, CompressionSettings) == 0x007C);
static_assert(offsetof(UTexture, Filter) == 0x007D);
static_assert(offsetof(UTexture, MipLoadOptions) == 0x007E);
static_assert(offsetof(UTexture, LODGroup) == 0x007F);
static_assert(offsetof(UTexture, Downscale) == 0x0080);
static_assert(offsetof(UTexture, DownscaleOptions) == 0x0084);
static_assert(offsetof(UTexture, AssetUserData) == 0x0088);
static_assert(offsetof(FInstancedStaticMeshInstanceData, Transform) == 0x0000);
static_assert(offsetof(UInstancedStaticMeshComponent, PerInstanceSMData) == 0x04E0);
static_assert(offsetof(UInstancedStaticMeshComponent, PerInstanceSMCustomData) == 0x04F8);
static_assert(offsetof(UInstancedStaticMeshComponent, InstanceReorderTable) == 0x0518);
static_assert(offsetof(UInstancedStaticMeshComponent, CachedMappings) == 0x0578);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, SortedInstances) == 0x0598);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds) == 0x05B0);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds) == 0x05CC);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList) == 0x05E8);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds) == 0x0604);
static_assert(offsetof(AStaticMeshActor, StaticMeshComponent) == 0x0220);
static_assert(offsetof(AStaticMeshActor, NavigationGeometryGatheringMode) == 0x0229);
static_assert(offsetof(FMaterialTextureInfo, TextureName) == 0x0008);
static_assert(offsetof(UMaterialInterface, SubsurfaceProfile) == 0x0038);
static_assert(offsetof(UMaterialInterface, LightmassSettings) == 0x0050);
static_assert(offsetof(UMaterialInterface, TextureStreamingData) == 0x0060);
static_assert(offsetof(UMaterialInterface, AssetUserData) == 0x0070);
static_assert(offsetof(FMaterialParameterInfo, Name) == 0x0000);
static_assert(offsetof(FMaterialParameterInfo, Association) == 0x0008);
static_assert(offsetof(FScalarParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FScalarParameterValue, ExpressionGUID) == 0x0014);
static_assert(offsetof(FVectorParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FVectorParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FVectorParameterValue, ExpressionGUID) == 0x0020);
static_assert(offsetof(FTextureParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FTextureParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FTextureParameterValue, ExpressionGUID) == 0x0018);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ExpressionGUID) == 0x0018);
static_assert(offsetof(FFontParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FFontParameterValue, FontValue) == 0x0010);
static_assert(offsetof(FFontParameterValue, ExpressionGUID) == 0x001C);
static_assert(offsetof(FMaterialInstanceBasePropertyOverrides, BlendMode) == 0x0002);
static_assert(offsetof(FMaterialInstanceBasePropertyOverrides, ShadingModel) == 0x0003);
static_assert(offsetof(FStaticParameterBase, ParameterInfo) == 0x0000);
static_assert(offsetof(FStaticParameterBase, ExpressionGUID) == 0x0014);
static_assert(offsetof(FMaterialLayersFunctions, Layers) == 0x0000);
static_assert(offsetof(FMaterialLayersFunctions, Blends) == 0x0010);
static_assert(offsetof(FMaterialLayersFunctions, LayerStates) == 0x0020);
static_assert(offsetof(FMaterialLayersFunctions, KeyString) == 0x0030);
static_assert(offsetof(FStaticMaterialLayersParameter, Value) == 0x0028);
static_assert(offsetof(FStaticParameterSet, StaticSwitchParameters) == 0x0000);
static_assert(offsetof(FStaticParameterSet, StaticComponentMaskParameters) == 0x0010);
static_assert(offsetof(FStaticParameterSet, TerrainLayerWeightParameters) == 0x0020);
static_assert(offsetof(FStaticParameterSet, MaterialLayersParameters) == 0x0030);
static_assert(offsetof(FMaterialCachedParameterEntry, NameHashes) == 0x0000);
static_assert(offsetof(FMaterialCachedParameterEntry, ParameterInfos) == 0x0010);
static_assert(offsetof(FMaterialCachedParameterEntry, ExpressionGuids) == 0x0020);
static_assert(offsetof(FMaterialCachedParameters, RuntimeEntries) == 0x0000);
static_assert(offsetof(FMaterialCachedParameters, ScalarValues) == 0x00F0);
static_assert(offsetof(FMaterialCachedParameters, VectorValues) == 0x0100);
static_assert(offsetof(FMaterialCachedParameters, TextureValues) == 0x0110);
static_assert(offsetof(FMaterialCachedParameters, FontValues) == 0x0120);
static_assert(offsetof(FMaterialCachedParameters, FontPageValues) == 0x0130);
static_assert(offsetof(FMaterialCachedParameters, RuntimeVirtualTextureValues) == 0x0140);
static_assert(offsetof(UMaterialInstance, PhysMaterial) == 0x0088);
static_assert(offsetof(UMaterialInstance, PhysicalMaterialMap) == 0x0090);
static_assert(offsetof(UMaterialInstance, Parent) == 0x00D0);
static_assert(offsetof(UMaterialInstance, ScalarParameterValues) == 0x00E0);
static_assert(offsetof(UMaterialInstance, VectorParameterValues) == 0x00F0);
static_assert(offsetof(UMaterialInstance, TextureParameterValues) == 0x0100);
static_assert(offsetof(UMaterialInstance, RuntimeVirtualTextureParameterValues) == 0x0110);
static_assert(offsetof(UMaterialInstance, FontParameterValues) == 0x0120);
static_assert(offsetof(UMaterialInstance, BasePropertyOverrides) == 0x0130);
static_assert(offsetof(UMaterialInstance, StaticParameters) == 0x0148);
static_assert(offsetof(UMaterialInstance, CachedLayerParameters) == 0x0188);
static_assert(offsetof(UMaterialInstance, CachedReferencedTextures) == 0x02D8);
static_assert(offsetof(UMaterialInstanceConstant, PhysMaterialMask) == 0x0310);
static_assert(offsetof(FBPComponentClassOverride, ComponentName) == 0x0000);
static_assert(offsetof(FBPComponentClassOverride, ComponentClass) == 0x0008);
static_assert(offsetof(UBlueprintGeneratedClass, DynamicBindingObjects) == 0x0238);
static_assert(offsetof(UBlueprintGeneratedClass, ComponentTemplates) == 0x0248);
static_assert(offsetof(UBlueprintGeneratedClass, Timelines) == 0x0258);
static_assert(offsetof(UBlueprintGeneratedClass, ComponentClassOverrides) == 0x0268);
static_assert(offsetof(UBlueprintGeneratedClass, SimpleConstructionScript) == 0x0278);
static_assert(offsetof(UBlueprintGeneratedClass, InheritableComponentHandler) == 0x0280);
static_assert(offsetof(UBlueprintGeneratedClass, UberGraphFramePointerProperty) == 0x0288);
static_assert(offsetof(UBlueprintGeneratedClass, UberGraphFunction) == 0x0298);
static_assert(offsetof(ACameraActor, AutoActivateForPlayer) == 0x0220);
static_assert(offsetof(ACameraActor, CameraComponent) == 0x0228);
static_assert(offsetof(ACameraActor, SceneComponent) == 0x0230);
static_assert(offsetof(ACameraActor, PostProcessSettings) == 0x0250);
static_assert(offsetof(UCameraComponent, ProjectionMode) == 0x020D);
static_assert(offsetof(UCameraComponent, PostProcessSettings) == 0x0270);
static_assert(offsetof(UBlueprintCore, SkeletonGeneratedClass) == 0x0028);
static_assert(offsetof(UBlueprintCore, GeneratedClass) == 0x0030);
static_assert(offsetof(UBlueprintCore, BlueprintGuid) == 0x003C);
static_assert(offsetof(UBlueprint, ParentClass) == 0x0050);
static_assert(offsetof(UBlueprint, BlueprintType) == 0x0058);
static_assert(offsetof(UBlueprint, SimpleConstructionScript) == 0x0060);
static_assert(offsetof(UBlueprint, ComponentTemplates) == 0x0068);
static_assert(offsetof(UBlueprint, Timelines) == 0x0078);
static_assert(offsetof(UBlueprint, ComponentClassOverrides) == 0x0088);
static_assert(offsetof(UBlueprint, InheritableComponentHandler) == 0x0098);
static_assert(offsetof(UChannel, Connection) == 0x0028);
static_assert(offsetof(UActorChannel, Actor) == 0x0068);
static_assert(offsetof(UActorChannel, CreateSubObjects) == 0x0158);
static_assert(offsetof(UAnimationAsset, Skeleton) == 0x0038);
static_assert(offsetof(UAnimationAsset, MetaData) == 0x0060);
static_assert(offsetof(UAnimationAsset, AssetUserData) == 0x0070);
static_assert(offsetof(FInterpolationParameter, InterpolationType) == 0x0004);
static_assert(offsetof(FPerBoneInterpolation, BoneReference) == 0x0000);
static_assert(offsetof(FBlendSample, Animation) == 0x0000);
static_assert(offsetof(FBlendSample, SampleValue) == 0x0008);
static_assert(offsetof(FBlendParameter, DisplayName) == 0x0000);
static_assert(offsetof(UBlendSpaceBase, InterpolationParam) == 0x0090);
static_assert(offsetof(UBlendSpaceBase, NotifyTriggerMode) == 0x00AC);
static_assert(offsetof(UBlendSpaceBase, PerBoneBlend) == 0x00B0);
static_assert(offsetof(UBlendSpaceBase, SampleData) == 0x00C8);
static_assert(offsetof(UBlendSpaceBase, GridSamples) == 0x00D8);
static_assert(offsetof(UBlendSpaceBase, BlendParameters) == 0x00E8);
static_assert(offsetof(UBlendSpace, AxisToScaleAnimation) == 0x0148);
static_assert(offsetof(AAmbientSound, AudioComponent) == 0x0220);
static_assert(offsetof(FCustomAttributeSetting, Name) == 0x0000);
static_assert(offsetof(FCustomAttributeSetting, Meaning) == 0x0010);
static_assert(offsetof(UAnimationSettings, KeyEndEffectorsMatchNameArray) == 0x0040);
static_assert(offsetof(UAnimationSettings, BoneCustomAttributesNames) == 0x0058);
static_assert(offsetof(UAnimationSettings, BoneNamesWithCustomAttributes) == 0x0068);
static_assert(offsetof(UAnimationSettings, DefaultAttributeBlendMode) == 0x00C8);
static_assert(offsetof(FAnimGroupInfo, Name) == 0x0000);
static_assert(offsetof(FAnimGroupInfo, Color) == 0x0008);
static_assert(offsetof(UAnimBlueprint, TargetSkeleton) == 0x00A8);
static_assert(offsetof(UAnimBlueprint, Groups) == 0x00B0);
static_assert(offsetof(FBakedStateExitTransition, PoseEvaluatorLinks) == 0x0010);
static_assert(offsetof(FBakedAnimationState, StateName) == 0x0000);
static_assert(offsetof(FBakedAnimationState, Transitions) == 0x0008);
static_assert(offsetof(FBakedAnimationState, PlayerNodeIndices) == 0x0030);
static_assert(offsetof(FBakedAnimationState, LayerNodeIndices) == 0x0040);
static_assert(offsetof(FAnimationStateBase, StateName) == 0x0000);
static_assert(offsetof(FAnimationTransitionBetweenStates, BlendMode) == 0x0020);
static_assert(offsetof(FAnimationTransitionBetweenStates, CustomCurve) == 0x0028);
static_assert(offsetof(FAnimationTransitionBetweenStates, BlendProfile) == 0x0030);
static_assert(offsetof(FAnimationTransitionBetweenStates, LogicType) == 0x0038);
static_assert(offsetof(FBakedAnimationStateMachine, MachineName) == 0x0000);
static_assert(offsetof(FBakedAnimationStateMachine, States) == 0x0010);
static_assert(offsetof(FBakedAnimationStateMachine, Transitions) == 0x0020);
static_assert(offsetof(FExposedValueCopyRecord, PostCopyOperation) == 0x0004);
static_assert(offsetof(FExposedValueHandler, BoundFunction) == 0x0000);
static_assert(offsetof(FExposedValueHandler, CopyRecords) == 0x0008);
static_assert(offsetof(FExposedValueHandler, Function) == 0x0018);
static_assert(offsetof(UAnimBlueprintGeneratedClass, BakedStateMachines) == 0x0330);
static_assert(offsetof(UAnimBlueprintGeneratedClass, TargetSkeleton) == 0x0340);
static_assert(offsetof(UAnimBlueprintGeneratedClass, AnimNotifies) == 0x0348);
static_assert(offsetof(UAnimBlueprintGeneratedClass, SyncGroupNames) == 0x0428);
static_assert(offsetof(UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs) == 0x0438);
static_assert(offsetof(UAnimBlueprintGeneratedClass, PropertyAccessLibrary) == 0x04E8);
static_assert(offsetof(UAnimBoneCompressionCodec, Description) == 0x0028);
static_assert(offsetof(UAnimBoneCompressionSettings, Codecs) == 0x0028);
static_assert(offsetof(FAnimBlueprintFunction, Name) == 0x0000);
static_assert(offsetof(FAnimBlueprintFunction, Group) == 0x0008);
static_assert(offsetof(FAnimBlueprintFunction, InputPoseNames) == 0x0018);
static_assert(offsetof(FAnimBlueprintFunction, InputPoseNodeIndices) == 0x0028);
static_assert(offsetof(UAnimClassData, BakedStateMachines) == 0x0030);
static_assert(offsetof(UAnimClassData, TargetSkeleton) == 0x0040);
static_assert(offsetof(UAnimClassData, AnimNotifies) == 0x0048);
static_assert(offsetof(UAnimClassData, AnimBlueprintFunctions) == 0x00A8);
static_assert(offsetof(UAnimClassData, AnimBlueprintFunctionData) == 0x00B8);
static_assert(offsetof(UAnimClassData, SyncGroupNames) == 0x01F8);
static_assert(offsetof(UAnimClassData, EvaluateGraphExposedInputs) == 0x0208);
static_assert(offsetof(UAnimClassData, PropertyAccessLibrary) == 0x0268);
static_assert(offsetof(FSmartName, DisplayName) == 0x0000);
static_assert(offsetof(FAnimCurveBase, LastObservedName) == 0x0000);
static_assert(offsetof(FAnimCurveBase, Name) == 0x0008);
static_assert(offsetof(FFloatCurve, FloatCurve) == 0x0018);
static_assert(offsetof(FRawCurveTracks, FloatCurves) == 0x0000);
static_assert(offsetof(UAnimSequenceBase, Notifies) == 0x0080);
static_assert(offsetof(UAnimSequenceBase, RawCurveData) == 0x0098);
static_assert(offsetof(FAnimSegment, AnimReference) == 0x0000);
static_assert(offsetof(FAnimTrack, AnimSegments) == 0x0000);
static_assert(offsetof(UAnimComposite, AnimationTrack) == 0x00A8);
static_assert(offsetof(UAnimCompress, TranslationCompressionFormat) == 0x003C);
static_assert(offsetof(UAnimCompress, RotationCompressionFormat) == 0x003D);
static_assert(offsetof(UAnimCompress, ScaleCompressionFormat) == 0x003E);
static_assert(offsetof(UAnimCurveCompressionSettings, Codec) == 0x0028);
static_assert(offsetof(FAlphaBlend, CustomCurve) == 0x0000);
static_assert(offsetof(FAlphaBlend, BlendOption) == 0x0024);
static_assert(offsetof(FAnimSyncMarker, MarkerName) == 0x0000);
static_assert(offsetof(FMarkerSyncData, AuthoredSyncMarkers) == 0x0000);
static_assert(offsetof(FCompositeSection, SectionName) == 0x0030);
static_assert(offsetof(FCompositeSection, NextSectionName) == 0x003C);
static_assert(offsetof(FCompositeSection, MetaData) == 0x0048);
static_assert(offsetof(FSlotAnimationTrack, SlotName) == 0x0000);
static_assert(offsetof(FSlotAnimationTrack, AnimTrack) == 0x0008);
static_assert(offsetof(FBranchingPoint, EventName) == 0x0030);
static_assert(offsetof(FBranchingPointMarker, NotifyEventType) == 0x0008);
static_assert(offsetof(FTimeStretchCurve, Markers) == 0x0008);
static_assert(offsetof(UAnimMontage, BlendIn) == 0x00A8);
static_assert(offsetof(UAnimMontage, BlendOut) == 0x00E0);
static_assert(offsetof(UAnimMontage, SyncGroup) == 0x0118);
static_assert(offsetof(UAnimMontage, MarkerData) == 0x0128);
static_assert(offsetof(UAnimMontage, CompositeSections) == 0x0148);
static_assert(offsetof(UAnimMontage, SlotAnimTracks) == 0x0158);
static_assert(offsetof(UAnimMontage, BranchingPoints) == 0x0168);
static_assert(offsetof(UAnimMontage, RootMotionRootLock) == 0x017B);
static_assert(offsetof(UAnimMontage, BranchingPointMarkers) == 0x0180);
static_assert(offsetof(UAnimMontage, BranchingPointStateNotifyIndices) == 0x0190);
static_assert(offsetof(UAnimMontage, TimeStretchCurve) == 0x01A0);
static_assert(offsetof(UAnimMontage, TimeStretchCurveName) == 0x01C8);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, PSTemplate) == 0x0038);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, LocationOffset) == 0x0040);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, RotationOffset) == 0x004C);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, Scale) == 0x0058);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, SocketName) == 0x0084);
static_assert(offsetof(UAnimNotify_PlaySound, Sound) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySound, AttachName) == 0x004C);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, PSTemplate) == 0x0030);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, SocketName) == 0x0038);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, LocationOffset) == 0x0040);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, RotationOffset) == 0x004C);
static_assert(offsetof(UAnimNotifyState_Trail, PSTemplate) == 0x0030);
static_assert(offsetof(UAnimNotifyState_Trail, FirstSocketName) == 0x0038);
static_assert(offsetof(UAnimNotifyState_Trail, SecondSocketName) == 0x0040);
static_assert(offsetof(UAnimNotifyState_Trail, WidthScaleMode) == 0x0048);
static_assert(offsetof(UAnimNotifyState_Trail, WidthScaleCurve) == 0x004C);
static_assert(offsetof(FStringCurveKey, Value) == 0x0008);
static_assert(offsetof(FStringCurve, DefaultValue) == 0x0068);
static_assert(offsetof(FStringCurve, Keys) == 0x0078);
static_assert(offsetof(FBakedStringCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedStringCustomAttribute, StringCurve) == 0x0008);
static_assert(offsetof(FIntegralCurve, Keys) == 0x0068);
static_assert(offsetof(FBakedIntegerCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedIntegerCustomAttribute, IntCurve) == 0x0008);
static_assert(offsetof(FSimpleCurve, InterpMode) == 0x0070);
static_assert(offsetof(FSimpleCurve, Keys) == 0x0078);
static_assert(offsetof(FBakedFloatCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedFloatCustomAttribute, FloatCurve) == 0x0008);
static_assert(offsetof(FBakedCustomAttributePerBoneData, StringAttributes) == 0x0008);
static_assert(offsetof(FBakedCustomAttributePerBoneData, IntAttributes) == 0x0018);
static_assert(offsetof(FBakedCustomAttributePerBoneData, FloatAttributes) == 0x0028);
static_assert(offsetof(UAnimSequence, TrackToSkeletonMapTable) == 0x00B0);
static_assert(offsetof(UAnimSequence, BoneCompressionSettings) == 0x00D0);
static_assert(offsetof(UAnimSequence, CurveCompressionSettings) == 0x00D8);
static_assert(offsetof(UAnimSequence, AdditiveAnimType) == 0x0150);
static_assert(offsetof(UAnimSequence, RefPoseType) == 0x0151);
static_assert(offsetof(UAnimSequence, RefPoseSeq) == 0x0158);
static_assert(offsetof(UAnimSequence, RetargetSource) == 0x0164);
static_assert(offsetof(UAnimSequence, RetargetSourceAssetReferencePose) == 0x0170);
static_assert(offsetof(UAnimSequence, Interpolation) == 0x0180);
static_assert(offsetof(UAnimSequence, RootMotionRootLock) == 0x0182);
static_assert(offsetof(UAnimSequence, AuthoredSyncMarkers) == 0x0188);
static_assert(offsetof(UAnimSequence, BakedPerBoneCustomAttributeData) == 0x01B0);
static_assert(offsetof(FAnimSetMeshLinkup, BoneToTrackTable) == 0x0000);
static_assert(offsetof(UAnimSet, TrackBoneNames) == 0x0030);
static_assert(offsetof(UAnimSet, LinkupCache) == 0x0040);
static_assert(offsetof(UAnimSet, BoneUseAnimTranslation) == 0x0050);
static_assert(offsetof(UAnimSet, ForceUseMeshTranslation) == 0x0060);
static_assert(offsetof(UAnimSet, UseTranslationBoneNames) == 0x0070);
static_assert(offsetof(UAnimSet, ForceMeshTranslationBoneNames) == 0x0080);
static_assert(offsetof(UAnimSet, PreviewSkelMeshName) == 0x0090);
static_assert(offsetof(UAnimSet, BestRatioSkelMeshName) == 0x0098);
static_assert(offsetof(UAnimSingleNodeInstance, CurrentAsset) == 0x02B8);
static_assert(offsetof(UAnimStreamable, Interpolation) == 0x00AC);
static_assert(offsetof(UAnimStreamable, RetargetSource) == 0x00B0);
static_assert(offsetof(UAnimStreamable, BoneCompressionSettings) == 0x00C8);
static_assert(offsetof(UAnimStreamable, CurveCompressionSettings) == 0x00D0);
static_assert(offsetof(UAnimStreamable, RootMotionRootLock) == 0x00D9);
static_assert(offsetof(UAssetExportTask, Object) == 0x0028);
static_assert(offsetof(UAssetExportTask, Exporter) == 0x0030);
static_assert(offsetof(UAssetExportTask, Filename) == 0x0038);
static_assert(offsetof(UAssetExportTask, IgnoreObjectList) == 0x0050);
static_assert(offsetof(UAssetExportTask, Options) == 0x0060);
static_assert(offsetof(UAssetExportTask, Errors) == 0x0068);
static_assert(offsetof(UAssetManager, ObjectReferenceList) == 0x02E0);
static_assert(offsetof(FPrimaryAssetRules, CookRule) == 0x0009);
static_assert(offsetof(FPrimaryAssetTypeInfo, PrimaryAssetType) == 0x0000);
static_assert(offsetof(FPrimaryAssetTypeInfo, AssetBaseClassLoaded) == 0x0030);
static_assert(offsetof(FPrimaryAssetTypeInfo, Directories) == 0x0040);
static_assert(offsetof(FPrimaryAssetTypeInfo, SpecificAssets) == 0x0050);
static_assert(offsetof(FPrimaryAssetTypeInfo, Rules) == 0x0060);
static_assert(offsetof(FPrimaryAssetTypeInfo, AssetScanPaths) == 0x0070);
static_assert(offsetof(FPrimaryAssetRulesOverride, PrimaryAssetId) == 0x0000);
static_assert(offsetof(FPrimaryAssetRulesOverride, Rules) == 0x0010);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, PrimaryAssetType) == 0x0000);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, FilterDirectory) == 0x0008);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, FilterString) == 0x0018);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, Rules) == 0x0028);
static_assert(offsetof(FAssetManagerRedirect, Old) == 0x0000);
static_assert(offsetof(FAssetManagerRedirect, New) == 0x0010);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetTypesToScan) == 0x0038);
static_assert(offsetof(UAssetManagerSettings, DirectoriesToExclude) == 0x0048);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetRules) == 0x0058);
static_assert(offsetof(UAssetManagerSettings, CustomPrimaryAssetRules) == 0x0068);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetIdRedirects) == 0x0080);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetTypeRedirects) == 0x0090);
static_assert(offsetof(UAssetManagerSettings, AssetPathRedirects) == 0x00A0);
static_assert(offsetof(FAssetMapping, SourceAsset) == 0x0000);
static_assert(offsetof(FAssetMapping, TargetAsset) == 0x0008);
static_assert(offsetof(UAssetMappingTable, MappedAssets) == 0x0028);
static_assert(offsetof(UAsyncActionHandleSaveGame, SaveGameObject) == 0x0060);
static_assert(offsetof(AAtmosphericFog, AtmosphericFogComponent) == 0x0220);
static_assert(offsetof(UAtmosphericFogComponent, DefaultLightColor) == 0x0224);
static_assert(offsetof(UAtmosphericFogComponent, PrecomputeParams) == 0x022C);
static_assert(offsetof(UAtmosphericFogComponent, TransmittanceTexture) == 0x0258);
static_assert(offsetof(UAtmosphericFogComponent, IrradianceTexture) == 0x0260);
static_assert(offsetof(UAudioBus, AudioBusChannels) == 0x0028);
static_assert(offsetof(FAudioQualitySettings, DisplayName) == 0x0000);
static_assert(offsetof(FSoundDebugEntry, DebugName) == 0x0000);
static_assert(offsetof(FSoundDebugEntry, Sound) == 0x0008);
static_assert(offsetof(FDefaultAudioBusSettings, AudioBus) == 0x0000);
static_assert(offsetof(UAudioSettings, DefaultSoundClassName) == 0x0038);
static_assert(offsetof(UAudioSettings, DefaultMediaSoundClassName) == 0x0050);
static_assert(offsetof(UAudioSettings, DefaultSoundConcurrencyName) == 0x0068);
static_assert(offsetof(UAudioSettings, DefaultBaseSoundMix) == 0x0080);
static_assert(offsetof(UAudioSettings, VoiPSoundClass) == 0x0098);
static_assert(offsetof(UAudioSettings, MasterSubmix) == 0x00B0);
static_assert(offsetof(UAudioSettings, BaseDefaultSubmix) == 0x00C8);
static_assert(offsetof(UAudioSettings, ReverbSubmix) == 0x00E0);
static_assert(offsetof(UAudioSettings, EQSubmix) == 0x00F8);
static_assert(offsetof(UAudioSettings, VoiPSampleRate) == 0x0110);
static_assert(offsetof(UAudioSettings, QualityLevels) == 0x0128);
static_assert(offsetof(UAudioSettings, PanningMethod) == 0x0140);
static_assert(offsetof(UAudioSettings, MonoChannelUpmixMethod) == 0x0141);
static_assert(offsetof(UAudioSettings, DialogueFilenameFormat) == 0x0148);
static_assert(offsetof(UAudioSettings, DebugSounds) == 0x0158);
static_assert(offsetof(UAudioSettings, DefaultAudioBuses) == 0x0168);
static_assert(offsetof(UAudioSettings, DefaultSoundClass) == 0x0178);
static_assert(offsetof(UAudioSettings, DefaultMediaSoundClass) == 0x0180);
static_assert(offsetof(UAudioSettings, DefaultSoundConcurrency) == 0x0188);
static_assert(offsetof(FReverbSettings, ReverbEffect) == 0x0008);
static_assert(offsetof(FReverbSettings, ReverbPluginEffect) == 0x0010);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, ListenerLocationState) == 0x0000);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, SourceLocationState) == 0x0001);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, SubmixSends) == 0x0008);
static_assert(offsetof(FAudioVolumeSubmixOverrideSettings, Submix) == 0x0000);
static_assert(offsetof(FAudioVolumeSubmixOverrideSettings, SubmixEffectChain) == 0x0008);
static_assert(offsetof(AAudioVolume, Settings) == 0x0260);
static_assert(offsetof(AAudioVolume, AmbientZoneSettings) == 0x0280);
static_assert(offsetof(AAudioVolume, SubmixSendSettings) == 0x02A8);
static_assert(offsetof(AAudioVolume, SubmixOverrideSettings) == 0x02B8);
static_assert(offsetof(UAutoDestroySubsystem, ActorsToPoll) == 0x0040);
static_assert(offsetof(FEditorMapPerformanceTestDefinition, PerformanceTestmap) == 0x0000);
static_assert(offsetof(FFilePath, FilePath) == 0x0000);
static_assert(offsetof(FImportFactorySettingValues, SettingName) == 0x0000);
static_assert(offsetof(FImportFactorySettingValues, Value) == 0x0010);
static_assert(offsetof(FEditorImportWorkflowDefinition, ImportFilePath) == 0x0000);
static_assert(offsetof(FEditorImportWorkflowDefinition, FactorySettings) == 0x0010);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Diffuse) == 0x0000);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Normal) == 0x0020);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, StaticMesh) == 0x0040);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, ReimportStaticMesh) == 0x0060);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, BlendShapeMesh) == 0x0080);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, MorphMesh) == 0x00A0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, SkeletalMesh) == 0x00C0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Animation) == 0x00E0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Sound) == 0x0100);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, SurroundSound) == 0x0120);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, OtherAssetsToImport) == 0x0140);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, BlueprintAsset) == 0x0000);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, MaterialAsset) == 0x0010);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, ParticleSystemAsset) == 0x0020);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, SkeletalMeshAsset) == 0x0030);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, StaticMeshAsset) == 0x0040);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, TextureAsset) == 0x0050);
static_assert(offsetof(FBuildPromotionNewProjectSettings, NewProjectFolderOverride) == 0x0000);
static_assert(offsetof(FBuildPromotionNewProjectSettings, NewProjectNameOverride) == 0x0010);
static_assert(offsetof(FBuildPromotionTestSettings, DefaultStaticMeshAsset) == 0x0000);
static_assert(offsetof(FBuildPromotionTestSettings, ImportWorkflow) == 0x0010);
static_assert(offsetof(FBuildPromotionTestSettings, OpenAssets) == 0x0160);
static_assert(offsetof(FBuildPromotionTestSettings, NewProjectSettings) == 0x01C0);
static_assert(offsetof(FBuildPromotionTestSettings, SourceControlMaterial) == 0x01E0);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultMaterialAsset) == 0x0000);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultDiffuseTexture) == 0x0010);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultNormalTexture) == 0x0020);
static_assert(offsetof(FParticleEditorPromotionSettings, DefaultParticleAsset) == 0x0000);
static_assert(offsetof(FBlueprintEditorPromotionSettings, FirstMeshPath) == 0x0000);
static_assert(offsetof(FBlueprintEditorPromotionSettings, SecondMeshPath) == 0x0010);
static_assert(offsetof(FBlueprintEditorPromotionSettings, DefaultParticleAsset) == 0x0020);
static_assert(offsetof(FExternalToolDefinition, ToolName) == 0x0000);
static_assert(offsetof(FExternalToolDefinition, ExecutablePath) == 0x0010);
static_assert(offsetof(FExternalToolDefinition, CommandLineOptions) == 0x0020);
static_assert(offsetof(FExternalToolDefinition, WorkingDirectory) == 0x0030);
static_assert(offsetof(FExternalToolDefinition, ScriptExtension) == 0x0040);
static_assert(offsetof(FExternalToolDefinition, ScriptDirectory) == 0x0050);
static_assert(offsetof(FEditorImportExportTestDefinition, ImportFilePath) == 0x0000);
static_assert(offsetof(FEditorImportExportTestDefinition, ExportFileExtension) == 0x0010);
static_assert(offsetof(FEditorImportExportTestDefinition, FactorySettings) == 0x0028);
static_assert(offsetof(FLaunchOnTestSettings, LaunchOnTestmap) == 0x0000);
static_assert(offsetof(FLaunchOnTestSettings, DeviceID) == 0x0010);
static_assert(offsetof(UAutomationTestSettings, EngineTestModules) == 0x0028);
static_assert(offsetof(UAutomationTestSettings, EditorTestModules) == 0x0038);
static_assert(offsetof(UAutomationTestSettings, AutomationTestmap) == 0x0048);
static_assert(offsetof(UAutomationTestSettings, EditorPerformanceTestMaps) == 0x0060);
static_assert(offsetof(UAutomationTestSettings, AssetsToOpen) == 0x0070);
static_assert(offsetof(UAutomationTestSettings, MapsToPIETest) == 0x0080);
static_assert(offsetof(UAutomationTestSettings, BuildPromotionTest) == 0x0090);
static_assert(offsetof(UAutomationTestSettings, MaterialEditorPromotionTest) == 0x0280);
static_assert(offsetof(UAutomationTestSettings, ParticleEditorPromotionTest) == 0x02B0);
static_assert(offsetof(UAutomationTestSettings, BlueprintEditorPromotionTest) == 0x02C0);
static_assert(offsetof(UAutomationTestSettings, TestLevelFolders) == 0x02F0);
static_assert(offsetof(UAutomationTestSettings, ExternalTools) == 0x0300);
static_assert(offsetof(UAutomationTestSettings, ImportExportTestDefinitions) == 0x0310);
static_assert(offsetof(UAutomationTestSettings, LaunchOnSettings) == 0x0320);
static_assert(offsetof(UAutomationTestSettings, DefaultScreenshotResolution) == 0x0330);
static_assert(offsetof(FBandwidthTestItem, Kilobyte) == 0x0000);
static_assert(offsetof(FBandwidthTestGenerator, ReplicatedBuffers) == 0x0000);
static_assert(offsetof(ABandwidthTestActor, BandwidthGenerator) == 0x0220);
static_assert(offsetof(UBillboardComponent, Sprite) == 0x0450);
static_assert(offsetof(FBoneNode, Name) == 0x0000);
static_assert(offsetof(FBoneNode, TranslationRetargetingMode) == 0x000C);
static_assert(offsetof(FVirtualBone, SourceBoneName) == 0x0000);
static_assert(offsetof(FVirtualBone, TargetBoneName) == 0x0008);
static_assert(offsetof(FVirtualBone, VirtualBoneName) == 0x0010);
static_assert(offsetof(FAnimSlotGroup, GroupName) == 0x0000);
static_assert(offsetof(FAnimSlotGroup, SlotNames) == 0x0008);
static_assert(offsetof(USkeleton, BoneTree) == 0x0038);
static_assert(offsetof(USkeleton, RefLocalPoses) == 0x0048);
static_assert(offsetof(USkeleton, VirtualBoneGuid) == 0x0170);
static_assert(offsetof(USkeleton, VirtualBones) == 0x0180);
static_assert(offsetof(USkeleton, Sockets) == 0x0190);
static_assert(offsetof(USkeleton, SmartNames) == 0x01F0);
static_assert(offsetof(USkeleton, BlendProfiles) == 0x0270);
static_assert(offsetof(USkeleton, SlotGroups) == 0x0280);
static_assert(offsetof(USkeleton, AssetUserData) == 0x0380);
static_assert(offsetof(FBlendProfileBoneEntry, BoneReference) == 0x0000);
static_assert(offsetof(UBlendProfile, OwningSkeleton) == 0x0030);
static_assert(offsetof(UBlendProfile, ProfileEntries) == 0x0038);
static_assert(offsetof(FKShapeElem, Name) == 0x000C);
static_assert(offsetof(FKShapeElem, CollisionEnabled) == 0x0019);
static_assert(offsetof(FKSphereElem, Center) == 0x0030);
static_assert(offsetof(FKBoxElem, Center) == 0x0030);
static_assert(offsetof(FKBoxElem, Rotation) == 0x003C);
static_assert(offsetof(FKSphylElem, Center) == 0x0030);
static_assert(offsetof(FKSphylElem, Rotation) == 0x003C);
static_assert(offsetof(FKConvexElem, VertexData) == 0x0030);
static_assert(offsetof(FKConvexElem, IndexData) == 0x0040);
static_assert(offsetof(FKConvexElem, ElemBox) == 0x0050);
static_assert(offsetof(FKConvexElem, Transform) == 0x0070);
static_assert(offsetof(FKTaperedCapsuleElem, Center) == 0x0030);
static_assert(offsetof(FKTaperedCapsuleElem, Rotation) == 0x003C);
static_assert(offsetof(FKAggregateGeom, SphereElems) == 0x0000);
static_assert(offsetof(FKAggregateGeom, BoxElems) == 0x0010);
static_assert(offsetof(FKAggregateGeom, SphylElems) == 0x0020);
static_assert(offsetof(FKAggregateGeom, ConvexElems) == 0x0030);
static_assert(offsetof(FKAggregateGeom, TaperedCapsuleElems) == 0x0040);
static_assert(offsetof(UBodySetup, AggGeom) == 0x0048);
static_assert(offsetof(UBodySetup, PhysMaterial) == 0x00A8);
static_assert(offsetof(UBodySetup, WalkableSlopeOverride) == 0x00B0);
static_assert(offsetof(UBodySetup, DefaultInstance) == 0x0128);
static_assert(offsetof(UBodySetup, BuildScale3D) == 0x0288);
static_assert(offsetof(FBranchFilter, BoneName) == 0x0000);
static_assert(offsetof(FInputBlendPose, BranchFilters) == 0x0000);
static_assert(offsetof(UBoneMaskFilter, BlendPoses) == 0x0028);
static_assert(offsetof(UBookMark, Location) == 0x0028);
static_assert(offsetof(UBookMark, Rotation) == 0x0034);
static_assert(offsetof(UBookMark, HiddenLevels) == 0x0040);
static_assert(offsetof(UBookMark2D, Location) == 0x002C);
static_assert(offsetof(UBoundsCopyComponent, PostTransform) == 0x00E0);
static_assert(offsetof(AReflectionCapture, CaptureComponent) == 0x0220);
static_assert(offsetof(UReflectionCaptureComponent, CaptureOffsetComponent) == 0x01F8);
static_assert(offsetof(UReflectionCaptureComponent, ReflectionSourceType) == 0x0200);
static_assert(offsetof(UReflectionCaptureComponent, MobileReflectionCompression) == 0x0201);
static_assert(offsetof(UReflectionCaptureComponent, Cubemap) == 0x0208);
static_assert(offsetof(UReflectionCaptureComponent, CaptureOffset) == 0x0220);
static_assert(offsetof(UReflectionCaptureComponent, MapBuildDataId) == 0x022C);
static_assert(offsetof(UReflectionCaptureComponent, CachedEncodedHDRCubemap) == 0x0250);
static_assert(offsetof(UBoxReflectionCaptureComponent, PreviewInfluenceBox) == 0x0278);
static_assert(offsetof(UBoxReflectionCaptureComponent, PreviewCaptureBox) == 0x0280);
static_assert(offsetof(UBreakpoint, Node) == 0x0030);
static_assert(offsetof(FBuilderPoly, VertexIndices) == 0x0000);
static_assert(offsetof(FBuilderPoly, ItemName) == 0x0014);
static_assert(offsetof(UBrushBuilder, BitmapFilename) == 0x0028);
static_assert(offsetof(UBrushBuilder, ToolTip) == 0x0038);
static_assert(offsetof(UBrushBuilder, Vertices) == 0x0050);
static_assert(offsetof(UBrushBuilder, Polys) == 0x0060);
static_assert(offsetof(UBrushBuilder, Layer) == 0x0070);
static_assert(offsetof(UBrushComponent, Brush) == 0x0450);
static_assert(offsetof(UBrushComponent, BrushBodySetup) == 0x0458);
static_assert(offsetof(UButtonStyleAsset, ButtonStyle) == 0x0028);
static_assert(offsetof(UCameraAnim, CameraInterpGroup) == 0x0028);
static_assert(offsetof(UCameraAnim, BoundingBox) == 0x0034);
static_assert(offsetof(UCameraAnim, BasePostProcessSettings) == 0x0060);
static_assert(offsetof(UCameraAnimInst, CamAnim) == 0x0028);
static_assert(offsetof(UCameraAnimInst, InterpGroupInst) == 0x0030);
static_assert(offsetof(UCameraAnimInst, MoveTrack) == 0x0068);
static_assert(offsetof(UCameraAnimInst, MoveInst) == 0x0070);
static_assert(offsetof(UCameraAnimInst, PlaySpace) == 0x0078);
static_assert(offsetof(ACameraShakeSourceActor, CameraShakeSourceComponent) == 0x0220);
static_assert(offsetof(UCameraShakeSourceComponent, Attenuation) == 0x01F8);
static_assert(offsetof(UCameraShakeSourceComponent, CameraShake) == 0x0208);
static_assert(offsetof(UCanvas, DrawColor) == 0x0038);
static_assert(offsetof(UCanvas, ColorModulate) == 0x0050);
static_assert(offsetof(UCanvas, DefaultTexture) == 0x0060);
static_assert(offsetof(UCanvas, GradientTexture0) == 0x0068);
static_assert(offsetof(UCanvas, ReporterGraph) == 0x0070);
static_assert(offsetof(UTextureRenderTarget2D, ClearColor) == 0x0188);
static_assert(offsetof(UTextureRenderTarget2D, AddressX) == 0x0198);
static_assert(offsetof(UTextureRenderTarget2D, AddressY) == 0x0199);
static_assert(offsetof(UTextureRenderTarget2D, RenderTargetFormat) == 0x019B);
static_assert(offsetof(UTextureRenderTarget2D, MipsSamplerFilter) == 0x019D);
static_assert(offsetof(UTextureRenderTarget2D, MipsAddressU) == 0x019E);
static_assert(offsetof(UTextureRenderTarget2D, MipsAddressV) == 0x019F);
static_assert(offsetof(UTextureRenderTarget2D, OverrideFormat) == 0x01A0);
static_assert(offsetof(UCheatManager, DebugCameraControllerRef) == 0x0028);
static_assert(offsetof(UCheatManager, DebugCameraControllerClass) == 0x0030);
static_assert(offsetof(UCheatManager, CheatManagerExtensions) == 0x0078);
static_assert(offsetof(UCheckBoxStyleAsset, CheckBoxStyle) == 0x0028);
static_assert(offsetof(UChildActorComponent, ChildActorClass) == 0x01F8);
static_assert(offsetof(UChildActorComponent, ChildActor) == 0x0200);
static_assert(offsetof(UChildActorComponent, ChildActorTemplate) == 0x0208);
static_assert(offsetof(UChildConnection, Parent) == 0x1BA8);
static_assert(offsetof(UPlatformInterfaceBase, AllDelegates) == 0x0028);
static_assert(offsetof(UCloudStorageBase, LocalCloudFiles) == 0x0038);
static_assert(offsetof(FCollisionResponseTemplate, Name) == 0x0000);
static_assert(offsetof(FCollisionResponseTemplate, CollisionEnabled) == 0x0008);
static_assert(offsetof(FCollisionResponseTemplate, ObjectTypeName) == 0x002C);
static_assert(offsetof(FCollisionResponseTemplate, CustomResponses) == 0x0038);
static_assert(offsetof(FCustomChannelSetup, Channel) == 0x0000);
static_assert(offsetof(FCustomChannelSetup, DefaultResponse) == 0x0001);
static_assert(offsetof(FCustomChannelSetup, Name) == 0x0004);
static_assert(offsetof(FCustomProfile, Name) == 0x0000);
static_assert(offsetof(FCustomProfile, CustomResponses) == 0x0008);
static_assert(offsetof(FRedirector, OldName) == 0x0000);
static_assert(offsetof(FRedirector, NewName) == 0x0008);
static_assert(offsetof(UCollisionProfile, Profiles) == 0x0038);
static_assert(offsetof(UCollisionProfile, DefaultChannelResponses) == 0x0048);
static_assert(offsetof(UCollisionProfile, EditProfiles) == 0x0058);
static_assert(offsetof(UCollisionProfile, ProfileRedirects) == 0x0068);
static_assert(offsetof(UCollisionProfile, CollisionChannelRedirects) == 0x0078);
static_assert(offsetof(FBlueprintComponentDelegateBinding, ComponentPropertyName) == 0x0000);
static_assert(offsetof(FBlueprintComponentDelegateBinding, DelegatePropertyName) == 0x0008);
static_assert(offsetof(FBlueprintComponentDelegateBinding, FunctionNameToBind) == 0x0010);
static_assert(offsetof(UComponentDelegateBinding, ComponentDelegateBindings) == 0x0028);
static_assert(offsetof(UCompositeCurveTable, ParentTables) == 0x00A0);
static_assert(offsetof(UCompositeCurveTable, OldParentTables) == 0x00B0);
static_assert(offsetof(UDataTable, RowStruct) == 0x0028);
static_assert(offsetof(UDataTable, ImportKeyField) == 0x0088);
static_assert(offsetof(UCompositeDataTable, ParentTables) == 0x00B0);
static_assert(offsetof(UCompositeDataTable, OldParentTables) == 0x00C0);
static_assert(offsetof(UConsole, ConsoleTargetPlayer) == 0x0038);
static_assert(offsetof(UConsole, DefaultTexture_Black) == 0x0040);
static_assert(offsetof(UConsole, DefaultTexture_White) == 0x0048);
static_assert(offsetof(UConsole, HistoryBuffer) == 0x0068);
static_assert(offsetof(ACullDistanceVolume, CullDistances) == 0x0258);
static_assert(offsetof(UCurveFloat, FloatCurve) == 0x0030);
static_assert(offsetof(UCurveLinearColor, FloatCurves) == 0x0030);
static_assert(offsetof(UTexture2D, AddressX) == 0x0181);
static_assert(offsetof(UTexture2D, AddressY) == 0x0182);
static_assert(offsetof(UTexture2D, ImportedSize) == 0x0184);
static_assert(offsetof(UCurveLinearColorAtlas, GradientCurves) == 0x01B0);
static_assert(offsetof(UCurveVector, FloatCurves) == 0x0030);
static_assert(offsetof(FDataDrivenConsoleVariable, Type) == 0x0000);
static_assert(offsetof(FDataDrivenConsoleVariable, Name) == 0x0008);
static_assert(offsetof(FDataDrivenConsoleVariable, ToolTip) == 0x0018);
static_assert(offsetof(UDataDrivenConsoleVariableSettings, CVarsArray) == 0x0050);
static_assert(offsetof(ADebugCameraController, DrawFrustum) == 0x0588);
static_assert(offsetof(ADebugCameraController, SelectedActor) == 0x0590);
static_assert(offsetof(ADebugCameraController, SelectedComponent) == 0x0598);
static_assert(offsetof(ADebugCameraController, SelectedHitPoint) == 0x05A0);
static_assert(offsetof(ADebugCameraController, OriginalControllerRef) == 0x0628);
static_assert(offsetof(ADebugCameraController, OriginalPlayer) == 0x0630);
static_assert(offsetof(FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex) == 0x0008);
static_assert(offsetof(UDebugCameraControllerSettings, CycleViewModes) == 0x0038);
static_assert(offsetof(ADecalActor, Decal) == 0x0220);
static_assert(offsetof(UDecalComponent, DecalMaterial) == 0x01F8);
static_assert(offsetof(UDecalComponent, DecalSize) == 0x021C);
static_assert(offsetof(FMulticastRecordOptions, FuncPathName) == 0x0000);
static_assert(offsetof(UDemoNetDriver, MulticastRecordOptions) == 0x0A28);
static_assert(offsetof(UDemoNetDriver, SpectatorControllers) == 0x0A40);
static_assert(offsetof(UPendingNetGame, NetDriver) == 0x0030);
static_assert(offsetof(UPendingNetGame, DemoNetDriver) == 0x0038);
static_assert(offsetof(FTextureLODGroup, Group) == 0x0000);
static_assert(offsetof(FTextureLODGroup, MipGenSettings) == 0x0020);
static_assert(offsetof(FTextureLODGroup, MinMagFilter) == 0x0040);
static_assert(offsetof(FTextureLODGroup, MipFilter) == 0x0048);
static_assert(offsetof(FTextureLODGroup, MipLoadOptions) == 0x0050);
static_assert(offsetof(FTextureLODGroup, DownscaleOptions) == 0x0058);
static_assert(offsetof(FTextureLODGroup, LossyCompressionAmount) == 0x0064);
static_assert(offsetof(UTextureLODSettings, TextureLODGroups) == 0x0028);
static_assert(offsetof(UDeviceProfile, DeviceType) == 0x0038);
static_assert(offsetof(UDeviceProfile, BaseProfileName) == 0x0048);
static_assert(offsetof(UDeviceProfile, Parent) == 0x0058);
static_assert(offsetof(UDeviceProfile, CVars) == 0x0088);
static_assert(offsetof(UDeviceProfileManager, Profiles) == 0x0028);
static_assert(offsetof(UDialogueVoice, Gender) == 0x0028);
static_assert(offsetof(UDialogueVoice, Plurality) == 0x0029);
static_assert(offsetof(UDialogueVoice, LocalizationGUID) == 0x002C);
static_assert(offsetof(FDialogueContext, Speaker) == 0x0000);
static_assert(offsetof(FDialogueContext, Targets) == 0x0008);
static_assert(offsetof(FDialogueContextMapping, Context) == 0x0000);
static_assert(offsetof(FDialogueContextMapping, SoundWave) == 0x0018);
static_assert(offsetof(FDialogueContextMapping, LocalizationKeyFormat) == 0x0020);
static_assert(offsetof(FDialogueContextMapping, Proxy) == 0x0030);
static_assert(offsetof(UDialogueWave, SpokenText) == 0x0030);
static_assert(offsetof(UDialogueWave, SubtitleOverride) == 0x0040);
static_assert(offsetof(UDialogueWave, ContextMappings) == 0x0050);
static_assert(offsetof(UDialogueWave, LocalizationGUID) == 0x0060);
static_assert(offsetof(ALight, LightComponent) == 0x0220);
static_assert(offsetof(ULightComponentBase, LightGuid) == 0x01F8);
static_assert(offsetof(ULightComponentBase, LightColor) == 0x0210);
static_assert(offsetof(ULightComponent, LightingChannels) == 0x0260);
static_assert(offsetof(ULightComponent, LightFunctionMaterial) == 0x0268);
static_assert(offsetof(ULightComponent, LightFunctionScale) == 0x0270);
static_assert(offsetof(ULightComponent, IESTexture) == 0x0280);
static_assert(offsetof(ULightComponent, BloomTint) == 0x02A8);
static_assert(offsetof(UDirectionalLightComponent, LightShaftOverrideDirection) == 0x0338);
static_assert(offsetof(UDirectionalLightComponent, AtmosphereSunDiskColorScale) == 0x0388);
static_assert(offsetof(UDirectionalLightComponent, CloudScatteredLuminanceScale) == 0x03B8);
static_assert(offsetof(UDirectionalLightComponent, LightmassSettings) == 0x03C8);
static_assert(offsetof(UDirectionalLightComponent, ModulatedShadowColor) == 0x03DC);
static_assert(offsetof(UDistributionFloatConstantCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionFloatParameterBase, ParameterName) == 0x0040);
static_assert(offsetof(UDistributionFloatParameterBase, ParamMode) == 0x0058);
static_assert(offsetof(UDistributionFloatUniformCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorConstant, Constant) == 0x0038);
static_assert(offsetof(UDistributionVectorConstant, LockedAxes) == 0x0048);
static_assert(offsetof(UDistributionVectorConstantCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorConstantCurve, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorParameterBase, ParameterName) == 0x0050);
static_assert(offsetof(UDistributionVectorParameterBase, MinInput) == 0x0058);
static_assert(offsetof(UDistributionVectorParameterBase, MaxInput) == 0x0064);
static_assert(offsetof(UDistributionVectorParameterBase, MinOutput) == 0x0070);
static_assert(offsetof(UDistributionVectorParameterBase, MaxOutput) == 0x007C);
static_assert(offsetof(UDistributionVectorParameterBase, ParamModes) == 0x0088);
static_assert(offsetof(UDistributionVectorUniform, Max) == 0x0038);
static_assert(offsetof(UDistributionVectorUniform, Min) == 0x0044);
static_assert(offsetof(UDistributionVectorUniform, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorUniform, MirrorFlags) == 0x0055);
static_assert(offsetof(UDistributionVectorUniformCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorUniformCurve, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorUniformCurve, MirrorFlags) == 0x0056);
static_assert(offsetof(UDrawFrustumComponent, FrustumColor) == 0x0450);
static_assert(offsetof(UDrawFrustumComponent, Texture) == 0x0468);
static_assert(offsetof(UEdGraph, Schema) == 0x0028);
static_assert(offsetof(UEdGraph, Nodes) == 0x0030);
static_assert(offsetof(UGraphNodeContextMenuContext, Blueprint) == 0x0028);
static_assert(offsetof(UGraphNodeContextMenuContext, Graph) == 0x0030);
static_assert(offsetof(UGraphNodeContextMenuContext, Node) == 0x0038);
static_assert(offsetof(UEdGraphNode, DeprecatedPins) == 0x0038);
static_assert(offsetof(UEdGraphNode, AdvancedPinDisplay) == 0x0058);
static_assert(offsetof(UEdGraphNode, EnabledState) == 0x0059);
static_assert(offsetof(UEdGraphNode, NodeComment) == 0x0060);
static_assert(offsetof(UEdGraphNode, ErrorMsg) == 0x0078);
static_assert(offsetof(UEdGraphNode, NodeGuid) == 0x0088);
static_assert(offsetof(UEdGraphNode_Documentation, Link) == 0x0098);
static_assert(offsetof(UEdGraphNode_Documentation, Excerpt) == 0x00A8);
static_assert(offsetof(FEdGraphTerminalType, TerminalCategory) == 0x0000);
static_assert(offsetof(FEdGraphTerminalType, TerminalSubCategory) == 0x0008);
static_assert(offsetof(FEdGraphPinType, PinCategory) == 0x0000);
static_assert(offsetof(FEdGraphPinType, PinSubCategory) == 0x0008);
static_assert(offsetof(FEdGraphPinType, PinSubCategoryMemberReference) == 0x0018);
static_assert(offsetof(FEdGraphPinType, PinValueType) == 0x0038);
static_assert(offsetof(FEdGraphPinType, ContainerType) == 0x0054);
static_assert(offsetof(UEdGraphPin_Deprecated, PinName) == 0x0028);
static_assert(offsetof(UEdGraphPin_Deprecated, PinToolTip) == 0x0038);
static_assert(offsetof(UEdGraphPin_Deprecated, Direction) == 0x0048);
static_assert(offsetof(UEdGraphPin_Deprecated, PinType) == 0x0050);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultValue) == 0x00A8);
static_assert(offsetof(UEdGraphPin_Deprecated, AutogeneratedDefaultValue) == 0x00B8);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultObject) == 0x00C8);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultTextValue) == 0x00D0);
static_assert(offsetof(UEdGraphPin_Deprecated, LinkedTo) == 0x00E8);
static_assert(offsetof(UEdGraphPin_Deprecated, SubPins) == 0x00F8);
static_assert(offsetof(UEdGraphPin_Deprecated, ParentPin) == 0x0108);
static_assert(offsetof(UEdGraphPin_Deprecated, ReferencePassThroughConnection) == 0x0110);
static_assert(offsetof(AEmitter, ParticleSystemComponent) == 0x0220);
static_assert(offsetof(AEmitterCameraLensEffectBase, PS_CameraEffect) == 0x0270);
static_assert(offsetof(AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent) == 0x0278);
static_assert(offsetof(AEmitterCameraLensEffectBase, BaseCamera) == 0x0280);
static_assert(offsetof(AEmitterCameraLensEffectBase, RelativeTransform) == 0x0290);
static_assert(offsetof(AEmitterCameraLensEffectBase, EmittersToTreatAsSame) == 0x02C8);
static_assert(offsetof(UEngineMessage, FailedPlaceMessage) == 0x0028);
static_assert(offsetof(UEngineMessage, MaxedOutMessage) == 0x0038);
static_assert(offsetof(UEngineMessage, EnteredMessage) == 0x0048);
static_assert(offsetof(UEngineMessage, LeftMessage) == 0x0058);
static_assert(offsetof(UEngineMessage, GlobalNameChange) == 0x0068);
static_assert(offsetof(UEngineMessage, SpecEnteredMessage) == 0x0078);
static_assert(offsetof(UEngineMessage, NewPlayerMessage) == 0x0088);
static_assert(offsetof(UEngineMessage, NewSpecMessage) == 0x0098);
static_assert(offsetof(AExponentialHeightFog, Component) == 0x0220);
static_assert(offsetof(UExponentialHeightFogComponent, SecondFogData) == 0x0200);
static_assert(offsetof(UExponentialHeightFogComponent, FogInscatteringColor) == 0x020C);
static_assert(offsetof(UExponentialHeightFogComponent, InscatteringColorCubemap) == 0x0220);
static_assert(offsetof(UExponentialHeightFogComponent, InscatteringTextureTint) == 0x022C);
static_assert(offsetof(UExponentialHeightFogComponent, DirectionalInscatteringColor) == 0x024C);
static_assert(offsetof(UExponentialHeightFogComponent, VolumetricFogAlbedo) == 0x0270);
static_assert(offsetof(UExponentialHeightFogComponent, VolumetricFogEmissive) == 0x0274);
static_assert(offsetof(UExporter, SupportedClass) == 0x0028);
static_assert(offsetof(UExporter, ExportRootScope) == 0x0030);
static_assert(offsetof(UExporter, FormatExtension) == 0x0038);
static_assert(offsetof(UExporter, FormatDescription) == 0x0048);
static_assert(offsetof(UExporter, ExportTask) == 0x0068);
static_assert(offsetof(FFontImportOptionsData, FontName) == 0x0000);
static_assert(offsetof(FFontImportOptionsData, CharacterSet) == 0x0018);
static_assert(offsetof(FFontImportOptionsData, Chars) == 0x0020);
static_assert(offsetof(FFontImportOptionsData, UnicodeRange) == 0x0030);
static_assert(offsetof(FFontImportOptionsData, CharsFilePath) == 0x0040);
static_assert(offsetof(FFontImportOptionsData, CharsFileWildcard) == 0x0050);
static_assert(offsetof(FFontImportOptionsData, ForegroundColor) == 0x0064);
static_assert(offsetof(UFont, FontCacheType) == 0x0030);
static_assert(offsetof(UFont, Characters) == 0x0038);
static_assert(offsetof(UFont, Textures) == 0x0048);
static_assert(offsetof(UFont, ImportOptions) == 0x0070);
static_assert(offsetof(UFont, MaxCharHeight) == 0x0128);
static_assert(offsetof(UFont, LegacyFontName) == 0x0140);
static_assert(offsetof(UFont, CompositeFont) == 0x0148);
static_assert(offsetof(UFontFace, SourceFilename) == 0x0030);
static_assert(offsetof(UFontFace, Hinting) == 0x0040);
static_assert(offsetof(UFontFace, LoadingPolicy) == 0x0041);
static_assert(offsetof(UFontFace, LayoutMethod) == 0x0042);
static_assert(offsetof(UFontImportOptions, Data) == 0x0028);
static_assert(offsetof(UForceFeedbackAttenuation, Attenuation) == 0x0028);
static_assert(offsetof(UForceFeedbackComponent, ForceFeedbackEffect) == 0x01F8);
static_assert(offsetof(UForceFeedbackComponent, AttenuationSettings) == 0x0208);
static_assert(offsetof(UForceFeedbackComponent, AttenuationOverrides) == 0x0210);
static_assert(offsetof(FForceFeedbackChannelDetails, Curve) == 0x0008);
static_assert(offsetof(UForceFeedbackEffect, ChannelDetails) == 0x0028);
static_assert(offsetof(UGameEngine, GameInstance) == 0x0D28);
static_assert(offsetof(ASpotLight, SpotLightComponent) == 0x0230);
static_assert(offsetof(UHapticFeedbackEffect_Buffer, Amplitudes) == 0x0028);
static_assert(offsetof(FHapticFeedbackDetails_Curve, Frequency) == 0x0000);
static_assert(offsetof(FHapticFeedbackDetails_Curve, Amplitude) == 0x0088);
static_assert(offsetof(UHapticFeedbackEffect_Curve, HapticDetails) == 0x0028);
static_assert(offsetof(UHapticFeedbackEffect_SoundWave, SoundWave) == 0x0028);
static_assert(offsetof(FHLODProxyMesh, StaticMesh) == 0x0020);
static_assert(offsetof(FHLODProxyMesh, Key) == 0x0028);
static_assert(offsetof(UHLODProxy, ProxyMeshes) == 0x0028);
static_assert(offsetof(FComponentKey, OwnerClass) == 0x0000);
static_assert(offsetof(FComponentKey, SCSVariableName) == 0x0008);
static_assert(offsetof(FComponentKey, AssociatedGuid) == 0x0010);
static_assert(offsetof(FBlueprintComponentChangedPropertyInfo, PropertyName) == 0x0000);
static_assert(offsetof(FBlueprintComponentChangedPropertyInfo, PropertyScope) == 0x0010);
static_assert(offsetof(FBlueprintCookedComponentInstancingData, ChangedPropertyList) == 0x0000);
static_assert(offsetof(FComponentOverrideRecord, ComponentClass) == 0x0000);
static_assert(offsetof(FComponentOverrideRecord, ComponentTemplate) == 0x0008);
static_assert(offsetof(FComponentOverrideRecord, ComponentKey) == 0x0010);
static_assert(offsetof(FComponentOverrideRecord, CookedComponentInstancingData) == 0x0030);
static_assert(offsetof(UInheritableComponentHandler, Records) == 0x0028);
static_assert(offsetof(UInheritableComponentHandler, UnnecessaryComponents) == 0x0038);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, InputActionName) == 0x0004);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, InputKeyEvent) == 0x000C);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, FunctionNameToBind) == 0x0010);
static_assert(offsetof(UInputActionDelegateBinding, InputActionDelegateBindings) == 0x0028);
static_assert(offsetof(FBlueprintInputAxisDelegateBinding, InputAxisName) == 0x0004);
static_assert(offsetof(FBlueprintInputAxisDelegateBinding, FunctionNameToBind) == 0x000C);
static_assert(offsetof(UInputAxisDelegateBinding, InputAxisDelegateBindings) == 0x0028);
static_assert(offsetof(FBlueprintInputAxisKeyDelegateBinding, AxisKey) == 0x0008);
static_assert(offsetof(FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind) == 0x0020);
static_assert(offsetof(UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings) == 0x0028);
static_assert(offsetof(FCachedKeyToActionInfo, PlayerInput) == 0x0000);
static_assert(offsetof(UInputComponent, CachedKeyToActionInfo) == 0x0120);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, InputChord) == 0x0008);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, InputKeyEvent) == 0x0028);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, FunctionNameToBind) == 0x002C);
static_assert(offsetof(UInputKeyDelegateBinding, InputKeyDelegateBindings) == 0x0028);
static_assert(offsetof(FInputAxisConfigEntry, AxisKeyName) == 0x0000);
static_assert(offsetof(FInputAxisConfigEntry, AxisProperties) == 0x0008);
static_assert(offsetof(FInputActionKeyMapping, ActionName) == 0x0000);
static_assert(offsetof(FInputActionKeyMapping, Key) == 0x0010);
static_assert(offsetof(FInputAxisKeyMapping, AxisName) == 0x0000);
static_assert(offsetof(FInputAxisKeyMapping, Key) == 0x0010);
static_assert(offsetof(FInputActionSpeechMapping, ActionName) == 0x0000);
static_assert(offsetof(FInputActionSpeechMapping, SpeechKeyword) == 0x0008);
static_assert(offsetof(UInputSettings, AxisConfig) == 0x0028);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectOS) == 0x0040);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectCultures) == 0x0050);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectDeviceModels) == 0x0060);
static_assert(offsetof(UInputSettings, DefaultViewportMouseCaptureMode) == 0x0070);
static_assert(offsetof(UInputSettings, DefaultViewportMouseLockMode) == 0x0071);
static_assert(offsetof(UInputSettings, ActionMappings) == 0x0080);
static_assert(offsetof(UInputSettings, AxisMappings) == 0x0090);
static_assert(offsetof(UInputSettings, SpeechMappings) == 0x00A0);
static_assert(offsetof(UInputSettings, DefaultTouchInterface) == 0x0100);
static_assert(offsetof(UInputSettings, ConsoleKey) == 0x0118);
static_assert(offsetof(UInputSettings, ConsoleKeys) == 0x0130);
static_assert(offsetof(FBlueprintInputTouchDelegateBinding, InputKeyEvent) == 0x0004);
static_assert(offsetof(FBlueprintInputTouchDelegateBinding, FunctionNameToBind) == 0x0008);
static_assert(offsetof(UInputTouchDelegateBinding, InputTouchDelegateBindings) == 0x0028);
static_assert(offsetof(FCurveEdEntry, CurveObject) == 0x0000);
static_assert(offsetof(FCurveEdEntry, CurveColor) == 0x0008);
static_assert(offsetof(FCurveEdEntry, CurveName) == 0x0010);
static_assert(offsetof(FCurveEdTab, TabName) == 0x0000);
static_assert(offsetof(FCurveEdTab, Curves) == 0x0010);
static_assert(offsetof(UInterpCurveEdSetup, Tabs) == 0x0028);
static_assert(offsetof(UInterpData, InterpGroups) == 0x0030);
static_assert(offsetof(UInterpData, CurveEdSetup) == 0x0040);
static_assert(offsetof(UInterpData, CachedDirectorGroup) == 0x0058);
static_assert(offsetof(UInterpData, AllEventNames) == 0x0060);
static_assert(offsetof(UInterpFilter, Caption) == 0x0028);
static_assert(offsetof(UInterpGroup, InterpTracks) == 0x0030);
static_assert(offsetof(UInterpGroup, GroupName) == 0x0040);
static_assert(offsetof(UInterpGroup, GroupColor) == 0x0048);
static_assert(offsetof(UInterpGroupCamera, CameraAnimInst) == 0x0050);
static_assert(offsetof(UInterpGroupInst, Group) == 0x0028);
static_assert(offsetof(UInterpGroupInst, GroupActor) == 0x0030);
static_assert(offsetof(UInterpGroupInst, TrackInst) == 0x0038);
static_assert(offsetof(FInterpControlPoint, PositionControlPoint) == 0x0000);
static_assert(offsetof(UInterpToMovementComponent, TeleportType) == 0x00F9);
static_assert(offsetof(UInterpToMovementComponent, BehaviourType) == 0x00FA);
static_assert(offsetof(UInterpToMovementComponent, ControlPoints) == 0x0158);
static_assert(offsetof(UInterpTrack, SubTracks) == 0x0038);
static_assert(offsetof(UInterpTrack, TrackInstClass) == 0x0048);
static_assert(offsetof(UInterpTrack, ActiveCondition) == 0x0050);
static_assert(offsetof(UInterpTrack, TrackTitle) == 0x0058);
static_assert(offsetof(UInterpTrackFloatBase, FloatTrack) == 0x0070);
static_assert(offsetof(FAnimControlTrackKey, AnimSeq) == 0x0008);
static_assert(offsetof(UInterpTrackAnimControl, SlotName) == 0x0090);
static_assert(offsetof(UInterpTrackAnimControl, AnimSeqs) == 0x0098);
static_assert(offsetof(UInterpTrackVectorBase, VectorTrack) == 0x0070);
static_assert(offsetof(UInterpTrackBoolProp, BoolTrack) == 0x0070);
static_assert(offsetof(UInterpTrackBoolProp, PropertyName) == 0x0080);
static_assert(offsetof(UInterpTrackColorProp, PropertyName) == 0x0090);
static_assert(offsetof(FDirectorTrackCut, TargetCamGroup) == 0x0008);
static_assert(offsetof(UInterpTrackDirector, CutTrack) == 0x0070);
static_assert(offsetof(FEventTrackKey, EventName) == 0x0004);
static_assert(offsetof(UInterpTrackEvent, EventTrack) == 0x0070);
static_assert(offsetof(UInterpTrackFade, FadeColor) == 0x0094);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, AnimBlueprintClass) == 0x0090);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, AnimClass) == 0x0098);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, paramName) == 0x00A0);
static_assert(offsetof(UInterpTrackFloatMaterialParam, TargetMaterials) == 0x0090);
static_assert(offsetof(UInterpTrackFloatMaterialParam, paramName) == 0x00A0);
static_assert(offsetof(UInterpTrackFloatParticleParam, paramName) == 0x0090);
static_assert(offsetof(UInterpTrackFloatProp, PropertyName) == 0x0090);
static_assert(offsetof(UInterpTrackInstProperty, PropertyOuterObjectInst) == 0x0048);
static_assert(offsetof(UInterpTrackInstColorProp, ResetColor) == 0x0058);
static_assert(offsetof(UInterpTrackInstDirector, OldViewTarget) == 0x0028);
static_assert(offsetof(UInterpTrackInstFloatAnimBPParam, AnimScriptInstance) == 0x0028);
static_assert(offsetof(FPrimitiveMaterialRef, Primitive) == 0x0000);
static_assert(offsetof(FPrimitiveMaterialRef, Decal) == 0x0008);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, MaterialInstances) == 0x0028);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, ResetFloats) == 0x0038);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs) == 0x0048);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, InstancedTrack) == 0x0058);
static_assert(offsetof(UInterpTrackInstLinearColorProp, ResetColor) == 0x0058);
static_assert(offsetof(UInterpTrackInstMove, ResetLocation) == 0x0028);
static_assert(offsetof(UInterpTrackInstMove, ResetRotation) == 0x0034);
static_assert(offsetof(UInterpTrackInstSound, PlayAudioComp) == 0x0030);
static_assert(offsetof(UInterpTrackInstToggle, Action) == 0x0028);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, MaterialInstances) == 0x0028);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, ResetVectors) == 0x0038);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs) == 0x0048);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, InstancedTrack) == 0x0058);
static_assert(offsetof(UInterpTrackInstVectorProp, ResetVector) == 0x0058);
static_assert(offsetof(UInterpTrackInstVisibility, Action) == 0x0028);
static_assert(offsetof(UInterpTrackLinearColorBase, LinearColorTrack) == 0x0070);
static_assert(offsetof(UInterpTrackLinearColorProp, PropertyName) == 0x0090);
static_assert(offsetof(FInterpLookupPoint, GroupName) == 0x0000);
static_assert(offsetof(FInterpLookupTrack, Points) == 0x0000);
static_assert(offsetof(UInterpTrackMove, PosTrack) == 0x0070);
static_assert(offsetof(UInterpTrackMove, EulerTrack) == 0x0088);
static_assert(offsetof(UInterpTrackMove, LookupTrack) == 0x00A0);
static_assert(offsetof(UInterpTrackMove, LookAtGroupName) == 0x00B0);
static_assert(offsetof(UInterpTrackMove, RotMode) == 0x00C4);
static_assert(offsetof(UInterpTrackMoveAxis, MoveAxis) == 0x0090);
static_assert(offsetof(UInterpTrackMoveAxis, LookupTrack) == 0x0098);
static_assert(offsetof(UInterpTrackParticleReplay, TrackKeys) == 0x0070);
static_assert(offsetof(FSoundTrackKey, Sound) == 0x0010);
static_assert(offsetof(UInterpTrackSound, Sounds) == 0x0090);
static_assert(offsetof(FToggleTrackKey, ToggleAction) == 0x0004);
static_assert(offsetof(UInterpTrackToggle, ToggleTrack) == 0x0070);
static_assert(offsetof(UInterpTrackVectorMaterialParam, TargetMaterials) == 0x0090);
static_assert(offsetof(UInterpTrackVectorMaterialParam, paramName) == 0x00A0);
static_assert(offsetof(UInterpTrackVectorProp, PropertyName) == 0x0090);
static_assert(offsetof(FVisibilityTrackKey, Action) == 0x0004);
static_assert(offsetof(FVisibilityTrackKey, ActiveCondition) == 0x0005);
static_assert(offsetof(UInterpTrackVisibility, VisibilityTrack) == 0x0070);
static_assert(offsetof(FLayerActorStats, Type) == 0x0000);
static_assert(offsetof(ULayer, LayerName) == 0x0028);
static_assert(offsetof(ULayer, ActorStats) == 0x0038);
static_assert(offsetof(FReplicatedStaticActorDestructionInfo, ObjClass) == 0x0030);
static_assert(offsetof(ULevel, OwningWorld) == 0x00B8);
static_assert(offsetof(ULevel, Model) == 0x00C0);
static_assert(offsetof(ULevel, ModelComponents) == 0x00C8);
static_assert(offsetof(ULevel, ActorCluster) == 0x00D8);
static_assert(offsetof(ULevel, LevelScriptActor) == 0x00E8);
static_assert(offsetof(ULevel, NavListStart) == 0x00F0);
static_assert(offsetof(ULevel, NavListEnd) == 0x00F8);
static_assert(offsetof(ULevel, NavDataChunks) == 0x0100);
static_assert(offsetof(ULevel, StaticNavigableGeometry) == 0x0118);
static_assert(offsetof(ULevel, StreamingTextureGuids) == 0x0128);
static_assert(offsetof(ULevel, LevelBuildDataId) == 0x01D0);
static_assert(offsetof(ULevel, MapBuildData) == 0x01E0);
static_assert(offsetof(ULevel, LightBuildLevelOffset) == 0x01E8);
static_assert(offsetof(ULevel, WorldSettings) == 0x0258);
static_assert(offsetof(ULevel, AssetUserData) == 0x0268);
static_assert(offsetof(ULevel, DestroyedReplicatedStaticActors) == 0x0288);
static_assert(offsetof(ULevelActorContainer, Actors) == 0x0028);
static_assert(offsetof(ALevelBounds, BoxComponent) == 0x0220);
static_assert(offsetof(ULevelStreaming, PackageNameToLoad) == 0x0050);
static_assert(offsetof(ULevelStreaming, LODPackageNames) == 0x0058);
static_assert(offsetof(ULevelStreaming, LevelTransform) == 0x0080);
static_assert(offsetof(ULevelStreaming, LevelColor) == 0x00BC);
static_assert(offsetof(ULevelStreaming, EditorStreamingVolumes) == 0x00D0);
static_assert(offsetof(ULevelStreaming, LoadedLevel) == 0x0128);
static_assert(offsetof(ULevelStreaming, PendingUnloadLevel) == 0x0130);
static_assert(offsetof(ALevelStreamingVolume, StreamingLevelNames) == 0x0258);
static_assert(offsetof(ALevelStreamingVolume, StreamingUsage) == 0x026C);
static_assert(offsetof(ULightmappedSurfaceCollection, SourceModel) == 0x0028);
static_assert(offsetof(ULightmappedSurfaceCollection, Surfaces) == 0x0030);
static_assert(offsetof(ULightMapVirtualTexture2D, TypeToLayer) == 0x01A0);
static_assert(offsetof(ALightmassPortal, PortalComponent) == 0x0220);
static_assert(offsetof(ULightmassPortalComponent, PreviewBox) == 0x01F8);
static_assert(offsetof(ULightmassPrimitiveSettingsObject, LightmassSettings) == 0x0028);
static_assert(offsetof(ULocalLightComponent, IntensityUnits) == 0x0328);
static_assert(offsetof(ULocalLightComponent, LightmassSettings) == 0x0334);
static_assert(offsetof(ALODActor, StaticMeshComponent) == 0x0220);
static_assert(offsetof(ALODActor, Proxy) == 0x0278);
static_assert(offsetof(ALODActor, Key) == 0x0280);
static_assert(offsetof(ALODActor, SubActors) == 0x0290);
static_assert(offsetof(FComponentSync, Name) == 0x0000);
static_assert(offsetof(FComponentSync, SyncOption) == 0x0008);
static_assert(offsetof(ULODSyncComponent, ComponentsToSync) == 0x00B8);
static_assert(offsetof(ULODSyncComponent, DriveComponents) == 0x0120);
static_assert(offsetof(ULODSyncComponent, SubComponents) == 0x0130);
static_assert(offsetof(UMapBuildDataRegistry, LevelLightingQuality) == 0x0028);
static_assert(offsetof(FMaterialInput, InputName) == 0x0004);
static_assert(offsetof(FMaterialInput, ExpressionName) == 0x000C);
static_assert(offsetof(FMaterialFunctionInfo, StateId) == 0x0000);
static_assert(offsetof(FMaterialFunctionInfo, Function) == 0x0010);
static_assert(offsetof(FMaterialParameterCollectionInfo, StateId) == 0x0000);
static_assert(offsetof(FMaterialParameterCollectionInfo, ParameterCollection) == 0x0010);
static_assert(offsetof(FMaterialCachedExpressionData, Parameters) == 0x0000);
static_assert(offsetof(FMaterialCachedExpressionData, ReferencedTextures) == 0x0150);
static_assert(offsetof(FMaterialCachedExpressionData, FunctionInfos) == 0x0160);
static_assert(offsetof(FMaterialCachedExpressionData, ParameterCollectionInfos) == 0x0170);
static_assert(offsetof(FMaterialCachedExpressionData, DefaultLayers) == 0x0180);
static_assert(offsetof(FMaterialCachedExpressionData, DefaultLayerBlends) == 0x0190);
static_assert(offsetof(FMaterialCachedExpressionData, GrassTypes) == 0x01A0);
static_assert(offsetof(FMaterialCachedExpressionData, DynamicParameterNames) == 0x01B0);
static_assert(offsetof(FMaterialCachedExpressionData, QualityLevelsUsed) == 0x01C0);
static_assert(offsetof(UMaterial, PhysMaterial) == 0x0088);
static_assert(offsetof(UMaterial, PhysMaterialMask) == 0x0090);
static_assert(offsetof(UMaterial, PhysicalMaterialMap) == 0x0098);
static_assert(offsetof(UMaterial, Metallic) == 0x00D8);
static_assert(offsetof(UMaterial, Specular) == 0x00EC);
static_assert(offsetof(UMaterial, Anisotropy) == 0x0100);
static_assert(offsetof(UMaterial, Normal) == 0x0114);
static_assert(offsetof(UMaterial, Tangent) == 0x0128);
static_assert(offsetof(UMaterial, EmissiveColor) == 0x013C);
static_assert(offsetof(UMaterial, MaterialDomain) == 0x0150);
static_assert(offsetof(UMaterial, BlendMode) == 0x0151);
static_assert(offsetof(UMaterial, DecalBlendMode) == 0x0152);
static_assert(offsetof(UMaterial, MaterialDecalResponse) == 0x0153);
static_assert(offsetof(UMaterial, ShadingModel) == 0x0154);
static_assert(offsetof(UMaterial, ShadingModels) == 0x0156);
static_assert(offsetof(UMaterial, WorldPositionOffset) == 0x015C);
static_assert(offsetof(UMaterial, Refraction) == 0x0170);
static_assert(offsetof(UMaterial, MaterialAttributes) == 0x0184);
static_assert(offsetof(UMaterial, PixelDepthOffset) == 0x019C);
static_assert(offsetof(UMaterial, ShadingModelFromMaterialExpression) == 0x01B0);
static_assert(offsetof(UMaterial, TranslucencyLightingMode) == 0x01C5);
static_assert(offsetof(UMaterial, TranslucentMultipleScatteringExtinction) == 0x01E4);
static_assert(offsetof(UMaterial, D3D11TessellationMode) == 0x0209);
static_assert(offsetof(UMaterial, ShadingRate) == 0x020B);
static_assert(offsetof(UMaterial, BlendableLocation) == 0x020E);
static_assert(offsetof(UMaterial, StencilCompare) == 0x0210);
static_assert(offsetof(UMaterial, RefractionMode) == 0x0212);
static_assert(offsetof(UMaterial, StateId) == 0x0224);
static_assert(offsetof(UMaterial, CachedExpressionData) == 0x0268);
static_assert(offsetof(FMaterialSpriteElement, Material) == 0x0000);
static_assert(offsetof(FMaterialSpriteElement, DistanceToOpacityCurve) == 0x0008);
static_assert(offsetof(FMaterialSpriteElement, DistanceToSizeCurve) == 0x0020);
static_assert(offsetof(UMaterialBillboardComponent, Elements) == 0x0450);
static_assert(offsetof(UMaterialExpressionAbs, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionAdd, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionAdd, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionAntialiasedTextureMask, Channel) == 0x0084);
static_assert(offsetof(UMaterialExpressionAppendVector, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionAppendVector, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionArccosine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArccosineFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArcsine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArcsineFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionArctangent2Fast, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2Fast, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionArctangentFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionAtmosphericFogColor, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionBentNormalCustomOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlackBody, Temp) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, B) == 0x0058);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, Alpha) == 0x0070);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType) == 0x0084);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType) == 0x0085);
static_assert(offsetof(UMaterialExpressionBreakMaterialAttributes, MaterialAttributes) == 0x0040);
static_assert(offsetof(UMaterialExpressionBumpOffset, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionBumpOffset, Height) == 0x0054);
static_assert(offsetof(UMaterialExpressionBumpOffset, HeightRatioInput) == 0x0068);
static_assert(offsetof(UMaterialExpressionCeil, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionParameter, ParameterName) == 0x0040);
static_assert(offsetof(UMaterialExpressionParameter, ExpressionGUID) == 0x0048);
static_assert(offsetof(UMaterialExpressionVectorParameter, DefaultValue) == 0x0058);
static_assert(offsetof(UMaterialExpressionChannelMaskParameter, MaskChannel) == 0x0070);
static_assert(offsetof(UMaterialExpressionClamp, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionClamp, Min) == 0x0054);
static_assert(offsetof(UMaterialExpressionClamp, Max) == 0x0068);
static_assert(offsetof(UMaterialExpressionClamp, ClampMode) == 0x007C);
static_assert(offsetof(UMaterialExpressionClearCoatNormalCustomOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCollectionParameter, Collection) == 0x0040);
static_assert(offsetof(UMaterialExpressionCollectionParameter, ParameterName) == 0x0048);
static_assert(offsetof(UMaterialExpressionCollectionParameter, ParameterId) == 0x0050);
static_assert(offsetof(UMaterialExpressionComment, Text) == 0x0048);
static_assert(offsetof(UMaterialExpressionComment, CommentColor) == 0x0058);
static_assert(offsetof(UMaterialExpressionComponentMask, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstant3Vector, Constant) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstant4Vector, Constant) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstantBiasScale, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCosine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCrossProduct, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionCrossProduct, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, Curve) == 0x0060);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, Atlas) == 0x0068);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, InputTime) == 0x0070);
static_assert(offsetof(FCustomInput, InputName) == 0x0000);
static_assert(offsetof(FCustomInput, Input) == 0x0008);
static_assert(offsetof(FCustomOutput, OutputName) == 0x0000);
static_assert(offsetof(FCustomOutput, OutputType) == 0x0008);
static_assert(offsetof(FCustomDefine, DefineName) == 0x0000);
static_assert(offsetof(FCustomDefine, DefineValue) == 0x0010);
static_assert(offsetof(UMaterialExpressionCustom, Code) == 0x0040);
static_assert(offsetof(UMaterialExpressionCustom, OutputType) == 0x0050);
static_assert(offsetof(UMaterialExpressionCustom, Description) == 0x0058);
static_assert(offsetof(UMaterialExpressionCustom, Inputs) == 0x0068);
static_assert(offsetof(UMaterialExpressionCustom, AdditionalOutputs) == 0x0078);
static_assert(offsetof(UMaterialExpressionCustom, AdditionalDefines) == 0x0088);
static_assert(offsetof(UMaterialExpressionCustom, IncludeFilePaths) == 0x0098);
static_assert(offsetof(UMaterialExpressionDDX, Value) == 0x0040);
static_assert(offsetof(UMaterialExpressionDDY, Value) == 0x0040);
static_assert(offsetof(UMaterialExpressionDecalMipmapLevel, TextureSize) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthFade, InOpacity) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthFade, FadeDistance) == 0x0054);
static_assert(offsetof(UMaterialExpressionDepthOfFieldFunction, FunctionValue) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthOfFieldFunction, Depth) == 0x0044);
static_assert(offsetof(UMaterialExpressionDeriveNormalZ, InXY) == 0x0040);
static_assert(offsetof(UMaterialExpressionDesaturation, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionDesaturation, Fraction) == 0x0054);
static_assert(offsetof(UMaterialExpressionDesaturation, LuminanceFactors) == 0x0068);
static_assert(offsetof(UMaterialExpressionDistance, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDistance, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDistanceFieldGradient, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionDistanceFieldsRenderingSwitch, No) == 0x0040);
static_assert(offsetof(UMaterialExpressionDistanceFieldsRenderingSwitch, Yes) == 0x0054);
static_assert(offsetof(UMaterialExpressionDistanceToNearestSurface, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionDivide, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDivide, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDotProduct, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDotProduct, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDynamicParameter, ParamNames) == 0x0040);
static_assert(offsetof(UMaterialExpressionDynamicParameter, DefaultValue) == 0x0050);
static_assert(offsetof(UMaterialExpressionFeatureLevelSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionFloor, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionFmod, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionFmod, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionFontSample, Font) == 0x0040);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, ParameterName) == 0x0050);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, ExpressionGUID) == 0x0058);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, Group) == 0x0068);
static_assert(offsetof(UMaterialExpressionFrac, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionFresnel, ExponentIn) == 0x0040);
static_assert(offsetof(UMaterialExpressionFresnel, BaseReflectFractionIn) == 0x0058);
static_assert(offsetof(UMaterialExpressionFresnel, Normal) == 0x0070);
static_assert(offsetof(UMaterialExpressionFunctionInput, Preview) == 0x0040);
static_assert(offsetof(UMaterialExpressionFunctionInput, InputName) == 0x0054);
static_assert(offsetof(UMaterialExpressionFunctionInput, Description) == 0x0060);
static_assert(offsetof(UMaterialExpressionFunctionInput, ID) == 0x0070);
static_assert(offsetof(UMaterialExpressionFunctionInput, InputType) == 0x0080);
static_assert(offsetof(UMaterialExpressionFunctionInput, PreviewValue) == 0x0090);
static_assert(offsetof(UMaterialExpressionFunctionOutput, OutputName) == 0x0040);
static_assert(offsetof(UMaterialExpressionFunctionOutput, Description) == 0x0048);
static_assert(offsetof(UMaterialExpressionFunctionOutput, A) == 0x005C);
static_assert(offsetof(UMaterialExpressionFunctionOutput, ID) == 0x0074);
static_assert(offsetof(UMaterialExpressionGetMaterialAttributes, MaterialAttributes) == 0x0040);
static_assert(offsetof(UMaterialExpressionGetMaterialAttributes, AttributeGetTypes) == 0x0058);
static_assert(offsetof(UMaterialExpressionGIReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionGIReplace, StaticIndirect) == 0x0054);
static_assert(offsetof(UMaterialExpressionGIReplace, DynamicIndirect) == 0x0068);
static_assert(offsetof(UMaterialExpressionHairColor, Melanin) == 0x0040);
static_assert(offsetof(UMaterialExpressionHairColor, Redness) == 0x0054);
static_assert(offsetof(UMaterialExpressionHairColor, DyeColor) == 0x0068);
static_assert(offsetof(UMaterialExpressionIf, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionIf, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionIf, AGreaterThanB) == 0x0068);
static_assert(offsetof(UMaterialExpressionIf, AEqualsB) == 0x007C);
static_assert(offsetof(UMaterialExpressionIf, ALessThanB) == 0x0090);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, Value) == 0x0068);
static_assert(offsetof(UMaterialExpressionLightmassReplace, Realtime) == 0x0040);
static_assert(offsetof(UMaterialExpressionLightmassReplace, Lightmass) == 0x0054);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, Alpha) == 0x0068);
static_assert(offsetof(UMaterialExpressionLogarithm10, X) == 0x0040);
static_assert(offsetof(UMaterialExpressionLogarithm2, X) == 0x0040);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, BaseColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Metallic) == 0x0054);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Specular) == 0x0068);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Roughness) == 0x007C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Anisotropy) == 0x0090);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, EmissiveColor) == 0x00A4);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Opacity) == 0x00B8);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, OpacityMask) == 0x00CC);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Normal) == 0x00E0);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Tangent) == 0x00F4);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset) == 0x0108);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, WorldDisplacement) == 0x011C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier) == 0x0130);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor) == 0x0144);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ClearCoat) == 0x0158);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness) == 0x016C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion) == 0x0180);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Refraction) == 0x0194);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, CustomizedUVs) == 0x01A8);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset) == 0x0248);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ShadingModel) == 0x025C);
static_assert(offsetof(UMaterialExpressionMapARPassthroughCameraUV, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, ParameterName) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, ExpressionGUID) == 0x0048);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, Input) == 0x0058);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, DefaultLayers) == 0x0070);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, LayerCallers) == 0x00B0);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, BlendCallers) == 0x00C8);
static_assert(offsetof(UMaterialExpressionMaterialFunctionCall, MaterialFunction) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo) == 0x0048);
static_assert(offsetof(UMaterialExpressionMaterialProxyReplace, Realtime) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialProxyReplace, MaterialProxy) == 0x0054);
static_assert(offsetof(UMaterialExpressionMax, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMax, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionMin, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMin, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionMultiply, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMultiply, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionNamedRerouteDeclaration, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionNamedRerouteDeclaration, Name) == 0x0054);
static_assert(offsetof(UMaterialExpressionNamedRerouteDeclaration, VariableGuid) == 0x005C);
static_assert(offsetof(UMaterialExpressionNamedRerouteUsage, Declaration) == 0x0040);
static_assert(offsetof(UMaterialExpressionNamedRerouteUsage, DeclarationGuid) == 0x0048);
static_assert(offsetof(UMaterialExpressionNoise, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionNoise, FilterWidth) == 0x0054);
static_assert(offsetof(UMaterialExpressionNoise, NoiseFunction) == 0x0070);
static_assert(offsetof(UMaterialExpressionNormalize, VectorInput) == 0x0040);
static_assert(offsetof(UMaterialExpressionOneMinus, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionPanner, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionPanner, Time) == 0x0054);
static_assert(offsetof(UMaterialExpressionPanner, Speed) == 0x0068);
static_assert(offsetof(UMaterialExpressionPerInstanceCustomData, DefaultValue) == 0x0040);
static_assert(offsetof(UMaterialExpressionPower, Base) == 0x0040);
static_assert(offsetof(UMaterialExpressionPower, Exponent) == 0x0054);
static_assert(offsetof(UMaterialExpressionPreviousFrameSwitch, CurrentFrame) == 0x0040);
static_assert(offsetof(UMaterialExpressionPreviousFrameSwitch, PreviousFrame) == 0x0054);
static_assert(offsetof(UMaterialExpressionQualitySwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionQualitySwitch, Inputs) == 0x0054);
static_assert(offsetof(UMaterialExpressionRayTracingQualitySwitch, Normal) == 0x0040);
static_assert(offsetof(UMaterialExpressionRayTracingQualitySwitch, RayTraced) == 0x0054);
static_assert(offsetof(UMaterialExpressionReflectionCapturePassSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionReflectionCapturePassSwitch, reflection) == 0x0054);
static_assert(offsetof(UMaterialExpressionReflectionVectorWS, CustomWorldNormal) == 0x0040);
static_assert(offsetof(UMaterialExpressionReroute, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, RotationAngle) == 0x0054);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, PivotPoint) == 0x0068);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, position) == 0x007C);
static_assert(offsetof(UMaterialExpressionRotator, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotator, Time) == 0x0054);
static_assert(offsetof(UMaterialExpressionRound, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Specular) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Roughness) == 0x0068);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Normal) == 0x007C);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight) == 0x0090);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Opacity) == 0x00A4);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Mask) == 0x00B8);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MipValue) == 0x0068);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture) == 0x0080);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MaterialType) == 0x0088);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode) == 0x008B);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode) == 0x008C);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName) == 0x0090);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID) == 0x0098);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group) == 0x00A8);
static_assert(offsetof(UMaterialExpressionSamplePhysicsVectorField, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionSamplePhysicsVectorField, FieldTarget) == 0x0054);
static_assert(offsetof(UMaterialExpressionSamplePhysicsScalarField, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionSamplePhysicsScalarField, FieldTarget) == 0x0054);
static_assert(offsetof(UMaterialExpressionSamplePhysicsIntegerField, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionSamplePhysicsIntegerField, FieldTarget) == 0x0054);
static_assert(offsetof(UMaterialExpressionSaturate, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneColor, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneColor, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneColor, OffsetFraction) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneColor, ConstInput) == 0x006C);
static_assert(offsetof(UMaterialExpressionSceneDepth, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneDepth, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneDepth, Coordinates) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneDepth, ConstInput) == 0x006C);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, ConstInput) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneTexture, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneTexture, SceneTextureId) == 0x0054);
static_assert(offsetof(UMaterialExpressionSetMaterialAttributes, Inputs) == 0x0040);
static_assert(offsetof(UMaterialExpressionSetMaterialAttributes, AttributeSetTypes) == 0x0050);
static_assert(offsetof(UMaterialExpressionShaderStageSwitch, PixelShader) == 0x0040);
static_assert(offsetof(UMaterialExpressionShaderStageSwitch, VertexShader) == 0x0054);
static_assert(offsetof(UMaterialExpressionShadingModel, ShadingModel) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadingPathSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadingPathSwitch, Inputs) == 0x0054);
static_assert(offsetof(UMaterialExpressionShadowReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadowReplace, Shadow) == 0x0054);
static_assert(offsetof(UMaterialExpressionSign, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients) == 0x0040);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients) == 0x0054);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG) == 0x0068);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater) == 0x007C);
static_assert(offsetof(UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition) == 0x0044);
static_assert(offsetof(UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionSmoothStep, Min) == 0x0040);
static_assert(offsetof(UMaterialExpressionSmoothStep, Max) == 0x0054);
static_assert(offsetof(UMaterialExpressionSmoothStep, Value) == 0x0068);
static_assert(offsetof(UMaterialExpressionSobol, Cell) == 0x0040);
static_assert(offsetof(UMaterialExpressionSobol, Index) == 0x0054);
static_assert(offsetof(UMaterialExpressionSobol, Seed) == 0x0068);
static_assert(offsetof(UMaterialExpressionSobol, ConstSeed) == 0x0080);
static_assert(offsetof(UMaterialExpressionSpeedTree, GeometryInput) == 0x0040);
static_assert(offsetof(UMaterialExpressionSpeedTree, WindInput) == 0x0054);
static_assert(offsetof(UMaterialExpressionSpeedTree, LODInput) == 0x0068);
static_assert(offsetof(UMaterialExpressionSpeedTree, ExtraBendWS) == 0x007C);
static_assert(offsetof(UMaterialExpressionSpeedTree, GeometryType) == 0x0090);
static_assert(offsetof(UMaterialExpressionSpeedTree, WindType) == 0x0091);
static_assert(offsetof(UMaterialExpressionSpeedTree, LODType) == 0x0092);
static_assert(offsetof(UMaterialExpressionSphereMask, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionSphereMask, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionSphereMask, Radius) == 0x0068);
static_assert(offsetof(UMaterialExpressionSphereMask, Hardness) == 0x007C);
static_assert(offsetof(UMaterialExpressionSphericalParticleOpacity, Density) == 0x0040);
static_assert(offsetof(UMaterialExpressionSquareRoot, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionStaticSwitch, A) == 0x0044);
static_assert(offsetof(UMaterialExpressionStaticSwitch, B) == 0x0058);
static_assert(offsetof(UMaterialExpressionStaticSwitch, Value) == 0x006C);
static_assert(offsetof(UMaterialExpressionStep, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionStep, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionSubtract, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionSubtract, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionTangent, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTangentOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTemporalSobol, Index) == 0x0040);
static_assert(offsetof(UMaterialExpressionTemporalSobol, Seed) == 0x0054);
static_assert(offsetof(UMaterialExpressionTemporalSobol, ConstSeed) == 0x006C);
static_assert(offsetof(UMaterialExpressionTextureProperty, TextureObject) == 0x0040);
static_assert(offsetof(UMaterialExpressionTextureProperty, Property) == 0x0054);
static_assert(offsetof(UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransform, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransform, TransformSourceType) == 0x0054);
static_assert(offsetof(UMaterialExpressionTransform, TransformType) == 0x0055);
static_assert(offsetof(UMaterialExpressionTransformPosition, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransformPosition, TransformSourceType) == 0x0054);
static_assert(offsetof(UMaterialExpressionTransformPosition, TransformType) == 0x0055);
static_assert(offsetof(UMaterialExpressionTruncate, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionVectorNoise, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionVectorNoise, NoiseFunction) == 0x0054);
static_assert(offsetof(UMaterialExpressionVertexInterpolator, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionViewProperty, Property) == 0x0040);
static_assert(offsetof(UMaterialExpressionVirtualTextureFeatureSwitch, No) == 0x0040);
static_assert(offsetof(UMaterialExpressionVirtualTextureFeatureSwitch, Yes) == 0x0054);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG) == 0x0040);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2) == 0x0054);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend) == 0x0068);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution) == 0x007C);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion) == 0x0090);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity) == 0x00A4);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity) == 0x00B8);
static_assert(offsetof(UMaterialExpressionWorldPosition, WorldPositionShaderOffset) == 0x0040);
static_assert(offsetof(UMaterialFunctionInterface, StateId) == 0x0028);
static_assert(offsetof(UMaterialFunctionInterface, MaterialFunctionUsage) == 0x0038);
static_assert(offsetof(UMaterialFunction, Description) == 0x0040);
static_assert(offsetof(UMaterialFunctionInstance, Parent) == 0x0040);
static_assert(offsetof(UMaterialFunctionInstance, Base) == 0x0048);
static_assert(offsetof(UMaterialFunctionInstance, ScalarParameterValues) == 0x0050);
static_assert(offsetof(UMaterialFunctionInstance, VectorParameterValues) == 0x0060);
static_assert(offsetof(UMaterialFunctionInstance, TextureParameterValues) == 0x0070);
static_assert(offsetof(UMaterialFunctionInstance, FontParameterValues) == 0x0080);
static_assert(offsetof(UMaterialFunctionInstance, StaticSwitchParameterValues) == 0x0090);
static_assert(offsetof(UMaterialFunctionInstance, StaticComponentMaskParameterValues) == 0x00A0);
static_assert(offsetof(UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues) == 0x00B0);
static_assert(offsetof(AMaterialInstanceActor, TargetActors) == 0x0220);
static_assert(offsetof(FCollectionParameterBase, ParameterName) == 0x0000);
static_assert(offsetof(FCollectionParameterBase, ID) == 0x0008);
static_assert(offsetof(FCollectionVectorParameter, DefaultValue) == 0x0018);
static_assert(offsetof(UMaterialParameterCollection, StateId) == 0x0028);
static_assert(offsetof(UMaterialParameterCollection, ScalarParameters) == 0x0038);
static_assert(offsetof(UMaterialParameterCollection, VectorParameters) == 0x0048);
static_assert(offsetof(UMaterialParameterCollectionInstance, Collection) == 0x0030);
static_assert(offsetof(FInterpGroupActorInfo, ObjectName) == 0x0000);
static_assert(offsetof(FInterpGroupActorInfo, Actors) == 0x0008);
static_assert(offsetof(FCameraCutInfo, Location) == 0x0000);
static_assert(offsetof(AMatineeActor, MatineeData) == 0x0220);
static_assert(offsetof(AMatineeActor, MatineeControllerName) == 0x0228);
static_assert(offsetof(AMatineeActor, GroupActorInfos) == 0x0248);
static_assert(offsetof(AMatineeActor, GroupInst) == 0x0260);
static_assert(offsetof(AMatineeActor, CameraCuts) == 0x0270);
static_assert(offsetof(AMatineeActorCameraAnim, CameraAnim) == 0x02C8);
static_assert(offsetof(UMeshSimplificationSettings, MeshReductionModuleName) == 0x0038);
static_assert(offsetof(FPurchaseInfo, Identifier) == 0x0000);
static_assert(offsetof(FPurchaseInfo, DisplayName) == 0x0010);
static_assert(offsetof(FPurchaseInfo, DisplayDescription) == 0x0020);
static_assert(offsetof(FPurchaseInfo, DisplayPrice) == 0x0030);
static_assert(offsetof(UMicroTransactionBase, AvailableProducts) == 0x0038);
static_assert(offsetof(UMicroTransactionBase, LastError) == 0x0048);
static_assert(offsetof(UMicroTransactionBase, LastErrorSolution) == 0x0058);
static_assert(offsetof(UModelComponent, ModelBodySetup) == 0x0468);
static_assert(offsetof(UMorphTarget, BaseSkelMesh) == 0x0028);
static_assert(offsetof(UNavigationDataChunk, NavigationDataName) == 0x0028);
static_assert(offsetof(UNavigationSystemConfig, NavigationSystemClass) == 0x0028);
static_assert(offsetof(UNavigationSystemConfig, SupportedAgentsMask) == 0x0040);
static_assert(offsetof(UNavigationSystemConfig, DefaultAgentName) == 0x0044);
static_assert(offsetof(FNavigationLinkBase, SupportedAgents) == 0x0014);
static_assert(offsetof(FNavigationLinkBase, Direction) == 0x001C);
static_assert(offsetof(FNavigationLinkBase, AreaClass) == 0x0020);
static_assert(offsetof(FNavigationLink, Left) == 0x0030);
static_assert(offsetof(FNavigationLink, Right) == 0x003C);
static_assert(offsetof(FNavigationSegmentLink, LeftStart) == 0x0030);
static_assert(offsetof(FNavigationSegmentLink, LeftEnd) == 0x003C);
static_assert(offsetof(FNavigationSegmentLink, RightStart) == 0x0048);
static_assert(offsetof(FNavigationSegmentLink, RightEnd) == 0x0054);
static_assert(offsetof(UNavLinkDefinition, Links) == 0x0028);
static_assert(offsetof(UNavLinkDefinition, SegmentLinks) == 0x0038);
static_assert(offsetof(FNetworkEmulationProfileDescription, ProfileName) == 0x0000);
static_assert(offsetof(FNetworkEmulationProfileDescription, ToolTip) == 0x0010);
static_assert(offsetof(UNetworkSettings, NetworkEmulationProfiles) == 0x0048);
static_assert(offsetof(UObjectLibrary, ObjectBaseClass) == 0x0028);
static_assert(offsetof(UObjectLibrary, Objects) == 0x0038);
static_assert(offsetof(UObjectReferencer, ReferencedObjects) == 0x0028);
static_assert(offsetof(APainCausingVolume, DamageType) == 0x0270);
static_assert(offsetof(APainCausingVolume, DamageInstigator) == 0x0280);
static_assert(offsetof(UParticleEmitter, EmitterName) == 0x0028);
static_assert(offsetof(UParticleEmitter, EmitterRenderMode) == 0x0034);
static_assert(offsetof(UParticleEmitter, SignificanceLevel) == 0x0035);
static_assert(offsetof(UParticleEmitter, LODLevels) == 0x0040);
static_assert(offsetof(UParticleLODLevel, RequiredModule) == 0x0030);
static_assert(offsetof(UParticleLODLevel, Modules) == 0x0038);
static_assert(offsetof(UParticleLODLevel, TypeDataModule) == 0x0048);
static_assert(offsetof(UParticleLODLevel, SpawnModule) == 0x0050);
static_assert(offsetof(UParticleLODLevel, EventGenerator) == 0x0058);
static_assert(offsetof(UParticleLODLevel, SpawningModules) == 0x0060);
static_assert(offsetof(UParticleLODLevel, SpawnModules) == 0x0070);
static_assert(offsetof(UParticleLODLevel, UpdateModules) == 0x0080);
static_assert(offsetof(UParticleLODLevel, OrbitModules) == 0x0090);
static_assert(offsetof(UParticleLODLevel, EventReceiverModules) == 0x00A0);
static_assert(offsetof(FLODSoloTrack, SoloEnableSetting) == 0x0000);
static_assert(offsetof(FNamedEmitterMaterial, Name) == 0x0000);
static_assert(offsetof(FNamedEmitterMaterial, Material) == 0x0008);
static_assert(offsetof(UParticleSystem, Emitters) == 0x0040);
static_assert(offsetof(UParticleSystem, PreviewComponent) == 0x0050);
static_assert(offsetof(UParticleSystem, CurveEdSetup) == 0x0058);
static_assert(offsetof(UParticleSystem, LODDistances) == 0x0068);
static_assert(offsetof(UParticleSystem, LODSettings) == 0x0078);
static_assert(offsetof(UParticleSystem, FixedRelativeBoundingBox) == 0x0088);
static_assert(offsetof(UParticleSystem, SystemUpdateMode) == 0x00B2);
static_assert(offsetof(UParticleSystem, LODMethod) == 0x00B3);
static_assert(offsetof(UParticleSystem, InsignificantReaction) == 0x00B4);
static_assert(offsetof(UParticleSystem, OcclusionBoundsMethod) == 0x00B5);
static_assert(offsetof(UParticleSystem, MaxSignificanceLevel) == 0x00B7);
static_assert(offsetof(UParticleSystem, MacroUVPosition) == 0x00C0);
static_assert(offsetof(UParticleSystem, CustomOcclusionBounds) == 0x00CC);
static_assert(offsetof(UParticleSystem, SoloTracking) == 0x00E8);
static_assert(offsetof(UParticleSystem, NamedMaterialSlots) == 0x00F8);
static_assert(offsetof(FDistributionLookupTable, Values) == 0x0008);
static_assert(offsetof(FRawDistribution, Table) == 0x0000);
static_assert(offsetof(FRawDistributionVector, MinValueVec) == 0x0028);
static_assert(offsetof(FRawDistributionVector, MaxValueVec) == 0x0034);
static_assert(offsetof(FRawDistributionVector, Distribution) == 0x0040);
static_assert(offsetof(UParticleModuleAcceleration, Acceleration) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationConstant, Acceleration) == 0x0038);
static_assert(offsetof(FRawDistributionFloat, Distribution) == 0x0028);
static_assert(offsetof(UParticleModuleAccelerationDrag, DragCoefficient) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationDrag, DragCoefficientRaw) == 0x0040);
static_assert(offsetof(UParticleModuleAccelerationDragScaleOverLife, DragScale) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw) == 0x0040);
static_assert(offsetof(UParticleModuleAccelerationOverLifetime, AccelOverLife) == 0x0038);
static_assert(offsetof(UParticleModuleAttractorLine, EndPoint0) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorLine, EndPoint1) == 0x003C);
static_assert(offsetof(UParticleModuleAttractorLine, Range) == 0x0048);
static_assert(offsetof(UParticleModuleAttractorLine, Strength) == 0x0078);
static_assert(offsetof(UParticleModuleAttractorParticle, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorParticle, Range) == 0x0038);
static_assert(offsetof(UParticleModuleAttractorParticle, Strength) == 0x0070);
static_assert(offsetof(UParticleModuleAttractorParticle, SelectionMethod) == 0x00A4);
static_assert(offsetof(UParticleModuleAttractorPoint, position) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorPoint, Range) == 0x0078);
static_assert(offsetof(UParticleModuleAttractorPoint, Strength) == 0x00A8);
static_assert(offsetof(UParticleModuleAttractorPointGravity, position) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorPointGravity, Strength) == 0x0040);
static_assert(offsetof(UParticleModuleAttractorPointGravity, StrengthRaw) == 0x0048);
static_assert(offsetof(UParticleModuleBeamModifier, ModifierType) == 0x0030);
static_assert(offsetof(UParticleModuleBeamModifier, PositionOptions) == 0x0034);
static_assert(offsetof(UParticleModuleBeamModifier, position) == 0x0038);
static_assert(offsetof(UParticleModuleBeamModifier, TangentOptions) == 0x0080);
static_assert(offsetof(UParticleModuleBeamModifier, Tangent) == 0x0088);
static_assert(offsetof(UParticleModuleBeamModifier, StrengthOptions) == 0x00D4);
static_assert(offsetof(UParticleModuleBeamModifier, Strength) == 0x00D8);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseRange) == 0x0040);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseRangeScale) == 0x0088);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseSpeed) == 0x00C0);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseTangentStrength) == 0x0120);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseScale) == 0x0160);
static_assert(offsetof(UParticleModuleBeamSource, SourceMethod) == 0x0030);
static_assert(offsetof(UParticleModuleBeamSource, SourceName) == 0x0034);
static_assert(offsetof(UParticleModuleBeamSource, Source) == 0x0040);
static_assert(offsetof(UParticleModuleBeamSource, SourceTangentMethod) == 0x008C);
static_assert(offsetof(UParticleModuleBeamSource, SourceTangent) == 0x0090);
static_assert(offsetof(UParticleModuleBeamSource, SourceStrength) == 0x00E0);
static_assert(offsetof(UParticleModuleBeamTarget, TargetMethod) == 0x0030);
static_assert(offsetof(UParticleModuleBeamTarget, TargetName) == 0x0034);
static_assert(offsetof(UParticleModuleBeamTarget, Target) == 0x0040);
static_assert(offsetof(UParticleModuleBeamTarget, TargetTangentMethod) == 0x008C);
static_assert(offsetof(UParticleModuleBeamTarget, TargetTangent) == 0x0090);
static_assert(offsetof(UParticleModuleBeamTarget, TargetStrength) == 0x00E0);
static_assert(offsetof(UParticleModuleCameraOffset, CameraOffset) == 0x0030);
static_assert(offsetof(UParticleModuleCameraOffset, UpdateMethod) == 0x0064);
static_assert(offsetof(UParticleModuleCollision, DampingFactor) == 0x0030);
static_assert(offsetof(UParticleModuleCollision, DampingFactorRotation) == 0x0078);
static_assert(offsetof(UParticleModuleCollision, MaxCollisions) == 0x00C0);
static_assert(offsetof(UParticleModuleCollision, CollisionCompletionOption) == 0x00F0);
static_assert(offsetof(UParticleModuleCollision, ParticleMass) == 0x0118);
static_assert(offsetof(UParticleModuleCollision, DelayAmount) == 0x0158);
static_assert(offsetof(UParticleModuleCollisionGPU, Resilience) == 0x0030);
static_assert(offsetof(UParticleModuleCollisionGPU, ResilienceScaleOverLife) == 0x0060);
static_assert(offsetof(UParticleModuleCollisionGPU, Response) == 0x00A4);
static_assert(offsetof(UParticleModuleCollisionGPU, CollisionMode) == 0x00A5);
static_assert(offsetof(UParticleModuleColor, StartColor) == 0x0030);
static_assert(offsetof(UParticleModuleColor, StartAlpha) == 0x0078);
static_assert(offsetof(FParticleRandomSeedInfo, ParameterName) == 0x0000);
static_assert(offsetof(FParticleRandomSeedInfo, RandomSeeds) == 0x0010);
static_assert(offsetof(UParticleModuleColor_Seeded, RandomSeedInfo) == 0x00B0);
static_assert(offsetof(UParticleModuleColorOverLife, ColorOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleColorOverLife, AlphaOverLife) == 0x0078);
static_assert(offsetof(UParticleModuleColorScaleOverLife, ColorScaleOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleColorScaleOverLife, AlphaScaleOverLife) == 0x0078);
static_assert(offsetof(FParticleEvent_GenerateInfo, Type) == 0x0000);
static_assert(offsetof(FParticleEvent_GenerateInfo, CustomName) == 0x0010);
static_assert(offsetof(FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame) == 0x0018);
static_assert(offsetof(UParticleModuleEventGenerator, Events) == 0x0030);
static_assert(offsetof(UParticleModuleEventReceiverBase, EventGeneratorType) == 0x0030);
static_assert(offsetof(UParticleModuleEventReceiverBase, EventName) == 0x0034);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, SpawnCount) == 0x0040);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, InheritVelocityScale) == 0x0078);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, PhysicalMaterials) == 0x00C0);
static_assert(offsetof(UParticleModuleKillBox, LowerLeftCorner) == 0x0030);
static_assert(offsetof(UParticleModuleKillBox, UpperRightCorner) == 0x0078);
static_assert(offsetof(UParticleModuleKillHeight, Height) == 0x0030);
static_assert(offsetof(UParticleModuleLifetime, LifeTime) == 0x0030);
static_assert(offsetof(UParticleModuleLifetime_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleLight, ColorScaleOverLife) == 0x0038);
static_assert(offsetof(UParticleModuleLight, BrightnessOverLife) == 0x0080);
static_assert(offsetof(UParticleModuleLight, RadiusScale) == 0x00B0);
static_assert(offsetof(UParticleModuleLight, LightExponent) == 0x00E0);
static_assert(offsetof(UParticleModuleLight, LightingChannels) == 0x0110);
static_assert(offsetof(UParticleModuleLight_Seeded, RandomSeedInfo) == 0x0120);
static_assert(offsetof(UParticleModuleLocation, StartLocation) == 0x0030);
static_assert(offsetof(UParticleModuleLocation_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(FLocationBoneSocketInfo, BoneSocketName) == 0x0000);
static_assert(offsetof(FLocationBoneSocketInfo, Offset) == 0x0008);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SourceType) == 0x0030);
static_assert(offsetof(UParticleModuleLocationBoneSocket, UniversalOffset) == 0x0034);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SourceLocations) == 0x0040);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SelectionMethod) == 0x0050);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SkelMeshActorParamName) == 0x005C);
static_assert(offsetof(UParticleModuleLocationDirect, Location) == 0x0030);
static_assert(offsetof(UParticleModuleLocationDirect, LocationOffset) == 0x0078);
static_assert(offsetof(UParticleModuleLocationDirect, ScaleFactor) == 0x00C0);
static_assert(offsetof(UParticleModuleLocationDirect, Direction) == 0x0108);
static_assert(offsetof(UParticleModuleLocationEmitter, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleLocationEmitter, SelectionMethod) == 0x0038);
static_assert(offsetof(UParticleModuleLocationEmitterDirect, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleLocationPrimitiveBase, VelocityScale) == 0x0038);
static_assert(offsetof(UParticleModuleLocationPrimitiveBase, StartLocation) == 0x0068);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, StartRadius) == 0x00B8);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, StartHeight) == 0x00E8);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, HeightAxis) == 0x0118);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo) == 0x0120);
static_assert(offsetof(UParticleModuleLocationPrimitiveSphere, StartRadius) == 0x00B0);
static_assert(offsetof(UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo) == 0x00E0);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, StartOffset) == 0x0030);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, Height) == 0x0078);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, Angle) == 0x00A8);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, Thickness) == 0x00D8);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, SourceType) == 0x0030);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, UniversalOffset) == 0x0034);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName) == 0x0048);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, ValidAssociatedBones) == 0x0050);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, NormalToCompare) == 0x0064);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, ValidMaterialIndices) == 0x0078);
static_assert(offsetof(UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(UParticleModuleMeshMaterial, MeshMaterials) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotation, StartRotation) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotation_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(UParticleModuleMeshRotationRate, StartRotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo) == 0x0078);
static_assert(offsetof(UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotationRateOverLife, RotRate) == 0x0030);
static_assert(offsetof(UParticleModuleOrbit, ChainMode) == 0x0038);
static_assert(offsetof(UParticleModuleOrbit, OffsetAmount) == 0x0040);
static_assert(offsetof(UParticleModuleOrbit, OffsetOptions) == 0x0088);
static_assert(offsetof(UParticleModuleOrbit, RotationAmount) == 0x0090);
static_assert(offsetof(UParticleModuleOrbit, RotationOptions) == 0x00D8);
static_assert(offsetof(UParticleModuleOrbit, RotationRateAmount) == 0x00E0);
static_assert(offsetof(UParticleModuleOrbit, RotationRateOptions) == 0x0128);
static_assert(offsetof(UParticleModuleOrientationAxisLock, LockAxisFlags) == 0x0030);
static_assert(offsetof(FEmitterDynamicParameter, paramName) == 0x0000);
static_assert(offsetof(FEmitterDynamicParameter, ValueMethod) == 0x000C);
static_assert(offsetof(FEmitterDynamicParameter, ParamValue) == 0x0018);
static_assert(offsetof(UParticleModuleParameterDynamic, DynamicParams) == 0x0030);
static_assert(offsetof(UParticleModuleParameterDynamic_Seeded, RandomSeedInfo) == 0x0048);
static_assert(offsetof(UParticleModulePivotOffset, PivotOffset) == 0x0030);
static_assert(offsetof(UParticleModuleRequired, Material) == 0x0030);
static_assert(offsetof(UParticleModuleRequired, EmitterOrigin) == 0x0040);
static_assert(offsetof(UParticleModuleRequired, EmitterRotation) == 0x004C);
static_assert(offsetof(UParticleModuleRequired, ScreenAlignment) == 0x0058);
static_assert(offsetof(UParticleModuleRequired, SortMode) == 0x005A);
static_assert(offsetof(UParticleModuleRequired, SpawnRate) == 0x0060);
static_assert(offsetof(UParticleModuleRequired, BurstList) == 0x0090);
static_assert(offsetof(UParticleModuleRequired, InterpolationMethod) == 0x00A9);
static_assert(offsetof(UParticleModuleRequired, ParticleBurstMethod) == 0x00AB);
static_assert(offsetof(UParticleModuleRequired, OpacitySourceMode) == 0x00AD);
static_assert(offsetof(UParticleModuleRequired, EmitterNormalsMode) == 0x00AE);
static_assert(offsetof(UParticleModuleRequired, MacroUVPosition) == 0x00C0);
static_assert(offsetof(UParticleModuleRequired, UVFlippingMode) == 0x00D0);
static_assert(offsetof(UParticleModuleRequired, BoundingMode) == 0x00D1);
static_assert(offsetof(UParticleModuleRequired, NormalsSphereCenter) == 0x00D4);
static_assert(offsetof(UParticleModuleRequired, CutoutTexture) == 0x00E8);
static_assert(offsetof(UParticleModuleRequired, NormalsCylinderDirection) == 0x00F8);
static_assert(offsetof(UParticleModuleRequired, NamedMaterialOverrides) == 0x0108);
static_assert(offsetof(UParticleModuleRotation, StartRotation) == 0x0030);
static_assert(offsetof(UParticleModuleRotation_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleRotationOverLifetime, RotationOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleRotationRate, StartRotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleRotationRate_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleRotationRateMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleSize, StartSize) == 0x0030);
static_assert(offsetof(UParticleModuleSize_Seeded, RandomSeedInfo) == 0x0078);
static_assert(offsetof(UParticleModuleSizeMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScale, SizeScale) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScaleBySpeed, SpeedScale) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScaleBySpeed, MaxScale) == 0x0038);
static_assert(offsetof(UParticleModuleSourceMovement, SourceMovementScale) == 0x0030);
static_assert(offsetof(UParticleModuleSpawn, Rate) == 0x0038);
static_assert(offsetof(UParticleModuleSpawn, RateScale) == 0x0068);
static_assert(offsetof(UParticleModuleSpawn, ParticleBurstMethod) == 0x0098);
static_assert(offsetof(UParticleModuleSpawn, BurstList) == 0x00A0);
static_assert(offsetof(UParticleModuleSpawn, BurstScale) == 0x00B0);
static_assert(offsetof(UParticleModuleSpawnPerUnit, SpawnPerUnit) == 0x0040);
static_assert(offsetof(UParticleModuleSubUV, Animation) == 0x0030);
static_assert(offsetof(UParticleModuleSubUV, SubImageIndex) == 0x0038);
static_assert(offsetof(UParticleModuleSubUVMovie, FrameRate) == 0x0078);
static_assert(offsetof(UParticleModuleTrailSource, SourceMethod) == 0x0030);
static_assert(offsetof(UParticleModuleTrailSource, SourceName) == 0x0034);
static_assert(offsetof(UParticleModuleTrailSource, SourceStrength) == 0x0040);
static_assert(offsetof(UParticleModuleTrailSource, SourceOffsetDefaults) == 0x0078);
static_assert(offsetof(UParticleModuleTrailSource, SelectionMethod) == 0x0088);
static_assert(offsetof(UParticleModuleTypeDataBeam2, BeamMethod) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataBeam2, BranchParentName) == 0x0054);
static_assert(offsetof(UParticleModuleTypeDataBeam2, Distance) == 0x0060);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperMethod) == 0x0090);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperFactor) == 0x0098);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperScale) == 0x00C8);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, Field) == 0x0000);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, Transform) == 0x0010);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, MinInitialRotation) == 0x0040);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation) == 0x004C);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, RotationRate) == 0x0058);
static_assert(offsetof(FFloatDistribution, Table) == 0x0000);
static_assert(offsetof(FGPUSpriteEmitterInfo, RequiredModule) == 0x0000);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnModule) == 0x0008);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnPerUnitModule) == 0x0010);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnModules) == 0x0018);
static_assert(offsetof(FGPUSpriteEmitterInfo, LocalVectorField) == 0x0030);
static_assert(offsetof(FGPUSpriteEmitterInfo, VectorFieldScale) == 0x00A0);
static_assert(offsetof(FGPUSpriteEmitterInfo, DragCoefficient) == 0x00C0);
static_assert(offsetof(FGPUSpriteEmitterInfo, PointAttractorStrength) == 0x00E0);
static_assert(offsetof(FGPUSpriteEmitterInfo, Resilience) == 0x0100);
static_assert(offsetof(FGPUSpriteEmitterInfo, ConstantAcceleration) == 0x0120);
static_assert(offsetof(FGPUSpriteEmitterInfo, PointAttractorPosition) == 0x012C);
static_assert(offsetof(FGPUSpriteEmitterInfo, OrbitOffsetBase) == 0x013C);
static_assert(offsetof(FGPUSpriteEmitterInfo, OrbitOffsetRange) == 0x0148);
static_assert(offsetof(FGPUSpriteEmitterInfo, InvMaxSize) == 0x0154);
static_assert(offsetof(FGPUSpriteEmitterInfo, ScreenAlignment) == 0x0168);
static_assert(offsetof(FGPUSpriteEmitterInfo, LockAxisFlag) == 0x0169);
static_assert(offsetof(FGPUSpriteEmitterInfo, CollisionMode) == 0x0170);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicColor) == 0x0180);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicAlpha) == 0x01C8);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicColorScale) == 0x01F8);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicAlphaScale) == 0x0240);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedColorSamples) == 0x0000);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedMiscSamples) == 0x0010);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedSimulationAttrSamples) == 0x0020);
static_assert(offsetof(FGPUSpriteResourceData, ColorScale) == 0x0030);
static_assert(offsetof(FGPUSpriteResourceData, ColorBias) == 0x0040);
static_assert(offsetof(FGPUSpriteResourceData, MiscScale) == 0x0050);
static_assert(offsetof(FGPUSpriteResourceData, MiscBias) == 0x0060);
static_assert(offsetof(FGPUSpriteResourceData, SimulationAttrCurveScale) == 0x0070);
static_assert(offsetof(FGPUSpriteResourceData, SimulationAttrCurveBias) == 0x0080);
static_assert(offsetof(FGPUSpriteResourceData, SubImageSize) == 0x0090);
static_assert(offsetof(FGPUSpriteResourceData, SizeBySpeed) == 0x00A0);
static_assert(offsetof(FGPUSpriteResourceData, ConstantAcceleration) == 0x00B0);
static_assert(offsetof(FGPUSpriteResourceData, OrbitOffsetBase) == 0x00BC);
static_assert(offsetof(FGPUSpriteResourceData, OrbitOffsetRange) == 0x00C8);
static_assert(offsetof(FGPUSpriteResourceData, OrbitFrequencyBase) == 0x00D4);
static_assert(offsetof(FGPUSpriteResourceData, OrbitFrequencyRange) == 0x00E0);
static_assert(offsetof(FGPUSpriteResourceData, OrbitPhaseBase) == 0x00EC);
static_assert(offsetof(FGPUSpriteResourceData, OrbitPhaseRange) == 0x00F8);
static_assert(offsetof(FGPUSpriteResourceData, ScreenAlignment) == 0x0144);
static_assert(offsetof(FGPUSpriteResourceData, LockAxisFlag) == 0x0145);
static_assert(offsetof(FGPUSpriteResourceData, PivotOffset) == 0x0148);
static_assert(offsetof(UParticleModuleTypeDataGpu, EmitterInfo) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataGpu, ResourceData) == 0x02B0);
static_assert(offsetof(UParticleModuleTypeDataMesh, Mesh) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataMesh, MeshAlignment) == 0x0045);
static_assert(offsetof(UParticleModuleTypeDataMesh, RollPitchYawRange) == 0x0048);
static_assert(offsetof(UParticleModuleTypeDataMesh, AxisLockOption) == 0x0090);
static_assert(offsetof(UParticleModuleTypeDataMesh, CameraFacingUpAxisOption) == 0x0092);
static_assert(offsetof(UParticleModuleTypeDataMesh, CameraFacingOption) == 0x0093);
static_assert(offsetof(UParticleModuleTypeDataRibbon, RenderAxis) == 0x0044);
static_assert(offsetof(UParticleModuleVectorFieldLocal, VectorField) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeTranslation) == 0x0038);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeRotation) == 0x0044);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeScale3D) == 0x0050);
static_assert(offsetof(UParticleModuleVectorFieldRotation, MinInitialRotation) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldRotation, MaxInitialRotation) == 0x003C);
static_assert(offsetof(UParticleModuleVectorFieldRotationRate, RotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScale, VectorFieldScale) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScale, VectorFieldScaleRaw) == 0x0038);
static_assert(offsetof(UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw) == 0x0038);
static_assert(offsetof(UParticleModuleVelocity, StartVelocity) == 0x0038);
static_assert(offsetof(UParticleModuleVelocity, StartVelocityRadial) == 0x0080);
static_assert(offsetof(UParticleModuleVelocity_Seeded, RandomSeedInfo) == 0x00B0);
static_assert(offsetof(UParticleModuleVelocityCone, Angle) == 0x0038);
static_assert(offsetof(UParticleModuleVelocityCone, Velocity) == 0x0068);
static_assert(offsetof(UParticleModuleVelocityCone, Direction) == 0x0098);
static_assert(offsetof(UParticleModuleVelocityInheritParent, Scale) == 0x0038);
static_assert(offsetof(UParticleModuleVelocityOverLifetime, VelOverLife) == 0x0038);
static_assert(offsetof(FParticleSysParam, Name) == 0x0000);
static_assert(offsetof(FParticleSysParam, ParamType) == 0x0008);
static_assert(offsetof(FParticleSysParam, Vector) == 0x0014);
static_assert(offsetof(FParticleSysParam, Vector_Low) == 0x0020);
static_assert(offsetof(FParticleSysParam, Color) == 0x002C);
static_assert(offsetof(FParticleSysParam, Actor) == 0x0030);
static_assert(offsetof(FParticleSysParam, Material) == 0x0038);
static_assert(offsetof(UParticleSystemComponent, Template) == 0x0450);
static_assert(offsetof(UParticleSystemComponent, EmitterMaterials) == 0x0458);
static_assert(offsetof(UParticleSystemComponent, SkelMeshComponents) == 0x0468);
static_assert(offsetof(UParticleSystemComponent, LODMethod) == 0x0485);
static_assert(offsetof(UParticleSystemComponent, RequiredSignificance) == 0x0486);
static_assert(offsetof(UParticleSystemComponent, InstanceParameters) == 0x0488);
static_assert(offsetof(UParticleSystemComponent, OldPosition) == 0x04DC);
static_assert(offsetof(UParticleSystemComponent, PartSysVelocity) == 0x04E8);
static_assert(offsetof(UParticleSystemComponent, ReplayClips) == 0x0528);
static_assert(offsetof(UParticleSystemComponent, AutoAttachSocketName) == 0x05A0);
static_assert(offsetof(UParticleSystemComponent, AutoAttachLocationRule) == 0x05A8);
static_assert(offsetof(UParticleSystemComponent, AutoAttachRotationRule) == 0x05A9);
static_assert(offsetof(UParticleSystemComponent, AutoAttachScaleRule) == 0x05AA);
static_assert(offsetof(UPawnNoiseEmitterComponent, LastRemoteNoisePosition) == 0x00B4);
static_assert(offsetof(UPhysicalAnimationComponent, SkeletalMeshComponent) == 0x00B8);
static_assert(offsetof(UPhysicalMaterialMask, AddressX) == 0x002C);
static_assert(offsetof(UPhysicalMaterialMask, AddressY) == 0x002D);
static_assert(offsetof(UPhysicsAsset, BoundsBodies) == 0x0030);
static_assert(offsetof(UPhysicsAsset, SkeletalBodySetups) == 0x0040);
static_assert(offsetof(UPhysicsAsset, ConstraintSetup) == 0x0050);
static_assert(offsetof(UPhysicsAsset, SolverIterations) == 0x0060);
static_assert(offsetof(UPhysicsAsset, SolverType) == 0x007C);
static_assert(offsetof(UPhysicsAsset, ThumbnailInfo) == 0x0120);
static_assert(offsetof(UPhysicsAsset, BodySetup) == 0x0128);
static_assert(offsetof(FPhysicalAnimationData, BodyName) == 0x0000);
static_assert(offsetof(FPhysicalAnimationProfile, ProfileName) == 0x0000);
static_assert(offsetof(FPhysicalAnimationProfile, PhysicalAnimationData) == 0x0008);
static_assert(offsetof(USkeletalBodySetup, PhysicalAnimationData) == 0x02A8);
static_assert(offsetof(UPhysicsCollisionHandler, DefaultImpactSound) == 0x0030);
static_assert(offsetof(APhysicsConstraintActor, ConstraintComp) == 0x0220);
static_assert(offsetof(APhysicsConstraintActor, ConstraintActor1) == 0x0228);
static_assert(offsetof(APhysicsConstraintActor, ConstraintActor2) == 0x0230);
static_assert(offsetof(FConstrainComponentPropName, ComponentName) == 0x0000);
static_assert(offsetof(FLinearConstraint, XMotion) == 0x0018);
static_assert(offsetof(FLinearConstraint, YMotion) == 0x0019);
static_assert(offsetof(FLinearConstraint, ZMotion) == 0x001A);
static_assert(offsetof(FConeConstraint, Swing1Motion) == 0x001C);
static_assert(offsetof(FConeConstraint, Swing2Motion) == 0x001D);
static_assert(offsetof(FTwistConstraint, TwistMotion) == 0x0018);
static_assert(offsetof(FLinearDriveConstraint, PositionTarget) == 0x0000);
static_assert(offsetof(FLinearDriveConstraint, VelocityTarget) == 0x000C);
static_assert(offsetof(FLinearDriveConstraint, XDrive) == 0x0018);
static_assert(offsetof(FLinearDriveConstraint, YDrive) == 0x0028);
static_assert(offsetof(FLinearDriveConstraint, ZDrive) == 0x0038);
static_assert(offsetof(FAngularDriveConstraint, TwistDrive) == 0x0000);
static_assert(offsetof(FAngularDriveConstraint, SwingDrive) == 0x0010);
static_assert(offsetof(FAngularDriveConstraint, SlerpDrive) == 0x0020);
static_assert(offsetof(FAngularDriveConstraint, OrientationTarget) == 0x0030);
static_assert(offsetof(FAngularDriveConstraint, AngularVelocityTarget) == 0x003C);
static_assert(offsetof(FAngularDriveConstraint, AngularDriveMode) == 0x0048);
static_assert(offsetof(FConstraintProfileProperties, LinearLimit) == 0x0020);
static_assert(offsetof(FConstraintProfileProperties, ConeLimit) == 0x003C);
static_assert(offsetof(FConstraintProfileProperties, TwistLimit) == 0x005C);
static_assert(offsetof(FConstraintProfileProperties, LinearDrive) == 0x0078);
static_assert(offsetof(FConstraintProfileProperties, AngularDrive) == 0x00C4);
static_assert(offsetof(FConstraintInstance, JointName) == 0x0018);
static_assert(offsetof(FConstraintInstance, ConstraintBone1) == 0x0020);
static_assert(offsetof(FConstraintInstance, ConstraintBone2) == 0x0028);
static_assert(offsetof(FConstraintInstance, Pos1) == 0x0030);
static_assert(offsetof(FConstraintInstance, PriAxis1) == 0x003C);
static_assert(offsetof(FConstraintInstance, SecAxis1) == 0x0048);
static_assert(offsetof(FConstraintInstance, Pos2) == 0x0054);
static_assert(offsetof(FConstraintInstance, PriAxis2) == 0x0060);
static_assert(offsetof(FConstraintInstance, SecAxis2) == 0x006C);
static_assert(offsetof(FConstraintInstance, AngularRotationOffset) == 0x0078);
static_assert(offsetof(FConstraintInstance, ProfileInstance) == 0x008C);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintActor1) == 0x01F8);
static_assert(offsetof(UPhysicsConstraintComponent, ComponentName1) == 0x0200);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintActor2) == 0x0208);
static_assert(offsetof(UPhysicsConstraintComponent, ComponentName2) == 0x0210);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintSetup) == 0x0228);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintInstance) == 0x0240);
static_assert(offsetof(FPhysicsConstraintProfileHandle, ProfileProperties) == 0x0000);
static_assert(offsetof(FPhysicsConstraintProfileHandle, ProfileName) == 0x0114);
static_assert(offsetof(UPhysicsConstraintTemplate, DefaultInstance) == 0x0028);
static_assert(offsetof(UPhysicsConstraintTemplate, ProfileHandles) == 0x01F0);
static_assert(offsetof(UPhysicsConstraintTemplate, DefaultProfile) == 0x0200);
static_assert(offsetof(UPhysicsHandleComponent, GrabbedComponent) == 0x00B0);
static_assert(offsetof(FPhysicalSurfaceName, Type) == 0x0000);
static_assert(offsetof(FPhysicalSurfaceName, Name) == 0x0004);
static_assert(offsetof(FBroadphaseSettings, MBPBounds) == 0x0004);
static_assert(offsetof(FBroadphaseSettings, MBPOuterBounds) == 0x0020);
static_assert(offsetof(FChaosPhysicsSettings, DefaultThreadingModel) == 0x0000);
static_assert(offsetof(FChaosPhysicsSettings, DedicatedThreadTickMode) == 0x0001);
static_assert(offsetof(FChaosPhysicsSettings, DedicatedThreadBufferMode) == 0x0002);
static_assert(offsetof(UPhysicsSettings, PhysicErrorCorrection) == 0x00E0);
static_assert(offsetof(UPhysicsSettings, LockedAxis) == 0x0114);
static_assert(offsetof(UPhysicsSettings, DefaultDegreesOfFreedom) == 0x0115);
static_assert(offsetof(UPhysicsSettings, PhysicalSurfaces) == 0x0148);
static_assert(offsetof(UPhysicsSettings, DefaultBroadphaseSettings) == 0x0158);
static_assert(offsetof(UPhysicsSettings, ChaosSettings) == 0x019C);
static_assert(offsetof(UPhysicsSpringComponent, SpringChannel) == 0x0208);
static_assert(offsetof(APhysicsThruster, ThrusterComponent) == 0x0220);
static_assert(offsetof(ASceneCapture, MeshComp) == 0x0220);
static_assert(offsetof(ASceneCapture, SceneComponent) == 0x0228);
static_assert(offsetof(APlanarReflection, PlanarReflectionComponent) == 0x0230);
static_assert(offsetof(FEngineShowFlagsSetting, ShowFlagName) == 0x0000);
static_assert(offsetof(USceneCaptureComponent, PrimitiveRenderMode) == 0x01F8);
static_assert(offsetof(USceneCaptureComponent, CaptureSource) == 0x01F9);
static_assert(offsetof(USceneCaptureComponent, HiddenActors) == 0x0210);
static_assert(offsetof(USceneCaptureComponent, ShowOnlyActors) == 0x0230);
static_assert(offsetof(USceneCaptureComponent, ShowFlagSettings) == 0x0250);
static_assert(offsetof(USceneCaptureComponent, ProfilingEventName) == 0x0290);
static_assert(offsetof(UPlanarReflectionComponent, PreviewBox) == 0x02B0);
static_assert(offsetof(UPlaneReflectionCaptureComponent, PreviewInfluenceRadius) == 0x0278);
static_assert(offsetof(UPlaneReflectionCaptureComponent, PreviewCaptureBox) == 0x0280);
static_assert(offsetof(UPlatformInterfaceWebResponse, OriginalURL) == 0x0028);
static_assert(offsetof(UPlatformInterfaceWebResponse, StringResponse) == 0x0040);
static_assert(offsetof(UPlatformInterfaceWebResponse, BinaryResponse) == 0x0050);
static_assert(offsetof(FKeyBind, Key) == 0x0000);
static_assert(offsetof(FKeyBind, Command) == 0x0018);
static_assert(offsetof(UPlayerInput, DebugExecBindings) == 0x0120);
static_assert(offsetof(UPlayerInput, InvertedAxis) == 0x0160);
static_assert(offsetof(APointLight, PointLightComponent) == 0x0230);
static_assert(offsetof(FPoseData, LocalSpacePose) == 0x0000);
static_assert(offsetof(FPoseData, CurveData) == 0x0060);
static_assert(offsetof(FPoseDataContainer, PoseNames) == 0x0000);
static_assert(offsetof(FPoseDataContainer, Tracks) == 0x0010);
static_assert(offsetof(FPoseDataContainer, Poses) == 0x0070);
static_assert(offsetof(FPoseDataContainer, Curves) == 0x0080);
static_assert(offsetof(UPoseAsset, PoseContainer) == 0x0080);
static_assert(offsetof(UPoseAsset, RetargetSource) == 0x0118);
static_assert(offsetof(UPoseAsset, RetargetSourceAssetReferencePose) == 0x0120);
static_assert(offsetof(UPoseWatch, Node) == 0x0028);
static_assert(offsetof(UPoseWatch, PoseWatchColour) == 0x0030);
static_assert(offsetof(APostProcessVolume, Settings) == 0x0260);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideVisibleActors) == 0x0258);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors) == 0x0268);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels) == 0x0278);
static_assert(offsetof(UPreviewMeshCollection, Skeleton) == 0x0038);
static_assert(offsetof(UPreviewMeshCollection, SkeletalMeshes) == 0x0040);
static_assert(offsetof(FCollectionReference, CollectionName) == 0x0000);
static_assert(offsetof(UPrimaryAssetLabel, Rules) == 0x0030);
static_assert(offsetof(UPrimaryAssetLabel, AssetCollection) == 0x0060);
static_assert(offsetof(UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName) == 0x0038);
static_assert(offsetof(ARadialForceActor, ForceComponent) == 0x0220);
static_assert(offsetof(URadialForceComponent, Falloff) == 0x01FC);
static_assert(offsetof(ARectLight, RectLightComponent) == 0x0230);
static_assert(offsetof(URectLightComponent, SourceTexture) == 0x0350);
static_assert(offsetof(URendererSettings, MobileMSAASampleCount) == 0x0040);
static_assert(offsetof(URendererSettings, TranslucentSortPolicy) == 0x0078);
static_assert(offsetof(URendererSettings, TranslucentSortAxis) == 0x007C);
static_assert(offsetof(URendererSettings, HMDFixedFoveationLevel) == 0x0088);
static_assert(offsetof(URendererSettings, CustomDepthStencil) == 0x0089);
static_assert(offsetof(URendererSettings, bEnableAlphaChannelInPostProcessing) == 0x0090);
static_assert(offsetof(URendererSettings, DefaultFeatureAutoExposure) == 0x0098);
static_assert(offsetof(URendererSettings, DefaultFeatureAntiAliasing) == 0x00A4);
static_assert(offsetof(URendererSettings, DefaultLightUnits) == 0x00A5);
static_assert(offsetof(URendererSettings, DefaultBackBufferPixelFormat) == 0x00A6);
static_assert(offsetof(URendererSettings, EarlyZPass) == 0x00AC);
static_assert(offsetof(URendererSettings, ClearSceneMethod) == 0x00B4);
static_assert(offsetof(URendererSettings, GBufferFormat) == 0x00C8);
static_assert(offsetof(URendererSettings, DefaultSkinCacheBehavior) == 0x00D8);
static_assert(offsetof(URendererSettings, MaxSkinBones) == 0x00F0);
static_assert(offsetof(URendererSettings, MobilePlanarReflectionMode) == 0x00F4);
static_assert(offsetof(URendererSettings, bStreamSkeletalMeshLODs) == 0x00FC);
static_assert(offsetof(URendererSettings, bDiscardSkeletalMeshOptionalLODs) == 0x00FD);
static_assert(offsetof(URendererSettings, VisualizeCalibrationColorMaterialPath) == 0x0100);
static_assert(offsetof(URendererSettings, VisualizeCalibrationCustomMaterialPath) == 0x0118);
static_assert(offsetof(URendererSettings, VisualizeCalibrationGrayscaleMaterialPath) == 0x0130);
static_assert(offsetof(FRigTransformConstraint, TranformType) == 0x0000);
static_assert(offsetof(FRigTransformConstraint, ParentSpace) == 0x0004);
static_assert(offsetof(FTransformBaseConstraint, TransformConstraints) == 0x0000);
static_assert(offsetof(FTransformBase, Node) == 0x0000);
static_assert(offsetof(FTransformBase, Constraints) == 0x0008);
static_assert(offsetof(FNode, Name) == 0x0000);
static_assert(offsetof(FNode, ParentName) == 0x0008);
static_assert(offsetof(FNode, Transform) == 0x0010);
static_assert(offsetof(FNode, DisplayName) == 0x0040);
static_assert(offsetof(URig, TransformBases) == 0x0030);
static_assert(offsetof(URig, Nodes) == 0x0040);
static_assert(offsetof(URotatingMovementComponent, RotationRate) == 0x00F0);
static_assert(offsetof(URotatingMovementComponent, PivotTranslation) == 0x00FC);
static_assert(offsetof(URuntimeVirtualTexture, MaterialType) == 0x0034);
static_assert(offsetof(URuntimeVirtualTexture, LODGroup) == 0x0040);
static_assert(offsetof(URuntimeVirtualTexture, StreamingTexture) == 0x0048);
static_assert(offsetof(URuntimeVirtualTextureComponent, VirtualTexture) == 0x0228);
static_assert(offsetof(URuntimeVirtualTextureComponent, StreamingTexture) == 0x0240);
static_assert(offsetof(ARuntimeVirtualTextureVolume, VirtualTextureComponent) == 0x0220);
static_assert(offsetof(ASceneCapture2D, CaptureComponent2D) == 0x0230);
static_assert(offsetof(USceneCaptureComponent2D, ProjectionType) == 0x02B0);
static_assert(offsetof(USceneCaptureComponent2D, TextureTarget) == 0x02C0);
static_assert(offsetof(USceneCaptureComponent2D, CompositeMode) == 0x02C8);
static_assert(offsetof(USceneCaptureComponent2D, PostProcessSettings) == 0x02D0);
static_assert(offsetof(USceneCaptureComponent2D, CustomProjectionMatrix) == 0x0840);
static_assert(offsetof(USceneCaptureComponent2D, ClipPlaneBase) == 0x0884);
static_assert(offsetof(USceneCaptureComponent2D, ClipPlaneNormal) == 0x0890);
static_assert(offsetof(USceneCaptureComponentCube, TextureTarget) == 0x02B0);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetLeft) == 0x02C0);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetRight) == 0x02C8);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetODS) == 0x02D0);
static_assert(offsetof(ASceneCaptureCube, CaptureComponentCube) == 0x0230);
static_assert(offsetof(FBPVariableMetaDataEntry, DataKey) == 0x0000);
static_assert(offsetof(FBPVariableMetaDataEntry, DataValue) == 0x0008);
static_assert(offsetof(USCS_Node, ComponentClass) == 0x0028);
static_assert(offsetof(USCS_Node, ComponentTemplate) == 0x0030);
static_assert(offsetof(USCS_Node, CookedComponentInstancingData) == 0x0038);
static_assert(offsetof(USCS_Node, AttachToName) == 0x0080);
static_assert(offsetof(USCS_Node, ParentComponentOrVariableName) == 0x0088);
static_assert(offsetof(USCS_Node, ParentComponentOwnerClassName) == 0x0090);
static_assert(offsetof(USCS_Node, ChildNodes) == 0x00A0);
static_assert(offsetof(USCS_Node, MetaDataArray) == 0x00B0);
static_assert(offsetof(USCS_Node, VariableGuid) == 0x00C0);
static_assert(offsetof(USCS_Node, InternalVariableName) == 0x00D0);
static_assert(offsetof(UShadowMapTexture2D, ShadowmapFlags) == 0x01A0);
static_assert(offsetof(USimpleConstructionScript, RootNodes) == 0x0028);
static_assert(offsetof(USimpleConstructionScript, AllNodes) == 0x0038);
static_assert(offsetof(USimpleConstructionScript, DefaultSceneRootNode) == 0x0048);
static_assert(offsetof(FBoneFilter, BoneName) == 0x0004);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, ScreenSize) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BoneFilterActionOption) == 0x0008);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BoneList) == 0x0010);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BonesToPrioritize) == 0x0020);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BakePose) == 0x0038);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, ReductionSettings) == 0x0040);
static_assert(offsetof(USkeletalMeshLODSettings, MinLOD) == 0x0030);
static_assert(offsetof(USkeletalMeshLODSettings, DisableBelowMinLodStripping) == 0x0034);
static_assert(offsetof(USkeletalMeshLODSettings, bSupportLODStreaming) == 0x0036);
static_assert(offsetof(USkeletalMeshLODSettings, MaxNumStreamedLODs) == 0x0038);
static_assert(offsetof(USkeletalMeshLODSettings, MaxNumOptionalLODs) == 0x003C);
static_assert(offsetof(USkeletalMeshLODSettings, LODGroups) == 0x0040);
static_assert(offsetof(USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName) == 0x0038);
static_assert(offsetof(USkeletalMeshSocket, SocketName) == 0x0028);
static_assert(offsetof(USkeletalMeshSocket, BoneName) == 0x0030);
static_assert(offsetof(USkeletalMeshSocket, RelativeLocation) == 0x0038);
static_assert(offsetof(USkeletalMeshSocket, RelativeRotation) == 0x0044);
static_assert(offsetof(USkeletalMeshSocket, RelativeScale) == 0x0050);
static_assert(offsetof(USkyAtmosphereComponent, TransformMode) == 0x01F8);
static_assert(offsetof(USkyAtmosphereComponent, GroundAlbedo) == 0x0200);
static_assert(offsetof(USkyAtmosphereComponent, RayleighScattering) == 0x0214);
static_assert(offsetof(USkyAtmosphereComponent, MieScattering) == 0x022C);
static_assert(offsetof(USkyAtmosphereComponent, MieAbsorption) == 0x0240);
static_assert(offsetof(USkyAtmosphereComponent, OtherAbsorption) == 0x025C);
static_assert(offsetof(USkyAtmosphereComponent, OtherTentDistribution) == 0x026C);
static_assert(offsetof(USkyAtmosphereComponent, SkyLuminanceFactor) == 0x0278);
static_assert(offsetof(USkyAtmosphereComponent, bStaticLightingBuiltGUID) == 0x02BC);
static_assert(offsetof(ASkyAtmosphere, SkyAtmosphereComponent) == 0x0220);
static_assert(offsetof(USkyLightComponent, SourceType) == 0x0229);
static_assert(offsetof(USkyLightComponent, Cubemap) == 0x0230);
static_assert(offsetof(USkyLightComponent, LowerHemisphereColor) == 0x0248);
static_assert(offsetof(USkyLightComponent, OcclusionTint) == 0x0268);
static_assert(offsetof(USkyLightComponent, OcclusionCombineMode) == 0x0280);
static_assert(offsetof(USkyLightComponent, BlendDestinationCubemap) == 0x0328);
static_assert(offsetof(USlateBrushAsset, Brush) == 0x0028);
static_assert(offsetof(USoundAttenuation, Attenuation) == 0x0028);
static_assert(offsetof(FSoundClassProperties, ModulationSettings) == 0x0028);
static_assert(offsetof(FSoundClassProperties, OutputTarget) == 0x0068);
static_assert(offsetof(FSoundClassProperties, LoadingBehavior) == 0x0069);
static_assert(offsetof(FSoundClassProperties, DefaultSubmix) == 0x0070);
static_assert(offsetof(FPassiveSoundMixModifier, SoundMix) == 0x0000);
static_assert(offsetof(USoundClass, Properties) == 0x0028);
static_assert(offsetof(USoundClass, ChildClasses) == 0x00A0);
static_assert(offsetof(USoundClass, PassiveSoundMixModifiers) == 0x00B0);
static_assert(offsetof(USoundClass, ParentClass) == 0x00C0);
static_assert(offsetof(USoundConcurrency, Concurrency) == 0x0028);
static_assert(offsetof(USoundCue, FirstNode) == 0x0178);
static_assert(offsetof(USoundCue, AttenuationOverrides) == 0x0188);
static_assert(offsetof(FSourceEffectChainEntry, Preset) == 0x0000);
static_assert(offsetof(USoundEffectSourcePresetChain, Chain) == 0x0028);
static_assert(offsetof(FSoundGroup, SoundGroup) == 0x0000);
static_assert(offsetof(FSoundGroup, DisplayName) == 0x0008);
static_assert(offsetof(USoundGroups, SoundGroupProfiles) == 0x0028);
static_assert(offsetof(FSoundClassAdjuster, SoundClassObject) == 0x0000);
static_assert(offsetof(USoundMix, EQSettings) == 0x0030);
static_assert(offsetof(USoundMix, SoundClassEffects) == 0x0070);
static_assert(offsetof(USoundNodeAttenuation, AttenuationSettings) == 0x0048);
static_assert(offsetof(USoundNodeAttenuation, AttenuationOverrides) == 0x0050);
static_assert(offsetof(USoundNodeBranch, BoolParameterName) == 0x0048);
static_assert(offsetof(USoundNodeConcatenator, InputVolume) == 0x0048);
static_assert(offsetof(FDialogueWaveParameter, DialogueWave) == 0x0000);
static_assert(offsetof(FDialogueWaveParameter, Context) == 0x0008);
static_assert(offsetof(USoundNodeDialoguePlayer, DialogueWaveParameter) == 0x0048);
static_assert(offsetof(USoundNodeDistanceCrossFade, CrossFadeInput) == 0x0048);
static_assert(offsetof(USoundNodeEnveloper, VolumeInterpCurve) == 0x0060);
static_assert(offsetof(USoundNodeEnveloper, PitchInterpCurve) == 0x0068);
static_assert(offsetof(USoundNodeEnveloper, VolumeCurve) == 0x0070);
static_assert(offsetof(USoundNodeEnveloper, PitchCurve) == 0x00F8);
static_assert(offsetof(USoundNodeGroupControl, GroupSizes) == 0x0048);
static_assert(offsetof(USoundNodeMixer, InputVolume) == 0x0048);
static_assert(offsetof(FModulatorContinuousParams, ParameterName) == 0x0000);
static_assert(offsetof(FModulatorContinuousParams, ParamMode) == 0x001C);
static_assert(offsetof(USoundNodeModulatorContinuous, PitchModulationParams) == 0x0048);
static_assert(offsetof(USoundNodeModulatorContinuous, VolumeModulationParams) == 0x0068);
static_assert(offsetof(USoundNodeParamCrossFade, paramName) == 0x0058);
static_assert(offsetof(USoundNodeRandom, Weights) == 0x0048);
static_assert(offsetof(USoundNodeRandom, HasBeenUsed) == 0x0058);
static_assert(offsetof(USoundNodeSoundClass, SoundClassOverride) == 0x0048);
static_assert(offsetof(USoundNodeSwitch, IntParameterName) == 0x0048);
static_assert(offsetof(USoundNodeWaveParam, WaveParameterName) == 0x0048);
static_assert(offsetof(USoundNodeWavePlayer, SoundWave) == 0x0070);
static_assert(offsetof(USoundSourceBus, SourceBusChannels) == 0x0370);
static_assert(offsetof(USoundSourceBus, AudioBus) == 0x0378);
static_assert(offsetof(USoundSubmixBase, ChildSubmixes) == 0x0028);
static_assert(offsetof(USoundSubmixWithParentBase, ParentSubmix) == 0x0038);
static_assert(offsetof(USoundSubmix, SubmixEffectChain) == 0x0048);
static_assert(offsetof(USoundSubmix, AmbisonicsPluginSettings) == 0x0058);
static_assert(offsetof(USoundSubmix, GainMode) == 0x0068);
static_assert(offsetof(USoundSubmix, OutputVolumeModulation) == 0x0078);
static_assert(offsetof(USoundSubmix, WetLevelModulation) == 0x0088);
static_assert(offsetof(USoundSubmix, DryLevelModulation) == 0x0098);
static_assert(offsetof(USoundfieldSubmix, SoundfieldEncodingFormat) == 0x0040);
static_assert(offsetof(USoundfieldSubmix, EncodingSettings) == 0x0048);
static_assert(offsetof(USoundfieldSubmix, SoundfieldEffectChain) == 0x0050);
static_assert(offsetof(USoundfieldSubmix, EncodingSettingsClass) == 0x0060);
static_assert(offsetof(UEndpointSubmix, EndpointType) == 0x0038);
static_assert(offsetof(UEndpointSubmix, EndpointSettingsClass) == 0x0040);
static_assert(offsetof(UEndpointSubmix, EndpointSettings) == 0x0048);
static_assert(offsetof(USoundfieldEndpointSubmix, SoundfieldEndpointType) == 0x0038);
static_assert(offsetof(USoundfieldEndpointSubmix, EndpointSettingsClass) == 0x0040);
static_assert(offsetof(USoundfieldEndpointSubmix, EndpointSettings) == 0x0048);
static_assert(offsetof(USoundfieldEndpointSubmix, EncodingSettingsClass) == 0x0050);
static_assert(offsetof(USoundfieldEndpointSubmix, EncodingSettings) == 0x0058);
static_assert(offsetof(USoundfieldEndpointSubmix, SoundfieldEffectChain) == 0x0060);
static_assert(offsetof(ASphereReflectionCapture, DrawCaptureRadius) == 0x0228);
static_assert(offsetof(USphereReflectionCaptureComponent, PreviewInfluenceRadius) == 0x0278);
static_assert(offsetof(ASplineMeshActor, SplineMeshComponent) == 0x0220);
static_assert(offsetof(FSplineMeshParams, StartPos) == 0x0000);
static_assert(offsetof(FSplineMeshParams, StartTangent) == 0x000C);
static_assert(offsetof(FSplineMeshParams, StartScale) == 0x0018);
static_assert(offsetof(FSplineMeshParams, StartOffset) == 0x0024);
static_assert(offsetof(FSplineMeshParams, EndPos) == 0x002C);
static_assert(offsetof(FSplineMeshParams, EndScale) == 0x0038);
static_assert(offsetof(FSplineMeshParams, EndTangent) == 0x0040);
static_assert(offsetof(FSplineMeshParams, EndOffset) == 0x0050);
static_assert(offsetof(USplineMeshComponent, SplineParams) == 0x04E8);
static_assert(offsetof(USplineMeshComponent, SplineUpDir) == 0x0540);
static_assert(offsetof(USplineMeshComponent, CachedMeshBodySetupGuid) == 0x0550);
static_assert(offsetof(USplineMeshComponent, BodySetup) == 0x0560);
static_assert(offsetof(USplineMeshComponent, ForwardAxis) == 0x056D);
static_assert(offsetof(FStaticMaterial, MaterialInterface) == 0x0000);
static_assert(offsetof(FStaticMaterial, MaterialSlotName) == 0x0008);
static_assert(offsetof(FStaticMaterial, ImportedMaterialSlotName) == 0x0010);
static_assert(offsetof(FStaticMaterial, UVChannelData) == 0x0018);
static_assert(offsetof(UStaticMesh, MinLOD) == 0x0080);
static_assert(offsetof(UStaticMesh, StaticMaterials) == 0x0088);
static_assert(offsetof(UStaticMesh, BodySetup) == 0x00A8);
static_assert(offsetof(UStaticMesh, Sockets) == 0x00D8);
static_assert(offsetof(UStaticMesh, PositiveBoundsExtension) == 0x00F8);
static_assert(offsetof(UStaticMesh, NegativeBoundsExtension) == 0x0104);
static_assert(offsetof(UStaticMesh, ExtendedBounds) == 0x0110);
static_assert(offsetof(UStaticMesh, AssetUserData) == 0x0130);
static_assert(offsetof(UStaticMesh, EditableMesh) == 0x0140);
static_assert(offsetof(UStaticMesh, NavCollision) == 0x0148);
static_assert(offsetof(UStaticMeshSocket, SocketName) == 0x0028);
static_assert(offsetof(UStaticMeshSocket, RelativeLocation) == 0x0030);
static_assert(offsetof(UStaticMeshSocket, RelativeRotation) == 0x003C);
static_assert(offsetof(UStaticMeshSocket, RelativeScale) == 0x0048);
static_assert(offsetof(UStaticMeshSocket, Tag) == 0x0058);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftUVRect) == 0x0028);
static_assert(offsetof(UStereoLayerShapeEquirect, RightUVRect) == 0x003C);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftScale) == 0x0050);
static_assert(offsetof(UStereoLayerShapeEquirect, RightScale) == 0x0058);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftBias) == 0x0060);
static_assert(offsetof(UStereoLayerShapeEquirect, RightBias) == 0x0068);
static_assert(offsetof(FEquirectProps, LeftUVRect) == 0x0000);
static_assert(offsetof(FEquirectProps, RightUVRect) == 0x0014);
static_assert(offsetof(FEquirectProps, LeftScale) == 0x0028);
static_assert(offsetof(FEquirectProps, RightScale) == 0x0030);
static_assert(offsetof(FEquirectProps, LeftBias) == 0x0038);
static_assert(offsetof(FEquirectProps, RightBias) == 0x0040);
static_assert(offsetof(UStereoLayerComponent, Texture) == 0x0200);
static_assert(offsetof(UStereoLayerComponent, LeftTexture) == 0x0208);
static_assert(offsetof(UStereoLayerComponent, QuadSize) == 0x0214);
static_assert(offsetof(UStereoLayerComponent, UVRect) == 0x021C);
static_assert(offsetof(UStereoLayerComponent, EquirectProps) == 0x023C);
static_assert(offsetof(UStereoLayerComponent, StereoLayerType) == 0x0284);
static_assert(offsetof(UStereoLayerComponent, StereoLayerShape) == 0x0285);
static_assert(offsetof(UStereoLayerComponent, Shape) == 0x0288);
static_assert(offsetof(FSubsurfaceProfileStruct, SurfaceAlbedo) == 0x0000);
static_assert(offsetof(FSubsurfaceProfileStruct, MeanFreePathColor) == 0x0010);
static_assert(offsetof(FSubsurfaceProfileStruct, SubsurfaceColor) == 0x0030);
static_assert(offsetof(FSubsurfaceProfileStruct, FalloffColor) == 0x0040);
static_assert(offsetof(FSubsurfaceProfileStruct, BoundaryColorBleed) == 0x0050);
static_assert(offsetof(FSubsurfaceProfileStruct, TransmissionTintColor) == 0x007C);
static_assert(offsetof(USubsurfaceProfile, Settings) == 0x0028);
static_assert(offsetof(USubUVAnimation, SubUVTexture) == 0x0028);
static_assert(offsetof(USubUVAnimation, BoundingMode) == 0x0038);
static_assert(offsetof(USubUVAnimation, OpacitySourceMode) == 0x0039);
static_assert(offsetof(USystemTimeTimecodeProvider, FrameRate) == 0x0030);
static_assert(offsetof(UTextPropertyTestObject, DefaultedText) == 0x0028);
static_assert(offsetof(UTextPropertyTestObject, UndefaultedText) == 0x0040);
static_assert(offsetof(UTextPropertyTestObject, TransientText) == 0x0058);
static_assert(offsetof(ATextRenderActor, TextRender) == 0x0220);
static_assert(offsetof(UTextRenderComponent, Text) == 0x0450);
static_assert(offsetof(UTextRenderComponent, TextMaterial) == 0x0468);
static_assert(offsetof(UTextRenderComponent, Font) == 0x0470);
static_assert(offsetof(UTextRenderComponent, HorizontalAlignment) == 0x0478);
static_assert(offsetof(UTextRenderComponent, VerticalAlignment) == 0x0479);
static_assert(offsetof(UTextRenderComponent, TextRenderColor) == 0x047C);
static_assert(offsetof(UTexture2DArray, AddressX) == 0x01D0);
static_assert(offsetof(UTexture2DArray, AddressY) == 0x01D1);
static_assert(offsetof(UTexture2DArray, AddressZ) == 0x01D2);
static_assert(offsetof(UTexture2DDynamic, Format) == 0x0180);
static_assert(offsetof(UTextureRenderTarget2DArray, ClearColor) == 0x018C);
static_assert(offsetof(UTextureRenderTarget2DArray, OverrideFormat) == 0x019C);
static_assert(offsetof(UTextureRenderTargetCube, ClearColor) == 0x0184);
static_assert(offsetof(UTextureRenderTargetCube, OverrideFormat) == 0x0194);
static_assert(offsetof(UTextureRenderTargetVolume, ClearColor) == 0x018C);
static_assert(offsetof(UTextureRenderTargetVolume, OverrideFormat) == 0x019C);
static_assert(offsetof(FTimelineVectorTrack, VectorCurve) == 0x0000);
static_assert(offsetof(FTimelineVectorTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineVectorTrack, VectorPropertyName) == 0x0020);
static_assert(offsetof(FTimelineFloatTrack, FloatCurve) == 0x0000);
static_assert(offsetof(FTimelineFloatTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineFloatTrack, FloatPropertyName) == 0x0020);
static_assert(offsetof(FTimelineLinearColorTrack, LinearColorCurve) == 0x0000);
static_assert(offsetof(FTimelineLinearColorTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineLinearColorTrack, LinearColorPropertyName) == 0x0020);
static_assert(offsetof(FTimeline, LengthMode) == 0x0000);
static_assert(offsetof(FTimeline, Events) == 0x0010);
static_assert(offsetof(FTimeline, InterpVectors) == 0x0020);
static_assert(offsetof(FTimeline, InterpFloats) == 0x0030);
static_assert(offsetof(FTimeline, InterpLinearColors) == 0x0040);
static_assert(offsetof(FTimeline, DirectionPropertyName) == 0x0078);
static_assert(offsetof(UTimelineComponent, TheTimeline) == 0x00B0);
static_assert(offsetof(FTTTrackBase, TrackName) == 0x0008);
static_assert(offsetof(FTTEventTrack, FunctionName) == 0x0018);
static_assert(offsetof(FTTEventTrack, CurveKeys) == 0x0020);
static_assert(offsetof(FTTPropertyTrack, PropertyName) == 0x0018);
static_assert(offsetof(FTTFloatTrack, CurveFloat) == 0x0020);
static_assert(offsetof(FTTVectorTrack, CurveVector) == 0x0020);
static_assert(offsetof(FTTLinearColorTrack, CurveLinearColor) == 0x0020);
static_assert(offsetof(UTimelineTemplate, LengthMode) == 0x002C);
static_assert(offsetof(UTimelineTemplate, EventTracks) == 0x0030);
static_assert(offsetof(UTimelineTemplate, FloatTracks) == 0x0040);
static_assert(offsetof(UTimelineTemplate, VectorTracks) == 0x0050);
static_assert(offsetof(UTimelineTemplate, LinearColorTracks) == 0x0060);
static_assert(offsetof(UTimelineTemplate, MetaDataArray) == 0x0070);
static_assert(offsetof(UTimelineTemplate, TimelineGuid) == 0x0080);
static_assert(offsetof(UTimelineTemplate, TimelineTickGroup) == 0x0090);
static_assert(offsetof(UTimelineTemplate, VariableName) == 0x0094);
static_assert(offsetof(UTimelineTemplate, DirectionPropertyName) == 0x009C);
static_assert(offsetof(UTimelineTemplate, UpdateFunctionName) == 0x00A4);
static_assert(offsetof(UTimelineTemplate, FinishedFunctionName) == 0x00AC);
static_assert(offsetof(FTouchInputControl, Image1) == 0x0000);
static_assert(offsetof(FTouchInputControl, Image2) == 0x0008);
static_assert(offsetof(FTouchInputControl, Center) == 0x0010);
static_assert(offsetof(FTouchInputControl, VisualSize) == 0x0018);
static_assert(offsetof(FTouchInputControl, ThumbSize) == 0x0020);
static_assert(offsetof(FTouchInputControl, InteractionSize) == 0x0028);
static_assert(offsetof(FTouchInputControl, InputScale) == 0x0030);
static_assert(offsetof(FTouchInputControl, MainInputKey) == 0x0038);
static_assert(offsetof(FTouchInputControl, AltInputKey) == 0x0050);
static_assert(offsetof(UTouchInterface, Controls) == 0x0028);
static_assert(offsetof(UUserDefinedStruct, Status) == 0x00C0);
static_assert(offsetof(UUserDefinedStruct, Guid) == 0x00C4);
static_assert(offsetof(UUserInterfaceSettings, RenderFocusRule) == 0x0038);
static_assert(offsetof(UUserInterfaceSettings, DefaultCursor) == 0x00E0);
static_assert(offsetof(UUserInterfaceSettings, TextEditBeamCursor) == 0x00F8);
static_assert(offsetof(UUserInterfaceSettings, CrosshairsCursor) == 0x0110);
static_assert(offsetof(UUserInterfaceSettings, HandCursor) == 0x0128);
static_assert(offsetof(UUserInterfaceSettings, GrabHandCursor) == 0x0140);
static_assert(offsetof(UUserInterfaceSettings, GrabHandClosedCursor) == 0x0158);
static_assert(offsetof(UUserInterfaceSettings, SlashedCircleCursor) == 0x0170);
static_assert(offsetof(UUserInterfaceSettings, UIScaleRule) == 0x018C);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRuleClass) == 0x0190);
static_assert(offsetof(UUserInterfaceSettings, UIScaleCurve) == 0x01A8);
static_assert(offsetof(UUserInterfaceSettings, DesignScreenSize) == 0x0234);
static_assert(offsetof(UUserInterfaceSettings, CursorClasses) == 0x0240);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRuleClassInstance) == 0x0250);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRule) == 0x0258);
static_assert(offsetof(UVectorField, Bounds) == 0x0028);
static_assert(offsetof(UVectorFieldAnimated, Texture) == 0x0048);
static_assert(offsetof(UVectorFieldAnimated, ConstructionOp) == 0x0050);
static_assert(offsetof(UVectorFieldAnimated, NoiseField) == 0x0078);
static_assert(offsetof(UVectorFieldComponent, VectorField) == 0x0450);
static_assert(offsetof(AVectorFieldVolume, VectorFieldComponent) == 0x0220);
static_assert(offsetof(UVirtualTexture2D, Settings) == 0x01A0);
static_assert(offsetof(UVirtualTextureBuilder, Texture) == 0x0028);
static_assert(offsetof(UVirtualTexturePoolConfig, Pools) == 0x0030);
static_assert(offsetof(FVoiceSettings, ComponentToAttachTo) == 0x0000);
static_assert(offsetof(FVoiceSettings, AttenuationSettings) == 0x0008);
static_assert(offsetof(FVoiceSettings, SourceEffectChain) == 0x0010);
static_assert(offsetof(UVOIPTalker, Settings) == 0x00B0);
static_assert(offsetof(UVolumetricCloudComponent, GroundAlbedo) == 0x020C);
static_assert(offsetof(UVolumetricCloudComponent, Material) == 0x0210);
static_assert(offsetof(AVolumetricCloud, VolumetricCloudComponent) == 0x0220);
static_assert(offsetof(AVolumetricLightmapDensityVolume, AllowedMipLevelRange) == 0x0258);
static_assert(offsetof(AWindDirectionalSource, Component) == 0x0220);
static_assert(offsetof(UWorldComposition, TilesStreaming) == 0x0048);
static_assert(offsetof(FMaterialProxySettings, TextureSize) == 0x0000);
static_assert(offsetof(FMaterialProxySettings, TextureSizingType) == 0x0028);
static_assert(offsetof(FMaterialProxySettings, MaterialMergeType) == 0x0029);
static_assert(offsetof(FMaterialProxySettings, BlendMode) == 0x002A);
static_assert(offsetof(FMaterialProxySettings, DiffuseTextureSize) == 0x0030);
static_assert(offsetof(FMaterialProxySettings, NormalTextureSize) == 0x0038);
static_assert(offsetof(FMaterialProxySettings, TangentTextureSize) == 0x0040);
static_assert(offsetof(FMaterialProxySettings, MetallicTextureSize) == 0x0048);
static_assert(offsetof(FMaterialProxySettings, RoughnessTextureSize) == 0x0050);
static_assert(offsetof(FMaterialProxySettings, AnisotropyTextureSize) == 0x0058);
static_assert(offsetof(FMaterialProxySettings, SpecularTextureSize) == 0x0060);
static_assert(offsetof(FMaterialProxySettings, EmissiveTextureSize) == 0x0068);
static_assert(offsetof(FMaterialProxySettings, OpacityTextureSize) == 0x0070);
static_assert(offsetof(FMaterialProxySettings, OpacityMaskTextureSize) == 0x0078);
static_assert(offsetof(FMaterialProxySettings, AmbientOcclusionTextureSize) == 0x0080);
static_assert(offsetof(FMeshProxySettings, MaterialSettings) == 0x0008);
static_assert(offsetof(FMeshProxySettings, UnresolvedGeometryColor) == 0x0094);
static_assert(offsetof(FMeshProxySettings, NormalCalculationMethod) == 0x00A4);
static_assert(offsetof(FMeshProxySettings, LandscapeCullingPrecision) == 0x00A5);
static_assert(offsetof(FMeshMergingSettings, OutputUVs) == 0x0004);
static_assert(offsetof(FMeshMergingSettings, MaterialSettings) == 0x000C);
static_assert(offsetof(FMeshMergingSettings, LODSelectionType) == 0x009C);
static_assert(offsetof(FHierarchicalSimplification, ProxySetting) == 0x000C);
static_assert(offsetof(FHierarchicalSimplification, MergeSetting) == 0x00B4);
static_assert(offsetof(UHierarchicalLODSetup, HierarchicalLODSetup) == 0x0028);
static_assert(offsetof(FNetViewer, Connection) == 0x0000);
static_assert(offsetof(FNetViewer, InViewer) == 0x0008);
static_assert(offsetof(FNetViewer, ViewTarget) == 0x0010);
static_assert(offsetof(FNetViewer, ViewLocation) == 0x0018);
static_assert(offsetof(FNetViewer, ViewDir) == 0x0024);
static_assert(offsetof(AWorldSettings, VisibilityAggressiveness) == 0x022C);
static_assert(offsetof(AWorldSettings, NavigationSystemConfig) == 0x0230);
static_assert(offsetof(AWorldSettings, NavigationSystemConfigOverride) == 0x0238);
static_assert(offsetof(AWorldSettings, KillZDamageType) == 0x0248);
static_assert(offsetof(AWorldSettings, DefaultPhysicsVolumeClass) == 0x0258);
static_assert(offsetof(AWorldSettings, PhysicsCollisionHandlerClass) == 0x0260);
static_assert(offsetof(AWorldSettings, DefaultGameMode) == 0x0268);
static_assert(offsetof(AWorldSettings, GameNetworkManagerClass) == 0x0270);
static_assert(offsetof(AWorldSettings, DefaultColorScale) == 0x027C);
static_assert(offsetof(AWorldSettings, DefaultReverbSettings) == 0x0298);
static_assert(offsetof(AWorldSettings, DefaultAmbientZoneSettings) == 0x02B8);
static_assert(offsetof(AWorldSettings, DefaultBaseSoundMix) == 0x02E0);
static_assert(offsetof(AWorldSettings, BroadphaseSettings) == 0x0304);
static_assert(offsetof(AWorldSettings, Pauser) == 0x0348);
static_assert(offsetof(AWorldSettings, ReplicationViewers) == 0x0350);
static_assert(offsetof(AWorldSettings, AssetUserData) == 0x0360);
static_assert(offsetof(AWorldSettings, PauserPlayerState) == 0x0370);
static_assert(offsetof(AWorldSettings, DefaultBookmarkClass) == 0x0380);
static_assert(offsetof(AWorldSettings, BookmarkArray) == 0x0388);
static_assert(offsetof(AWorldSettings, LastBookmarkClass) == 0x0398);
static_assert(offsetof(FVectorDistribution, Table) == 0x0000);
static_assert(offsetof(FVector4Distribution, Table) == 0x0000);
static_assert(offsetof(FFormatArgumentData, ArgumentName) == 0x0000);
static_assert(offsetof(FFormatArgumentData, ArgumentValueType) == 0x0010);
static_assert(offsetof(FFormatArgumentData, ArgumentValue) == 0x0018);
static_assert(offsetof(FFormatArgumentData, ArgumentValueGender) == 0x0038);
static_assert(offsetof(FExpressionOutput, OutputName) == 0x0000);
static_assert(offsetof(FPlatformInterfaceData, DataName) == 0x0000);
static_assert(offsetof(FPlatformInterfaceData, Type) == 0x0008);
static_assert(offsetof(FPlatformInterfaceData, StringValue) == 0x0018);
static_assert(offsetof(FPlatformInterfaceData, ObjectValue) == 0x0028);
static_assert(offsetof(FPlatformInterfaceDelegateResult, Data) == 0x0008);
static_assert(offsetof(FDebugFloatHistory, Samples) == 0x0000);
static_assert(offsetof(FLatentActionInfo, ExecutionFunction) == 0x0008);
static_assert(offsetof(FLatentActionInfo, CallbackTarget) == 0x0010);
static_assert(offsetof(FCollisionProfileName, Name) == 0x0000);
static_assert(offsetof(FUserActivity, ActionName) == 0x0000);
static_assert(offsetof(FDataTableRowHandle, DataTable) == 0x0000);
static_assert(offsetof(FDataTableRowHandle, RowName) == 0x0008);
static_assert(offsetof(FDamageEvent, DamageTypeClass) == 0x0008);
static_assert(offsetof(FFastArraySerializer, DeltaFlags) == 0x0100);
static_assert(offsetof(FPointDamageEvent, ShotDirection) == 0x0014);
static_assert(offsetof(FPointDamageEvent, HitInfo) == 0x0020);
static_assert(offsetof(FForceFeedbackParameters, Tag) == 0x0000);
static_assert(offsetof(FViewTargetTransitionParams, BlendFunction) == 0x0004);
static_assert(offsetof(FUpdateLevelStreamingLevelStatus, PackageName) == 0x0000);
static_assert(offsetof(FUpdateLevelVisibilityLevelInfo, PackageName) == 0x0000);
static_assert(offsetof(FUpdateLevelVisibilityLevelInfo, Filename) == 0x0008);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupName) == 0x0010);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupRole) == 0x0018);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupScope) == 0x0019);
static_assert(offsetof(FInputScaleBiasClamp, InRange) == 0x0004);
static_assert(offsetof(FInputScaleBiasClamp, OutRange) == 0x000C);
static_assert(offsetof(FInputAlphaBoolBlend, BlendOption) == 0x0008);
static_assert(offsetof(FInputAlphaBoolBlend, CustomCurve) == 0x0010);
static_assert(offsetof(FInputAlphaBoolBlend, AlphaBlend) == 0x0018);
static_assert(offsetof(FComponentReference, OtherActor) == 0x0000);
static_assert(offsetof(FComponentReference, ComponentProperty) == 0x0008);
static_assert(offsetof(FComponentReference, PathToComponent) == 0x0010);
static_assert(offsetof(FRuntimeCurveLinearColor, ColorCurves) == 0x0000);
static_assert(offsetof(FRuntimeCurveLinearColor, ExternalCurve) == 0x0200);
static_assert(offsetof(FPoseSnapshot, LocalTransforms) == 0x0000);
static_assert(offsetof(FPoseSnapshot, BoneNames) == 0x0010);
static_assert(offsetof(FPoseSnapshot, SkeletalMeshName) == 0x0020);
static_assert(offsetof(FPoseSnapshot, SnapshotName) == 0x0028);
static_assert(offsetof(FAnimNode_Root, Result) == 0x0010);
static_assert(offsetof(FAnimNode_Root, Name) == 0x0020);
static_assert(offsetof(FAnimNode_Root, Group) == 0x0028);
static_assert(offsetof(FAnimCurveParam, Name) == 0x0000);
static_assert(offsetof(FActorComponentInstanceData, SourceComponentTemplate) == 0x0008);
static_assert(offsetof(FActorComponentInstanceData, SourceComponentCreationMethod) == 0x0010);
static_assert(offsetof(FActorComponentInstanceData, SavedProperties) == 0x0018);
static_assert(offsetof(FActorComponentInstanceData, UniqueTransientPackage) == 0x0028);
static_assert(offsetof(FActorComponentInstanceData, DuplicatedObjects) == 0x0038);
static_assert(offsetof(FActorComponentInstanceData, ReferencedObjects) == 0x0048);
static_assert(offsetof(FActorComponentInstanceData, ReferencedNames) == 0x0058);
static_assert(offsetof(FAnimationGroupReference, GroupName) == 0x0000);
static_assert(offsetof(FAnimationGroupReference, GroupRole) == 0x0008);
static_assert(offsetof(FAnimationGroupReference, GroupScope) == 0x0009);
static_assert(offsetof(FAnimTickRecord, SourceAsset) == 0x0000);
static_assert(offsetof(FMarkerSyncAnimPosition, PreviousMarkerName) == 0x0000);
static_assert(offsetof(FMarkerSyncAnimPosition, NextMarkerName) == 0x0008);
static_assert(offsetof(FBlendSampleData, Animation) == 0x0008);
static_assert(offsetof(FAnimationRecordingSettings, InterpMode) == 0x000C);
static_assert(offsetof(FAnimationRecordingSettings, TangentMode) == 0x000D);
static_assert(offsetof(FComponentSpacePose, Transforms) == 0x0000);
static_assert(offsetof(FComponentSpacePose, Names) == 0x0010);
static_assert(offsetof(FLocalSpacePose, Transforms) == 0x0000);
static_assert(offsetof(FLocalSpacePose, Names) == 0x0010);
static_assert(offsetof(FNamedTransform, Value) == 0x0000);
static_assert(offsetof(FNamedTransform, Name) == 0x0030);
static_assert(offsetof(FNamedColor, Value) == 0x0000);
static_assert(offsetof(FNamedColor, Name) == 0x0004);
static_assert(offsetof(FNamedVector, Value) == 0x0000);
static_assert(offsetof(FNamedVector, Name) == 0x000C);
static_assert(offsetof(FNamedFloat, Name) == 0x0004);
static_assert(offsetof(FAnimParentNodeAssetOverride, NewAsset) == 0x0000);
static_assert(offsetof(FAnimParentNodeAssetOverride, ParentNodeGuid) == 0x0008);
static_assert(offsetof(FGraphAssetPlayerInformation, PlayerNodeIndices) == 0x0000);
static_assert(offsetof(FCachedPoseIndices, OrderedSavedPoseNodeIndices) == 0x0000);
static_assert(offsetof(FRootMotionExtractionStep, AnimSequence) == 0x0000);
static_assert(offsetof(FVectorCurve, FloatCurves) == 0x0018);
static_assert(offsetof(FTransformCurve, TranslationCurve) == 0x0018);
static_assert(offsetof(FTransformCurve, RotationCurve) == 0x01B0);
static_assert(offsetof(FTransformCurve, ScaleCurve) == 0x0348);
static_assert(offsetof(FSlotEvaluationPose, AdditiveType) == 0x0000);
static_assert(offsetof(FA2Pose, Bones) == 0x0000);
static_assert(offsetof(FA2CSPose, ComponentSpaceFlags) == 0x0018);
static_assert(offsetof(FQueuedDrawDebugItem, ItemType) == 0x0000);
static_assert(offsetof(FQueuedDrawDebugItem, StartLoc) == 0x0004);
static_assert(offsetof(FQueuedDrawDebugItem, EndLoc) == 0x0010);
static_assert(offsetof(FQueuedDrawDebugItem, Center) == 0x001C);
static_assert(offsetof(FQueuedDrawDebugItem, Rotation) == 0x0028);
static_assert(offsetof(FQueuedDrawDebugItem, Color) == 0x0040);
static_assert(offsetof(FQueuedDrawDebugItem, Message) == 0x0050);
static_assert(offsetof(FQueuedDrawDebugItem, TextScale) == 0x0060);
static_assert(offsetof(FAnimMontageInstance, Montage) == 0x0000);
static_assert(offsetof(FAnimMontageInstance, NextSections) == 0x00E8);
static_assert(offsetof(FAnimMontageInstance, PrevSections) == 0x00F8);
static_assert(offsetof(FAnimMontageInstance, ActiveStateBranchingPoints) == 0x0118);
static_assert(offsetof(FAnimMontageInstance, Blend) == 0x0130);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, Base) == 0x0010);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, Additive) == 0x0020);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType) == 0x0030);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend) == 0x0040);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName) == 0x0088);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias) == 0x0090);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp) == 0x0098);
static_assert(offsetof(FAnimNode_CustomProperty, SourcePropertyNames) == 0x0010);
static_assert(offsetof(FAnimNode_CustomProperty, DestPropertyNames) == 0x0020);
static_assert(offsetof(FAnimNode_CustomProperty, TargetInstance) == 0x0030);
static_assert(offsetof(FAnimNode_Inertialization, Source) == 0x0010);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InputPoses) == 0x0058);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InputPoseNames) == 0x0068);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InstanceClass) == 0x0078);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, Tag) == 0x0080);
static_assert(offsetof(FAnimNode_LinkedAnimLayer, Interface) == 0x00A0);
static_assert(offsetof(FAnimNode_LinkedAnimLayer, Layer) == 0x00A8);
static_assert(offsetof(FAnimNode_LinkedInputPose, Name) == 0x0010);
static_assert(offsetof(FAnimNode_LinkedInputPose, Graph) == 0x0018);
static_assert(offsetof(FAnimNode_LinkedInputPose, InputPose) == 0x0020);
static_assert(offsetof(FAnimNode_SaveCachedPose, Pose) == 0x0010);
static_assert(offsetof(FAnimNode_SaveCachedPose, CachePoseName) == 0x0020);
static_assert(offsetof(FAnimNode_SequencePlayer, Sequence) == 0x0038);
static_assert(offsetof(FAnimNode_SequencePlayer, PlayRateScaleBiasClamp) == 0x0048);
static_assert(offsetof(FAnimationActiveTransitionEntry, BlendProfile) == 0x00B8);
static_assert(offsetof(FAnimNode_TransitionPoseEvaluator, DataSource) == 0x00F0);
static_assert(offsetof(FAnimNode_TransitionPoseEvaluator, EvaluatorMode) == 0x00F1);
static_assert(offsetof(FAnimNode_UseCachedPose, LinkToCachingNode) == 0x0010);
static_assert(offsetof(FAnimNode_UseCachedPose, CachePoseName) == 0x0020);
static_assert(offsetof(FAnimNode_ConvertLocalToComponentSpace, LocalPose) == 0x0010);
static_assert(offsetof(FAnimNode_ConvertComponentToLocalSpace, ComponentPose) == 0x0010);
static_assert(offsetof(FAnimNotifyArray, Notifies) == 0x0000);
static_assert(offsetof(FCompressedTrack, ByteStream) == 0x0000);
static_assert(offsetof(FCompressedTrack, Times) == 0x0010);
static_assert(offsetof(FCurveTrack, CurveName) == 0x0000);
static_assert(offsetof(FCurveTrack, CurveWeights) == 0x0008);
static_assert(offsetof(FScaleTrack, ScaleKeys) == 0x0000);
static_assert(offsetof(FScaleTrack, Times) == 0x0010);
static_assert(offsetof(FRotationTrack, RotKeys) == 0x0000);
static_assert(offsetof(FRotationTrack, Times) == 0x0010);
static_assert(offsetof(FTranslationTrack, PosKeys) == 0x0000);
static_assert(offsetof(FTranslationTrack, Times) == 0x0010);
static_assert(offsetof(FRawAnimSequenceTrack, PosKeys) == 0x0000);
static_assert(offsetof(FRawAnimSequenceTrack, RotKeys) == 0x0010);
static_assert(offsetof(FRawAnimSequenceTrack, ScaleKeys) == 0x0020);
static_assert(offsetof(FAnimSequenceTrackContainer, AnimationTracks) == 0x0000);
static_assert(offsetof(FAnimSequenceTrackContainer, TrackNames) == 0x0010);
static_assert(offsetof(FAnimNode_SingleNode, SourcePose) == 0x0010);
static_assert(offsetof(FAnimationTransitionRule, RuleToExecute) == 0x0000);
static_assert(offsetof(FAnimationState, Transitions) == 0x0008);
static_assert(offsetof(FAnimNotifyTrack, TrackName) == 0x0000);
static_assert(offsetof(FAnimNotifyTrack, TrackColor) == 0x0008);
static_assert(offsetof(FPerBoneBlendWeights, BoneBlendWeights) == 0x0000);
static_assert(offsetof(FAssetManagerSearchRules, AssetScanPaths) == 0x0000);
static_assert(offsetof(FAssetManagerSearchRules, IncludePatterns) == 0x0010);
static_assert(offsetof(FAssetManagerSearchRules, ExcludePatterns) == 0x0020);
static_assert(offsetof(FAssetManagerSearchRules, AssetBaseClass) == 0x0030);
static_assert(offsetof(FGridBlendSample, GridElement) == 0x0000);
static_assert(offsetof(FBPEditorBookmarkNode, NodeGuid) == 0x0000);
static_assert(offsetof(FBPEditorBookmarkNode, ParentGuid) == 0x0010);
static_assert(offsetof(FBPEditorBookmarkNode, DisplayName) == 0x0020);
static_assert(offsetof(FEditedDocumentInfo, EditedObjectPath) == 0x0000);
static_assert(offsetof(FEditedDocumentInfo, SavedViewOffset) == 0x0018);
static_assert(offsetof(FEditedDocumentInfo, EditedObject) == 0x0028);
static_assert(offsetof(FBPInterfaceDescription, Interface) == 0x0000);
static_assert(offsetof(FBPInterfaceDescription, Graphs) == 0x0008);
static_assert(offsetof(FBPVariableDescription, VarName) == 0x0000);
static_assert(offsetof(FBPVariableDescription, VarGuid) == 0x0008);
static_assert(offsetof(FBPVariableDescription, VarType) == 0x0018);
static_assert(offsetof(FBPVariableDescription, FriendlyName) == 0x0070);
static_assert(offsetof(FBPVariableDescription, Category) == 0x0080);
static_assert(offsetof(FBPVariableDescription, RepNotifyFunc) == 0x00A0);
static_assert(offsetof(FBPVariableDescription, ReplicationCondition) == 0x00A8);
static_assert(offsetof(FBPVariableDescription, MetaDataArray) == 0x00B0);
static_assert(offsetof(FBPVariableDescription, DefaultValue) == 0x00C0);
static_assert(offsetof(FCompilerNativizationOptions, PlatformName) == 0x0000);
static_assert(offsetof(FCompilerNativizationOptions, ExcludedModules) == 0x0010);
static_assert(offsetof(FCompilerNativizationOptions, ExcludedFolderPaths) == 0x0070);
static_assert(offsetof(FEventGraphFastCallPair, FunctionToPatch) == 0x0000);
static_assert(offsetof(FCachedAnimTransitionData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimTransitionData, FromStateName) == 0x0008);
static_assert(offsetof(FCachedAnimTransitionData, ToStateName) == 0x0010);
static_assert(offsetof(FCachedAnimRelevancyData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimRelevancyData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimAssetPlayerData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimAssetPlayerData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimStateData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimStateData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimStateArray, States) == 0x0000);
static_assert(offsetof(FPooledCameraShakes, PooledShakes) == 0x0000);
static_assert(offsetof(FCameraShakeDuration, Type) == 0x0004);
static_assert(offsetof(FCameraShakeInfo, Duration) == 0x0000);
static_assert(offsetof(FCameraShakeScrubParams, POV) == 0x0010);
static_assert(offsetof(FCameraShakeUpdateParams, POV) == 0x0010);
static_assert(offsetof(FCanvasIcon, Texture) == 0x0000);
static_assert(offsetof(FWrappedStringElement, Value) == 0x0000);
static_assert(offsetof(FWrappedStringElement, LineExtent) == 0x0010);
static_assert(offsetof(FTextSizingParameters, Scaling) == 0x0010);
static_assert(offsetof(FTextSizingParameters, DrawFont) == 0x0018);
static_assert(offsetof(FTextSizingParameters, SpacingAdjust) == 0x0020);
static_assert(offsetof(FChildActorAttachedActorInfo, SocketName) == 0x0008);
static_assert(offsetof(FChildActorAttachedActorInfo, RelativeTransform) == 0x0010);
static_assert(offsetof(FChildActorComponentInstanceData, ChildActorClass) == 0x00B8);
static_assert(offsetof(FChildActorComponentInstanceData, ChildActorName) == 0x00C0);
static_assert(offsetof(FChildActorComponentInstanceData, AttachedActors) == 0x00C8);
static_assert(offsetof(FAutoCompleteNode, AutoCompleteListIndices) == 0x0008);
static_assert(offsetof(FNamedCurveValue, Name) == 0x0000);
static_assert(offsetof(FCurveTableRowHandle, CurveTable) == 0x0000);
static_assert(offsetof(FCurveTableRowHandle, RowName) == 0x0008);
static_assert(offsetof(FCustomAttribute, Name) == 0x0000);
static_assert(offsetof(FCustomAttribute, Times) == 0x0010);
static_assert(offsetof(FCustomAttributePerBoneData, Attributes) == 0x0008);
static_assert(offsetof(FDataTableCategoryHandle, DataTable) == 0x0000);
static_assert(offsetof(FDataTableCategoryHandle, ColumnName) == 0x0008);
static_assert(offsetof(FDataTableCategoryHandle, RowContents) == 0x0010);
static_assert(offsetof(FRollbackNetStartupActorInfo, Archetype) == 0x0008);
static_assert(offsetof(FRollbackNetStartupActorInfo, Level) == 0x0038);
static_assert(offsetof(FRollbackNetStartupActorInfo, ObjReferences) == 0x00A0);
static_assert(offsetof(FGraphReference, MacroGraph) == 0x0000);
static_assert(offsetof(FGraphReference, GraphBlueprint) == 0x0008);
static_assert(offsetof(FGraphReference, GraphGuid) == 0x0010);
static_assert(offsetof(FEdGraphPinReference, PinId) == 0x0008);
static_assert(offsetof(FEdGraphSchemaAction, MenuDescription) == 0x0008);
static_assert(offsetof(FEdGraphSchemaAction, TooltipDescription) == 0x0020);
static_assert(offsetof(FEdGraphSchemaAction, Category) == 0x0038);
static_assert(offsetof(FEdGraphSchemaAction, Keywords) == 0x0050);
static_assert(offsetof(FEdGraphSchemaAction, MenuDescriptionArray) == 0x0070);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchTitlesArray) == 0x0080);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchKeywordsArray) == 0x0090);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchCategoryArray) == 0x00A0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedMenuDescriptionArray) == 0x00B0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchTitlesArray) == 0x00C0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray) == 0x00D0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchCategoryArray) == 0x00E0);
static_assert(offsetof(FEdGraphSchemaAction, SearchText) == 0x00F0);
static_assert(offsetof(FEdGraphSchemaAction_NewNode, NodeTemplate) == 0x0100);
static_assert(offsetof(FScreenMessageString, ScreenMessage) == 0x0008);
static_assert(offsetof(FScreenMessageString, DisplayColor) == 0x0018);
static_assert(offsetof(FScreenMessageString, TextScale) == 0x0024);
static_assert(offsetof(FURL, Protocol) == 0x0000);
static_assert(offsetof(FURL, Host) == 0x0010);
static_assert(offsetof(FURL, Map) == 0x0028);
static_assert(offsetof(FURL, RedirectURL) == 0x0038);
static_assert(offsetof(FURL, Op) == 0x0048);
static_assert(offsetof(FURL, Portal) == 0x0058);
static_assert(offsetof(FFullyLoadedPackagesInfo, FullyLoadType) == 0x0000);
static_assert(offsetof(FFullyLoadedPackagesInfo, Tag) == 0x0008);
static_assert(offsetof(FFullyLoadedPackagesInfo, PackagesToLoad) == 0x0018);
static_assert(offsetof(FFullyLoadedPackagesInfo, LoadedObjects) == 0x0028);
static_assert(offsetof(FLevelStreamingStatus, PackageName) == 0x0000);
static_assert(offsetof(FNamedNetDriver, NetDriver) == 0x0000);
static_assert(offsetof(FWorldContext, LastURL) == 0x00D0);
static_assert(offsetof(FWorldContext, LastRemoteURL) == 0x0138);
static_assert(offsetof(FWorldContext, PendingNetGame) == 0x01A0);
static_assert(offsetof(FWorldContext, PackagesToFullyLoad) == 0x01A8);
static_assert(offsetof(FWorldContext, LoadedLevelsForPendingMapChange) == 0x01C8);
static_assert(offsetof(FWorldContext, ObjectReferencers) == 0x01F0);
static_assert(offsetof(FWorldContext, PendingLevelStreamingStatusUpdates) == 0x0200);
static_assert(offsetof(FWorldContext, GameViewport) == 0x0210);
static_assert(offsetof(FWorldContext, OwningGameInstance) == 0x0218);
static_assert(offsetof(FWorldContext, ActiveNetDrivers) == 0x0220);
static_assert(offsetof(FCanvasUVTri, V0_Pos) == 0x0000);
static_assert(offsetof(FCanvasUVTri, V0_UV) == 0x0008);
static_assert(offsetof(FCanvasUVTri, V0_Color) == 0x0010);
static_assert(offsetof(FCanvasUVTri, V1_Pos) == 0x0020);
static_assert(offsetof(FCanvasUVTri, V1_UV) == 0x0028);
static_assert(offsetof(FCanvasUVTri, V1_Color) == 0x0030);
static_assert(offsetof(FCanvasUVTri, V2_Pos) == 0x0040);
static_assert(offsetof(FCanvasUVTri, V2_UV) == 0x0048);
static_assert(offsetof(FCanvasUVTri, V2_Color) == 0x0050);
static_assert(offsetof(FDepthFieldGlowInfo, GlowColor) == 0x0004);
static_assert(offsetof(FDepthFieldGlowInfo, GlowOuterRadius) == 0x0014);
static_assert(offsetof(FDepthFieldGlowInfo, GlowInnerRadius) == 0x001C);
static_assert(offsetof(FFontRenderInfo, GlowInfo) == 0x0004);
static_assert(offsetof(FRadialDamageEvent, Params) == 0x0010);
static_assert(offsetof(FRadialDamageEvent, Origin) == 0x0024);
static_assert(offsetof(FRadialDamageEvent, ComponentHits) == 0x0030);
static_assert(offsetof(FMeshBuildSettings, BuildScale3D) == 0x0014);
static_assert(offsetof(FMeshBuildSettings, DistanceFieldReplacementMesh) == 0x0028);
static_assert(offsetof(FPOV, Location) == 0x0000);
static_assert(offsetof(FPOV, Rotation) == 0x000C);
static_assert(offsetof(FAnimUpdateRateParameters, ShiftBucket) == 0x0001);
static_assert(offsetof(FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds) == 0x0020);
static_assert(offsetof(FAnimSlotDesc, SlotName) == 0x0000);
static_assert(offsetof(FAnimSlotInfo, SlotName) == 0x0000);
static_assert(offsetof(FAnimSlotInfo, ChannelWeights) == 0x0008);
static_assert(offsetof(FMTDResult, Direction) == 0x0000);
static_assert(offsetof(FBasedPosition, Base) == 0x0000);
static_assert(offsetof(FBasedPosition, position) == 0x0008);
static_assert(offsetof(FBasedPosition, CachedBaseLocation) == 0x0014);
static_assert(offsetof(FBasedPosition, CachedBaseRotation) == 0x0020);
static_assert(offsetof(FBasedPosition, CachedTransPosition) == 0x002C);
static_assert(offsetof(FFractureEffect, ParticleSystem) == 0x0000);
static_assert(offsetof(FFractureEffect, Sound) == 0x0008);
static_assert(offsetof(FRigidBodyContactInfo, ContactPosition) == 0x0000);
static_assert(offsetof(FRigidBodyContactInfo, ContactNormal) == 0x000C);
static_assert(offsetof(FRigidBodyContactInfo, PhysMaterial) == 0x0020);
static_assert(offsetof(FCollisionImpactData, ContactInfos) == 0x0000);
static_assert(offsetof(FCollisionImpactData, TotalNormalImpulse) == 0x0010);
static_assert(offsetof(FCollisionImpactData, TotalFrictionImpulse) == 0x001C);
static_assert(offsetof(FRigidBodyState, position) == 0x0000);
static_assert(offsetof(FRigidBodyState, Quaternion) == 0x0010);
static_assert(offsetof(FRigidBodyState, LinVel) == 0x0020);
static_assert(offsetof(FRigidBodyState, AngVel) == 0x002C);
static_assert(offsetof(FPredictProjectilePathPointData, Location) == 0x0000);
static_assert(offsetof(FPredictProjectilePathPointData, Velocity) == 0x000C);
static_assert(offsetof(FPredictProjectilePathResult, PathData) == 0x0000);
static_assert(offsetof(FPredictProjectilePathResult, LastTraceDestination) == 0x0010);
static_assert(offsetof(FPredictProjectilePathResult, HitResult) == 0x002C);
static_assert(offsetof(FPredictProjectilePathParams, StartLocation) == 0x0000);
static_assert(offsetof(FPredictProjectilePathParams, LaunchVelocity) == 0x000C);
static_assert(offsetof(FPredictProjectilePathParams, TraceChannel) == 0x0025);
static_assert(offsetof(FPredictProjectilePathParams, ActorsToIgnore) == 0x0038);
static_assert(offsetof(FPredictProjectilePathParams, DrawDebugType) == 0x0050);
static_assert(offsetof(FActiveHapticFeedbackEffect, HapticEffect) == 0x0000);
static_assert(offsetof(FClusterNode, BoundMin) == 0x0000);
static_assert(offsetof(FClusterNode, BoundMax) == 0x0010);
static_assert(offsetof(FClusterNode, MinInstanceScale) == 0x0028);
static_assert(offsetof(FClusterNode, MaxInstanceScale) == 0x0034);
static_assert(offsetof(FClusterNode_DEPRECATED, BoundMin) == 0x0000);
static_assert(offsetof(FClusterNode_DEPRECATED, BoundMax) == 0x0010);
static_assert(offsetof(FHLODISMComponentDesc, StaticMesh) == 0x0000);
static_assert(offsetof(FHLODISMComponentDesc, Material) == 0x0008);
static_assert(offsetof(FHLODISMComponentDesc, Instances) == 0x0010);
static_assert(offsetof(FImportanceTexture, Size) == 0x0000);
static_assert(offsetof(FImportanceTexture, MarginalCDF) == 0x0010);
static_assert(offsetof(FImportanceTexture, ConditionalCDF) == 0x0020);
static_assert(offsetof(FImportanceTexture, TextureData) == 0x0030);
static_assert(offsetof(FImportanceTexture, Weighting) == 0x0048);
static_assert(offsetof(FInstancedStaticMeshLightMapInstanceData, Transform) == 0x0000);
static_assert(offsetof(FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds) == 0x0030);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, StaticMesh) == 0x00B8);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, CachedStaticLighting) == 0x00C0);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, PerInstanceSMData) == 0x0100);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData) == 0x0110);
static_assert(offsetof(FInterpEdSelKey, Group) == 0x0000);
static_assert(offsetof(FInterpEdSelKey, Track) == 0x0008);
static_assert(offsetof(FCameraPreviewInfo, PawnClass) == 0x0000);
static_assert(offsetof(FCameraPreviewInfo, AnimSeq) == 0x0008);
static_assert(offsetof(FCameraPreviewInfo, Location) == 0x0010);
static_assert(offsetof(FCameraPreviewInfo, Rotation) == 0x001C);
static_assert(offsetof(FCameraPreviewInfo, PawnInst) == 0x0028);
static_assert(offsetof(FSubTrackGroup, GroupName) == 0x0000);
static_assert(offsetof(FSubTrackGroup, TrackIndices) == 0x0010);
static_assert(offsetof(FSupportedSubTrackInfo, SupportedClass) == 0x0000);
static_assert(offsetof(FSupportedSubTrackInfo, SubTrackName) == 0x0008);
static_assert(offsetof(FDrawToRenderTargetContext, RenderTarget) == 0x0000);
static_assert(offsetof(FLevelSimplificationDetails, StaticMeshMaterialSettings) == 0x0008);
static_assert(offsetof(FLevelSimplificationDetails, LandscapeMaterialSettings) == 0x0098);
static_assert(offsetof(FDynamicTextureInstance, Texture) == 0x0028);
static_assert(offsetof(FPrecomputedLightInstanceData, Transform) == 0x00C0);
static_assert(offsetof(FPrecomputedLightInstanceData, LightGuid) == 0x00F0);
static_assert(offsetof(FBatchedPoint, position) == 0x0000);
static_assert(offsetof(FBatchedPoint, Color) == 0x000C);
static_assert(offsetof(FBatchedLine, Start) == 0x0000);
static_assert(offsetof(FBatchedLine, End) == 0x000C);
static_assert(offsetof(FBatchedLine, Color) == 0x0018);
static_assert(offsetof(FClientReceiveData, LocalPC) == 0x0000);
static_assert(offsetof(FClientReceiveData, MessageType) == 0x0008);
static_assert(offsetof(FClientReceiveData, MessageString) == 0x0018);
static_assert(offsetof(FClientReceiveData, RelatedPlayerState) == 0x0028);
static_assert(offsetof(FClientReceiveData, RelatedPlayerState0) == 0x0030);
static_assert(offsetof(FClientReceiveData, OptionalObject) == 0x0038);
static_assert(offsetof(FHLODInstancingKey, StaticMesh) == 0x0000);
static_assert(offsetof(FHLODInstancingKey, Material) == 0x0008);
static_assert(offsetof(FLODMappingData, Mapping) == 0x0000);
static_assert(offsetof(FLODMappingData, InverseMapping) == 0x0010);
static_assert(offsetof(FParameterGroupData, GroupName) == 0x0000);
static_assert(offsetof(FParameterChannelNames, R) == 0x0000);
static_assert(offsetof(FParameterChannelNames, G) == 0x0018);
static_assert(offsetof(FParameterChannelNames, B) == 0x0030);
static_assert(offsetof(FParameterChannelNames, A) == 0x0048);
static_assert(offsetof(FFunctionExpressionOutput, ExpressionOutput) == 0x0000);
static_assert(offsetof(FFunctionExpressionOutput, ExpressionOutputId) == 0x0008);
static_assert(offsetof(FFunctionExpressionOutput, Output) == 0x0018);
static_assert(offsetof(FFunctionExpressionInput, ExpressionInput) == 0x0000);
static_assert(offsetof(FFunctionExpressionInput, ExpressionInputId) == 0x0008);
static_assert(offsetof(FFunctionExpressionInput, Input) == 0x0018);
static_assert(offsetof(FMemberReference, MemberParent) == 0x0000);
static_assert(offsetof(FMemberReference, MemberScope) == 0x0008);
static_assert(offsetof(FMemberReference, MemberName) == 0x0018);
static_assert(offsetof(FMemberReference, MemberGuid) == 0x0020);
static_assert(offsetof(FMeshInstancingSettings, ActorClassToUse) == 0x0000);
static_assert(offsetof(FMeshInstancingSettings, MeshReplacementMethod) == 0x000C);
static_assert(offsetof(FMeshInstancingSettings, ISMComponentToUse) == 0x0010);
static_assert(offsetof(FMeshReductionSettings, SilhouetteImportance) == 0x001C);
static_assert(offsetof(FMeshReductionSettings, TextureImportance) == 0x001D);
static_assert(offsetof(FMeshReductionSettings, ShadingImportance) == 0x001E);
static_assert(offsetof(FMeshReductionSettings, TerminationCriterion) == 0x0020);
static_assert(offsetof(FMeshReductionSettings, VisibilityAggressiveness) == 0x0021);
static_assert(offsetof(FMeshReductionSettings, VertexColorImportance) == 0x0022);
static_assert(offsetof(FNameCurveKey, Value) == 0x0004);
static_assert(offsetof(FNameCurve, Keys) == 0x0068);
static_assert(offsetof(FNavDataConfig, Name) == 0x0030);
static_assert(offsetof(FNavDataConfig, Color) == 0x0038);
static_assert(offsetof(FNavDataConfig, DefaultQueryExtent) == 0x003C);
static_assert(offsetof(FNavDataConfig, NavigationDataClass) == 0x0048);
static_assert(offsetof(FNodeItem, ParentName) == 0x0000);
static_assert(offsetof(FNodeItem, Transform) == 0x0010);
static_assert(offsetof(FParticleCurvePair, CurveName) == 0x0000);
static_assert(offsetof(FParticleCurvePair, CurveObject) == 0x0010);
static_assert(offsetof(FBeamTargetData, TargetName) == 0x0000);
static_assert(offsetof(FPreviewAttachedObjectPair, Object) == 0x0028);
static_assert(offsetof(FPreviewAttachedObjectPair, AttachedTo) == 0x0030);
static_assert(offsetof(FPreviewAssetAttachContainer, AttachedObjects) == 0x0000);
static_assert(offsetof(FPrimitiveComponentInstanceData, ComponentTransform) == 0x00C0);
static_assert(offsetof(FPrimitiveComponentInstanceData, LODParent) == 0x00F8);
static_assert(offsetof(FSpriteCategoryInfo, Category) == 0x0000);
static_assert(offsetof(FSpriteCategoryInfo, DisplayName) == 0x0008);
static_assert(offsetof(FSpriteCategoryInfo, Description) == 0x0020);
static_assert(offsetof(FQuartzPulseOverrideStep, PulseDuration) == 0x0004);
static_assert(offsetof(FQuartzTimeSignature, BeatType) == 0x0004);
static_assert(offsetof(FQuartzTimeSignature, OptionalPulseOverride) == 0x0008);
static_assert(offsetof(FQuartzClockSettings, TimeSignature) == 0x0000);
static_assert(offsetof(FQuartzQuantizationBoundary, Quantization) == 0x0000);
static_assert(offsetof(FQuartzQuantizationBoundary, CountingReferencePoint) == 0x0008);
static_assert(offsetof(FLevelNameAndTime, LevelName) == 0x0000);
static_assert(offsetof(FRootMotionFinishVelocitySettings, Mode) == 0x0000);
static_assert(offsetof(FRootMotionFinishVelocitySettings, SetVelocity) == 0x0004);
static_assert(offsetof(FRootMotionSource, AccumulateMode) == 0x0014);
static_assert(offsetof(FRootMotionSource, InstanceName) == 0x0018);
static_assert(offsetof(FRootMotionSource, Status) == 0x0030);
static_assert(offsetof(FRootMotionSource, Settings) == 0x0031);
static_assert(offsetof(FRootMotionSource, RootMotionParams) == 0x0040);
static_assert(offsetof(FRootMotionSource, FinishVelocityParams) == 0x0080);
static_assert(offsetof(FRootMotionSource_JumpForce, Rotation) == 0x0098);
static_assert(offsetof(FRootMotionSource_JumpForce, PathOffsetCurve) == 0x00B0);
static_assert(offsetof(FRootMotionSource_JumpForce, TimeMappingCurve) == 0x00B8);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, StartLocation) == 0x0098);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, InitialTargetLocation) == 0x00A4);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, TargetLocation) == 0x00B0);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, PathOffsetCurve) == 0x00C0);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, TimeMappingCurve) == 0x00C8);
static_assert(offsetof(FRootMotionSource_MoveToForce, StartLocation) == 0x0098);
static_assert(offsetof(FRootMotionSource_MoveToForce, TargetLocation) == 0x00A4);
static_assert(offsetof(FRootMotionSource_MoveToForce, PathOffsetCurve) == 0x00B8);
static_assert(offsetof(FRootMotionSource_RadialForce, Location) == 0x0098);
static_assert(offsetof(FRootMotionSource_RadialForce, LocationActor) == 0x00A8);
static_assert(offsetof(FRootMotionSource_RadialForce, StrengthDistanceFalloff) == 0x00C0);
static_assert(offsetof(FRootMotionSource_RadialForce, StrengthOverTime) == 0x00C8);
static_assert(offsetof(FRootMotionSource_RadialForce, FixedWorldDirection) == 0x00D4);
static_assert(offsetof(FRootMotionSource_ConstantForce, Force) == 0x0098);
static_assert(offsetof(FRootMotionSource_ConstantForce, StrengthOverTime) == 0x00A8);
static_assert(offsetof(FCameraExposureSettings, Method) == 0x0000);
static_assert(offsetof(FCameraExposureSettings, BiasCurve) == 0x0020);
static_assert(offsetof(FCameraExposureSettings, MeterMask) == 0x0028);
static_assert(offsetof(FGaussianSumBloomSettings, Filter1Tint) == 0x0024);
static_assert(offsetof(FGaussianSumBloomSettings, Filter2Tint) == 0x0034);
static_assert(offsetof(FGaussianSumBloomSettings, Filter3Tint) == 0x0044);
static_assert(offsetof(FGaussianSumBloomSettings, Filter4Tint) == 0x0054);
static_assert(offsetof(FGaussianSumBloomSettings, Filter5Tint) == 0x0064);
static_assert(offsetof(FGaussianSumBloomSettings, Filter6Tint) == 0x0074);
static_assert(offsetof(FConvolutionBloomSettings, Texture) == 0x0000);
static_assert(offsetof(FConvolutionBloomSettings, CenterUV) == 0x000C);
static_assert(offsetof(FLensBloomSettings, GaussianSum) == 0x0000);
static_assert(offsetof(FLensBloomSettings, Convolution) == 0x0088);
static_assert(offsetof(FLensBloomSettings, Method) == 0x00B0);
static_assert(offsetof(FLensImperfectionSettings, DirtMask) == 0x0000);
static_assert(offsetof(FLensImperfectionSettings, DirtMaskTint) == 0x000C);
static_assert(offsetof(FLensSettings, Bloom) == 0x0000);
static_assert(offsetof(FLensSettings, Imperfections) == 0x00B8);
static_assert(offsetof(FColorGradePerRangeSettings, Saturation) == 0x0000);
static_assert(offsetof(FColorGradePerRangeSettings, Contrast) == 0x0010);
static_assert(offsetof(FColorGradePerRangeSettings, Gamma) == 0x0020);
static_assert(offsetof(FColorGradePerRangeSettings, Gain) == 0x0030);
static_assert(offsetof(FColorGradePerRangeSettings, Offset) == 0x0040);
static_assert(offsetof(FColorGradingSettings, Global) == 0x0000);
static_assert(offsetof(FColorGradingSettings, Shadows) == 0x0050);
static_assert(offsetof(FColorGradingSettings, Midtones) == 0x00A0);
static_assert(offsetof(FColorGradingSettings, Highlights) == 0x00F0);
static_assert(offsetof(FClothingAssetData_Legacy, AssetName) == 0x0000);
static_assert(offsetof(FClothingAssetData_Legacy, ApexFileName) == 0x0008);
static_assert(offsetof(FClothingAssetData_Legacy, PhysicsProperties) == 0x001C);
static_assert(offsetof(FSkeletalMeshClothBuildParams, AssetName) == 0x0010);
static_assert(offsetof(FBoneMirrorExport, BoneName) == 0x0000);
static_assert(offsetof(FBoneMirrorExport, SourceBoneName) == 0x0008);
static_assert(offsetof(FBoneMirrorExport, BoneFlipAxis) == 0x0010);
static_assert(offsetof(FNameMapping, NodeName) == 0x0000);
static_assert(offsetof(FNameMapping, BoneName) == 0x0008);
static_assert(offsetof(FRigConfiguration, Rig) == 0x0000);
static_assert(offsetof(FRigConfiguration, BoneMappingTable) == 0x0008);
static_assert(offsetof(FBoneReductionSetting, BonesToRemove) == 0x0000);
static_assert(offsetof(FReferencePose, PoseName) == 0x0000);
static_assert(offsetof(FReferencePose, ReferencePose) == 0x0008);
static_assert(offsetof(FSkeletonToMeshLinkup, SkeletonToMeshTable) == 0x0000);
static_assert(offsetof(FSkeletonToMeshLinkup, MeshToSkeletonTable) == 0x0010);
static_assert(offsetof(FPrecomputedSkyLightInstanceData, LightGuid) == 0x00B8);
static_assert(offsetof(FSoundWaveEnvelopeDataPerSound, SoundWave) == 0x0008);
static_assert(offsetof(FSoundWaveSpectralDataPerSound, SpectralData) == 0x0000);
static_assert(offsetof(FSoundWaveSpectralDataPerSound, SoundWave) == 0x0018);
static_assert(offsetof(FSplineInstanceData, SplineCurves) == 0x00C0);
static_assert(offsetof(FSplineInstanceData, SplineCurvesPreUCS) == 0x0130);
static_assert(offsetof(FSplinePoint, position) == 0x0004);
static_assert(offsetof(FSplinePoint, ArriveTangent) == 0x0010);
static_assert(offsetof(FSplinePoint, LeaveTangent) == 0x001C);
static_assert(offsetof(FSplinePoint, Rotation) == 0x0028);
static_assert(offsetof(FSplinePoint, Scale) == 0x0034);
static_assert(offsetof(FSplinePoint, Type) == 0x0040);
static_assert(offsetof(FSplineMeshInstanceData, StartPos) == 0x00B8);
static_assert(offsetof(FSplineMeshInstanceData, EndPos) == 0x00C4);
static_assert(offsetof(FSplineMeshInstanceData, StartTangent) == 0x00D0);
static_assert(offsetof(FSplineMeshInstanceData, EndTangent) == 0x00DC);
static_assert(offsetof(FMaterialRemapIndex, MaterialRemap) == 0x0008);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitPoint) == 0x0004);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitZoom) == 0x0010);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitRotation) == 0x001C);
static_assert(offsetof(FStaticMeshSourceModel, BuildSettings) == 0x0000);
static_assert(offsetof(FStaticMeshSourceModel, ReductionSettings) == 0x0030);
static_assert(offsetof(FStaticMeshSourceModel, ScreenSize) == 0x0058);
static_assert(offsetof(FStaticMeshSourceModel, SourceImportFilename) == 0x0060);
static_assert(offsetof(FStaticMeshOptimizationSettings, ReductionMethod) == 0x0000);
static_assert(offsetof(FPaintedVertex, position) == 0x0000);
static_assert(offsetof(FPaintedVertex, Color) == 0x000C);
static_assert(offsetof(FPaintedVertex, Normal) == 0x0010);
static_assert(offsetof(FStaticMeshVertexColorLODData, PaintedVertices) == 0x0000);
static_assert(offsetof(FStaticMeshVertexColorLODData, VertexBufferColors) == 0x0010);
static_assert(offsetof(FStaticMeshComponentInstanceData, StaticMesh) == 0x0100);
static_assert(offsetof(FStaticMeshComponentInstanceData, VertexColorLODs) == 0x0108);
static_assert(offsetof(FStaticMeshComponentInstanceData, CachedStaticLighting) == 0x0118);
static_assert(offsetof(FStaticMeshComponentInstanceData, StreamingTextureData) == 0x0128);
static_assert(offsetof(FTextureFormatSettings, CompressionSettings) == 0x0000);
static_assert(offsetof(FStreamingRenderAssetPrimitiveInfo, RenderAsset) == 0x0000);
static_assert(offsetof(FStreamingRenderAssetPrimitiveInfo, Bounds) == 0x0008);
static_assert(offsetof(FHardwareCursorReference, CursorPath) == 0x0000);
static_assert(offsetof(FHardwareCursorReference, HotSpot) == 0x0008);
static_assert(offsetof(FLevelViewportInfo, CamPosition) == 0x0000);
static_assert(offsetof(FLevelViewportInfo, CamRotation) == 0x000C);
static_assert(offsetof(FPSCPoolElem, PSC) == 0x0000);
static_assert(offsetof(FPSCPool, FreeElements) == 0x0000);
static_assert(offsetof(FLightmassWorldInfoSettings, EnvironmentColor) == 0x0014);
static_assert(offsetof(FLightmassWorldInfoSettings, VolumeLightingMethod) == 0x0024);
static_assert(offsetof(FWidgetTransform, Translation) == 0x0000);
static_assert(offsetof(FWidgetTransform, Scale) == 0x0008);
static_assert(offsetof(FWidgetTransform, Shear) == 0x0010);
static_assert(offsetof(UWidget, Slot) == 0x0028);
static_assert(offsetof(UWidget, ToolTipText) == 0x0040);
static_assert(offsetof(UWidget, ToolTipWidget) == 0x0068);
static_assert(offsetof(UWidget, RenderTransform) == 0x0090);
static_assert(offsetof(UWidget, RenderTransformPivot) == 0x00AC);
static_assert(offsetof(UWidget, AccessibleWidgetData) == 0x00B8);
static_assert(offsetof(UWidget, Cursor) == 0x00C1);
static_assert(offsetof(UWidget, Clipping) == 0x00C2);
static_assert(offsetof(UWidget, Visibility) == 0x00C3);
static_assert(offsetof(UWidget, Navigation) == 0x00C8);
static_assert(offsetof(UWidget, FlowDirectionPreference) == 0x00D0);
static_assert(offsetof(UWidget, NativeBindings) == 0x00F8);
static_assert(offsetof(FNamedSlotBinding, Name) == 0x0000);
static_assert(offsetof(FNamedSlotBinding, Content) == 0x0008);
static_assert(offsetof(FAnimationEventBinding, Animation) == 0x0000);
static_assert(offsetof(FAnimationEventBinding, AnimationEvent) == 0x0018);
static_assert(offsetof(FAnimationEventBinding, UserTag) == 0x001C);
static_assert(offsetof(UUserWidget, ColorAndOpacity) == 0x0110);
static_assert(offsetof(UUserWidget, ForegroundColor) == 0x0130);
static_assert(offsetof(UUserWidget, Padding) == 0x0190);
static_assert(offsetof(UUserWidget, ActiveSequencePlayers) == 0x01A0);
static_assert(offsetof(UUserWidget, AnimationTickManager) == 0x01B0);
static_assert(offsetof(UUserWidget, StoppedSequencePlayers) == 0x01B8);
static_assert(offsetof(UUserWidget, NamedSlotBindings) == 0x01C8);
static_assert(offsetof(UUserWidget, WidgetTree) == 0x01D8);
static_assert(offsetof(UUserWidget, TickFrequency) == 0x01F0);
static_assert(offsetof(UUserWidget, InputComponent) == 0x01F8);
static_assert(offsetof(UUserWidget, AnimationCallbacks) == 0x0200);
static_assert(offsetof(UPanelWidget, Slots) == 0x0108);
static_assert(offsetof(UBorder, HorizontalAlignment) == 0x0120);
static_assert(offsetof(UBorder, VerticalAlignment) == 0x0121);
static_assert(offsetof(UBorder, ContentColorAndOpacity) == 0x0124);
static_assert(offsetof(UBorder, Padding) == 0x0144);
static_assert(offsetof(UBorder, Background) == 0x0158);
static_assert(offsetof(UBorder, BrushColor) == 0x01F0);
static_assert(offsetof(UBorder, DesiredSizeScale) == 0x0210);
static_assert(offsetof(UButton, Style) == 0x0120);
static_assert(offsetof(UButton, WidgetStyle) == 0x0128);
static_assert(offsetof(UButton, ColorAndOpacity) == 0x03A0);
static_assert(offsetof(UButton, BackgroundColor) == 0x03B0);
static_assert(offsetof(UButton, ClickMethod) == 0x03C0);
static_assert(offsetof(UButton, TouchMethod) == 0x03C1);
static_assert(offsetof(UButton, PressMethod) == 0x03C2);
static_assert(offsetof(UCheckBox, CheckedState) == 0x0120);
static_assert(offsetof(UCheckBox, WidgetStyle) == 0x0138);
static_assert(offsetof(UCheckBox, Style) == 0x06B8);
static_assert(offsetof(UCheckBox, UncheckedImage) == 0x06C0);
static_assert(offsetof(UCheckBox, UncheckedHoveredImage) == 0x06C8);
static_assert(offsetof(UCheckBox, UncheckedPressedImage) == 0x06D0);
static_assert(offsetof(UCheckBox, CheckedImage) == 0x06D8);
static_assert(offsetof(UCheckBox, CheckedHoveredImage) == 0x06E0);
static_assert(offsetof(UCheckBox, CheckedPressedImage) == 0x06E8);
static_assert(offsetof(UCheckBox, UndeterminedImage) == 0x06F0);
static_assert(offsetof(UCheckBox, UndeterminedHoveredImage) == 0x06F8);
static_assert(offsetof(UCheckBox, UndeterminedPressedImage) == 0x0700);
static_assert(offsetof(UCheckBox, HorizontalAlignment) == 0x0708);
static_assert(offsetof(UCheckBox, Padding) == 0x070C);
static_assert(offsetof(UCheckBox, BorderBackgroundColor) == 0x0720);
static_assert(offsetof(UCheckBox, ClickMethod) == 0x0748);
static_assert(offsetof(UCheckBox, TouchMethod) == 0x0749);
static_assert(offsetof(UCheckBox, PressMethod) == 0x074A);
static_assert(offsetof(UComboBox, Items) == 0x0108);
static_assert(offsetof(UComboBoxString, DefaultOptions) == 0x0108);
static_assert(offsetof(UComboBoxString, SelectedOption) == 0x0118);
static_assert(offsetof(UComboBoxString, WidgetStyle) == 0x0128);
static_assert(offsetof(UComboBoxString, ItemStyle) == 0x0518);
static_assert(offsetof(UComboBoxString, ContentPadding) == 0x0CE0);
static_assert(offsetof(UComboBoxString, Font) == 0x0CF8);
static_assert(offsetof(UComboBoxString, ForegroundColor) == 0x0D50);
static_assert(offsetof(UPanelSlot, Parent) == 0x0028);
static_assert(offsetof(UPanelSlot, Content) == 0x0030);
static_assert(offsetof(UOverlaySlot, Padding) == 0x0040);
static_assert(offsetof(UOverlaySlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UOverlaySlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(FShapedTextOptions, TextShapingMethod) == 0x0001);
static_assert(offsetof(FShapedTextOptions, TextFlowDirection) == 0x0002);
static_assert(offsetof(UEditableText, Text) == 0x0108);
static_assert(offsetof(UEditableText, HintText) == 0x0130);
static_assert(offsetof(UEditableText, WidgetStyle) == 0x0158);
static_assert(offsetof(UEditableText, Style) == 0x0378);
static_assert(offsetof(UEditableText, BackgroundImageSelected) == 0x0380);
static_assert(offsetof(UEditableText, BackgroundImageComposing) == 0x0388);
static_assert(offsetof(UEditableText, CaretImage) == 0x0390);
static_assert(offsetof(UEditableText, Font) == 0x0398);
static_assert(offsetof(UEditableText, ColorAndOpacity) == 0x03F0);
static_assert(offsetof(UEditableText, KeyboardType) == 0x0426);
static_assert(offsetof(UEditableText, VirtualKeyboardOptions) == 0x0427);
static_assert(offsetof(UEditableText, VirtualKeyboardTrigger) == 0x0428);
static_assert(offsetof(UEditableText, VirtualKeyboardDismissAction) == 0x0429);
static_assert(offsetof(UEditableText, Justification) == 0x042A);
static_assert(offsetof(UEditableText, ShapedTextOptions) == 0x042B);
static_assert(offsetof(UEditableTextBox, Text) == 0x0108);
static_assert(offsetof(UEditableTextBox, WidgetStyle) == 0x0130);
static_assert(offsetof(UEditableTextBox, Style) == 0x0928);
static_assert(offsetof(UEditableTextBox, HintText) == 0x0930);
static_assert(offsetof(UEditableTextBox, Font) == 0x0958);
static_assert(offsetof(UEditableTextBox, ForegroundColor) == 0x09B0);
static_assert(offsetof(UEditableTextBox, BackgroundColor) == 0x09C0);
static_assert(offsetof(UEditableTextBox, ReadOnlyForegroundColor) == 0x09D0);
static_assert(offsetof(UEditableTextBox, Padding) == 0x09E8);
static_assert(offsetof(UEditableTextBox, KeyboardType) == 0x09FE);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardOptions) == 0x09FF);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardTrigger) == 0x0A00);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardDismissAction) == 0x0A01);
static_assert(offsetof(UEditableTextBox, Justification) == 0x0A02);
static_assert(offsetof(UEditableTextBox, ShapedTextOptions) == 0x0A03);
static_assert(offsetof(UGridPanel, ColumnFill) == 0x0120);
static_assert(offsetof(UGridPanel, RowFill) == 0x0130);
static_assert(offsetof(UImage, Brush) == 0x0108);
static_assert(offsetof(UImage, ColorAndOpacity) == 0x01A0);
static_assert(offsetof(FUserWidgetPool, ActiveWidgets) == 0x0000);
static_assert(offsetof(FUserWidgetPool, InactiveWidgets) == 0x0010);
static_assert(offsetof(UListViewBase, EntryWidgetClass) == 0x0108);
static_assert(offsetof(UListViewBase, EntryWidgetPool) == 0x0140);
static_assert(offsetof(UListView, Orientation) == 0x02D8);
static_assert(offsetof(UListView, SelectionMode) == 0x02D9);
static_assert(offsetof(UListView, ConsumeMouseWheel) == 0x02DA);
static_assert(offsetof(UListView, ListItems) == 0x02E8);
static_assert(offsetof(UTextLayoutWidget, ShapedTextOptions) == 0x0108);
static_assert(offsetof(UTextLayoutWidget, Justification) == 0x010B);
static_assert(offsetof(UTextLayoutWidget, WrappingPolicy) == 0x010C);
static_assert(offsetof(UTextLayoutWidget, Margin) == 0x0114);
static_assert(offsetof(UMultiLineEditableTextBox, Text) == 0x0128);
static_assert(offsetof(UMultiLineEditableTextBox, HintText) == 0x0140);
static_assert(offsetof(UMultiLineEditableTextBox, WidgetStyle) == 0x0168);
static_assert(offsetof(UMultiLineEditableTextBox, TextStyle) == 0x0960);
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardOptions) == 0x0BD2);
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardDismissAction) == 0x0BD3);
static_assert(offsetof(UMultiLineEditableTextBox, Style) == 0x0BD8);
static_assert(offsetof(UMultiLineEditableTextBox, Font) == 0x0BE0);
static_assert(offsetof(UMultiLineEditableTextBox, ForegroundColor) == 0x0C38);
static_assert(offsetof(UMultiLineEditableTextBox, BackgroundColor) == 0x0C48);
static_assert(offsetof(UMultiLineEditableTextBox, ReadOnlyForegroundColor) == 0x0C58);
static_assert(offsetof(UMenuAnchor, MenuClass) == 0x0120);
static_assert(offsetof(UMenuAnchor, Placement) == 0x0148);
static_assert(offsetof(UProgressBar, WidgetStyle) == 0x0108);
static_assert(offsetof(UProgressBar, Style) == 0x02A8);
static_assert(offsetof(UProgressBar, BackgroundImage) == 0x02B0);
static_assert(offsetof(UProgressBar, FillImage) == 0x02B8);
static_assert(offsetof(UProgressBar, MarqueeImage) == 0x02C0);
static_assert(offsetof(UProgressBar, BarFillType) == 0x02CC);
static_assert(offsetof(UProgressBar, BorderPadding) == 0x02D0);
static_assert(offsetof(UProgressBar, FillColorAndOpacity) == 0x02E8);
static_assert(offsetof(URetainerBox, EffectMaterial) == 0x0130);
static_assert(offsetof(URetainerBox, TextureParameter) == 0x0138);
static_assert(offsetof(URichTextBlock, Text) == 0x0128);
static_assert(offsetof(URichTextBlock, TextStyleSet) == 0x0140);
static_assert(offsetof(URichTextBlock, DecoratorClasses) == 0x0148);
static_assert(offsetof(URichTextBlock, DefaultTextStyleOverride) == 0x0160);
static_assert(offsetof(URichTextBlock, TextTransformPolicy) == 0x03D4);
static_assert(offsetof(URichTextBlock, DefaultTextStyle) == 0x03D8);
static_assert(offsetof(URichTextBlock, InstanceDecorators) == 0x0648);
static_assert(offsetof(UScrollBox, WidgetStyle) == 0x0120);
static_assert(offsetof(UScrollBox, WidgetBarStyle) == 0x0348);
static_assert(offsetof(UScrollBox, Style) == 0x0818);
static_assert(offsetof(UScrollBox, BarStyle) == 0x0820);
static_assert(offsetof(UScrollBox, Orientation) == 0x0828);
static_assert(offsetof(UScrollBox, ScrollbarVisibility) == 0x0829);
static_assert(offsetof(UScrollBox, ConsumeMouseWheel) == 0x082A);
static_assert(offsetof(UScrollBox, ScrollbarThickness) == 0x082C);
static_assert(offsetof(UScrollBox, ScrollbarPadding) == 0x0834);
static_assert(offsetof(UScrollBox, NavigationDestination) == 0x0848);
static_assert(offsetof(UScrollBox, ScrollWhenFocusChanges) == 0x0850);
static_assert(offsetof(UWrapBox, InnerSlotPadding) == 0x0120);
static_assert(offsetof(UWrapBox, Orientation) == 0x0132);
static_assert(offsetof(UTextBlock, Text) == 0x0128);
static_assert(offsetof(UTextBlock, TruncationCharacters) == 0x0148);
static_assert(offsetof(UTextBlock, ColorAndOpacity) == 0x0168);
static_assert(offsetof(UTextBlock, Font) == 0x01A0);
static_assert(offsetof(UTextBlock, StrikeBrush) == 0x01F8);
static_assert(offsetof(UTextBlock, ShadowOffset) == 0x0280);
static_assert(offsetof(UTextBlock, ShadowColorAndOpacity) == 0x0288);
static_assert(offsetof(UTextBlock, TextTransformPolicy) == 0x02AE);
static_assert(offsetof(UTileView, TileAlignment) == 0x0370);
static_assert(offsetof(UUniformGridPanel, SlotPadding) == 0x0120);
static_assert(offsetof(USlider, WidgetStyle) == 0x0128);
static_assert(offsetof(USlider, Orientation) == 0x0468);
static_assert(offsetof(USlider, SliderBarColor) == 0x046C);
static_assert(offsetof(USlider, SliderHandleColor) == 0x047C);
static_assert(offsetof(FSlateChildSize, SizeRule) == 0x0004);
static_assert(offsetof(UDynamicEntryBoxBase, EntryBoxType) == 0x0108);
static_assert(offsetof(UDynamicEntryBoxBase, EntrySpacing) == 0x010C);
static_assert(offsetof(UDynamicEntryBoxBase, SpacingPattern) == 0x0118);
static_assert(offsetof(UDynamicEntryBoxBase, EntrySizeRule) == 0x0128);
static_assert(offsetof(UDynamicEntryBoxBase, EntryHorizontalAlignment) == 0x0130);
static_assert(offsetof(UDynamicEntryBoxBase, EntryVerticalAlignment) == 0x0131);
static_assert(offsetof(UDynamicEntryBoxBase, RadialBoxSettings) == 0x0138);
static_assert(offsetof(UDynamicEntryBoxBase, EntryWidgetPool) == 0x0158);
static_assert(offsetof(URichTextBlockImageDecorator, ImageSet) == 0x0028);
static_assert(offsetof(UWidgetComponent, Space) == 0x0478);
static_assert(offsetof(UWidgetComponent, TimingPolicy) == 0x0479);
static_assert(offsetof(UWidgetComponent, WidgetClass) == 0x0480);
static_assert(offsetof(UWidgetComponent, DrawSize) == 0x0488);
static_assert(offsetof(UWidgetComponent, CurrentDrawSize) == 0x04A0);
static_assert(offsetof(UWidgetComponent, Pivot) == 0x04AC);
static_assert(offsetof(UWidgetComponent, WindowVisibility) == 0x04B6);
static_assert(offsetof(UWidgetComponent, OwnerPlayer) == 0x04B8);
static_assert(offsetof(UWidgetComponent, BackgroundColor) == 0x04C0);
static_assert(offsetof(UWidgetComponent, TintColorAndOpacity) == 0x04D0);
static_assert(offsetof(UWidgetComponent, BlendMode) == 0x04E4);
static_assert(offsetof(UWidgetComponent, BodySetup) == 0x04E8);
static_assert(offsetof(UWidgetComponent, TranslucentMaterial) == 0x04F0);
static_assert(offsetof(UWidgetComponent, TranslucentMaterial_OneSided) == 0x04F8);
static_assert(offsetof(UWidgetComponent, OpaqueMaterial) == 0x0500);
static_assert(offsetof(UWidgetComponent, OpaqueMaterial_OneSided) == 0x0508);
static_assert(offsetof(UWidgetComponent, MaskedMaterial) == 0x0510);
static_assert(offsetof(UWidgetComponent, MaskedMaterial_OneSided) == 0x0518);
static_assert(offsetof(UWidgetComponent, RenderTarget) == 0x0520);
static_assert(offsetof(UWidgetComponent, MaterialInstance) == 0x0528);
static_assert(offsetof(UWidgetComponent, SharedLayerName) == 0x0534);
static_assert(offsetof(UWidgetComponent, GeometryMode) == 0x0540);
static_assert(offsetof(UWidgetComponent, TickMode) == 0x0548);
static_assert(offsetof(UWidgetComponent, Widget) == 0x0570);
static_assert(offsetof(UBackgroundBlur, Padding) == 0x0120);
static_assert(offsetof(UBackgroundBlur, HorizontalAlignment) == 0x0130);
static_assert(offsetof(UBackgroundBlur, VerticalAlignment) == 0x0131);
static_assert(offsetof(UBackgroundBlur, LowQualityFallbackBrush) == 0x0140);
static_assert(offsetof(UBackgroundBlurSlot, Padding) == 0x0038);
static_assert(offsetof(UBackgroundBlurSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UBackgroundBlurSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UPropertyBinding, SourcePath) == 0x0030);
static_assert(offsetof(UPropertyBinding, DestinationProperty) == 0x0058);
static_assert(offsetof(UBorderSlot, Padding) == 0x0038);
static_assert(offsetof(UBorderSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UBorderSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UButtonSlot, Padding) == 0x0038);
static_assert(offsetof(UButtonSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UButtonSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(FAnchorData, Offsets) == 0x0000);
static_assert(offsetof(FAnchorData, Anchors) == 0x0010);
static_assert(offsetof(FAnchorData, Alignment) == 0x0020);
static_assert(offsetof(UCanvasPanelSlot, LayoutData) == 0x0038);
static_assert(offsetof(UCircularThrobber, PieceImage) == 0x0118);
static_assert(offsetof(UCircularThrobber, Image) == 0x0120);
static_assert(offsetof(UDragDropOperation, Tag) == 0x0028);
static_assert(offsetof(UDragDropOperation, Payload) == 0x0038);
static_assert(offsetof(UDragDropOperation, DefaultDragVisual) == 0x0040);
static_assert(offsetof(UDragDropOperation, Pivot) == 0x0048);
static_assert(offsetof(UDragDropOperation, Offset) == 0x004C);
static_assert(offsetof(UDynamicEntryBox, EntryWidgetClass) == 0x01D8);
static_assert(offsetof(UExpandableArea, Style) == 0x0110);
static_assert(offsetof(UExpandableArea, BorderBrush) == 0x0230);
static_assert(offsetof(UExpandableArea, BorderColor) == 0x02B8);
static_assert(offsetof(UExpandableArea, HeaderPadding) == 0x02E8);
static_assert(offsetof(UExpandableArea, AreaPadding) == 0x02F8);
static_assert(offsetof(UExpandableArea, HeaderContent) == 0x0318);
static_assert(offsetof(UExpandableArea, BodyContent) == 0x0320);
static_assert(offsetof(UGridSlot, Padding) == 0x0038);
static_assert(offsetof(UGridSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UGridSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UGridSlot, Nudge) == 0x0060);
static_assert(offsetof(UHorizontalBoxSlot, Padding) == 0x0040);
static_assert(offsetof(UHorizontalBoxSlot, Size) == 0x0050);
static_assert(offsetof(UHorizontalBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(UHorizontalBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(UInputKeySelector, WidgetStyle) == 0x0108);
static_assert(offsetof(UInputKeySelector, TextStyle) == 0x0380);
static_assert(offsetof(UInputKeySelector, SelectedKey) == 0x05F0);
static_assert(offsetof(UInputKeySelector, Font) == 0x0610);
static_assert(offsetof(UInputKeySelector, Margin) == 0x0668);
static_assert(offsetof(UInputKeySelector, ColorAndOpacity) == 0x0678);
static_assert(offsetof(UInputKeySelector, KeySelectionText) == 0x0688);
static_assert(offsetof(UInputKeySelector, NoKeySpecifiedText) == 0x06A0);
static_assert(offsetof(UInputKeySelector, EscapeKeys) == 0x06C0);
static_assert(offsetof(UMovieSceneEntitySystem, Linker) == 0x0028);
static_assert(offsetof(UMovieScenePropertySystem, InstantiatorSystem) == 0x0048);
static_assert(offsetof(UMovieSceneSignedObject, Signature) == 0x0028);
static_assert(offsetof(FMovieSceneSectionEvalOptions, CompletionMode) == 0x0001);
static_assert(offsetof(FOptionalMovieSceneBlendType, BlendType) == 0x0000);
static_assert(offsetof(UMovieSceneSection, EvalOptions) == 0x0050);
static_assert(offsetof(UMovieSceneSection, Easing) == 0x0058);
static_assert(offsetof(UMovieSceneSection, SectionRange) == 0x0090);
static_assert(offsetof(UMovieSceneSection, PreRollFrames) == 0x00A0);
static_assert(offsetof(UMovieSceneSection, PostRollFrames) == 0x00A4);
static_assert(offsetof(UMovieSceneSection, BlendType) == 0x00C9);
static_assert(offsetof(FMovieSceneTangentData, TangentWeightMode) == 0x0010);
static_assert(offsetof(FMovieSceneFloatValue, Tangent) == 0x0004);
static_assert(offsetof(FMovieSceneFloatValue, InterpMode) == 0x0018);
static_assert(offsetof(FMovieSceneFloatValue, TangentMode) == 0x0019);
static_assert(offsetof(FMovieSceneFloatChannel, PreInfinityExtrap) == 0x0008);
static_assert(offsetof(FMovieSceneFloatChannel, PostInfinityExtrap) == 0x0009);
static_assert(offsetof(FMovieSceneFloatChannel, Times) == 0x0010);
static_assert(offsetof(FMovieSceneFloatChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneFloatChannel, KeyHandles) == 0x0038);
static_assert(offsetof(FMovieSceneFloatChannel, TickResolution) == 0x0098);
static_assert(offsetof(UMovieScene2DTransformSection, TransformMask) == 0x00F0);
static_assert(offsetof(UMovieScene2DTransformSection, Translation) == 0x00F8);
static_assert(offsetof(UMovieScene2DTransformSection, Rotation) == 0x0238);
static_assert(offsetof(UMovieScene2DTransformSection, Scale) == 0x02D8);
static_assert(offsetof(UMovieScene2DTransformSection, Shear) == 0x0418);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Section) == 0x0000);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Range) == 0x0008);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, ForcedTime) == 0x0018);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Flags) == 0x001C);
static_assert(offsetof(FMovieSceneTrackEvaluationField, Entries) == 0x0000);
static_assert(offsetof(UMovieSceneTrack, EvalOptions) == 0x0050);
static_assert(offsetof(UMovieSceneTrack, RowsDisabled) == 0x0058);
static_assert(offsetof(UMovieSceneTrack, EvaluationFieldGuid) == 0x006C);
static_assert(offsetof(UMovieSceneTrack, EvaluationField) == 0x0080);
static_assert(offsetof(FMovieScenePropertyBinding, PropertyName) == 0x0000);
static_assert(offsetof(FMovieScenePropertyBinding, PropertyPath) == 0x0008);
static_assert(offsetof(UMovieScenePropertyTrack, SectionToKey) == 0x0090);
static_assert(offsetof(UMovieScenePropertyTrack, PropertyBinding) == 0x0098);
static_assert(offsetof(UMovieScenePropertyTrack, Sections) == 0x00B0);
static_assert(offsetof(UMovieSceneMarginSection, TopCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneMarginSection, LeftCurve) == 0x0190);
static_assert(offsetof(UMovieSceneMarginSection, RightCurve) == 0x0230);
static_assert(offsetof(UMovieSceneMarginSection, BottomCurve) == 0x02D0);
static_assert(offsetof(UMovieSceneMaterialTrack, Sections) == 0x0090);
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath) == 0x00A8);
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, TrackName) == 0x00B8);
static_assert(offsetof(UMultiLineEditableText, Text) == 0x0128);
static_assert(offsetof(UMultiLineEditableText, HintText) == 0x0140);
static_assert(offsetof(UMultiLineEditableText, WidgetStyle) == 0x0168);
static_assert(offsetof(UMultiLineEditableText, Font) == 0x03E0);
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardOptions) == 0x043D);
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardDismissAction) == 0x043E);
static_assert(offsetof(USafeZoneSlot, SafeAreaScale) == 0x003C);
static_assert(offsetof(USafeZoneSlot, HAlign) == 0x004C);
static_assert(offsetof(USafeZoneSlot, VAlign) == 0x004D);
static_assert(offsetof(USafeZoneSlot, Padding) == 0x0050);
static_assert(offsetof(UScaleBox, Stretch) == 0x0120);
static_assert(offsetof(UScaleBox, StretchDirection) == 0x0121);
static_assert(offsetof(UScaleBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UScaleBoxSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UScaleBoxSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UScrollBar, WidgetStyle) == 0x0108);
static_assert(offsetof(UScrollBar, Style) == 0x05D8);
static_assert(offsetof(UScrollBar, Orientation) == 0x05E2);
static_assert(offsetof(UScrollBar, Thickness) == 0x05E4);
static_assert(offsetof(UScrollBar, Padding) == 0x05EC);
static_assert(offsetof(UScrollBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UScrollBoxSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UScrollBoxSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(USizeBoxSlot, Padding) == 0x0038);
static_assert(offsetof(USizeBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(USizeBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(FSlateMeshVertex, position) == 0x0000);
static_assert(offsetof(FSlateMeshVertex, Color) == 0x0008);
static_assert(offsetof(FSlateMeshVertex, UV0) == 0x000C);
static_assert(offsetof(FSlateMeshVertex, UV1) == 0x0014);
static_assert(offsetof(FSlateMeshVertex, UV2) == 0x001C);
static_assert(offsetof(FSlateMeshVertex, UV3) == 0x0024);
static_assert(offsetof(FSlateMeshVertex, UV4) == 0x002C);
static_assert(offsetof(FSlateMeshVertex, UV5) == 0x0034);
static_assert(offsetof(USlateVectorArtData, VertexData) == 0x0028);
static_assert(offsetof(USlateVectorArtData, IndexData) == 0x0038);
static_assert(offsetof(USlateVectorArtData, Material) == 0x0048);
static_assert(offsetof(USlateVectorArtData, ExtentMin) == 0x0050);
static_assert(offsetof(USlateVectorArtData, ExtentMax) == 0x0058);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleBehavior) == 0x0029);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryBehavior) == 0x002A);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleText) == 0x0030);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryText) == 0x0058);
static_assert(offsetof(USpacer, Size) == 0x0108);
static_assert(offsetof(USpinBox, WidgetStyle) == 0x0120);
static_assert(offsetof(USpinBox, Style) == 0x0408);
static_assert(offsetof(USpinBox, Font) == 0x0428);
static_assert(offsetof(USpinBox, Justification) == 0x0480);
static_assert(offsetof(USpinBox, ForegroundColor) == 0x0490);
static_assert(offsetof(UThrobber, PieceImage) == 0x0110);
static_assert(offsetof(UThrobber, Image) == 0x0118);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager) == 0x0008);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker) == 0x0018);
static_assert(offsetof(UUMGSequencePlayer, Animation) == 0x0260);
static_assert(offsetof(UUMGSequencePlayer, RootTemplateInstance) == 0x0270);
static_assert(offsetof(UUMGSequenceTickManager, Linker) == 0x0078);
static_assert(offsetof(UUniformGridSlot, HorizontalAlignment) == 0x0038);
static_assert(offsetof(UUniformGridSlot, VerticalAlignment) == 0x0039);
static_assert(offsetof(UVerticalBoxSlot, Size) == 0x0038);
static_assert(offsetof(UVerticalBoxSlot, Padding) == 0x0040);
static_assert(offsetof(UVerticalBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(UVerticalBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(UViewport, BackgroundColor) == 0x0120);
static_assert(offsetof(UMovieSceneSequence, CompiledData) == 0x0050);
static_assert(offsetof(UMovieSceneSequence, DefaultCompletionMode) == 0x0058);
static_assert(offsetof(UMovieSceneSequence, SequenceFlags) == 0x005B);
static_assert(offsetof(FWidgetAnimationBinding, WidgetName) == 0x0000);
static_assert(offsetof(FWidgetAnimationBinding, SlotWidgetName) == 0x0008);
static_assert(offsetof(FWidgetAnimationBinding, AnimationGuid) == 0x0010);
static_assert(offsetof(UWidgetAnimation, MovieScene) == 0x0060);
static_assert(offsetof(UWidgetAnimation, AnimationBindings) == 0x0068);
static_assert(offsetof(UWidgetAnimation, DisplayLabel) == 0x0080);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, Action) == 0x0000);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, AnimationToBind) == 0x0004);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind) == 0x000C);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, UserTag) == 0x0014);
static_assert(offsetof(UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings) == 0x0028);
static_assert(offsetof(FDelegateRuntimeBinding, ObjectName) == 0x0000);
static_assert(offsetof(FDelegateRuntimeBinding, PropertyName) == 0x0010);
static_assert(offsetof(FDelegateRuntimeBinding, FunctionName) == 0x0018);
static_assert(offsetof(FDelegateRuntimeBinding, SourcePath) == 0x0020);
static_assert(offsetof(FDelegateRuntimeBinding, Kind) == 0x0048);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, WidgetTree) == 0x0328);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Bindings) == 0x0338);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Animations) == 0x0348);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, NamedSlots) == 0x0358);
static_assert(offsetof(UWidgetInteractionComponent, TraceChannel) == 0x0220);
static_assert(offsetof(UWidgetInteractionComponent, InteractionSource) == 0x0228);
static_assert(offsetof(UWidgetInteractionComponent, DebugColor) == 0x0234);
static_assert(offsetof(UWidgetInteractionComponent, CustomHitResult) == 0x02C0);
static_assert(offsetof(UWidgetInteractionComponent, LocalHitLocation) == 0x0348);
static_assert(offsetof(UWidgetInteractionComponent, LastLocalHitLocation) == 0x0350);
static_assert(offsetof(UWidgetInteractionComponent, HoveredWidgetComponent) == 0x0358);
static_assert(offsetof(UWidgetInteractionComponent, LastHitResult) == 0x0360);
static_assert(offsetof(FWidgetNavigationData, Rule) == 0x0000);
static_assert(offsetof(FWidgetNavigationData, WidgetToFocus) == 0x0004);
static_assert(offsetof(UWidgetNavigation, Up) == 0x0028);
static_assert(offsetof(UWidgetNavigation, Down) == 0x004C);
static_assert(offsetof(UWidgetNavigation, Left) == 0x0070);
static_assert(offsetof(UWidgetNavigation, Right) == 0x0094);
static_assert(offsetof(UWidgetNavigation, Next) == 0x00B8);
static_assert(offsetof(UWidgetNavigation, Previous) == 0x00DC);
static_assert(offsetof(UWidgetSwitcherSlot, Padding) == 0x0040);
static_assert(offsetof(UWidgetSwitcherSlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UWidgetSwitcherSlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(UWidgetTree, RootWidget) == 0x0028);
static_assert(offsetof(UWindowTitleBarAreaSlot, Padding) == 0x0038);
static_assert(offsetof(UWindowTitleBarAreaSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UWindowTitleBarAreaSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UWrapBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UWrapBoxSlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UWrapBoxSlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(FMovieSceneEvalTemplate, CompletionMode) == 0x0010);
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterName) == 0x0000);
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterCurve) == 0x0008);
static_assert(offsetof(FMovieSceneBoolChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneBoolChannel, Values) == 0x0020);
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterName) == 0x0000);
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterCurve) == 0x0008);
static_assert(offsetof(FVector2DParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FVector2DParameterNameAndCurves, XCurve) == 0x0008);
static_assert(offsetof(FVector2DParameterNameAndCurves, YCurve) == 0x00A8);
static_assert(offsetof(FVectorParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FVectorParameterNameAndCurves, XCurve) == 0x0008);
static_assert(offsetof(FVectorParameterNameAndCurves, YCurve) == 0x00A8);
static_assert(offsetof(FVectorParameterNameAndCurves, ZCurve) == 0x0148);
static_assert(offsetof(FColorParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FColorParameterNameAndCurves, RedCurve) == 0x0008);
static_assert(offsetof(FColorParameterNameAndCurves, GreenCurve) == 0x00A8);
static_assert(offsetof(FColorParameterNameAndCurves, BlueCurve) == 0x0148);
static_assert(offsetof(FColorParameterNameAndCurves, AlphaCurve) == 0x01E8);
static_assert(offsetof(FTransformParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FTransformParameterNameAndCurves, Translation) == 0x0008);
static_assert(offsetof(FTransformParameterNameAndCurves, Rotation) == 0x01E8);
static_assert(offsetof(FTransformParameterNameAndCurves, Scale) == 0x03C8);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Scalars) == 0x0020);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Bools) == 0x0030);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vector2Ds) == 0x0040);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vectors) == 0x0050);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Colors) == 0x0060);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Transforms) == 0x0070);
static_assert(offsetof(FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath) == 0x0080);
static_assert(offsetof(FRichTextStyleRow, TextStyle) == 0x0008);
static_assert(offsetof(FRichImageRow, Brush) == 0x0008);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, LoopCount) == 0x0004);
static_assert(offsetof(FMovieSceneSequenceReplProperties, LastKnownPosition) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceReplProperties, LastKnownStatus) == 0x0008);
static_assert(offsetof(UMovieSceneSequencePlayer, Status) == 0x02B0);
static_assert(offsetof(UMovieSceneSequencePlayer, Sequence) == 0x02B8);
static_assert(offsetof(UMovieSceneSequencePlayer, StartTime) == 0x02C0);
static_assert(offsetof(UMovieSceneSequencePlayer, PlaybackSettings) == 0x02D0);
static_assert(offsetof(UMovieSceneSequencePlayer, RootTemplateInstance) == 0x02E8);
static_assert(offsetof(UMovieSceneSequencePlayer, NetSyncProps) == 0x0438);
static_assert(offsetof(UMovieSceneSequencePlayer, TickManager) == 0x0458);
static_assert(offsetof(FMovieSceneSectionParameters, StartFrameOffset) == 0x0000);
static_assert(offsetof(FMovieSceneSectionParameters, EndFrameOffset) == 0x0008);
static_assert(offsetof(FMovieSceneSectionParameters, FirstLoopStartFrameOffset) == 0x000C);
static_assert(offsetof(UMovieSceneSubSection, Parameters) == 0x00E8);
static_assert(offsetof(UMovieSceneSubSection, SubSequence) == 0x0120);
static_assert(offsetof(UMovieSceneSubSection, TargetSequenceName) == 0x0148);
static_assert(offsetof(UMovieSceneSubSection, TargetPathToRecordTo) == 0x0158);
static_assert(offsetof(UMovieSceneSubTrack, Sections) == 0x0090);
static_assert(offsetof(FMovieSceneSpawnable, SpawnTransform) == 0x0000);
static_assert(offsetof(FMovieSceneSpawnable, Tags) == 0x0030);
static_assert(offsetof(FMovieSceneSpawnable, Guid) == 0x0044);
static_assert(offsetof(FMovieSceneSpawnable, Name) == 0x0058);
static_assert(offsetof(FMovieSceneSpawnable, ObjectTemplate) == 0x0068);
static_assert(offsetof(FMovieSceneSpawnable, ChildPossessables) == 0x0070);
static_assert(offsetof(FMovieSceneSpawnable, Ownership) == 0x0080);
static_assert(offsetof(FMovieSceneSpawnable, LevelName) == 0x0084);
static_assert(offsetof(FMovieScenePossessable, Tags) == 0x0000);
static_assert(offsetof(FMovieScenePossessable, Guid) == 0x0010);
static_assert(offsetof(FMovieScenePossessable, Name) == 0x0020);
static_assert(offsetof(FMovieScenePossessable, PossessedObjectClass) == 0x0030);
static_assert(offsetof(FMovieScenePossessable, ParentGuid) == 0x0038);
static_assert(offsetof(FMovieSceneBinding, ObjectGuid) == 0x0000);
static_assert(offsetof(FMovieSceneBinding, BindingName) == 0x0010);
static_assert(offsetof(FMovieSceneBinding, Tracks) == 0x0020);
static_assert(offsetof(FMovieSceneMarkedFrame, FrameNumber) == 0x0000);
static_assert(offsetof(FMovieSceneMarkedFrame, Label) == 0x0008);
static_assert(offsetof(UMovieScene, Spawnables) == 0x0050);
static_assert(offsetof(UMovieScene, Possessables) == 0x0060);
static_assert(offsetof(UMovieScene, ObjectBindings) == 0x0070);
static_assert(offsetof(UMovieScene, MasterTracks) == 0x00D0);
static_assert(offsetof(UMovieScene, CameraCutTrack) == 0x00E0);
static_assert(offsetof(UMovieScene, SelectionRange) == 0x00E8);
static_assert(offsetof(UMovieScene, PlaybackRange) == 0x00F8);
static_assert(offsetof(UMovieScene, TickResolution) == 0x0108);
static_assert(offsetof(UMovieScene, DisplayRate) == 0x0110);
static_assert(offsetof(UMovieScene, EvaluationType) == 0x0118);
static_assert(offsetof(UMovieScene, ClockSource) == 0x0119);
static_assert(offsetof(UMovieScene, CustomClockSourcePath) == 0x0120);
static_assert(offsetof(UMovieScene, MarkedFrames) == 0x0138);
static_assert(offsetof(FMovieSceneObjectBindingID, Guid) == 0x0000);
static_assert(offsetof(FMovieSceneBindingOverrideData, ObjectBindingId) == 0x0000);
static_assert(offsetof(UMovieSceneBindingOverrides, BindingData) == 0x0028);
static_assert(offsetof(UMovieSceneBoolSection, BoolCurve) == 0x00F0);
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, LastTrackIdentifier) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationTemplate, SequenceSignature) == 0x00A0);
static_assert(offsetof(FMovieSceneEvaluationTemplate, TemplateSerialNumber) == 0x00B0);
static_assert(offsetof(FMovieSceneEvaluationTemplate, TemplateLedger) == 0x00B8);
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, ParentID) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, Children) == 0x0008);
static_assert(offsetof(FMovieSceneSequenceHierarchy, RootNode) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceHierarchy, Tree) == 0x0018);
static_assert(offsetof(FMovieSceneEvaluationFieldEntity, Key) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityMetaData, OverrideBoundPropertyPath) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityMetaData, ForcedTime) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityMetaData, Flags) == 0x0018);
static_assert(offsetof(FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingId) == 0x0000);
static_assert(offsetof(FMovieSceneEntityComponentField, PersistentEntityTree) == 0x0000);
static_assert(offsetof(FMovieSceneEntityComponentField, OneShotEntityTree) == 0x0060);
static_assert(offsetof(FMovieSceneEntityComponentField, Entities) == 0x00C0);
static_assert(offsetof(FMovieSceneEntityComponentField, EntityMetaData) == 0x00D0);
static_assert(offsetof(FMovieSceneEntityComponentField, SharedMetaData) == 0x00E0);
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, SequenceID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier) == 0x0004);
static_assert(offsetof(FMovieSceneFieldEntry_EvaluationTrack, TrackPtr) == 0x0000);
static_assert(offsetof(FMovieSceneFieldEntry_ChildTemplate, Flags) == 0x0002);
static_assert(offsetof(FMovieSceneFieldEntry_ChildTemplate, ForcedTime) == 0x0004);
static_assert(offsetof(FMovieSceneEvaluationGroup, LUTIndices) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationGroup, TrackLUT) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationGroup, SectionLUT) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationKey, SequenceID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationKey, TrackIdentifier) == 0x0004);
static_assert(offsetof(FMovieSceneOrderedEvaluationKey, Key) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveSequences) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveEntities) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationField, Ranges) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationField, Groups) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationField, MetaData) == 0x0020);
static_assert(offsetof(UMovieSceneCompiledData, EvaluationTemplate) == 0x0028);
static_assert(offsetof(UMovieSceneCompiledData, Hierarchy) == 0x0188);
static_assert(offsetof(UMovieSceneCompiledData, EntityComponentField) == 0x02A0);
static_assert(offsetof(UMovieSceneCompiledData, TrackTemplateField) == 0x0390);
static_assert(offsetof(UMovieSceneCompiledData, DeterminismFences) == 0x03C0);
static_assert(offsetof(UMovieSceneCompiledData, CompiledSignature) == 0x03D0);
static_assert(offsetof(UMovieSceneCompiledData, CompilerVersion) == 0x03E0);
static_assert(offsetof(UMovieSceneCompiledData, AccumulatedMask) == 0x03F0);
static_assert(offsetof(UMovieSceneCompiledData, AllocatedMask) == 0x03F1);
static_assert(offsetof(UMovieSceneCompiledData, AccumulatedFlags) == 0x03F2);
static_assert(offsetof(UMovieSceneBuiltInEasingFunction, Type) == 0x0030);
static_assert(offsetof(UMovieSceneEasingExternalCurve, Curve) == 0x0030);
static_assert(offsetof(FMovieSceneEntitySystemGraph, Nodes) == 0x0080);
static_assert(offsetof(UMovieSceneEntitySystemLinker, SystemGraph) == 0x0298);
static_assert(offsetof(UMovieSceneFolder, FolderName) == 0x0028);
static_assert(offsetof(UMovieSceneFolder, ChildFolders) == 0x0030);
static_assert(offsetof(UMovieSceneFolder, ChildMasterTracks) == 0x0040);
static_assert(offsetof(UMovieSceneFolder, ChildObjectBindingStrings) == 0x0050);
static_assert(offsetof(FMovieSceneSequenceActorPointers, SequenceActor) == 0x0000);
static_assert(offsetof(UMovieSceneSequenceTickManager, SequenceActors) == 0x0028);
static_assert(offsetof(UMovieSceneSequenceTickManager, Linker) == 0x0038);
static_assert(offsetof(UMovieSceneSpawnTrack, Sections) == 0x0090);
static_assert(offsetof(UMovieSceneSpawnTrack, ObjectGuid) == 0x00A0);
static_assert(offsetof(UTestMovieSceneTrack, SectionArray) == 0x00A0);
static_assert(offsetof(UTestMovieSceneSequence, MovieScene) == 0x0060);
static_assert(offsetof(UTestMovieSceneSubTrack, SectionArray) == 0x00A0);
static_assert(offsetof(UTestMovieSceneEvalHookTrack, SectionArray) == 0x0090);
static_assert(offsetof(FMovieSceneTrackInstanceInput, Section) == 0x0000);
static_assert(offsetof(UMovieSceneTrackInstance, AnimatedObject) == 0x0028);
static_assert(offsetof(UMovieSceneTrackInstance, Linker) == 0x0038);
static_assert(offsetof(UMovieSceneTrackInstance, Inputs) == 0x0040);
static_assert(offsetof(UMovieSceneTrackInstanceSystem, Instantiator) == 0x0040);
static_assert(offsetof(FMovieSceneByteChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneByteChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneByteChannel, Enum) == 0x0030);
static_assert(offsetof(FMovieSceneIntegerChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneIntegerChannel, Values) == 0x0020);
static_assert(offsetof(FMovieScenePropertySectionData, PropertyName) == 0x0000);
static_assert(offsetof(FMovieScenePropertySectionData, PropertyPath) == 0x0008);
static_assert(offsetof(FMovieScenePropertySectionTemplate, PropertyData) == 0x0020);
static_assert(offsetof(FTrackInstanceInputComponent, Section) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceComponent, Owner) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceComponent, TrackInstanceClass) == 0x0008);
static_assert(offsetof(FEasingComponentData, Section) == 0x0000);
static_assert(offsetof(FMovieSceneDeterminismData, Fences) == 0x0000);
static_assert(offsetof(FMovieSceneObjectBindingIDs, IDs) == 0x0000);
static_assert(offsetof(FMovieSceneTrackLabels, Strings) == 0x0000);
static_assert(offsetof(FMovieSceneEditorData, PinnedNodes) == 0x0050);
static_assert(offsetof(FMovieSceneEditorData, WorkingRange) == 0x00D0);
static_assert(offsetof(FMovieSceneEditorData, ViewRange) == 0x00E0);
static_assert(offsetof(FMovieSceneTimecodeSource, Timecode) == 0x0000);
static_assert(offsetof(FMovieSceneTimecodeSource, DeltaFrame) == 0x0014);
static_assert(offsetof(FMovieSceneEntitySystemGraphNode, System) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationFieldSegmentPtr, SegmentID) == 0x0008);
static_assert(offsetof(FMovieSceneEvaluationHookEvent, Hook) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationHookEventContainer, Events) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationOperand, ObjectBindingId) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationOperand, SequenceID) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationTrack, ObjectBindingId) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationMethod) == 0x0012);
static_assert(offsetof(FMovieSceneEvaluationTrack, ChildTemplates) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationTrack, TrackTemplate) == 0x0030);
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationGroup) == 0x0068);
static_assert(offsetof(FMovieSceneSubSectionData, ObjectBindingId) == 0x0008);
static_assert(offsetof(FMovieSceneSubSectionData, Flags) == 0x0018);
static_assert(offsetof(FMovieSceneKeyTimeStruct, Time) == 0x0008);
static_assert(offsetof(FMovieSceneObjectPathChannelKeyValue, HardPtr) == 0x0028);
static_assert(offsetof(FMovieSceneObjectPathChannel, PropertyClass) == 0x0008);
static_assert(offsetof(FMovieSceneObjectPathChannel, Times) == 0x0010);
static_assert(offsetof(FMovieSceneObjectPathChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneObjectPathChannel, DefaultValue) == 0x0030);
static_assert(offsetof(FSectionEvaluationData, ForcedTime) == 0x0004);
static_assert(offsetof(FSectionEvaluationData, Flags) == 0x0008);
static_assert(offsetof(FMovieSceneTimeTransform, Offset) == 0x0004);
static_assert(offsetof(FMovieSceneTimeWarping, Start) == 0x0000);
static_assert(offsetof(FMovieSceneTimeWarping, End) == 0x0004);
static_assert(offsetof(FMovieSceneNestedSequenceTransform, LinearTransform) == 0x0000);
static_assert(offsetof(FMovieSceneNestedSequenceTransform, Warping) == 0x000C);
static_assert(offsetof(FMovieSceneSequenceTransform, LinearTransform) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceTransform, NestedTransforms) == 0x0010);
static_assert(offsetof(FMovieSceneSubSequenceData, Sequence) == 0x0000);
static_assert(offsetof(FMovieSceneSubSequenceData, OuterToInnerTransform) == 0x0018);
static_assert(offsetof(FMovieSceneSubSequenceData, RootToSequenceTransform) == 0x0038);
static_assert(offsetof(FMovieSceneSubSequenceData, TickResolution) == 0x0058);
static_assert(offsetof(FMovieSceneSubSequenceData, DeterministicSequenceID) == 0x0060);
static_assert(offsetof(FMovieSceneSubSequenceData, ParentPlayRange) == 0x0064);
static_assert(offsetof(FMovieSceneSubSequenceData, ParentStartFrameOffset) == 0x0074);
static_assert(offsetof(FMovieSceneSubSequenceData, ParentEndFrameOffset) == 0x0078);
static_assert(offsetof(FMovieSceneSubSequenceData, ParentFirstLoopStartFrameOffset) == 0x007C);
static_assert(offsetof(FMovieSceneSubSequenceData, PlayRange) == 0x0084);
static_assert(offsetof(FMovieSceneSubSequenceData, FullPlayRange) == 0x0094);
static_assert(offsetof(FMovieSceneSubSequenceData, UnwarpedPlayRange) == 0x00A4);
static_assert(offsetof(FMovieSceneSubSequenceData, PreRollRange) == 0x00B4);
static_assert(offsetof(FMovieSceneSubSequenceData, PostRollRange) == 0x00C4);
static_assert(offsetof(FMovieSceneSubSequenceData, InstanceData) == 0x00D8);
static_assert(offsetof(FMovieSceneSubSequenceData, SubSectionSignature) == 0x00F8);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, Frame) == 0x0000);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, MarkedFrame) == 0x0010);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, PositionType) == 0x0020);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, UpdateMethod) == 0x0021);
static_assert(offsetof(FMovieSceneWarpCounter, WarpCounts) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceEntry, BoundObject) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceEntry, TrackInstance) == 0x0008);
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintId) == 0x00E8);
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintBindingID) == 0x00F8);
static_assert(offsetof(UMovieScene3DAttachSection, AttachSocketName) == 0x0118);
static_assert(offsetof(UMovieScene3DAttachSection, AttachComponentName) == 0x0120);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentLocationRule) == 0x0128);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentRotationRule) == 0x0129);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentScaleRule) == 0x012A);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentLocationRule) == 0x012B);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentRotationRule) == 0x012C);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentScaleRule) == 0x012D);
static_assert(offsetof(UMovieScene3DConstraintTrack, ConstraintSections) == 0x0090);
static_assert(offsetof(UMovieScene3DPathSection, TimingCurve) == 0x0110);
static_assert(offsetof(UMovieScene3DPathSection, FrontAxisEnum) == 0x01B0);
static_assert(offsetof(UMovieScene3DPathSection, UpAxisEnum) == 0x01B1);
static_assert(offsetof(UMovieScene3DTransformSection, TransformMask) == 0x00F0);
static_assert(offsetof(UMovieScene3DTransformSection, Translation) == 0x00F8);
static_assert(offsetof(UMovieScene3DTransformSection, Rotation) == 0x02D8);
static_assert(offsetof(UMovieScene3DTransformSection, Scale) == 0x04B8);
static_assert(offsetof(UMovieScene3DTransformSection, ManualWeight) == 0x0698);
static_assert(offsetof(FMovieSceneActorReferenceKey, Object) == 0x0000);
static_assert(offsetof(FMovieSceneActorReferenceKey, ComponentName) == 0x0018);
static_assert(offsetof(FMovieSceneActorReferenceKey, SocketName) == 0x0020);
static_assert(offsetof(FMovieSceneActorReferenceData, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneActorReferenceData, DefaultValue) == 0x0018);
static_assert(offsetof(FMovieSceneActorReferenceData, KeyValues) == 0x0040);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorReferenceData) == 0x00E8);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidIndexCurve) == 0x0198);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidStrings) == 0x0218);
static_assert(offsetof(UMovieSceneAudioSection, Sound) == 0x00E8);
static_assert(offsetof(UMovieSceneAudioSection, StartFrameOffset) == 0x00F0);
static_assert(offsetof(UMovieSceneAudioSection, SoundVolume) == 0x0108);
static_assert(offsetof(UMovieSceneAudioSection, PitchMultiplier) == 0x01A8);
static_assert(offsetof(UMovieSceneAudioSection, AttachActorData) == 0x0248);
static_assert(offsetof(UMovieSceneAudioSection, AttenuationSettings) == 0x0300);
static_assert(offsetof(UMovieSceneAudioTrack, AudioSections) == 0x0098);
static_assert(offsetof(UMovieSceneByteSection, ByteCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneByteTrack, Enum) == 0x00C0);
static_assert(offsetof(FMovieSceneCameraAnimSectionData, CameraAnim) == 0x0000);
static_assert(offsetof(UMovieSceneCameraAnimSection, AnimData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraAnimSection, CameraAnim) == 0x0108);
static_assert(offsetof(UMovieSceneCameraAnimTrack, CameraAnimSections) == 0x0098);
static_assert(offsetof(UMovieSceneCameraCutSection, CameraGuid) == 0x00F4);
static_assert(offsetof(UMovieSceneCameraCutSection, CameraBindingID) == 0x0104);
static_assert(offsetof(UMovieSceneCameraCutSection, InitialCameraCutTransform) == 0x0120);
static_assert(offsetof(UMovieSceneCameraCutTrack, Sections) == 0x0098);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, ShakeClass) == 0x0000);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, PlaySpace) == 0x000C);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace) == 0x0010);
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeClass) == 0x0108);
static_assert(offsetof(UMovieSceneCameraShakeSection, PlaySpace) == 0x0114);
static_assert(offsetof(UMovieSceneCameraShakeSection, UserDefinedPlaySpace) == 0x0118);
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeSection, ShakeData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections) == 0x0098);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, ShakeClass) == 0x0000);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, PlaySpace) == 0x000C);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace) == 0x0010);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerChannel, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerSection, Channel) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerTrack, Sections) == 0x0098);
static_assert(offsetof(UMovieSceneCameraShakeTrack, CameraShakeSections) == 0x0098);
static_assert(offsetof(UMovieSceneCinematicShotSection, ShotDisplayName) == 0x0168);
static_assert(offsetof(UMovieSceneCinematicShotSection, DisplayName) == 0x0178);
static_assert(offsetof(UMovieSceneColorSection, RedCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneColorSection, GreenCurve) == 0x0190);
static_assert(offsetof(UMovieSceneColorSection, BlueCurve) == 0x0230);
static_assert(offsetof(UMovieSceneColorSection, AlphaCurve) == 0x02D0);
static_assert(offsetof(UMovieSceneEnumSection, EnumCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneEnumTrack, Enum) == 0x00C0);
static_assert(offsetof(FMovieSceneEventPtrs, Function) == 0x0000);
static_assert(offsetof(FMovieSceneEvent, Ptrs) == 0x0000);
static_assert(offsetof(UMovieSceneEventRepeaterSection, Event) == 0x00F0);
static_assert(offsetof(FEventPayload, EventName) == 0x0000);
static_assert(offsetof(FEventPayload, Parameters) == 0x0008);
static_assert(offsetof(FMovieSceneEventSectionData, Times) == 0x0008);
static_assert(offsetof(FMovieSceneEventSectionData, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneEventSection, Events) == 0x00E8);
static_assert(offsetof(UMovieSceneEventSection, EventData) == 0x0160);
static_assert(offsetof(UMovieSceneEventTrack, EventPosition) == 0x00A4);
static_assert(offsetof(UMovieSceneEventTrack, Sections) == 0x00A8);
static_assert(offsetof(FMovieSceneEventChannel, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneEventChannel, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneEventTriggerSection, EventChannel) == 0x00F0);
static_assert(offsetof(UMovieSceneFadeSection, FloatCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneFadeSection, FadeColor) == 0x0188);
static_assert(offsetof(UMovieSceneFloatSection, FloatCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneIntegerSection, IntegerCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneLevelVisibilitySection, Visibility) == 0x00F0);
static_assert(offsetof(UMovieSceneLevelVisibilitySection, LevelNames) == 0x00F8);
static_assert(offsetof(UMovieSceneLevelVisibilityTrack, Sections) == 0x0090);
static_assert(offsetof(UMovieSceneMaterialParameterCollectionTrack, MPC) == 0x00A8);
static_assert(offsetof(UMovieSceneObjectPropertySection, ObjectChannel) == 0x00E8);
static_assert(offsetof(UMovieSceneObjectPropertyTrack, PropertyClass) == 0x00C8);
static_assert(offsetof(UMovieSceneParameterSection, BoolParameterNamesAndCurves) == 0x00E8);
static_assert(offsetof(UMovieSceneParameterSection, ScalarParameterNamesAndCurves) == 0x00F8);
static_assert(offsetof(UMovieSceneParameterSection, Vector2DParameterNamesAndCurves) == 0x0108);
static_assert(offsetof(UMovieSceneParameterSection, VectorParameterNamesAndCurves) == 0x0118);
static_assert(offsetof(UMovieSceneParameterSection, ColorParameterNamesAndCurves) == 0x0128);
static_assert(offsetof(UMovieSceneParameterSection, TransformParameterNamesAndCurves) == 0x0138);
static_assert(offsetof(UMovieSceneParticleParameterTrack, Sections) == 0x0098);
static_assert(offsetof(UMovieSceneParticleSection, ParticleKeys) == 0x00E8);
static_assert(offsetof(UMovieSceneParticleTrack, ParticleSections) == 0x0098);
static_assert(offsetof(UMovieScenePrimitiveMaterialSection, MaterialChannel) == 0x00E8);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Animation) == 0x0000);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset) == 0x0008);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, StartFrameOffset) == 0x000C);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, EndFrameOffset) == 0x0010);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, SlotName) == 0x001C);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Weight) == 0x0028);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Params) == 0x00E8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, AnimSequence) == 0x01C0);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Animation) == 0x01C8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, SlotName) == 0x01E0);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartLocationOffset) == 0x01E8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartRotationOffset) == 0x01F4);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedBoneName) == 0x0204);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedLocationOffset) == 0x020C);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedRotationOffset) == 0x0218);
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, AnimationSections) == 0x0098);
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, RootMotionParams) == 0x00B0);
static_assert(offsetof(UMovieSceneSlomoSection, FloatCurve) == 0x00E8);
static_assert(offsetof(FMovieSceneStringChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneStringChannel, Values) == 0x0018);
static_assert(offsetof(FMovieSceneStringChannel, DefaultValue) == 0x0028);
static_assert(offsetof(UMovieSceneStringSection, StringCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneVectorSection, Curves) == 0x00F0);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, PathBindingID) == 0x0020);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, TimingCurve) == 0x0038);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, FrontAxisEnum) == 0x00D8);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, UpAxisEnum) == 0x00D9);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Location) == 0x0008);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Rotation) == 0x0014);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Scale) == 0x0020);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Time) == 0x002C);
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Scale) == 0x0008);
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Rotation) == 0x0008);
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Location) == 0x0008);
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, PropertyData) == 0x0020);
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, ActorReferenceData) == 0x0038);
static_assert(offsetof(FMovieSceneAudioSectionTemplate, AudioSection) == 0x0020);
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime) == 0x0044);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues) == 0x0030);
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneColorKeyStruct, Color) == 0x0008);
static_assert(offsetof(FMovieSceneColorKeyStruct, Time) == 0x0018);
static_assert(offsetof(FMovieSceneColorSectionTemplate, Curves) == 0x0038);
static_assert(offsetof(FMovieSceneColorSectionTemplate, BlendType) == 0x02B8);
static_assert(offsetof(FMovieSceneEventPayloadVariable, Value) == 0x0000);
static_assert(offsetof(FMovieSceneEventTriggerData, Ptrs) == 0x0000);
static_assert(offsetof(FMovieSceneEventTriggerData, ObjectBindingId) == 0x0028);
static_assert(offsetof(FMovieSceneEventSectionTemplate, EventData) == 0x0020);
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeCurve) == 0x0020);
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeColor) == 0x00C0);
static_assert(offsetof(FMovieSceneMaterialParameterCollectionTemplate, MPC) == 0x0080);
static_assert(offsetof(FMovieSceneObjectPropertyTemplate, ObjectChannel) == 0x0038);
static_assert(offsetof(FMovieSceneParticleSectionTemplate, ParticleKeys) == 0x0020);
static_assert(offsetof(FMovieScenePrimitiveMaterialTemplate, MaterialChannel) == 0x0028);
static_assert(offsetof(FMovieSceneStringPropertySectionTemplate, StringCurve) == 0x0038);
static_assert(offsetof(FMovieSceneBoolPropertySectionTemplate, BoolCurve) == 0x0038);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime) == 0x00D8);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime) == 0x00DC);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplate, Params) == 0x0020);
static_assert(offsetof(FMovieSceneSlomoSectionTemplate, SlomoCurve) == 0x0020);
static_assert(offsetof(FLevelVisibilityComponentData, Section) == 0x0000);
static_assert(offsetof(FMovieSceneVectorKeyStructBase, Time) == 0x0008);
static_assert(offsetof(FMovieSceneVector4KeyStruct, Vector) == 0x0030);
static_assert(offsetof(FMovieSceneVectorKeyStruct, Vector) == 0x0028);
static_assert(offsetof(FMovieSceneVector2DKeyStruct, Vector) == 0x0028);
